using NPOI.HPSF;
using NPOI.HSSF.UserModel;
using NPOI.HSSF.UserModel.Contrib;
using NPOI.HSSF.Util;

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Windows.Forms;



namespace Infinium.Modules.StatisticsMarketing
{
    public class FrontsProduced
    {
        //decimal TransportCost = 0;
        //decimal AdditionalCost = 0;
        //decimal Rate = 1;
        //int ClientID = 0;
        //int CurrencyCode = 0;
        string ProfilCurrencyCode = "0";
        string TPSCurrencyCode = "0";
        string UNN = string.Empty;

        DataTable DecorInvNumbersDT = null;
        DataTable CurrencyTypesDT;
        DataTable ProfilFrontsOrdersDataTable = null;
        DataTable TPSFrontsOrdersDataTable = null;
        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;
        DataTable MeasuresDataTable = null;
        DataTable FactoryDataTable = null;
        DataTable GridSizesDataTable = null;
        DataTable FrontsConfigDataTable = null;
        DataTable DecorConfigDataTable = null;
        DataTable TechStoreDataTable = null;
        DataTable InsetPriceDataTable = null;
        DataTable AluminiumFrontsDataTable = null;

        public DataTable ProfilReportDataTable = null;
        public DataTable TPSReportDataTable = null;

        private DataTable ProfilMarketingStartCountDT = null;
        private DataTable ProfilMarketingEndCountDT = null;
        private DataTable ProfilMarketingProducedDT = null;
        private DataTable ProfilMarketingDispatchDT = null;
        private DataTable ProfilZOVStartCountDT = null;
        private DataTable ProfilZOVEndCountDT = null;
        private DataTable ProfilZOVProducedDT = null;
        private DataTable ProfilZOVDispatchDT = null;
        public DataTable AllProfilDT = null;

        private DataTable TPSMarketingStartCountDT = null;
        private DataTable TPSMarketingEndCountDT = null;
        private DataTable TPSMarketingProducedDT = null;
        private DataTable TPSMarketingDispatchDT = null;
        private DataTable TPSZOVStartCountDT = null;
        private DataTable TPSZOVEndCountDT = null;
        private DataTable TPSZOVProducedDT = null;
        private DataTable TPSZOVDispatchDT = null;
        public DataTable AllTPSDT = null;

        public FrontsProduced()
        {
            Create();
            CreateReportDataTables();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = -1;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "-";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
                {
                    DataRow NewRow = InsetColorsDataTable.NewRow();
                    NewRow["InsetColorID"] = 0;
                    NewRow["GroupID"] = -1;
                    NewRow["InsetColorName"] = "на выбор";
                    InsetColorsDataTable.Rows.Add(NewRow);
                }
            }
        }

        private void Create()
        {
            ProfilFrontsOrdersDataTable = new DataTable();
            TPSFrontsOrdersDataTable = new DataTable();

            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();
            InsetPriceDataTable = new DataTable();
            AluminiumFrontsDataTable = new DataTable();

            string SelectCommand = "SELECT * FROM CurrencyTypes";
            CurrencyTypesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDT);
            }

            SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            GetColorsDT();
            GetInsetColorsDT();
            SelectCommand = @"SELECT * FROM Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            SelectCommand = @"SELECT * FROM InsetTypes";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            MeasuresDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDataTable);
            }

            InsetPriceDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetPrice",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(InsetPriceDataTable);
            }

            AluminiumFrontsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM AluminiumFronts",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(AluminiumFrontsDataTable);
            }

            FactoryDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Factory",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FactoryDataTable);
            }

            GridSizesDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM GridSizes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(GridSizesDataTable);
            }

            FrontsConfigDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsConfig",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(FrontsConfigDataTable);
            //}
            FrontsConfigDataTable = TablesManager.FrontsConfigDataTableAll;

            DecorConfigDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDataTable);
            //}
            DecorConfigDataTable = TablesManager.DecorConfigDataTableAll;

            TechStoreDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;
        }

        public void ClearReport()
        {
            ProfilReportDataTable.Clear();
            TPSReportDataTable.Clear();
        }

        private void CreateReportDataTables()
        {
            DecorInvNumbersDT = new DataTable();
            DecorInvNumbersDT.Columns.Add(new DataColumn("FrontsOrdersID", Type.GetType("System.Int32")));
            DecorInvNumbersDT.Columns.Add(new DataColumn("DecorInvNumber", Type.GetType("System.String")));
            DecorInvNumbersDT.Columns.Add(new DataColumn("DecorAccountingName", Type.GetType("System.String")));
            DecorInvNumbersDT.Columns.Add(new DataColumn("FactoryID", Type.GetType("System.Int32")));

            ProfilReportDataTable = new DataTable();
            ProfilReportDataTable.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("InvNumber", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("AccountingName", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Price", Type.GetType("System.Decimal")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Weight", Type.GetType("System.Decimal")));
            ProfilReportDataTable.Columns.Add(new DataColumn("OriginalPrice", Type.GetType("System.Decimal")));
            ProfilReportDataTable.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.Decimal")));

            AllProfilDT = new DataTable();
            AllProfilDT.Columns.Add(new DataColumn("AccountingName", Type.GetType("System.String")));
            AllProfilDT.Columns.Add(new DataColumn("InvNumber", Type.GetType("System.String")));
            AllProfilDT.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            AllProfilDT.Columns.Add(new DataColumn("StartCount", Type.GetType("System.Decimal")));
            AllProfilDT.Columns.Add(new DataColumn("ProducedCount", Type.GetType("System.Decimal")));
            AllProfilDT.Columns.Add(new DataColumn("DispatchCount", Type.GetType("System.Decimal")));
            AllProfilDT.Columns.Add(new DataColumn("EndCount", Type.GetType("System.Decimal")));
            AllTPSDT = AllProfilDT.Clone();

            TPSReportDataTable = ProfilReportDataTable.Clone();

            ProfilMarketingStartCountDT = ProfilReportDataTable.Clone();
            ProfilMarketingEndCountDT = ProfilReportDataTable.Clone();
            ProfilMarketingProducedDT = ProfilReportDataTable.Clone();
            ProfilMarketingDispatchDT = ProfilReportDataTable.Clone();
            ProfilZOVStartCountDT = ProfilReportDataTable.Clone();
            ProfilZOVEndCountDT = ProfilReportDataTable.Clone();
            ProfilZOVProducedDT = ProfilReportDataTable.Clone();
            ProfilZOVDispatchDT = ProfilReportDataTable.Clone();

            TPSMarketingStartCountDT = ProfilReportDataTable.Clone();
            TPSMarketingEndCountDT = ProfilReportDataTable.Clone();
            TPSMarketingProducedDT = ProfilReportDataTable.Clone();
            TPSMarketingDispatchDT = ProfilReportDataTable.Clone();
            TPSZOVStartCountDT = ProfilReportDataTable.Clone();
            TPSZOVEndCountDT = ProfilReportDataTable.Clone();
            TPSZOVProducedDT = ProfilReportDataTable.Clone();
            TPSZOVDispatchDT = ProfilReportDataTable.Clone();

        }

        public string GetFrontName(int FrontID)
        {
            DataRow[] Row = FrontsDataTable.Select("FrontID = " + FrontID);

            return Row[0]["FrontName"].ToString();
        }

        private void SplitTables(DataTable FrontsOrdersDataTable, ref DataTable ProfilDT, ref DataTable TPSDT)
        {
            for (int i = 0; i < FrontsOrdersDataTable.Rows.Count; i++)
            {
                int FrontConfigID = Convert.ToInt32(FrontsOrdersDataTable.Rows[i]["FrontConfigID"]);
                DataRow[] Rows = FrontsConfigDataTable.Select("FrontConfigID = " + FrontsOrdersDataTable.Rows[i]["FrontConfigID"].ToString());
                if (Rows.Count() == 0)
                    continue;

                if (Convert.ToDateTime(FrontsOrdersDataTable.Rows[i]["CreateDateTime"]) < new DateTime(2019, 10, 01))
                {
                    if (Rows[0]["AreaID"].ToString() == "1")//profil
                        ProfilDT.ImportRow(FrontsOrdersDataTable.Rows[i]);

                    if (Rows[0]["AreaID"].ToString() == "2")//tps
                        TPSDT.ImportRow(FrontsOrdersDataTable.Rows[i]);
                }
                else
                {
                    if (Rows[0]["FactoryID"].ToString() == "1")//profil
                        ProfilDT.ImportRow(FrontsOrdersDataTable.Rows[i]);

                    if (Rows[0]["FactoryID"].ToString() == "2")//tps
                        TPSDT.ImportRow(FrontsOrdersDataTable.Rows[i]);
                }
            }
        }

        //ALUMINIUM
        public int IsAluminium(int FrontID)
        {
            DataRow[] Row = FrontsDataTable.Select("FrontID = " + FrontID);

            if (Row.Count() > 0 && Row[0]["FrontName"].ToString()[0] == 'Z')
            {
                return Convert.ToInt32(Row[0]["FrontID"]);
            }

            return -1;
        }

        //ALUMINIUM
        public int IsAluminium(DataRow FrontsOrdersRow)
        {
            string str = FrontsOrdersRow["FrontID"].ToString();
            DataRow[] Row = FrontsDataTable.Select("FrontID = " + FrontsOrdersRow["FrontID"].ToString());

            if (Row.Count() > 0 && Row[0]["FrontName"].ToString()[0] == 'Z')
            {
                str = Row[0]["FrontName"].ToString();
                return Convert.ToInt32(Row[0]["FrontID"]);
            }

            return -1;
        }

        private void GetGlassMarginAluminium(DataRow FrontsOrdersRow, ref int GlassMarginHeight, ref int GlassMarginWidth)
        {
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + Convert.ToInt32(FrontsOrdersRow["FrontID"]));
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    GlassMarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    GlassMarginWidth = Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
            }
            //DataRow[] Rows = AluminiumFrontsDataTable.Select("FrontID = " + IsAluminium(FrontsOrdersRow));
            //if (Rows.Count() > 0)
            //{
            //    GlassMarginHeight = Convert.ToInt32(Rows[0]["GlassMarginHeight"]);
            //    GlassMarginWidth = Convert.ToInt32(Rows[0]["GlassMarginWidth"]);
            //}
        }

        private decimal GetJobPriceAluminium(DataRow FrontsOrdersRow)
        {
            DataRow[] Rows = AluminiumFrontsDataTable.Select("FrontID = " + IsAluminium(FrontsOrdersRow));
            if (Rows.Count() == 0)
                return 0;
            return Convert.ToDecimal(Rows[0]["JobPrice"]);
        }

        private decimal FrontsPriceAluminium(DataRow FrontsOrdersRow)
        {
            decimal Price = 0;

            DataRow[] Rows = AluminiumFrontsDataTable.Select("FrontID = " + IsAluminium(FrontsOrdersRow));
            if (Rows.Count() > 0)
            {
                Price = Convert.ToDecimal(Rows[0]["ProfilPrice"]);
            }
            FrontsOrdersRow["FrontPrice"] = Price;

            return Price;
        }

        private decimal InsetPriceAluminium(DataRow FrontsOrdersRow)
        {
            decimal Price = 0;

            DataRow[] Rows = InsetPriceDataTable.Select("InsetTypeID = " + FrontsOrdersRow["InsetColorID"].ToString());

            if (Rows.Count() > 0)
                Price = Convert.ToDecimal(Rows[0]["GlassZXPrice"]);
            else
                Price = 0;

            FrontsOrdersRow["InsetPrice"] = Price;

            return Price;
        }

        public decimal GetFrontCostAluminium(DataRow FrontsOrdersRow)
        {
            decimal Cost = 0;
            decimal Perimeter = 0;
            decimal GlassSquare = 0;

            int MarginHeight = 0;
            int MarginWidth = 0;

            decimal GlassPrice = InsetPriceAluminium(FrontsOrdersRow);
            decimal JobPrice = GetJobPriceAluminium(FrontsOrdersRow);
            decimal ProfilPrice = FrontsPriceAluminium(FrontsOrdersRow);

            GetGlassMarginAluminium(FrontsOrdersRow, ref MarginHeight, ref MarginWidth);

            decimal Height = Convert.ToInt32(FrontsOrdersRow["Height"]);
            decimal Width = Convert.ToInt32(FrontsOrdersRow["Width"]);
            decimal Count = Convert.ToInt32(FrontsOrdersRow["Count"]);


            Perimeter = Decimal.Round((Height * 2 + Width * 2) / 1000 * Count, 3, MidpointRounding.AwayFromZero);
            GlassSquare = Decimal.Round((Height - MarginHeight) * (Width - MarginWidth) / 1000000, 3, MidpointRounding.AwayFromZero);

            GlassSquare = GlassSquare * Count;
            Cost = Decimal.Round(JobPrice * Count + GlassPrice * GlassSquare + Perimeter * ProfilPrice, 3, MidpointRounding.AwayFromZero);

            Cost = Cost * 100 / 120;

            //FrontsOrdersRow["InsetPrice"] = 0;
            //FrontsOrdersRow["Cost"] = Cost;
            //FrontsOrdersRow["Square"] = (Height * Width * Count) / 1000000;
            //FrontsOrdersRow["FrontPrice"] = Cost / Convert.ToDecimal(FrontsOrdersRow["Square"]);

            return Cost;
        }

        public decimal GetAluminiumWeight(DataRow FrontsOrdersRow, bool WithGlass)
        {
            DataRow[] Row = AluminiumFrontsDataTable.Select("FrontID = " + IsAluminium(FrontsOrdersRow));
            if (Row.Count() == 0)
                return 0;
            decimal FrontHeight = Convert.ToDecimal(FrontsOrdersRow["Height"]);
            decimal FrontWidth = Convert.ToDecimal(FrontsOrdersRow["Width"]);
            decimal Count = Convert.ToInt32(FrontsOrdersRow["Count"]);

            int MarginHeight = 0;
            int MarginWidth = 0;

            GetGlassMarginAluminium(FrontsOrdersRow, ref MarginHeight, ref MarginWidth);

            DataRow[] FrontsConfigRow = FrontsConfigDataTable.Select("FrontConfigID = " + FrontsOrdersRow["FrontConfigID"].ToString());
            if (FrontsConfigRow.Count() == 0)
                return 0;
            int ProfileID = Convert.ToInt32(FrontsConfigRow[0]["ProfileID"]);
            decimal ProfileWeight = 0;
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + ProfileID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["Weight"] != DBNull.Value)
                    ProfileWeight = Convert.ToDecimal(Rows[0]["Weight"]);
            }

            decimal GlassSquare = 0;

            if (FrontsOrdersRow["InsetColorID"].ToString() != "3946")//если не СТЕКЛО КЛИЕНТА
                GlassSquare = Decimal.Round((FrontHeight - MarginHeight) * (FrontWidth - MarginWidth) / 1000000, 3, MidpointRounding.AwayFromZero);

            decimal GlassWeight = GlassSquare * 10;

            decimal ResultProfileWeight = Decimal.Round((FrontWidth * 2 + FrontHeight * 2) / 1000, 3, MidpointRounding.AwayFromZero) * ProfileWeight;

            if (WithGlass)
                return (ResultProfileWeight + GlassWeight) * Count;
            else
                return (ResultProfileWeight) * Count;
        }

        private string GetGlassInvNumber(int FrontConfigID, ref int FactoryID, ref string AccountingName)
        {
            int FrontID = 0;
            int InsetTypeID = 0;
            int InsetColorID = 0;
            DataRow[] FRows = FrontsConfigDataTable.Select("FrontConfigID = " + FrontConfigID);
            if (FRows.Count() == 0)
                return string.Empty;

            FrontID = Convert.ToInt32(FRows[0]["FrontID"]);
            InsetTypeID = Convert.ToInt32(FRows[0]["InsetTypeID"]);
            InsetColorID = Convert.ToInt32(FRows[0]["InsetColorID"]);
            if (IsAluminium(FrontID) != -1)
                return string.Empty;
            DataRow[] DRows = DecorConfigDataTable.Select("DecorID  = " + InsetColorID);
            if (DRows.Count() == 0)
                return string.Empty;
            FactoryID = Convert.ToInt32(DRows[0]["FactoryID"]);
            AccountingName = DRows[0]["AccountingName"].ToString();
            return DRows[0]["InvNumber"].ToString();
        }

        private string GetGridInvNumber(int FrontConfigID, ref int FactoryID, ref string AccountingName)
        {
            int InsetTypeID = 0;
            int InsetColorID = 0;
            DataRow[] FRows = FrontsConfigDataTable.Select("FrontConfigID = " + FrontConfigID);
            if (FRows.Count() == 0)
                return string.Empty;
            InsetTypeID = Convert.ToInt32(FRows[0]["InsetTypeID"]);
            InsetColorID = Convert.ToInt32(FRows[0]["InsetColorID"]);
            DataRow[] DRows = DecorConfigDataTable.Select("DecorID  = " + InsetTypeID + " AND ColorID=" + InsetColorID);
            if (DRows.Count() == 0)
                return string.Empty;
            FactoryID = Convert.ToInt32(DRows[0]["FactoryID"]);
            AccountingName = DRows[0]["AccountingName"].ToString();
            return DRows[0]["InvNumber"].ToString();
        }

        private decimal GetMarketingCost(int FrontConfigID)
        {
            DataRow[] FRows = FrontsConfigDataTable.Select("FrontConfigID = " + FrontConfigID);
            if (FRows.Count() == 0)
                return 0;
            return Convert.ToDecimal(FRows[0]["MarketingCost"]);
        }

        private decimal GetGridMarketingCost(int FrontConfigID)
        {
            int InsetTypeID = 0;
            DataRow[] FRows = FrontsConfigDataTable.Select("FrontConfigID = " + FrontConfigID);
            if (FRows.Count() == 0)
                return 0;
            InsetTypeID = Convert.ToInt32(FRows[0]["InsetTypeID"]);
            DataRow[] DRows = DecorConfigDataTable.Select("DecorID  = " + InsetTypeID);
            if (DRows.Count() == 0)
                return 0;
            return Convert.ToDecimal(DRows[0]["MarketingCost"]);
        }

        private int GetMeasureType(int FrontConfigID)
        {
            return Convert.ToInt32(FrontsConfigDataTable.Select("FrontConfigID = " + FrontConfigID.ToString())[0]["MeasureID"]);
        }

        private decimal GetInsetSquare(int FrontID, int Height, int Width)
        {
            decimal GridHeight = 0;
            decimal GridWidth = 0;
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + FrontID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    GridHeight = Height - Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    GridWidth = Width - Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
                if (FrontID == 3729)
                {
                    return Decimal.Round(Convert.ToInt32(Rows[0]["InsetHeightAdmission"]) * GridWidth / 1000000, 3, MidpointRounding.AwayFromZero);
                }
            }
            return Decimal.Round(GridHeight * GridWidth / 1000000, 3, MidpointRounding.AwayFromZero);
        }

        private decimal GetInsetSquare(DataRow FrontsOrdersRow)
        {
            decimal GridHeight = 0;
            decimal GridWidth = 0;
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + Convert.ToInt32(FrontsOrdersRow["FrontID"]));
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    GridHeight = Convert.ToInt32(FrontsOrdersRow["Height"]) - Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    GridWidth = Convert.ToInt32(FrontsOrdersRow["Width"]) - Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
                if (Convert.ToInt32(FrontsOrdersRow["FrontID"]) == 3729)
                {
                    return Decimal.Round(Convert.ToInt32(Rows[0]["InsetHeightAdmission"]) * GridWidth / 1000000, 3, MidpointRounding.AwayFromZero);
                }
            }
            return Decimal.Round(GridHeight * GridWidth / 1000000, 3, MidpointRounding.AwayFromZero);
        }

        private void GetSimpleFronts(DataTable OrdersDataTable, DataTable ReportDataTable)
        {
            string DecorAccountingName = string.Empty;
            string DecorInvNumber = string.Empty;
            string AccountingName = OrdersDataTable.Rows[0]["AccountingName"].ToString();
            string InvNumber = OrdersDataTable.Rows[0]["InvNumber"].ToString();
            string Measure = OrdersDataTable.Rows[0]["Measure"].ToString();
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);
            DataTable Fronts = new DataTable();

            using (DataView DV = new DataView(OrdersDataTable))
            {
                Fronts = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Fronts.Rows.Count; i++)
            {
                decimal SolidCount = 0;
                decimal SolidCost = 0;
                decimal SolidWeight = 0;

                decimal FilenkaCount = 0;
                decimal FilenkaCost = 0;
                decimal FilenkaWeight = 0;

                decimal VitrinaCount = 0;
                decimal VitrinaCost = 0;
                decimal VitrinaWeight = 0;

                decimal LuxMegaCount = 0;
                decimal LuxMegaCost = 0;
                decimal LuxMegaWeight = 0;

                decimal MarketingCost = 0;

                //ГЛУХИЕ, БЕЗ ВСТАВКИ, РЕШЕТКА ОВАЛ
                DataRow[] rows = InsetTypesDataTable.Select("InsetTypeID=-1 OR GroupID = 3 OR GroupID = 4");
                string filter = string.Empty;
                foreach (DataRow item in rows)
                    filter += item["InsetTypeID"].ToString() + ",";
                if (filter.Length > 0)
                    filter = " AND NOT (FrontID IN (3728,3731,3732,3739,3740,3741,3744,3745,3746) OR InsetTypeID IN (28961,3653,3654,3655)) AND (FrontID = 3729 OR InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + "))";
                DataRow[] Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    decimal DeductibleCount = 0;
                    decimal DeductibleWeight = 0;
                    if (Convert.ToInt32(Fronts.Rows[i]["FrontID"]) == 3729)//РЕШЕТКА ОВАЛ
                    {
                        int FactoryID = 0;
                        DecorInvNumber = GetGridInvNumber(Convert.ToInt32(Rows[r]["FrontConfigID"]), ref FactoryID, ref DecorAccountingName);
                        if (DecorInvNumber.Length > 0)
                        {
                            DataRow NewRow = DecorInvNumbersDT.NewRow();
                            NewRow["FrontsOrdersID"] = Convert.ToInt32(Rows[r]["FrontsOrdersID"]);
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["DecorAccountingName"] = DecorAccountingName;
                            NewRow["DecorInvNumber"] = DecorInvNumber;
                            DecorInvNumbersDT.Rows.Add(NewRow);
                            DeductibleWeight = GetInsetWeight(Rows[r]);
                            DeductibleCount = GetInsetSquare(Convert.ToInt32(Rows[r]["FrontID"]), Convert.ToInt32(Rows[r]["Height"]),
                                                        Convert.ToInt32(Rows[r]["Width"])) * Convert.ToDecimal(Rows[r]["Count"]);
                            DeductibleWeight = Decimal.Round(DeductibleCount * DeductibleWeight, 3, MidpointRounding.AwayFromZero);
                        }
                    }
                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        SolidCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        SolidCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        SolidCost += Convert.ToDecimal(Rows[r]["Cost"]);
                    else
                        SolidCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                    decimal FrontWeight = 0;
                    decimal InsetWeight = 0;

                    GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                    SolidWeight += Convert.ToDecimal(FrontWeight + InsetWeight - DeductibleWeight);
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //АППЛИКАЦИИ
                filter = " AND (FrontID IN (3728,3731,3732,3739,3740,3741,3744,3745,3746) OR InsetTypeID IN (28961,3653,3654,3655))";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (Convert.ToInt32(Rows[r]["FrontID"]) == 3728 || Convert.ToInt32(Rows[r]["FrontID"]) == 3731 || Convert.ToInt32(Rows[r]["FrontID"]) == 3732 ||
                        Convert.ToInt32(Rows[r]["FrontID"]) == 3739 || Convert.ToInt32(Rows[r]["FrontID"]) == 3740 || Convert.ToInt32(Rows[r]["FrontID"]) == 3741 ||
                        Convert.ToInt32(Rows[r]["FrontID"]) == 3744 || Convert.ToInt32(Rows[r]["FrontID"]) == 3745 || Convert.ToInt32(Rows[r]["FrontID"]) == 3746)
                    {

                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            SolidCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                          Convert.ToDecimal(Rows[r]["Count"]);
                        else
                            SolidCount += Convert.ToDecimal(Rows[r]["Square"]);

                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            SolidCost += Convert.ToDecimal(Rows[r]["Cost"]) + 5;
                        else
                            SolidCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]) + 5 * Convert.ToDecimal(Rows[r]["Count"]);

                        decimal FrontWeight = 0;
                        decimal InsetWeight = 0;

                        GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                        SolidWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    }
                    else if (Convert.ToInt32(Rows[r]["FrontID"]) == 3415 || Convert.ToInt32(Rows[r]["FrontID"]) == 28922)
                    {
                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            FilenkaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                          Convert.ToDecimal(Rows[r]["Count"]);
                        else
                            FilenkaCount += Convert.ToDecimal(Rows[r]["Square"]);

                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            FilenkaCost += Convert.ToDecimal(Rows[r]["Cost"]) + 5;
                        else
                            FilenkaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]) + 5 * Convert.ToDecimal(Rows[r]["Count"]);

                        decimal FrontWeight = 0;
                        decimal InsetWeight = 0;

                        GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                        FilenkaWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    }
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //ФИЛЕНКА
                filter = " AND InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531)";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        FilenkaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        FilenkaCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        FilenkaCost += Convert.ToDecimal(Rows[r]["Cost"]);
                    else
                        FilenkaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                    decimal FrontWeight = 0;
                    decimal InsetWeight = 0;

                    GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                    FilenkaWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //ВИТРИНЫ, РЕШЕТКИ, СТЕКЛО
                filter = " AND InsetTypeID IN (1,2,685,686,687,688,29470,29471) AND FrontID <> 3729";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    decimal DeductibleCount = 0;
                    decimal DeductibleWeight = 0;
                    //РЕШЕТКА 45,90,ПЛАСТИК
                    if (Convert.ToInt32(Rows[r]["InsetTypeID"]) == 685 || Convert.ToInt32(Rows[r]["InsetTypeID"]) == 686 ||
                        Convert.ToInt32(Rows[r]["InsetTypeID"]) == 687 || Convert.ToInt32(Rows[r]["InsetTypeID"]) == 688 ||
                        Convert.ToInt32(Rows[r]["InsetTypeID"]) == 29470 || Convert.ToInt32(Rows[r]["InsetTypeID"]) == 29471)
                    {
                        int FactoryID = 0;
                        DecorInvNumber = GetGridInvNumber(Convert.ToInt32(Rows[r]["FrontConfigID"]), ref FactoryID, ref DecorAccountingName);
                        if (DecorInvNumber.Length > 0)
                        {
                            DataRow NewRow = DecorInvNumbersDT.NewRow();
                            NewRow["FrontsOrdersID"] = Convert.ToInt32(Rows[r]["FrontsOrdersID"]);
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["DecorAccountingName"] = DecorAccountingName;
                            NewRow["DecorInvNumber"] = DecorInvNumber;
                            DecorInvNumbersDT.Rows.Add(NewRow);
                            DeductibleCount = GetInsetSquare(Convert.ToInt32(Rows[r]["FrontID"]), Convert.ToInt32(Rows[r]["Height"]),
                                                        Convert.ToInt32(Rows[r]["Width"])) * Convert.ToDecimal(Rows[r]["Count"]);
                            DeductibleWeight = Decimal.Round(DeductibleCount * Convert.ToDecimal(3.5), 3, MidpointRounding.AwayFromZero);
                        }
                    }
                    //СТЕКЛО
                    if (Convert.ToInt32(Rows[r]["InsetTypeID"]) == 2)
                    {
                        int FactoryID = 0;
                        DecorInvNumber = GetGlassInvNumber(Convert.ToInt32(Rows[r]["FrontConfigID"]), ref FactoryID, ref DecorAccountingName);
                        if (DecorInvNumber.Length > 0)
                        {
                            DataRow NewRow = DecorInvNumbersDT.NewRow();
                            NewRow["FrontsOrdersID"] = Convert.ToInt32(Rows[r]["FrontsOrdersID"]);
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["DecorAccountingName"] = DecorAccountingName;
                            NewRow["DecorInvNumber"] = DecorInvNumber;
                            DecorInvNumbersDT.Rows.Add(NewRow);
                            DeductibleCount = Convert.ToDecimal(Rows[r]["Count"]) * GetInsetSquare(Convert.ToInt32(Rows[r]["FrontID"]), Convert.ToInt32(Rows[r]["Height"]), Convert.ToInt32(Rows[r]["Width"]));
                            DeductibleWeight = Decimal.Round(DeductibleCount * 10, 3, MidpointRounding.AwayFromZero);
                        }
                    }

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        VitrinaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        VitrinaCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (IsAluminium(Rows[r]) > -1)
                    {
                        VitrinaCost += GetFrontCostAluminium(Rows[r]);
                        VitrinaWeight += GetAluminiumWeight(Rows[r], true);
                    }
                    else
                    {
                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            VitrinaCost += Convert.ToDecimal(Rows[r]["Cost"]);
                        else
                            VitrinaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                        decimal FrontWeight = 0;
                        decimal InsetWeight = 0;

                        GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                        VitrinaWeight += Convert.ToDecimal(FrontWeight + InsetWeight - DeductibleWeight);
                    }
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //ЛЮКС, МЕГА
                filter = " AND InsetTypeID IN (860,862,4310)";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        LuxMegaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        LuxMegaCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        LuxMegaCost += Convert.ToDecimal(Rows[r]["Cost"]);
                    else
                        LuxMegaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                    decimal FrontWeight = 0;
                    decimal InsetWeight = 0;

                    GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                    LuxMegaWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }

                if (SolidCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = SolidCost / SolidCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(SolidCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(SolidCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(SolidWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (FilenkaCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = FilenkaCost / FilenkaCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(FilenkaCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(FilenkaCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(FilenkaWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (VitrinaCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = VitrinaCost / VitrinaCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(VitrinaCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(VitrinaCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(VitrinaWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (LuxMegaCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = LuxMegaCost / LuxMegaCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(LuxMegaCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(LuxMegaCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(LuxMegaWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }
            }

            Fronts.Dispose();
        }

        private void GetCurvedFronts(DataTable OrdersDataTable, DataTable ReportDataTable)
        {
            string AccountingName = OrdersDataTable.Rows[0]["AccountingName"].ToString();
            string InvNumber = OrdersDataTable.Rows[0]["InvNumber"].ToString();
            string Measure = OrdersDataTable.Rows[0]["Measure"].ToString();
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);
            DataTable Fronts = new DataTable();

            using (DataView DV = new DataView(OrdersDataTable))
            {
                Fronts = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Fronts.Rows.Count; i++)
            {
                DataRow[] Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() +
                                                              " AND Width = -1");

                if (Rows.Count() == 0)
                    continue;
                decimal MarketingCost = 0;
                decimal Solid713Count = 0;
                decimal Solid713Price = 0;
                decimal Solid713Weight = 0;

                decimal Filenka713Count = 0;
                decimal Filenka713Price = 0;
                decimal Filenka713Weight = 0;

                decimal NoInset713Count = 0;
                decimal NoInset713Price = 0;
                decimal NoInset713Weight = 0;

                decimal Vitrina713Count = 0;
                decimal Vitrina713Price = 0;
                decimal Vitrina713Weight = 0;

                decimal Solid910Count = 0;
                decimal Solid910Price = 0;
                decimal Solid910Weight = 0;

                decimal Filenka910Count = 0;
                decimal Filenka910Price = 0;
                decimal Filenka910Weight = 0;

                decimal NoInset910Count = 0;
                decimal NoInset910Price = 0;
                decimal NoInset910Weight = 0;

                decimal Vitrina910Count = 0;
                decimal Vitrina910Price = 0;
                decimal Vitrina910Weight = 0;

                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (Rows[r]["Height"].ToString() == "713")
                    {
                        DataRow[] rows = InsetTypesDataTable.Select("GroupID = 3 OR GroupID = 4");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Solid713Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Solid713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Solid713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        rows = InsetTypesDataTable.Select("InsetTypeID IN (2079,2080,2081,2082,2085,2086,2087,2088,2212,2213,29210,29211,27831,27832,29210,29211)");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Filenka713Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Filenka713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Filenka713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        if (Rows[r]["InsetTypeID"].ToString() == "-1")
                        {
                            NoInset713Count += Convert.ToDecimal(Rows[r]["Count"]);
                            NoInset713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            NoInset713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }

                        if (Rows[r]["InsetTypeID"].ToString() == "1")
                        {
                            Vitrina713Count += Convert.ToDecimal(Rows[r]["Count"]);
                            Vitrina713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            Vitrina713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }
                    }

                    if (Rows[r]["Height"].ToString() == "910")
                    {
                        DataRow[] rows = InsetTypesDataTable.Select("GroupID = 3 OR GroupID = 4");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Solid910Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Solid910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Solid910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        rows = InsetTypesDataTable.Select("InsetTypeID IN (2079,2080,2081,2082,2085,2086,2087,2088,2212,2213,29210,29211,27831,27832,29210,29211)");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Filenka910Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Filenka910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Filenka910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        if (Rows[r]["InsetTypeID"].ToString() == "-1")
                        {
                            NoInset910Count += Convert.ToDecimal(Rows[r]["Count"]);
                            NoInset910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            NoInset910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }

                        if (Rows[r]["InsetTypeID"].ToString() == "1")
                        {
                            Vitrina910Count += Convert.ToDecimal(Rows[r]["Count"]);
                            Vitrina910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            Vitrina910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }
                    }
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }

                if (Solid713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Solid713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Solid713Count;
                    Row["Cost"] = Decimal.Round(Solid713Count * Solid713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Solid713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Filenka713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Filenka713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Filenka713Count;
                    Row["Cost"] = Decimal.Round(Filenka713Count * Filenka713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Filenka713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (NoInset713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = NoInset713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = NoInset713Count;
                    Row["Cost"] = Decimal.Round(NoInset713Count * NoInset713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(NoInset713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Vitrina713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Vitrina713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Vitrina713Count;
                    Row["Cost"] = Decimal.Round(Vitrina713Count * Vitrina713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Vitrina713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Solid910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Solid910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Solid910Count;
                    Row["Cost"] = Decimal.Round(Solid910Count * Solid910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Solid910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Filenka910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Filenka910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Filenka910Count;
                    Row["Cost"] = Decimal.Round(Filenka910Count * Filenka910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Filenka910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (NoInset910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = NoInset910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = NoInset910Count;
                    Row["Cost"] = Decimal.Round(NoInset910Count * NoInset910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(NoInset910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Vitrina910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Vitrina910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Vitrina910Count;
                    Row["Cost"] = Decimal.Round(Vitrina910Count * Vitrina910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Vitrina910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }
            }

            Fronts.Dispose();
        }

        private void GetGrids(DataTable OrdersDataTable, DataTable ReportDataTable, DataTable ReportDataTable1, int FactoryID1)
        {
            DataRow[] Rows = OrdersDataTable.Select("InsetTypeID IN (685,686,687,688,29470,29471) AND FrontID <> 3729");

            if (Rows.Count() == 0)
                return;

            decimal MarketingCost = 0;
            decimal CountPP = 0;
            decimal CostPP = 0;

            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);
            if (Rows.Count() > 0)
                MarketingCost = GetGridMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));

            for (int i = 0; i < Rows.Count(); i++)
            {
                decimal d = GetInsetSquare(Convert.ToInt32(Rows[i]["FrontID"]), Convert.ToInt32(Rows[i]["Height"]),
                                            Convert.ToInt32(Rows[i]["Width"])) * Convert.ToDecimal(Rows[i]["Count"]);
                CountPP += d;
                CostPP += Convert.ToDecimal(Rows[i]["InsetPrice"]) * d;
                if (MarketingCost > GetGridMarketingCost(Convert.ToInt32(Rows[i]["FrontConfigID"])))
                    MarketingCost = GetGridMarketingCost(Convert.ToInt32(Rows[i]["FrontConfigID"]));
            }

            if (CountPP > 0)
            {
                DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(OrdersDataTable.Select("InsetTypeID IN (685,686,687,688,29470,29471)")[0]["FrontsOrdersID"]));
                int FactoryID = 0;
                if (rows.Count() > 0)
                    FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                if (FactoryID == 0)
                    FactoryID = FactoryID1;
                if (FactoryID != FactoryID1)
                {
                    DataRow NewRow = ReportDataTable1.NewRow();
                    NewRow["OriginalPrice"] = CostPP / CountPP;
                    NewRow["UNN"] = UNN;
                    NewRow["AccountingName"] = OrdersDataTable.Rows[0]["AccountingName"].ToString();
                    NewRow["InvNumber"] = OrdersDataTable.Rows[0]["InvNumber"].ToString();
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["Measure"] = OrdersDataTable.Rows[0]["Measure"].ToString();
                    NewRow["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                    NewRow["Count"] = Decimal.Round(CountPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(CostPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(NewRow["Count"]) * Convert.ToDecimal(3.5), 3, MidpointRounding.AwayFromZero);
                    if (rows.Count() > 0)
                    {
                        NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                        NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                    }
                    ReportDataTable1.Rows.Add(NewRow);
                }
                else
                {
                    DataRow NewRow = ReportDataTable.NewRow();
                    NewRow["OriginalPrice"] = CostPP / CountPP;
                    NewRow["UNN"] = UNN;
                    NewRow["AccountingName"] = OrdersDataTable.Rows[0]["AccountingName"].ToString();
                    NewRow["InvNumber"] = OrdersDataTable.Rows[0]["InvNumber"].ToString();
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["Measure"] = OrdersDataTable.Rows[0]["Measure"].ToString();
                    NewRow["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                    NewRow["Count"] = Decimal.Round(CountPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(CostPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(NewRow["Count"]) * Convert.ToDecimal(3.5), 3, MidpointRounding.AwayFromZero);
                    if (rows.Count() > 0)
                    {
                        NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                        NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                    }
                    ReportDataTable.Rows.Add(NewRow);
                }
            }
        }

        private void GetGlass(DataTable OrdersDataTable, DataTable ReportDataTable, DataTable ReportDataTable1, int FactoryID1)
        {
            decimal MarketingCost = 0;
            string AccountingName = OrdersDataTable.Rows[0]["AccountingName"].ToString();
            string InvNumber = OrdersDataTable.Rows[0]["InvNumber"].ToString();
            string Measure = OrdersDataTable.Rows[0]["Measure"].ToString();
            decimal CountFlutes = 0;
            decimal CountLacomat = 0;
            //decimal CountMaster = 0;
            decimal CountKrizet = 0;
            decimal CountOther = 0;

            decimal PriceFlutes = 0;
            decimal PriceLacomat = 0;
            //decimal PriceMaster = 0;
            decimal PriceKrizet = 0;
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);

            if (OrdersDataTable.Select("InsetTypeID = 2").Count() == 0)
                return;

            bool hasGlass = false;
            for (int i = 0; i < OrdersDataTable.Rows.Count; i++)
            {
                int frontID = Convert.ToInt32(OrdersDataTable.Rows[0]["FrontID"]);
                if (IsAluminium(OrdersDataTable.Rows[i]) > -1)
                {
                    hasGlass = true;
                    break;
                }
            }
            if (!hasGlass)
                return;

            DataRow[] FRows = OrdersDataTable.Select("InsetColorID = 3944");

            if (FRows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(FRows[0]["FrontConfigID"]));
            if (FRows.Count() > 0)
            {
                PriceFlutes = Convert.ToDecimal(FRows[0]["InsetPrice"]);

                for (int i = 0; i < FRows.Count(); i++)
                {
                    if (IsAluminium(FRows[i]) != -1)
                        continue;

                    CountFlutes += Convert.ToDecimal(FRows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(FRows[i]["FrontID"]),
                                              Convert.ToInt32(FRows[i]["Height"]),
                                              Convert.ToInt32(FRows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(FRows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(FRows[i]["FrontConfigID"]));
                }
                CountFlutes = Decimal.Round(CountFlutes, 3, MidpointRounding.AwayFromZero);

                if (CountFlutes > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(FRows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло Флутес";
                        NewRow["OriginalPrice"] = PriceFlutes;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountFlutes;
                        NewRow["Cost"] = Decimal.Round(CountFlutes * PriceFlutes);
                        NewRow["Weight"] = Decimal.Round(CountFlutes * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло Флутес";
                        NewRow["OriginalPrice"] = PriceFlutes;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountFlutes;
                        NewRow["Cost"] = Decimal.Round(CountFlutes * PriceFlutes);
                        NewRow["Weight"] = Decimal.Round(CountFlutes * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }


            DataRow[] LRows = OrdersDataTable.Select("InsetColorID = 3943");

            if (LRows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(LRows[0]["FrontConfigID"]));
            if (LRows.Count() > 0)
            {
                PriceLacomat = Convert.ToDecimal(LRows[0]["InsetPrice"]);

                for (int i = 0; i < LRows.Count(); i++)
                {
                    if (IsAluminium(LRows[i]) != -1)
                        continue;

                    CountLacomat += Convert.ToDecimal(LRows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(LRows[i]["FrontID"]),
                                              Convert.ToInt32(LRows[i]["Height"]),
                                              Convert.ToInt32(LRows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(LRows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(LRows[i]["FrontConfigID"]));
                }

                CountLacomat = Decimal.Round(CountLacomat, 3, MidpointRounding.AwayFromZero);

                if (CountLacomat > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(LRows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло Лакомат";
                        NewRow["OriginalPrice"] = PriceLacomat;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountLacomat;
                        NewRow["Cost"] = Decimal.Round(CountLacomat * PriceLacomat);
                        NewRow["Weight"] = Decimal.Round(CountLacomat * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло Лакомат";
                        NewRow["OriginalPrice"] = PriceLacomat;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountLacomat;
                        NewRow["Cost"] = Decimal.Round(CountLacomat * PriceLacomat);
                        NewRow["Weight"] = Decimal.Round(CountLacomat * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }

            DataRow[] KRows = OrdersDataTable.Select("InsetColorID = 3945");

            if (KRows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(KRows[0]["FrontConfigID"]));
            if (KRows.Count() > 0)
            {
                PriceKrizet = Convert.ToDecimal(KRows[0]["InsetPrice"]);

                for (int i = 0; i < KRows.Count(); i++)
                {
                    if (IsAluminium(KRows[i]) != -1)
                        continue;

                    CountKrizet += Convert.ToDecimal(KRows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(KRows[i]["FrontID"]),
                                              Convert.ToInt32(KRows[i]["Height"]),
                                              Convert.ToInt32(KRows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(KRows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(KRows[i]["FrontConfigID"]));
                }

                CountKrizet = Decimal.Round(CountKrizet, 3, MidpointRounding.AwayFromZero);

                if (CountKrizet > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(KRows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло Кризет";
                        NewRow["OriginalPrice"] = PriceKrizet;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountKrizet;
                        NewRow["Cost"] = Decimal.Round(CountKrizet * PriceKrizet);
                        NewRow["Weight"] = Decimal.Round(CountKrizet * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло Кризет";
                        NewRow["OriginalPrice"] = PriceKrizet;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountKrizet;
                        NewRow["Cost"] = Decimal.Round(CountKrizet * PriceKrizet);
                        NewRow["Weight"] = Decimal.Round(CountKrizet * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }

            DataRow[] ORows = OrdersDataTable.Select("InsetTypeID = 18");

            if (ORows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(ORows[0]["FrontConfigID"]));
            if (ORows.Count() > 0)
            {
                for (int i = 0; i < ORows.Count(); i++)
                {
                    if (IsAluminium(ORows[i]) != -1)
                        continue;

                    CountOther += Convert.ToDecimal(ORows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(ORows[i]["FrontID"]),
                                              Convert.ToInt32(ORows[i]["Height"]),
                                              Convert.ToInt32(ORows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(ORows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(ORows[i]["FrontConfigID"]));
                }

                CountOther = Decimal.Round(CountOther, 3, MidpointRounding.AwayFromZero);

                if (CountOther > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(ORows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло другое";
                        NewRow["OriginalPrice"] = 0;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountOther;
                        NewRow["Cost"] = 0;
                        NewRow["Weight"] = Decimal.Round(CountOther * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло другое";
                        NewRow["OriginalPrice"] = 0;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountOther;
                        NewRow["Cost"] = 0;
                        NewRow["Weight"] = Decimal.Round(CountOther * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void GetInsets(DataTable OrdersDataTable, DataTable ReportDataTable)
        {
            decimal MarketingCost = 0;
            decimal CountEllipseGrid = 0;
            decimal PriceEllipseGrid = 0;
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);

            DataRow[] EGRows = OrdersDataTable.Select("FrontID IN (3729)");//ellipse grid

            if (EGRows.Count() > 0)
            {
                int MarginHeight = 0;
                int MarginWidth = 0;

                GetGlassMarginAluminium(EGRows[0], ref MarginHeight, ref MarginWidth);

                PriceEllipseGrid = Convert.ToDecimal(EGRows[0]["InsetPrice"]);

                MarketingCost = GetMarketingCost(Convert.ToInt32(EGRows[0]["FrontConfigID"]));
                for (int i = 0; i < EGRows.Count(); i++)
                {
                    decimal dd = Decimal.Round(Convert.ToDecimal(EGRows[i]["Count"]) * MarginHeight * (Convert.ToDecimal(EGRows[i]["Width"]) - MarginWidth) / 1000000, 3, MidpointRounding.AwayFromZero);
                    CountEllipseGrid += dd;
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(EGRows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(EGRows[i]["FrontConfigID"]));
                }

                decimal Weight = GetInsetWeight(EGRows[0]);
                Weight = Decimal.Round(CountEllipseGrid * Weight, 3, MidpointRounding.AwayFromZero);

                DataRow NewRow = ReportDataTable.NewRow();
                NewRow["OriginalPrice"] = PriceEllipseGrid;
                NewRow["MarketingCost"] = MarketingCost;
                NewRow["UNN"] = UNN;
                NewRow["CurrencyCode"] = ProfilCurrencyCode;
                if (fID == 2)
                    NewRow["TPSCurCode"] = TPSCurrencyCode;
                NewRow["Count"] = CountEllipseGrid;
                NewRow["Cost"] = CountEllipseGrid * PriceEllipseGrid;
                NewRow["Weight"] = 0;
                NewRow["Measure"] = OrdersDataTable.Rows[0]["Measure"].ToString();
                DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(EGRows[0]["FrontsOrdersID"]));
                if (rows.Count() > 0)
                {
                    NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                    NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                }
                ReportDataTable.Rows.Add(NewRow);

            }
        }

        private void GetSimpleFrontsByClient(DataTable OrdersDataTable, DataTable ReportDataTable)
        {
            string DecorAccountingName = string.Empty;
            string DecorInvNumber = string.Empty;
            string AccountingName = OrdersDataTable.Rows[0]["AccountingName"].ToString();
            string InvNumber = OrdersDataTable.Rows[0]["InvNumber"].ToString();
            string Measure = OrdersDataTable.Rows[0]["Measure"].ToString();
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);
            DataTable Fronts = new DataTable();

            using (DataView DV = new DataView(OrdersDataTable))
            {
                Fronts = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Fronts.Rows.Count; i++)
            {
                decimal SolidCount = 0;
                decimal SolidCost = 0;
                decimal SolidWeight = 0;

                decimal FilenkaCount = 0;
                decimal FilenkaCost = 0;
                decimal FilenkaWeight = 0;

                decimal VitrinaCount = 0;
                decimal VitrinaCost = 0;
                decimal VitrinaWeight = 0;

                decimal LuxMegaCount = 0;
                decimal LuxMegaCost = 0;
                decimal LuxMegaWeight = 0;

                decimal MarketingCost = 0;

                //ГЛУХИЕ, БЕЗ ВСТАВКИ, РЕШЕТКА ОВАЛ
                DataRow[] rows = InsetTypesDataTable.Select("InsetTypeID=-1 OR GroupID = 3 OR GroupID = 4");
                string filter = string.Empty;
                foreach (DataRow item in rows)
                    filter += item["InsetTypeID"].ToString() + ",";
                if (filter.Length > 0)
                    filter = " AND NOT (FrontID IN (3728,3731,3732,3739,3740,3741,3744,3745,3746) OR InsetTypeID IN (28961,3653,3654,3655)) AND (FrontID = 3729 OR InsetTypeID IN (" + filter.Substring(0, filter.Length - 1) + "))";
                DataRow[] Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    decimal DeductibleCount = 0;
                    decimal DeductibleWeight = 0;
                    if (Convert.ToInt32(Fronts.Rows[i]["FrontID"]) == 3729)//РЕШЕТКА ОВАЛ
                    {
                        int FactoryID = 0;
                        DecorInvNumber = GetGridInvNumber(Convert.ToInt32(Rows[r]["FrontConfigID"]), ref FactoryID, ref DecorAccountingName);
                        if (DecorInvNumber.Length > 0)
                        {
                            DataRow NewRow = DecorInvNumbersDT.NewRow();
                            NewRow["FrontsOrdersID"] = Convert.ToInt32(Rows[r]["FrontsOrdersID"]);
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["DecorAccountingName"] = DecorAccountingName;
                            NewRow["DecorInvNumber"] = DecorInvNumber;
                            DecorInvNumbersDT.Rows.Add(NewRow);
                            DeductibleWeight = GetInsetWeight(Rows[r]);
                            DeductibleCount = GetInsetSquare(Convert.ToInt32(Rows[r]["FrontID"]), Convert.ToInt32(Rows[r]["Height"]),
                                                        Convert.ToInt32(Rows[r]["Width"])) * Convert.ToDecimal(Rows[r]["Count"]);
                            DeductibleWeight = Decimal.Round(DeductibleCount * DeductibleWeight, 3, MidpointRounding.AwayFromZero);
                        }
                    }
                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        SolidCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        SolidCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        SolidCost += Convert.ToDecimal(Rows[r]["Cost"]);
                    else
                        SolidCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                    decimal FrontWeight = 0;
                    decimal InsetWeight = 0;

                    GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                    SolidWeight += Convert.ToDecimal(FrontWeight + InsetWeight - DeductibleWeight);
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //АППЛИКАЦИИ
                filter = " AND (FrontID IN (3728,3731,3732,3739,3740,3741,3744,3745,3746) OR InsetTypeID IN (28961,3653,3654,3655))";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (Convert.ToInt32(Rows[r]["FrontID"]) == 3728 || Convert.ToInt32(Rows[r]["FrontID"]) == 3731 || Convert.ToInt32(Rows[r]["FrontID"]) == 3732 ||
                        Convert.ToInt32(Rows[r]["FrontID"]) == 3739 || Convert.ToInt32(Rows[r]["FrontID"]) == 3740 || Convert.ToInt32(Rows[r]["FrontID"]) == 3741 ||
                        Convert.ToInt32(Rows[r]["FrontID"]) == 3744 || Convert.ToInt32(Rows[r]["FrontID"]) == 3745 || Convert.ToInt32(Rows[r]["FrontID"]) == 3746)
                    {

                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            SolidCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                          Convert.ToDecimal(Rows[r]["Count"]);
                        else
                            SolidCount += Convert.ToDecimal(Rows[r]["Square"]);

                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            SolidCost += Convert.ToDecimal(Rows[r]["Cost"]) + 5;
                        else
                            SolidCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]) + 5 * Convert.ToDecimal(Rows[r]["Count"]);

                        decimal FrontWeight = 0;
                        decimal InsetWeight = 0;

                        GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                        SolidWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    }
                    else if (Convert.ToInt32(Rows[r]["FrontID"]) == 3415 || Convert.ToInt32(Rows[r]["FrontID"]) == 28922)
                    {
                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            FilenkaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                          Convert.ToDecimal(Rows[r]["Count"]);
                        else
                            FilenkaCount += Convert.ToDecimal(Rows[r]["Square"]);

                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            FilenkaCost += Convert.ToDecimal(Rows[r]["Cost"]) + 5;
                        else
                            FilenkaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]) + 5 * Convert.ToDecimal(Rows[r]["Count"]);

                        decimal FrontWeight = 0;
                        decimal InsetWeight = 0;

                        GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                        FilenkaWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    }
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //ФИЛЕНКА
                filter = " AND InsetTypeID IN (2069,2070,2071,2073,2075,2077,2233,3644,29043,29531)";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0) MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        FilenkaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        FilenkaCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        FilenkaCost += Convert.ToDecimal(Rows[r]["Cost"]);
                    else
                        FilenkaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                    decimal FrontWeight = 0;
                    decimal InsetWeight = 0;

                    GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                    FilenkaWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //ВИТРИНЫ, РЕШЕТКИ, СТЕКЛО
                filter = " AND InsetTypeID IN (1,2,685,686,687,688,29470,29471) AND FrontID <> 3729";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    decimal DeductibleCount = 0;
                    decimal DeductibleWeight = 0;
                    //РЕШЕТКА 45,90,ПЛАСТИК
                    if (Convert.ToInt32(Rows[r]["InsetTypeID"]) == 685 || Convert.ToInt32(Rows[r]["InsetTypeID"]) == 686 ||
                        Convert.ToInt32(Rows[r]["InsetTypeID"]) == 687 || Convert.ToInt32(Rows[r]["InsetTypeID"]) == 688 ||
                        Convert.ToInt32(Rows[r]["InsetTypeID"]) == 29470 || Convert.ToInt32(Rows[r]["InsetTypeID"]) == 29471)
                    {
                        int FactoryID = 0;
                        DecorInvNumber = GetGridInvNumber(Convert.ToInt32(Rows[r]["FrontConfigID"]), ref FactoryID, ref DecorAccountingName);
                        if (DecorInvNumber.Length > 0)
                        {
                            DataRow NewRow = DecorInvNumbersDT.NewRow();
                            NewRow["FrontsOrdersID"] = Convert.ToInt32(Rows[r]["FrontsOrdersID"]);
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["DecorAccountingName"] = DecorAccountingName;
                            NewRow["DecorInvNumber"] = DecorInvNumber;
                            DecorInvNumbersDT.Rows.Add(NewRow);
                            DeductibleCount = GetInsetSquare(Convert.ToInt32(Rows[r]["FrontID"]), Convert.ToInt32(Rows[r]["Height"]),
                                                        Convert.ToInt32(Rows[r]["Width"])) * Convert.ToDecimal(Rows[r]["Count"]);
                            DeductibleWeight = Decimal.Round(DeductibleCount * Convert.ToDecimal(3.5), 3, MidpointRounding.AwayFromZero);
                        }
                    }
                    //СТЕКЛО
                    if (Convert.ToInt32(Rows[r]["InsetTypeID"]) == 2)
                    {
                        int FactoryID = 0;
                        DecorInvNumber = GetGlassInvNumber(Convert.ToInt32(Rows[r]["FrontConfigID"]), ref FactoryID, ref DecorAccountingName);
                        if (DecorInvNumber.Length > 0)
                        {
                            DataRow NewRow = DecorInvNumbersDT.NewRow();
                            NewRow["FrontsOrdersID"] = Convert.ToInt32(Rows[r]["FrontsOrdersID"]);
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["DecorAccountingName"] = DecorAccountingName;
                            NewRow["DecorInvNumber"] = DecorInvNumber;
                            DecorInvNumbersDT.Rows.Add(NewRow);
                            DeductibleCount = Convert.ToDecimal(Rows[r]["Count"]) * GetInsetSquare(Convert.ToInt32(Rows[r]["FrontID"]), Convert.ToInt32(Rows[r]["Height"]), Convert.ToInt32(Rows[r]["Width"]));
                            DeductibleWeight = Decimal.Round(DeductibleCount * 10, 3, MidpointRounding.AwayFromZero);
                        }
                    }

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        VitrinaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        VitrinaCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (IsAluminium(Rows[r]) > -1)
                    {
                        VitrinaCost += GetFrontCostAluminium(Rows[r]);
                        VitrinaWeight += GetAluminiumWeight(Rows[r], true);
                    }
                    else
                    {
                        if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                            VitrinaCost += Convert.ToDecimal(Rows[r]["Cost"]);
                        else
                            VitrinaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                        decimal FrontWeight = 0;
                        decimal InsetWeight = 0;

                        GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                        VitrinaWeight += Convert.ToDecimal(FrontWeight + InsetWeight - DeductibleWeight);
                    }
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }
                //ЛЮКС, МЕГА
                filter = " AND InsetTypeID IN (860,862,4310)";
                Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() + " AND (Width <> -1)" + filter);
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        LuxMegaCount += Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero) *
                                      Convert.ToDecimal(Rows[r]["Count"]);
                    else
                        LuxMegaCount += Convert.ToDecimal(Rows[r]["Square"]);

                    if (GetMeasureType(Convert.ToInt32(Rows[r]["FrontConfigID"])) == 3)
                        LuxMegaCost += Convert.ToDecimal(Rows[r]["Cost"]);
                    else
                        LuxMegaCost += Convert.ToDecimal(Rows[r]["FrontPrice"]) * Convert.ToDecimal(Rows[r]["Square"]);

                    decimal FrontWeight = 0;
                    decimal InsetWeight = 0;

                    GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                    LuxMegaWeight += Convert.ToDecimal(FrontWeight + InsetWeight);
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }

                if (SolidCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = SolidCost / SolidCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(SolidCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(SolidCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(SolidWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (FilenkaCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = FilenkaCost / FilenkaCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(FilenkaCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(FilenkaCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(FilenkaWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (VitrinaCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = VitrinaCost / VitrinaCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(VitrinaCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(VitrinaCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(VitrinaWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (LuxMegaCount > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = LuxMegaCost / LuxMegaCount;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Decimal.Round(LuxMegaCount, 3, MidpointRounding.AwayFromZero);
                    Row["Cost"] = Decimal.Round(LuxMegaCost, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(LuxMegaWeight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }
            }

            Fronts.Dispose();
        }

        private void GetCurvedFrontsByClient(DataTable OrdersDataTable, DataTable ReportDataTable)
        {
            string AccountingName = OrdersDataTable.Rows[0]["AccountingName"].ToString();
            string InvNumber = OrdersDataTable.Rows[0]["InvNumber"].ToString();
            string Measure = OrdersDataTable.Rows[0]["Measure"].ToString();
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);
            DataTable Fronts = new DataTable();

            using (DataView DV = new DataView(OrdersDataTable))
            {
                Fronts = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Fronts.Rows.Count; i++)
            {
                DataRow[] Rows = OrdersDataTable.Select("FrontID = " + Fronts.Rows[i]["FrontID"].ToString() +
                                                              " AND Width = -1");

                if (Rows.Count() == 0)
                    continue;
                decimal MarketingCost = 0;
                decimal Solid713Count = 0;
                decimal Solid713Price = 0;
                decimal Solid713Weight = 0;

                decimal Filenka713Count = 0;
                decimal Filenka713Price = 0;
                decimal Filenka713Weight = 0;

                decimal NoInset713Count = 0;
                decimal NoInset713Price = 0;
                decimal NoInset713Weight = 0;

                decimal Vitrina713Count = 0;
                decimal Vitrina713Price = 0;
                decimal Vitrina713Weight = 0;

                decimal Solid910Count = 0;
                decimal Solid910Price = 0;
                decimal Solid910Weight = 0;

                decimal Filenka910Count = 0;
                decimal Filenka910Price = 0;
                decimal Filenka910Weight = 0;

                decimal NoInset910Count = 0;
                decimal NoInset910Price = 0;
                decimal NoInset910Weight = 0;

                decimal Vitrina910Count = 0;
                decimal Vitrina910Price = 0;
                decimal Vitrina910Weight = 0;

                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (Rows[r]["Height"].ToString() == "713")
                    {
                        DataRow[] rows = InsetTypesDataTable.Select("GroupID = 3 OR GroupID = 4");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Solid713Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Solid713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Solid713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        rows = InsetTypesDataTable.Select("InsetTypeID IN (2079,2080,2081,2082,2085,2086,2087,2088,2212,2213,29210,29211,27831,27832,29210,29211)");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Filenka713Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Filenka713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Filenka713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        if (Rows[r]["InsetTypeID"].ToString() == "-1")
                        {
                            NoInset713Count += Convert.ToDecimal(Rows[r]["Count"]);
                            NoInset713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            NoInset713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }

                        if (Rows[r]["InsetTypeID"].ToString() == "1")
                        {
                            Vitrina713Count += Convert.ToDecimal(Rows[r]["Count"]);
                            Vitrina713Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            Vitrina713Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }
                    }

                    if (Rows[r]["Height"].ToString() == "910")
                    {
                        DataRow[] rows = InsetTypesDataTable.Select("GroupID = 3 OR GroupID = 4");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Solid910Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Solid910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Solid910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        rows = InsetTypesDataTable.Select("InsetTypeID IN (2079,2080,2081,2082,2085,2086,2087,2088,2212,2213,29210,29211,27831,27832,29210,29211)");
                        foreach (DataRow item in rows)
                        {
                            if (Rows[r]["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                            {
                                Filenka910Count += Convert.ToDecimal(Rows[r]["Count"]);
                                Filenka910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                                decimal FrontWeight = 0;
                                decimal InsetWeight = 0;

                                GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                                Filenka910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                            }
                        }
                        if (Rows[r]["InsetTypeID"].ToString() == "-1")
                        {
                            NoInset910Count += Convert.ToDecimal(Rows[r]["Count"]);
                            NoInset910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            NoInset910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }

                        if (Rows[r]["InsetTypeID"].ToString() == "1")
                        {
                            Vitrina910Count += Convert.ToDecimal(Rows[r]["Count"]);
                            Vitrina910Price = Convert.ToDecimal(Rows[r]["FrontPrice"]);

                            decimal FrontWeight = 0;
                            decimal InsetWeight = 0;

                            GetFrontWeight(Rows[r], ref FrontWeight, ref InsetWeight);

                            Vitrina910Weight += Convert.ToDecimal(FrontWeight + InsetWeight);
                        }
                    }
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["FrontConfigID"]));
                }

                if (Solid713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Solid713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Solid713Count;
                    Row["Cost"] = Decimal.Round(Solid713Count * Solid713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Solid713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Filenka713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Filenka713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Filenka713Count;
                    Row["Cost"] = Decimal.Round(Filenka713Count * Filenka713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Filenka713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (NoInset713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = NoInset713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = NoInset713Count;
                    Row["Cost"] = Decimal.Round(NoInset713Count * NoInset713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(NoInset713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Vitrina713Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Vitrina713Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Vitrina713Count;
                    Row["Cost"] = Decimal.Round(Vitrina713Count * Vitrina713Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Vitrina713Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Solid910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Solid910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Solid910Count;
                    Row["Cost"] = Decimal.Round(Solid910Count * Solid910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Solid910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Filenka910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Filenka910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Filenka910Count;
                    Row["Cost"] = Decimal.Round(Filenka910Count * Filenka910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Filenka910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (NoInset910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = NoInset910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = NoInset910Count;
                    Row["Cost"] = Decimal.Round(NoInset910Count * NoInset910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(NoInset910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }

                if (Vitrina910Count > 0)
                {
                    DataRow Row = ReportDataTable.NewRow();
                    Row["OriginalPrice"] = Vitrina910Price;
                    Row["UNN"] = UNN;
                    Row["AccountingName"] = AccountingName;
                    Row["InvNumber"] = InvNumber;
                    Row["MarketingCost"] = MarketingCost;
                    Row["Measure"] = Measure;
                    Row["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        Row["TPSCurCode"] = TPSCurrencyCode;
                    Row["Count"] = Vitrina910Count;
                    Row["Cost"] = Decimal.Round(Vitrina910Count * Vitrina910Price, 3, MidpointRounding.AwayFromZero);
                    Row["Weight"] = Decimal.Round(Vitrina910Weight, 3, MidpointRounding.AwayFromZero);
                    ReportDataTable.Rows.Add(Row);
                }
            }

            Fronts.Dispose();
        }

        private void GetGridsByClient(DataTable OrdersDataTable, DataTable ReportDataTable, DataTable ReportDataTable1, int FactoryID1)
        {
            DataRow[] Rows = OrdersDataTable.Select("InsetTypeID IN (685,686,687,688,29470,29471) AND FrontID <> 3729");

            if (Rows.Count() == 0)
                return;

            decimal MarketingCost = 0;
            decimal CountPP = 0;
            decimal CostPP = 0;

            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);
            if (Rows.Count() > 0)
                MarketingCost = GetGridMarketingCost(Convert.ToInt32(Rows[0]["FrontConfigID"]));

            for (int i = 0; i < Rows.Count(); i++)
            {
                decimal d = GetInsetSquare(Convert.ToInt32(Rows[i]["FrontID"]), Convert.ToInt32(Rows[i]["Height"]),
                                            Convert.ToInt32(Rows[i]["Width"])) * Convert.ToDecimal(Rows[i]["Count"]);
                CountPP += d;
                CostPP += Convert.ToDecimal(Rows[i]["InsetPrice"]) * d;
                if (MarketingCost > GetGridMarketingCost(Convert.ToInt32(Rows[i]["FrontConfigID"])))
                    MarketingCost = GetGridMarketingCost(Convert.ToInt32(Rows[i]["FrontConfigID"]));
            }

            if (CountPP > 0)
            {
                DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(OrdersDataTable.Select("InsetTypeID IN (685,686,687,688,29470,29471)")[0]["FrontsOrdersID"]));
                int FactoryID = 0;
                if (rows.Count() > 0)
                    FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                if (FactoryID == 0)
                    FactoryID = FactoryID1;
                if (FactoryID != FactoryID1)
                {
                    DataRow NewRow = ReportDataTable1.NewRow();
                    NewRow["OriginalPrice"] = CostPP / CountPP;
                    NewRow["UNN"] = UNN;
                    NewRow["AccountingName"] = OrdersDataTable.Rows[0]["AccountingName"].ToString();
                    NewRow["InvNumber"] = OrdersDataTable.Rows[0]["InvNumber"].ToString();
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["Measure"] = OrdersDataTable.Rows[0]["Measure"].ToString();
                    NewRow["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                    NewRow["Count"] = Decimal.Round(CountPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(CostPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(NewRow["Count"]) * Convert.ToDecimal(3.5), 3, MidpointRounding.AwayFromZero);
                    if (rows.Count() > 0)
                    {
                        NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                        NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                    }
                    ReportDataTable1.Rows.Add(NewRow);
                }
                else
                {
                    DataRow NewRow = ReportDataTable.NewRow();
                    NewRow["OriginalPrice"] = CostPP / CountPP;
                    NewRow["UNN"] = UNN;
                    NewRow["AccountingName"] = OrdersDataTable.Rows[0]["AccountingName"].ToString();
                    NewRow["InvNumber"] = OrdersDataTable.Rows[0]["InvNumber"].ToString();
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["Measure"] = OrdersDataTable.Rows[0]["Measure"].ToString();
                    NewRow["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                    NewRow["Count"] = Decimal.Round(CountPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(CostPP, 3, MidpointRounding.AwayFromZero);
                    NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(NewRow["Count"]) * Convert.ToDecimal(3.5), 3, MidpointRounding.AwayFromZero);
                    if (rows.Count() > 0)
                    {
                        NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                        NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                    }
                    ReportDataTable.Rows.Add(NewRow);
                }
            }
        }

        private void GetGlassByClient(DataTable OrdersDataTable, DataTable ReportDataTable, DataTable ReportDataTable1, int FactoryID1)
        {
            decimal MarketingCost = 0;
            string AccountingName = OrdersDataTable.Rows[0]["AccountingName"].ToString();
            string InvNumber = OrdersDataTable.Rows[0]["InvNumber"].ToString();
            string Measure = OrdersDataTable.Rows[0]["Measure"].ToString();
            decimal CountFlutes = 0;
            decimal CountLacomat = 0;
            //decimal CountMaster = 0;
            decimal CountKrizet = 0;
            decimal CountOther = 0;

            decimal PriceFlutes = 0;
            decimal PriceLacomat = 0;
            //decimal PriceMaster = 0;
            decimal PriceKrizet = 0;
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);

            if (OrdersDataTable.Select("InsetTypeID = 2").Count() == 0)
                return;

            bool hasGlass = false;
            for (int i = 0; i < OrdersDataTable.Rows.Count; i++)
            {
                int frontID = Convert.ToInt32(OrdersDataTable.Rows[0]["FrontID"]);
                if (IsAluminium(OrdersDataTable.Rows[i]) > -1)
                {
                    hasGlass = true;
                    break;
                }
            }
            if (!hasGlass)
                return;

            DataRow[] FRows = OrdersDataTable.Select("InsetColorID = 3944");

            if (FRows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(FRows[0]["FrontConfigID"]));
            if (FRows.Count() > 0)
            {
                PriceFlutes = Convert.ToDecimal(FRows[0]["InsetPrice"]);

                for (int i = 0; i < FRows.Count(); i++)
                {
                    if (IsAluminium(FRows[i]) != -1)
                        continue;

                    CountFlutes += Convert.ToDecimal(FRows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(FRows[i]["FrontID"]),
                                              Convert.ToInt32(FRows[i]["Height"]),
                                              Convert.ToInt32(FRows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(FRows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(FRows[i]["FrontConfigID"]));
                }

                CountFlutes = Decimal.Round(CountFlutes, 3, MidpointRounding.AwayFromZero);

                if (CountFlutes > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(FRows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло Флутес";
                        NewRow["OriginalPrice"] = PriceFlutes;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountFlutes;
                        NewRow["Cost"] = Decimal.Round(CountFlutes * PriceFlutes);
                        NewRow["Weight"] = Decimal.Round(CountFlutes * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло Флутес";
                        NewRow["OriginalPrice"] = PriceFlutes;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountFlutes;
                        NewRow["Cost"] = Decimal.Round(CountFlutes * PriceFlutes);
                        NewRow["Weight"] = Decimal.Round(CountFlutes * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }


            DataRow[] LRows = OrdersDataTable.Select("InsetColorID = 3943");

            if (LRows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(LRows[0]["FrontConfigID"]));
            if (LRows.Count() > 0)
            {
                PriceLacomat = Convert.ToDecimal(LRows[0]["InsetPrice"]);

                for (int i = 0; i < LRows.Count(); i++)
                {
                    if (IsAluminium(LRows[i]) != -1)
                        continue;

                    CountLacomat += Convert.ToDecimal(LRows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(LRows[i]["FrontID"]),
                                              Convert.ToInt32(LRows[i]["Height"]),
                                              Convert.ToInt32(LRows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(LRows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(LRows[i]["FrontConfigID"]));
                }

                CountLacomat = Decimal.Round(CountLacomat, 3, MidpointRounding.AwayFromZero);

                if (CountLacomat > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(LRows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло Лакомат";
                        NewRow["OriginalPrice"] = PriceLacomat;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountLacomat;
                        NewRow["Cost"] = Decimal.Round(CountLacomat * PriceLacomat);
                        NewRow["Weight"] = Decimal.Round(CountLacomat * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло Лакомат";
                        NewRow["OriginalPrice"] = PriceLacomat;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountLacomat;
                        NewRow["Cost"] = Decimal.Round(CountLacomat * PriceLacomat);
                        NewRow["Weight"] = Decimal.Round(CountLacomat * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }

            DataRow[] KRows = OrdersDataTable.Select("InsetColorID = 3945");

            if (KRows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(KRows[0]["FrontConfigID"]));
            if (KRows.Count() > 0)
            {
                PriceKrizet = Convert.ToDecimal(KRows[0]["InsetPrice"]);

                for (int i = 0; i < KRows.Count(); i++)
                {
                    if (IsAluminium(KRows[i]) != -1)
                        continue;

                    CountKrizet += Convert.ToDecimal(KRows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(KRows[i]["FrontID"]),
                                              Convert.ToInt32(KRows[i]["Height"]),
                                              Convert.ToInt32(KRows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(KRows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(KRows[i]["FrontConfigID"]));
                }

                CountKrizet = Decimal.Round(CountKrizet, 3, MidpointRounding.AwayFromZero);

                if (CountKrizet > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(KRows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло Кризет";
                        NewRow["OriginalPrice"] = PriceKrizet;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountKrizet;
                        NewRow["Cost"] = Decimal.Round(CountKrizet * PriceKrizet);
                        NewRow["Weight"] = Decimal.Round(CountKrizet * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло Кризет";
                        NewRow["OriginalPrice"] = PriceKrizet;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountKrizet;
                        NewRow["Cost"] = Decimal.Round(CountKrizet * PriceKrizet);
                        NewRow["Weight"] = Decimal.Round(CountKrizet * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }

            DataRow[] ORows = OrdersDataTable.Select("InsetTypeID = 18");

            if (ORows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(ORows[0]["FrontConfigID"]));
            if (ORows.Count() > 0)
            {
                for (int i = 0; i < ORows.Count(); i++)
                {
                    if (IsAluminium(ORows[i]) != -1)
                        continue;

                    CountOther += Convert.ToDecimal(ORows[i]["Count"]) *
                                GetInsetSquare(Convert.ToInt32(ORows[i]["FrontID"]),
                                              Convert.ToInt32(ORows[i]["Height"]),
                                              Convert.ToInt32(ORows[i]["Width"]));
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(ORows[i]["FrontConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(ORows[i]["FrontConfigID"]));
                }

                CountOther = Decimal.Round(CountOther, 3, MidpointRounding.AwayFromZero);

                if (CountOther > 0)
                {
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(ORows[0]["FrontsOrdersID"]));
                    int FactoryID = 0;
                    if (rows.Count() > 0)
                        FactoryID = Convert.ToInt32(rows[0]["FactoryID"]);
                    if (FactoryID == 0)
                        FactoryID = FactoryID1;
                    if (FactoryID != FactoryID1)
                    {
                        DataRow NewRow = ReportDataTable1.NewRow();
                        //NewRow["Name"] = "Стекло другое";
                        NewRow["OriginalPrice"] = 0;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountOther;
                        NewRow["Cost"] = 0;
                        NewRow["Weight"] = Decimal.Round(CountOther * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable1.Rows.Add(NewRow);
                    }
                    else
                    {
                        DataRow NewRow = ReportDataTable.NewRow();
                        //NewRow["Name"] = "Стекло другое";
                        NewRow["OriginalPrice"] = 0;
                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = AccountingName;
                        NewRow["InvNumber"] = InvNumber;
                        NewRow["MarketingCost"] = MarketingCost;
                        NewRow["Measure"] = Measure;
                        if (rows.Count() > 0)
                        {
                            NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                            NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                        }
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        if (fID == 2)
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = CountOther;
                        NewRow["Cost"] = 0;
                        NewRow["Weight"] = Decimal.Round(CountOther * 10, 3, MidpointRounding.AwayFromZero);
                        ReportDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void GetInsetsByClient(DataTable OrdersDataTable, DataTable ReportDataTable)
        {
            decimal MarketingCost = 0;
            decimal CountEllipseGrid = 0;
            decimal PriceEllipseGrid = 0;
            int fID = Convert.ToInt32(OrdersDataTable.Rows[0]["FactoryID"]);

            DataRow[] EGRows = OrdersDataTable.Select("FrontID IN (3729)");//ellipse grid

            if (EGRows.Count() > 0)
            {
                {
                    int MarginHeight = 0;
                    int MarginWidth = 0;

                    GetGlassMarginAluminium(EGRows[0], ref MarginHeight, ref MarginWidth);

                    PriceEllipseGrid = Convert.ToDecimal(EGRows[0]["InsetPrice"]);

                    MarketingCost = GetMarketingCost(Convert.ToInt32(EGRows[0]["FrontConfigID"]));
                    for (int i = 0; i < EGRows.Count(); i++)
                    {
                        decimal dd = Decimal.Round(Convert.ToDecimal(EGRows[i]["Count"]) * MarginHeight * (Convert.ToDecimal(EGRows[i]["Width"]) - MarginWidth) / 1000000, 3, MidpointRounding.AwayFromZero);
                        CountEllipseGrid += dd;
                        if (MarketingCost > GetMarketingCost(Convert.ToInt32(EGRows[i]["FrontConfigID"])))
                            MarketingCost = GetMarketingCost(Convert.ToInt32(EGRows[i]["FrontConfigID"]));
                    }

                    decimal Weight = GetInsetWeight(EGRows[0]);
                    Weight = Decimal.Round(CountEllipseGrid * Weight, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = ReportDataTable.NewRow();
                    NewRow["OriginalPrice"] = PriceEllipseGrid;
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["UNN"] = UNN;
                    NewRow["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                    NewRow["Count"] = CountEllipseGrid;
                    NewRow["Cost"] = CountEllipseGrid * PriceEllipseGrid;
                    NewRow["Weight"] = 0;
                    NewRow["Measure"] = OrdersDataTable.Rows[0]["Measure"].ToString();
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(EGRows[0]["FrontsOrdersID"]));
                    if (rows.Count() > 0)
                    {
                        NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                        NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                    }
                    ReportDataTable.Rows.Add(NewRow);
                }
                DataTable DT = OrdersDataTable.Clone();
                foreach (DataRow item in EGRows)
                    DT.Rows.Add(item.ItemArray);
                DataTable ClientDT = new DataTable();
                using (DataView DV = new DataView(DT))
                {
                    ClientDT = DV.ToTable(true, new string[] { "ClientID" });
                }
                for (int x = 0; x < ClientDT.Rows.Count; x++)
                {
                    MarketingCost = 0;
                    CountEllipseGrid = 0;
                    PriceEllipseGrid = 0;
                    int ClientID = Convert.ToInt32(ClientDT.Rows[x]["FactoryID"]);
                    string ClientName = ClientDT.Rows[x]["ClientName"].ToString();
                    EGRows = OrdersDataTable.Select("FrontID IN (3729) AND ClientID=" + ClientID);//ellipse grid
                    int MarginHeight = 0;
                    int MarginWidth = 0;

                    GetGlassMarginAluminium(EGRows[0], ref MarginHeight, ref MarginWidth);
                    PriceEllipseGrid = Convert.ToDecimal(EGRows[0]["InsetPrice"]);
                    MarketingCost = GetMarketingCost(Convert.ToInt32(EGRows[0]["FrontConfigID"]));
                    for (int i = 0; i < EGRows.Count(); i++)
                    {
                        decimal dd = Decimal.Round(Convert.ToDecimal(EGRows[i]["Count"]) * MarginHeight * (Convert.ToDecimal(EGRows[i]["Width"]) - MarginWidth) / 1000000, 3, MidpointRounding.AwayFromZero);
                        CountEllipseGrid += dd;
                        if (MarketingCost > GetMarketingCost(Convert.ToInt32(EGRows[i]["FrontConfigID"])))
                            MarketingCost = GetMarketingCost(Convert.ToInt32(EGRows[i]["FrontConfigID"]));
                    }

                    decimal Weight = GetInsetWeight(EGRows[0]);
                    Weight = Decimal.Round(CountEllipseGrid * Weight, 3, MidpointRounding.AwayFromZero);

                    DataRow NewRow = ReportDataTable.NewRow();
                    NewRow["OriginalPrice"] = PriceEllipseGrid;
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["UNN"] = UNN;
                    NewRow["CurrencyCode"] = ProfilCurrencyCode;
                    if (fID == 2)
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                    NewRow["Count"] = CountEllipseGrid;
                    NewRow["Cost"] = CountEllipseGrid * PriceEllipseGrid;
                    NewRow["Weight"] = 0;
                    NewRow["ClientName"] = ClientName;
                    NewRow["Measure"] = OrdersDataTable.Rows[0]["Measure"].ToString();
                    DataRow[] rows = DecorInvNumbersDT.Select("FrontsOrdersID = " + Convert.ToInt32(EGRows[0]["FrontsOrdersID"]));
                    if (rows.Count() > 0)
                    {
                        NewRow["AccountingName"] = rows[0]["DecorAccountingName"].ToString();
                        NewRow["InvNumber"] = rows[0]["DecorInvNumber"].ToString();
                    }
                    ReportDataTable.Rows.Add(NewRow);
                }
            }
        }

        private decimal GetInsetWeight(DataRow FrontsOrdersRow)
        {
            int InsetTypeID = Convert.ToInt32(FrontsOrdersRow["InsetTypeID"]);
            if (InsetTypeID == 2)
                InsetTypeID = Convert.ToInt32(FrontsOrdersRow["InsetColorID"]);//стекло
            decimal InsetSquare = GetInsetSquare(FrontsOrdersRow);
            if (InsetSquare <= 0)
                return 0;
            decimal InsetWeight = 0;
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + InsetTypeID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["Weight"] != DBNull.Value)
                    InsetWeight = Convert.ToDecimal(Rows[0]["Weight"]);
            }

            return InsetSquare * InsetWeight;
        }

        private decimal GetProfileWeight(DataRow FrontsOrdersRow)
        {
            decimal FrontHeight = Convert.ToDecimal(FrontsOrdersRow["Height"]);
            decimal FrontWidth = Convert.ToDecimal(FrontsOrdersRow["Width"]);
            decimal ProfileWeight = 0;
            decimal ProfileWidth = 0;
            DataRow[] FrontsConfigRow = FrontsConfigDataTable.Select("FrontConfigID = " + FrontsOrdersRow["FrontConfigID"].ToString());
            if (FrontsConfigRow.Count() > 0)
                ProfileWeight = Convert.ToDecimal(FrontsConfigRow[0]["Weight"]);

            //для Женевы и Тафеля глухой - вес квадрата профиля на площадь фасада
            int FrontID = Convert.ToInt32(FrontsOrdersRow["FrontID"]);
            if (FrontID == 30504 || FrontID == 30505 || FrontID == 30506 ||
                FrontID == 30364 || FrontID == 30366 || FrontID == 30367 ||
                FrontID == 30501 || FrontID == 30502 || FrontID == 30503 ||
                FrontID == 16269 || FrontID == 28945 || FrontID == 27914 || FrontID == 29597 || FrontID == 3727 || FrontID == 3728 || FrontID == 3729 ||
                FrontID == 3730 || FrontID == 3731 || FrontID == 3732 || FrontID == 3733 || FrontID == 3734 ||
                FrontID == 3735 || FrontID == 3736 || FrontID == 3737 || FrontID == 3739 || FrontID == 3740 ||
                FrontID == 3741 || FrontID == 3742 || FrontID == 3743 || FrontID == 3744 || FrontID == 3745 ||
                FrontID == 3746 || FrontID == 3747 || FrontID == 3748 || FrontID == 15108 || FrontID == 3662 || FrontID == 3663 || FrontID == 3664 || FrontID == 15760)
                return FrontWidth * FrontHeight / 1000000 * ProfileWeight;
            else
            {
                DataRow[] DecorConfigRow = TechStoreDataTable.Select("TechStoreID = " + FrontsConfigRow[0]["ProfileID"].ToString());
                if (DecorConfigRow.Count() > 0)
                {
                    ProfileWidth = Convert.ToDecimal(DecorConfigRow[0]["Width"]);
                    ProfileWeight = Convert.ToDecimal(DecorConfigRow[0]["Weight"]);
                    return (FrontWidth * 2 + (FrontHeight - ProfileWidth - ProfileWidth) * 2) / 1000 * ProfileWeight;
                }
            }
            return 0;
        }

        public void GetFrontWeight(DataRow FrontsOrdersRow, ref decimal outFrontWeight, ref decimal outInsetWeight)
        {
            //decimal FrontsWeight = 0;
            DataRow[] FrontsConfigRow = FrontsConfigDataTable.Select("FrontConfigID = " + FrontsOrdersRow["FrontConfigID"].ToString());
            decimal InsetWeight = Convert.ToDecimal(FrontsConfigRow[0]["InsetWeight"]);
            decimal FrontsOrderSquare = Convert.ToDecimal(FrontsOrdersRow["Square"]);
            decimal PackWeight = 0;
            if (FrontsOrderSquare > 0)
                PackWeight = FrontsOrderSquare * Convert.ToDecimal(0.7);
            //если гнутый то вес за штуки
            if (FrontsConfigRow[0]["Width"].ToString() == "-1")
            {
                outFrontWeight = PackWeight +
                    Convert.ToDecimal(FrontsOrdersRow["Count"]) * Convert.ToDecimal(FrontsConfigRow[0]["Weight"]);
                return;
            }
            //если алюминий
            if (IsAluminium(FrontsOrdersRow) > -1)
            {
                outFrontWeight = PackWeight +
                    GetAluminiumWeight(FrontsOrdersRow, true);
                return;
            }
            decimal ResultProfileWeight = GetProfileWeight(FrontsOrdersRow);
            decimal ResultInsetWeight = 0;
            DataRow[] rows = InsetTypesDataTable.Select("GroupID = 2 OR GroupID = 3 OR GroupID = 4 OR GroupID = 7 OR GroupID = 12 OR GroupID = 13");
            foreach (DataRow item in rows)
            {
                if (FrontsOrdersRow["InsetTypeID"].ToString() == item["InsetTypeID"].ToString())
                {
                    ResultInsetWeight = GetInsetWeight(FrontsOrdersRow);
                }
            }
            if (Convert.ToInt32(FrontsOrdersRow["FrontID"]) == 3729)
                ResultInsetWeight = GetInsetWeight(FrontsOrdersRow);

            outFrontWeight = PackWeight + ResultProfileWeight * Convert.ToDecimal(FrontsOrdersRow["Count"]);
            outInsetWeight = ResultInsetWeight * Convert.ToDecimal(FrontsOrdersRow["Count"]);
        }

        private DataTable[] GroupInvNumber(DataTable OrdersDataTable)
        {
            int InvCount = 0;

            //get count of different covertypes
            using (DataView DV = new DataView(OrdersDataTable))
            {
                InvCount = DV.ToTable(true, new string[] { "InvNumber" }).Rows.Count;
            }

            //create DataTables
            DataTable[] InvDataTables = new DataTable[InvCount];


            //split for covertypes
            //int g = 0;

            //for (int i = 0; i < InvCount; i++)
            //{
            //    InvDataTables[i] = OrdersDataTable.Clone();

            //    string InvNumber = "";

            //    for (int r = g; r < OrdersDataTable.Rows.Count; r++)
            //    {
            //        if (InvNumber == "")
            //        {
            //            InvDataTables[i].ImportRow(OrdersDataTable.DefaultView[r].Row);
            //            InvNumber = OrdersDataTable.DefaultView[r].Row["InvNumber"].ToString();
            //            continue;
            //        }

            //        if (InvNumber == OrdersDataTable.DefaultView[r].Row["InvNumber"].ToString())
            //        {
            //            InvDataTables[i].ImportRow(OrdersDataTable.DefaultView[r].Row);
            //        }
            //        else
            //        {
            //            g = r;
            //            break;
            //        }
            //    }
            //}

            DataTable Table = new DataTable();
            using (DataView DV = new DataView(OrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "InvNumber" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                InvDataTables[i] = OrdersDataTable.Clone();
                string rr = Table.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = OrdersDataTable.Select("InvNumber = '" + rr + "'");
                foreach (DataRow item in ItemsRows)
                {
                    InvDataTables[i].ImportRow(item);
                }
            }

            return InvDataTables;
        }

        public void DispReport(DateTime date1, DateTime date2, bool ZOV, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " WHERE ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (ZOV)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            string Filter = " (DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND DispatchDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);


                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            GetSimpleFronts(DTs[i], ProfilReportDataTable);

                            GetCurvedFronts(DTs[i], ProfilReportDataTable);

                            GetGrids(DTs[i], ProfilReportDataTable, TPSReportDataTable, 1);

                            GetInsets(DTs[i], ProfilReportDataTable);

                            GetGlass(DTs[i], ProfilReportDataTable, TPSReportDataTable, 1);
                        }
                    }


                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            GetSimpleFronts(DTs[i], TPSReportDataTable);

                            GetCurvedFronts(DTs[i], TPSReportDataTable);

                            GetGrids(DTs[i], TPSReportDataTable, ProfilReportDataTable, 2);


                            GetInsets(DTs[i], TPSReportDataTable);

                            GetGlass(DTs[i], TPSReportDataTable, ProfilReportDataTable, 2);
                        }


                    }

                }
            }

        }

        public void Report(DateTime date1, DateTime date2, bool ZOV, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " WHERE ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (ZOV)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            string Filter = " (PackingDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND PackingDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);


                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            GetSimpleFronts(DTs[i], ProfilReportDataTable);

                            GetCurvedFronts(DTs[i], ProfilReportDataTable);

                            GetGrids(DTs[i], ProfilReportDataTable, TPSReportDataTable, 1);

                            GetInsets(DTs[i], ProfilReportDataTable);

                            GetGlass(DTs[i], ProfilReportDataTable, TPSReportDataTable, 1);
                        }
                    }


                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            GetSimpleFronts(DTs[i], TPSReportDataTable);

                            GetCurvedFronts(DTs[i], TPSReportDataTable);

                            GetGrids(DTs[i], TPSReportDataTable, ProfilReportDataTable, 2);


                            GetInsets(DTs[i], TPSReportDataTable);

                            GetGlass(DTs[i], TPSReportDataTable, ProfilReportDataTable, 2);
                        }


                    }

                }
            }

        }

        public void ReportByClient(DateTime date1, DateTime date2, bool ZOV, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " WHERE ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (ZOV)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            string Filter = " (PackingDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND PackingDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID INNER JOIN
                infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);


                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            GetSimpleFronts(DTs[i], ProfilReportDataTable);

                            GetCurvedFronts(DTs[i], ProfilReportDataTable);

                            GetGrids(DTs[i], ProfilReportDataTable, TPSReportDataTable, 1);

                            GetInsets(DTs[i], ProfilReportDataTable);

                            GetGlass(DTs[i], ProfilReportDataTable, TPSReportDataTable, 1);
                        }
                    }


                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            GetSimpleFronts(DTs[i], TPSReportDataTable);

                            GetCurvedFronts(DTs[i], TPSReportDataTable);

                            GetGrids(DTs[i], TPSReportDataTable, ProfilReportDataTable, 2);


                            GetInsets(DTs[i], TPSReportDataTable);

                            GetGlass(DTs[i], TPSReportDataTable, ProfilReportDataTable, 2);
                        }


                    }

                }
            }

        }

        public void MarketingProduced(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            ProfilMarketingProducedDT.Clear();
            TPSMarketingProducedDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string Filter = " (PackingDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND PackingDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand1 = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID=1 AND ProductType = 0 AND " + Filter + ") ORDER BY InvNumber";
            string SelectCommand2 = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID=2 AND ProductType = 0 AND " + Filter + ") ORDER BY FrontsOrdersID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand1, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(ProfilFrontsOrdersDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand2, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(TPSFrontsOrdersDataTable);
            }


            if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
            {
                DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                for (int i = 0; i < DTs.Count(); i++)
                {
                    if (DTs[i].Rows.Count == 0)
                        continue;
                    GetSimpleFronts(DTs[i], ProfilMarketingProducedDT);

                    GetCurvedFronts(DTs[i], ProfilMarketingProducedDT);

                    GetGrids(DTs[i], ProfilMarketingProducedDT, TPSMarketingProducedDT, 1);

                    GetInsets(DTs[i], ProfilMarketingProducedDT);

                    GetGlass(DTs[i], ProfilMarketingProducedDT, TPSMarketingProducedDT, 1);
                }
            }


            if (TPSFrontsOrdersDataTable.Rows.Count > 0)
            {
                DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                for (int i = 0; i < DTs.Count(); i++)
                {
                    if (DTs[i].Rows.Count == 0)
                        continue;
                    GetSimpleFronts(DTs[i], TPSMarketingProducedDT);

                    GetCurvedFronts(DTs[i], TPSMarketingProducedDT);

                    GetGrids(DTs[i], TPSMarketingProducedDT, ProfilMarketingProducedDT, 2);


                    GetInsets(DTs[i], TPSMarketingProducedDT);

                    GetGlass(DTs[i], TPSMarketingProducedDT, ProfilMarketingProducedDT, 2);
                }


            }

        }

        public void ZOVProduced(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample)
        {
            ProfilZOVProducedDT.Clear();
            TPSZOVProducedDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string Filter = " (PackingDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND PackingDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);


                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], ProfilZOVProducedDT);

                            GetCurvedFronts(DTs[i], ProfilZOVProducedDT);

                            GetGrids(DTs[i], ProfilZOVProducedDT, TPSZOVProducedDT, 1);

                            GetInsets(DTs[i], ProfilZOVProducedDT);

                            GetGlass(DTs[i], ProfilZOVProducedDT, TPSZOVProducedDT, 1);
                        }
                    }


                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], TPSZOVProducedDT);

                            GetCurvedFronts(DTs[i], TPSZOVProducedDT);

                            GetGrids(DTs[i], TPSZOVProducedDT, ProfilZOVProducedDT, 2);


                            GetInsets(DTs[i], TPSZOVProducedDT);

                            GetGlass(DTs[i], TPSZOVProducedDT, ProfilZOVProducedDT, 2);
                        }


                    }

                }
            }

        }

        public void MarketingDispatch(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            ProfilMarketingDispatchDT.Clear();
            TPSMarketingDispatchDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string Filter = " (DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND DispatchDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);


                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], ProfilMarketingDispatchDT);

                            GetCurvedFronts(DTs[i], ProfilMarketingDispatchDT);

                            GetGrids(DTs[i], ProfilMarketingDispatchDT, TPSMarketingDispatchDT, 1);

                            GetInsets(DTs[i], ProfilMarketingDispatchDT);

                            GetGlass(DTs[i], ProfilMarketingDispatchDT, TPSMarketingDispatchDT, 1);
                        }
                    }


                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], TPSMarketingDispatchDT);

                            GetCurvedFronts(DTs[i], TPSMarketingDispatchDT);

                            GetGrids(DTs[i], TPSMarketingDispatchDT, ProfilMarketingDispatchDT, 2);


                            GetInsets(DTs[i], TPSMarketingDispatchDT);

                            GetGlass(DTs[i], TPSMarketingDispatchDT, ProfilMarketingDispatchDT, 2);
                        }


                    }

                }
            }

        }

        public void ZOVDispatch(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample)
        {
            ProfilZOVDispatchDT.Clear();
            TPSZOVDispatchDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string Filter = " (DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND DispatchDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime FROM PackageDetails
                INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders))
                INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);


                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], ProfilZOVDispatchDT);

                            GetCurvedFronts(DTs[i], ProfilZOVProducedDT);

                            GetGrids(DTs[i], ProfilZOVProducedDT, TPSZOVProducedDT, 1);

                            GetInsets(DTs[i], ProfilZOVProducedDT);

                            GetGlass(DTs[i], ProfilZOVProducedDT, TPSZOVProducedDT, 1);
                        }
                    }


                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], TPSZOVDispatchDT);

                            GetCurvedFronts(DTs[i], TPSZOVProducedDT);

                            GetGrids(DTs[i], TPSZOVProducedDT, ProfilZOVProducedDT, 2);


                            GetInsets(DTs[i], TPSZOVProducedDT);

                            GetGlass(DTs[i], TPSZOVProducedDT, ProfilZOVProducedDT, 2);
                        }


                    }

                }
            }

        }

        public void MarketingStartCount(DateTime date1, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter += " AND ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND ClientID = -1";

            ProfilMarketingStartCountDT.Clear();
            TPSMarketingStartCountDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, 
                         TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr39, dbo.PackageDetails.PackageDetailID, infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber
FROM            dbo.PackageDetails INNER JOIN
                         dbo.FrontsOrders ON dbo.PackageDetails.OrderID = dbo.FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON dbo.FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON dbo.FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON dbo.FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON dbo.FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON dbo.FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID 
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
WHERE dbo.PackageDetails.PackageID IN (SELECT TOP (100) PERCENT PackageID FROM dbo.Packages WHERE PackingDateTime < '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00' AND ProductType = 0 AND (DispatchDateTime IS NULL OR DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00')) ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);

                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], ProfilMarketingStartCountDT);

                            GetCurvedFronts(DTs[i], ProfilMarketingStartCountDT);

                            GetGrids(DTs[i], ProfilMarketingStartCountDT, TPSMarketingStartCountDT, 1);

                            GetInsets(DTs[i], ProfilMarketingStartCountDT);

                            GetGlass(DTs[i], ProfilMarketingStartCountDT, TPSMarketingStartCountDT, 1);
                        }
                    }
                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], TPSMarketingStartCountDT);

                            GetCurvedFronts(DTs[i], TPSMarketingStartCountDT);

                            GetGrids(DTs[i], TPSMarketingStartCountDT, ProfilMarketingStartCountDT, 2);

                            GetInsets(DTs[i], TPSMarketingStartCountDT);

                            GetGlass(DTs[i], TPSMarketingStartCountDT, ProfilMarketingStartCountDT, 2);
                        }
                    }
                }
            }

        }

        public void MarketingEndCount(DateTime date1, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter += " AND ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND ClientID = -1";

            ProfilMarketingEndCountDT.Clear();
            TPSMarketingEndCountDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, 
                         TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr39, dbo.PackageDetails.PackageDetailID, infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber
FROM            dbo.PackageDetails INNER JOIN
                         dbo.FrontsOrders ON dbo.PackageDetails.OrderID = dbo.FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON dbo.FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON dbo.FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON dbo.FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON dbo.FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON dbo.FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID 
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
WHERE dbo.PackageDetails.PackageID IN (SELECT TOP (100) PERCENT PackageID FROM dbo.Packages WHERE PackingDateTime < '" + date1.ToString("yyyy-MM-dd") + @" 23:59:59' AND ProductType = 0 AND (DispatchDateTime IS NULL OR DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + @" 23:59:59')) ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);

                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], ProfilMarketingEndCountDT);

                            GetCurvedFronts(DTs[i], ProfilMarketingEndCountDT);

                            GetGrids(DTs[i], ProfilMarketingEndCountDT, TPSMarketingEndCountDT, 1);

                            GetInsets(DTs[i], ProfilMarketingEndCountDT);

                            GetGlass(DTs[i], ProfilMarketingEndCountDT, TPSMarketingEndCountDT, 1);
                        }
                    }
                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], TPSMarketingEndCountDT);

                            GetCurvedFronts(DTs[i], TPSMarketingEndCountDT);

                            GetGrids(DTs[i], TPSMarketingEndCountDT, ProfilMarketingEndCountDT, 2);

                            GetInsets(DTs[i], TPSMarketingEndCountDT);

                            GetGlass(DTs[i], TPSMarketingEndCountDT, ProfilMarketingEndCountDT, 2);
                        }
                    }
                }
            }

        }

        public void ZOVStartCount(DateTime date1, bool IsSample, bool IsNotSample)
        {
            ProfilZOVStartCountDT.Clear();
            TPSZOVStartCountDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, 
                         TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr39, 
                         PackageDetails.PackageDetailID, infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber
FROM            dbo.PackageDetails INNER JOIN
                         FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID 
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                         infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID = infiniu2_zovreference.dbo.Clients.ClientID
WHERE        PackageDetails.PackageID IN
                             (SELECT        TOP (100) PERCENT PackageID
                               FROM            Packages
                               WHERE        PackingDateTime < '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00' AND ProductType = 0 AND (DispatchDateTime IS NULL OR DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00'))
ORDER BY infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);

                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], ProfilZOVStartCountDT);

                            GetCurvedFronts(DTs[i], ProfilZOVStartCountDT);

                            GetGrids(DTs[i], ProfilZOVStartCountDT, TPSZOVStartCountDT, 1);

                            GetInsets(DTs[i], ProfilZOVStartCountDT);

                            GetGlass(DTs[i], ProfilZOVStartCountDT, TPSZOVStartCountDT, 1);
                        }
                    }
                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], TPSZOVStartCountDT);

                            GetCurvedFronts(DTs[i], TPSZOVStartCountDT);

                            GetGrids(DTs[i], TPSZOVStartCountDT, ProfilZOVStartCountDT, 2);

                            GetInsets(DTs[i], TPSZOVStartCountDT);

                            GetGlass(DTs[i], TPSZOVStartCountDT, ProfilZOVStartCountDT, 2);
                        }
                    }
                }
            }

        }

        public void ZOVEndCount(DateTime date1, bool IsSample, bool IsNotSample)
        {
            ProfilZOVEndCountDT.Clear();
            TPSZOVEndCountDT.Clear();
            ProfilFrontsOrdersDataTable.Clear();
            TPSFrontsOrdersDataTable.Clear();
            DecorInvNumbersDT.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.FrontsOrders.FrontsOrdersID, dbo.FrontsOrders.FrontID, dbo.FrontsOrders.ColorID, dbo.FrontsOrders.PatinaID, dbo.FrontsOrders.InsetTypeID, dbo.FrontsOrders.InsetColorID, 
                dbo.FrontsOrders.TechnoColorID, dbo.FrontsOrders.TechnoInsetTypeID, dbo.FrontsOrders.TechnoInsetColorID, dbo.FrontsOrders.Height, dbo.FrontsOrders.Width, PackageDetails.Count, 
                dbo.FrontsOrders.FrontConfigID, dbo.FrontsOrders.FactoryID, dbo.FrontsOrders.FrontPrice, dbo.FrontsOrders.InsetPrice, 
                (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, dbo.FrontsOrders.Cost, infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, dbo.FrontsOrders.CreateDateTime, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, 
                         TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr39, 
                         PackageDetails.PackageDetailID, infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber
FROM            PackageDetails INNER JOIN
                         FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" + MFSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID 
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                         infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID = infiniu2_zovreference.dbo.Clients.ClientID
WHERE        PackageDetails.PackageID IN
                             (SELECT        TOP (100) PERCENT PackageID
                               FROM            Packages
                               WHERE        PackingDateTime < '" + date1.ToString("yyyy-MM-dd") + @" 23:59:59' AND ProductType = 0 AND (DispatchDateTime IS NULL OR DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + @" 23:59:59'))
ORDER BY infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        return;

                    ProfilFrontsOrdersDataTable = DT.Clone();
                    TPSFrontsOrdersDataTable = DT.Clone();

                    SplitTables(DT, ref ProfilFrontsOrdersDataTable, ref TPSFrontsOrdersDataTable);

                    if (ProfilFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(ProfilFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], ProfilZOVEndCountDT);

                            GetCurvedFronts(DTs[i], ProfilZOVEndCountDT);

                            GetGrids(DTs[i], ProfilZOVEndCountDT, TPSZOVEndCountDT, 1);

                            GetInsets(DTs[i], ProfilZOVEndCountDT);

                            GetGlass(DTs[i], ProfilZOVEndCountDT, TPSZOVEndCountDT, 1);
                        }
                    }
                    if (TPSFrontsOrdersDataTable.Rows.Count > 0)
                    {
                        DataTable[] DTs = GroupInvNumber(TPSFrontsOrdersDataTable);

                        for (int i = 0; i < DTs.Count(); i++)
                        {
                            if (DTs[i].Rows.Count == 0)
                                continue;
                            GetSimpleFronts(DTs[i], TPSZOVEndCountDT);

                            GetCurvedFronts(DTs[i], TPSZOVEndCountDT);

                            GetGrids(DTs[i], TPSZOVEndCountDT, ProfilZOVEndCountDT, 2);

                            GetInsets(DTs[i], TPSZOVEndCountDT);

                            GetGlass(DTs[i], TPSZOVEndCountDT, ProfilZOVEndCountDT, 2);
                        }
                    }
                }
            }

        }

        public void StartEndProducedDispatchReport(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            MarketingProduced(date1, date2, IsSample, IsNotSample, MClients, MClientGroups);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVProduced(date1, date2, IsSample, IsNotSample);
            MarketingDispatch(date1, date2, IsSample, IsNotSample, MClients, MClientGroups);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVDispatch(date1, date2, IsSample, IsNotSample);
            MarketingStartCount(date1, IsSample, IsNotSample, MClients, MClientGroups);
            MarketingEndCount(date2, IsSample, IsNotSample, MClients, MClientGroups);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVStartCount(date1, IsSample, IsNotSample);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVEndCount(date2, IsSample, IsNotSample);
            CollectProfilOrders();
            CollectTPSOrders();
        }

        private void CollectProfilOrders()
        {

            AllProfilDT.Clear();

            for (int i = 0; i < ProfilMarketingStartCountDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = ProfilMarketingStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(ProfilMarketingStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = ProfilMarketingStartCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilMarketingEndCountDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = ProfilMarketingEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(ProfilMarketingEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = ProfilMarketingEndCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilMarketingProducedDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = ProfilMarketingProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(ProfilMarketingProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = ProfilMarketingProducedDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilMarketingDispatchDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = ProfilMarketingDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(ProfilMarketingDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = ProfilMarketingDispatchDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }




            for (int i = 0; i < ProfilZOVStartCountDT.Rows.Count; i++)
            {
                string rr = ProfilZOVStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = ProfilZOVStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(ProfilZOVStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = ProfilZOVStartCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilZOVEndCountDT.Rows.Count; i++)
            {
                string rr = ProfilZOVEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = ProfilZOVEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(ProfilZOVEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = ProfilZOVEndCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilZOVProducedDT.Rows.Count; i++)
            {
                string rr = ProfilZOVProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = ProfilZOVProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(ProfilZOVProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = ProfilZOVProducedDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilZOVDispatchDT.Rows.Count; i++)
            {
                string rr = ProfilZOVDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = ProfilZOVDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(ProfilZOVDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = ProfilZOVDispatchDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }

            using (DataView DV = new DataView(AllProfilDT.Copy()))
            {
                DV.Sort = "AccountingName";
                AllProfilDT.Clear();
                AllProfilDT = DV.ToTable();
            }
            foreach (DataRow item in AllProfilDT.Rows)
            {
                if (item["StartCount"] == DBNull.Value)
                    item["StartCount"] = 0;
                if (item["EndCount"] == DBNull.Value)
                    item["EndCount"] = 0;
                if (item["ProducedCount"] == DBNull.Value)
                    item["ProducedCount"] = 0;
                if (item["DispatchCount"] == DBNull.Value)
                    item["DispatchCount"] = 0;
            }
        }

        public void CollectTPSOrders()
        {
            AllTPSDT.Clear();

            for (int i = 0; i < TPSMarketingStartCountDT.Rows.Count; i++)
            {
                string rr = TPSMarketingStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = TPSMarketingStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(TPSMarketingStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = TPSMarketingStartCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSMarketingEndCountDT.Rows.Count; i++)
            {
                string rr = TPSMarketingEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = TPSMarketingEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(TPSMarketingEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = TPSMarketingEndCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSMarketingProducedDT.Rows.Count; i++)
            {
                string rr = TPSMarketingProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = TPSMarketingProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(TPSMarketingProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = TPSMarketingProducedDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSMarketingDispatchDT.Rows.Count; i++)
            {
                string rr = TPSMarketingDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = TPSMarketingDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(TPSMarketingDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = TPSMarketingDispatchDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }




            for (int i = 0; i < TPSZOVStartCountDT.Rows.Count; i++)
            {
                string rr = TPSZOVStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = TPSZOVStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(TPSZOVStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = TPSZOVStartCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSZOVEndCountDT.Rows.Count; i++)
            {
                string rr = TPSZOVEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = TPSZOVEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(TPSZOVEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSZOVEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = TPSZOVEndCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSZOVProducedDT.Rows.Count; i++)
            {
                string rr = TPSZOVProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = TPSZOVProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(TPSZOVProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSZOVProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = TPSZOVProducedDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSZOVDispatchDT.Rows.Count; i++)
            {
                string rr = TPSZOVDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = TPSZOVDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(TPSZOVDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSZOVDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = TPSZOVDispatchDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }

            using (DataView DV = new DataView(AllTPSDT.Copy()))
            {
                DV.Sort = "AccountingName";
                AllTPSDT.Clear();
                AllTPSDT = DV.ToTable();
            }
            foreach (DataRow item in AllTPSDT.Rows)
            {
                if (item["StartCount"] == DBNull.Value)
                    item["StartCount"] = 0;
                if (item["EndCount"] == DBNull.Value)
                    item["EndCount"] = 0;
                if (item["ProducedCount"] == DBNull.Value)
                    item["ProducedCount"] = 0;
                if (item["DispatchCount"] == DBNull.Value)
                    item["DispatchCount"] = 0;
            }
        }
    }


    public class DecorProduced
    {
        //decimal TransportCost = 0;
        //decimal AdditionalCost = 0;
        //decimal Rate = 1;
        //int ClientID = 0;
        string ProfilCurrencyCode = "0";
        string TPSCurrencyCode = "0";
        string UNN = string.Empty;

        Infinium.Modules.ZOV.DecorCatalogOrder DecorCatalogOrder = null;

        DataTable CurrencyTypesDT;
        public DataTable ProfilReportDataTable = null;
        public DataTable TPSReportDataTable = null;
        private DataTable DecorProductsDataTable = null;
        private DataTable DecorConfigDataTable = null;
        private DataTable MeasuresDataTable = null;
        private DataTable DecorOrdersDataTable = null;
        private DataTable DecorDataTable = null;

        private DataTable ProfilMarketingStartCountDT = null;
        private DataTable ProfilMarketingEndCountDT = null;
        private DataTable ProfilMarketingProducedDT = null;
        private DataTable ProfilMarketingDispatchDT = null;
        private DataTable ProfilZOVStartCountDT = null;
        private DataTable ProfilZOVEndCountDT = null;
        private DataTable ProfilZOVProducedDT = null;
        private DataTable ProfilZOVDispatchDT = null;
        public DataTable AllProfilDT = null;

        private DataTable TPSMarketingStartCountDT = null;
        private DataTable TPSMarketingEndCountDT = null;
        private DataTable TPSMarketingProducedDT = null;
        private DataTable TPSMarketingDispatchDT = null;
        private DataTable TPSZOVStartCountDT = null;
        private DataTable TPSZOVEndCountDT = null;
        private DataTable TPSZOVProducedDT = null;
        private DataTable TPSZOVDispatchDT = null;
        public DataTable AllTPSDT = null;

        public DecorProduced(ref Infinium.Modules.ZOV.DecorCatalogOrder tDecorCatalogOrder)
        {
            DecorCatalogOrder = tDecorCatalogOrder;

            Create();
            CreateReportDataTable();
        }

        private void Create()
        {
            string SelectCommand = "SELECT * FROM CurrencyTypes";
            CurrencyTypesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDT);
            }
            DecorOrdersDataTable = new DataTable();

            SelectCommand = @"SELECT ProductID, ProductName, MeasureID, ReportParam FROM DecorProducts" +
                " WHERE (ProductID IN (SELECT ProductID FROM DecorConfig WHERE (Enabled = 1))) ORDER BY ProductName ASC";
            DecorProductsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDataTable);
            }
            DecorDataTable = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDataTable);
            }
            MeasuresDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDataTable);
            }

            DecorConfigDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDataTable);
            //}
            DecorConfigDataTable = TablesManager.DecorConfigDataTableAll;
        }

        private void CreateReportDataTable()
        {
            ProfilReportDataTable = new DataTable();
            ProfilReportDataTable.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("InvNumber", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("AccountingName", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Price", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("Weight", Type.GetType("System.String")));
            ProfilReportDataTable.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.String")));

            AllProfilDT = new DataTable();
            AllProfilDT.Columns.Add(new DataColumn("AccountingName", Type.GetType("System.String")));
            AllProfilDT.Columns.Add(new DataColumn("InvNumber", Type.GetType("System.String")));
            AllProfilDT.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            AllProfilDT.Columns.Add(new DataColumn("StartCount", Type.GetType("System.Decimal")));
            AllProfilDT.Columns.Add(new DataColumn("ProducedCount", Type.GetType("System.Decimal")));
            AllProfilDT.Columns.Add(new DataColumn("DispatchCount", Type.GetType("System.Decimal")));
            AllProfilDT.Columns.Add(new DataColumn("EndCount", Type.GetType("System.Decimal")));
            AllTPSDT = AllProfilDT.Clone();

            TPSReportDataTable = ProfilReportDataTable.Clone();

            ProfilMarketingStartCountDT = ProfilReportDataTable.Clone();
            ProfilMarketingEndCountDT = ProfilReportDataTable.Clone();
            ProfilMarketingProducedDT = ProfilReportDataTable.Clone();
            ProfilMarketingDispatchDT = ProfilReportDataTable.Clone();
            ProfilZOVStartCountDT = ProfilReportDataTable.Clone();
            ProfilZOVEndCountDT = ProfilReportDataTable.Clone();
            ProfilZOVProducedDT = ProfilReportDataTable.Clone();
            ProfilZOVDispatchDT = ProfilReportDataTable.Clone();

            TPSMarketingStartCountDT = ProfilReportDataTable.Clone();
            TPSMarketingEndCountDT = ProfilReportDataTable.Clone();
            TPSMarketingProducedDT = ProfilReportDataTable.Clone();
            TPSMarketingDispatchDT = ProfilReportDataTable.Clone();
            TPSZOVStartCountDT = ProfilReportDataTable.Clone();
            TPSZOVEndCountDT = ProfilReportDataTable.Clone();
            TPSZOVProducedDT = ProfilReportDataTable.Clone();
            TPSZOVDispatchDT = ProfilReportDataTable.Clone();
        }

        public void ClearReport()
        {
            DecorOrdersDataTable.Clear();

            ProfilReportDataTable.Clear();
            TPSReportDataTable.Clear();

            ProfilReportDataTable.AcceptChanges();
            TPSReportDataTable.AcceptChanges();
        }

        private bool IsProfil(int DecorConfigID)
        {
            DataRow[] Rows = DecorConfigDataTable.Select("DecorConfigID = " + DecorConfigID.ToString());

            if (Rows[0]["FactoryID"].ToString() == "1")
                return true;

            return false;
        }

        private decimal GetMarketingCost(int DecorConfigID)
        {
            DataRow[] DRows = DecorConfigDataTable.Select("DecorConfigID = " + DecorConfigID);
            if (DRows.Count() == 0)
                return 0;
            return Convert.ToDecimal(DRows[0]["MarketingCost"]);
        }

        private int GetReportMeasureTypeID(int DecorConfigID)
        {
            DataRow[] Row = DecorConfigDataTable.Select("DecorConfigID = " + DecorConfigID);

            return Convert.ToInt32(Row[0]["ReportMeasureID"]);//1 м.кв.  2 м.п. 3 шт.
        }

        private int GetMeasureTypeID(int DecorConfigID)
        {
            DataRow[] Row = DecorConfigDataTable.Select("DecorConfigID = " + DecorConfigID);

            return Convert.ToInt32(Row[0]["MeasureID"]);//1 м.кв.  2 м.п. 3 шт.
        }

        public decimal GetDecorWeight(DataRow DecorOrderRow)
        {
            if (DecorOrderRow["Weight"] == DBNull.Value)
            {
                System.Windows.Forms.MessageBox.Show("Ошибка конфигурации: нет веса в DecorConfigID=" + DecorOrderRow["DecorConfigID"].ToString() +
                    ". Вес будет выставлен в 0.");
                return 0;
            }
            decimal Weight = 0;

            DataRow[] Row = DecorConfigDataTable.Select("DecorConfigID = " + DecorOrderRow["DecorConfigID"].ToString());

            if (Row[0]["Weight"] == DBNull.Value)
            {
                System.Windows.Forms.MessageBox.Show("Ошибка конфигурации: нет веса в DecorConfigID=" + DecorOrderRow["DecorConfigID"].ToString() +
                    ". Вес будет выставлен в 0.");
                return 0;
            }
            if (Row[0]["WeightMeasureID"].ToString() == "1")
            {
                if (Convert.ToDecimal(DecorOrderRow["Height"]) != -1)
                    Weight = Convert.ToDecimal(DecorOrderRow["Height"]) * Convert.ToDecimal(DecorOrderRow["Width"]) / 1000000
                         * Convert.ToDecimal(Row[0]["Weight"]) * Convert.ToDecimal(DecorOrderRow["Count"]);
                if (Convert.ToDecimal(DecorOrderRow["Length"]) != -1)
                    Weight = Convert.ToDecimal(DecorOrderRow["Length"]) * Convert.ToDecimal(DecorOrderRow["Width"]) / 1000000
                         * Convert.ToDecimal(Row[0]["Weight"]) * Convert.ToDecimal(DecorOrderRow["Count"]);
            }
            decimal L = 0;

            if (Row[0]["WeightMeasureID"].ToString() == "2")
            {

                L = 0;

                L = Convert.ToDecimal(DecorOrderRow["Length"]);

                if (L == -1)
                    L = Convert.ToDecimal(DecorOrderRow["Height"]);

                Weight = Convert.ToDecimal(L) / 1000 * Convert.ToDecimal(Row[0]["Weight"]) *
                         Convert.ToDecimal(DecorOrderRow["Count"]);

            }
            if (Row[0]["WeightMeasureID"].ToString() == "3")
                Weight = Convert.ToDecimal(Row[0]["Weight"]) * Convert.ToDecimal(DecorOrderRow["Count"]);

            return Weight;
        }

        public void CreateParamsTable(string Params, DataTable DT)
        {
            string Param = null;

            for (int i = 0; i < Params.Length; i++)
            {
                if (Params[i] != ';')
                    Param += Params[i];

                if (Params[i] == ';' || i == Params.Length - 1)
                {
                    if (Param.Length > 0)
                    {
                        DT.Columns.Add(new DataColumn(Param, Type.GetType("System.Int32")));
                        Param = "";
                    }
                }
            }

            DT.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn("InvNumber", Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn("AccountingName", Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            DT.Columns.Add(new DataColumn("TotalCount", Type.GetType("System.Int32")));
            DT.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DT.Columns.Add(new DataColumn("Weight", Type.GetType("System.Decimal")));
            DT.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.Decimal")));
        }

        private void GroupCoverTypes(DataRow[] Rows, int MeasureTypeID)
        {
            DataTable PDT = new DataTable();
            DataTable TDT = new DataTable();

            PDT = DecorOrdersDataTable.Clone();
            TDT = DecorOrdersDataTable.Clone();

            PDT.Columns.Remove("Count");
            PDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            PDT.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            PDT.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            PDT.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            PDT.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.Decimal")));

            TDT.Columns.Remove("Count");
            TDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            TDT.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            TDT.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            TDT.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            TDT.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.Decimal")));
            //013011
            decimal MarketingCost = 0;
            if (Rows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
            for (int r = 0; r < Rows.Count(); r++)
            {
                string InvNumber = Rows[r]["InvNumber"].ToString();
                if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                //м.п.
                if (MeasureTypeID == 2)
                {
                    decimal L = 0;

                    L = Convert.ToDecimal(Rows[r]["Length"]);

                    if (L == -1)
                        L = Convert.ToDecimal(Rows[r]["Height"]);

                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "м.п.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow["Measure"] = "м.п.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }

                //шт.
                if (MeasureTypeID == 3)
                {
                    //get_parametrized_data function only
                }

                //м.кв.
                if (MeasureTypeID == 1)
                {
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "м.кв.";
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                            continue;
                        }
                        else
                        {
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                        Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                        Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[0]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow["Measure"] = "м.кв.";
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[0]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                            continue;
                        }
                        else
                        {
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                        Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                        Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }
            }




            //REPORT TABLE
            //м.п.
            if (MeasureTypeID == 2)
            {
                if (PDT.Rows.Count > 0)
                {
                    for (int i = 0; i < PDT.Rows.Count; i++)
                    {
                        DataRow NewRow = ProfilReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "м.п.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Count"]) / 1000, 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]) / (Convert.ToDecimal(PDT.Rows[i]["Count"]) / 1000), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);
                        ProfilReportDataTable.Rows.Add(NewRow);
                    }
                }

                if (TDT.Rows.Count > 0)
                {
                    for (int i = 0; i < TDT.Rows.Count; i++)
                    {
                        DataRow NewRow = TPSReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Measure"] = "м.п.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Count"]) / 1000, 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]) / (Convert.ToDecimal(TDT.Rows[i]["Count"]) / 1000), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TPSReportDataTable.Rows.Add(NewRow);
                    }
                }
            }

            //шт.
            if (MeasureTypeID == 3)
            {
                //get_parametrized_data function only
            }

            //м.кв.
            if (MeasureTypeID == 1)
            {
                if (PDT.Rows.Count > 0)
                {
                    for (int i = 0; i < PDT.Rows.Count; i++)
                    {
                        DataRow NewRow = ProfilReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "м.кв.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]) / Convert.ToDecimal(PDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        ProfilReportDataTable.Rows.Add(NewRow);
                    }
                }

                if (TDT.Rows.Count > 0)
                {
                    for (int i = 0; i < TDT.Rows.Count; i++)
                    {
                        DataRow NewRow = TPSReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Measure"] = "м.кв.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]) / Convert.ToDecimal(TDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TPSReportDataTable.Rows.Add(NewRow);
                    }
                }
            }

            PDT.Dispose();
            TDT.Dispose();
        }

        private void GroupCoverTypes(DataRow[] Rows, int MeasureTypeID, DataTable PRepDT, DataTable TRepDT)
        {
            DataTable PDT = new DataTable();
            DataTable TDT = new DataTable();

            PDT = DecorOrdersDataTable.Clone();
            TDT = DecorOrdersDataTable.Clone();

            PDT.Columns.Remove("Count");
            PDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            PDT.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            PDT.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            PDT.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            PDT.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.Decimal")));

            TDT.Columns.Remove("Count");
            TDT.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            TDT.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            TDT.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            TDT.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            TDT.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.Decimal")));
            //013011
            decimal MarketingCost = 0;
            if (Rows.Count() > 0)
                MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
            for (int r = 0; r < Rows.Count(); r++)
            {
                string InvNumber = Rows[r]["InvNumber"].ToString();
                if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                //м.п.
                if (MeasureTypeID == 2)
                {
                    decimal L = 0;

                    L = Convert.ToDecimal(Rows[r]["Length"]);

                    if (L == -1)
                        L = Convert.ToDecimal(Rows[r]["Height"]);

                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "м.п.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow["Measure"] = "м.п.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]) * L;
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }

                //шт.
                if (MeasureTypeID == 3)
                {
                    //get_parametrized_data function only
                }

                //м.кв.
                if (MeasureTypeID == 1)
                {
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "м.кв.";
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                            continue;
                        }
                        else
                        {
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                        Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[0]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow["Measure"] = "м.кв.";
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    NewRow["Count"] = Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[0]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }

                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero);
                            }
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                            continue;
                        }
                        else
                        {
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 1)
                            {
                                if (Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Decimal.Round(Convert.ToDecimal(Rows[r]["Height"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                                if (Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                        Decimal.Round(Convert.ToDecimal(Rows[r]["Length"]) * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero)
                                    * Convert.ToDecimal(Rows[r]["Count"]);
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 2)
                            {
                                decimal L = 0;
                                L = Convert.ToDecimal(Rows[r]["Length"]);
                                if (L == -1)
                                    L = Convert.ToDecimal(Rows[r]["Height"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(L * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero); ;
                            }
                            if (GetMeasureTypeID(Convert.ToInt32(Rows[r]["DecorConfigID"])) == 3)
                            {
                                decimal H = 0;
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Height") && Convert.ToDecimal(Rows[r]["Height"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Height"]);
                                if (DecorCatalogOrder.HasParameter(Convert.ToInt32(Rows[r]["ProductID"]), "Length") && Convert.ToDecimal(Rows[r]["Length"]) != -1)
                                    H = Convert.ToDecimal(Rows[r]["Length"]);
                                InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                    Convert.ToDecimal(Rows[r]["Count"]) *
                                    Decimal.Round(H * Convert.ToDecimal(Rows[r]["Width"]) / 1000000, 3, MidpointRounding.AwayFromZero); ;
                            }
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }
            }




            //REPORT TABLE
            //м.п.
            if (MeasureTypeID == 2)
            {
                if (PDT.Rows.Count > 0)
                {
                    for (int i = 0; i < PDT.Rows.Count; i++)
                    {
                        DataRow NewRow = PRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "м.п.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Count"]) / 1000, 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]) / (Convert.ToDecimal(PDT.Rows[i]["Count"]) / 1000), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);
                        PRepDT.Rows.Add(NewRow);
                    }
                }

                if (TDT.Rows.Count > 0)
                {
                    for (int i = 0; i < TDT.Rows.Count; i++)
                    {
                        DataRow NewRow = TRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Measure"] = "м.п.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Count"]) / 1000, 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]) / (Convert.ToDecimal(TDT.Rows[i]["Count"]) / 1000), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TRepDT.Rows.Add(NewRow);
                    }
                }
            }

            //шт.
            if (MeasureTypeID == 3)
            {
                //get_parametrized_data function only
            }

            //м.кв.
            if (MeasureTypeID == 1)
            {
                if (PDT.Rows.Count > 0)
                {
                    for (int i = 0; i < PDT.Rows.Count; i++)
                    {
                        DataRow NewRow = PRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "м.кв.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]) / Convert.ToDecimal(PDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        PRepDT.Rows.Add(NewRow);
                    }
                }

                if (TDT.Rows.Count > 0)
                {
                    for (int i = 0; i < TDT.Rows.Count; i++)
                    {
                        DataRow NewRow = TRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[i]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[i]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[i]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Measure"] = "м.кв.";
                        NewRow["Count"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]) / Convert.ToDecimal(TDT.Rows[i]["Count"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[i]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TRepDT.Rows.Add(NewRow);
                    }
                }
            }

            PDT.Dispose();
            TDT.Dispose();
        }

        private void GetParametrizedData(DataRow[] Rows, DataTable PDT, DataTable TDT)
        {
            string p1 = "";
            string p2 = "";
            string p3 = "";

            if (PDT.Columns["Height"] != null)
                p1 = "Height";

            if (PDT.Columns["Length"] != null)
                p1 = "Length";

            if (PDT.Columns["Width"] != null)
                p2 = "Width";

            if (p1.Length > 0 && p2.Length == 0)
                p3 = p1;

            if (p1.Length == 0 && p2.Length > 0)
                p3 = p2;

            decimal MarketingCost = 0;
            if (p1.Length == 0 && p2.Length == 0 && p3.Length == 0)
            {
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    string InvNumber = Rows[r]["InvNumber"].ToString();
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }

            }



            if (p1.Length > 0 && p2.Length > 0)
            {
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow[p1] = Convert.ToDecimal(Rows[r][p1]);
                            NewRow[p2] = Convert.ToDecimal(Rows[r][p2]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow[p1] = Convert.ToDecimal(Rows[r][p1]);
                            NewRow[p2] = Convert.ToDecimal(Rows[r][p2]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }
            }

            if (p3.Length > 0)
            {
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow[p3] = Convert.ToDecimal(Rows[r][p3]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow[p3] = Convert.ToDecimal(Rows[r][p3]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }
            }





            //REPORT TABLES
            if (PDT.Rows.Count > 0)
            {
                for (int g = 0; g < PDT.Rows.Count; g++)
                {
                    if (p1.Length > 0 && p2.Length > 0)
                    {
                        DataRow NewRow = ProfilReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["Count"] = PDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        ProfilReportDataTable.Rows.Add(NewRow);
                    }

                    if (p3.Length > 0)
                    {
                        DataRow NewRow = ProfilReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["Count"] = PDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        ProfilReportDataTable.Rows.Add(NewRow);
                    }

                    if (p1.Length == 0 && p2.Length == 0 && p3.Length == 0)
                    {
                        DataRow NewRow = ProfilReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["Count"] = PDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        ProfilReportDataTable.Rows.Add(NewRow);
                    }
                }
            }

            if (TDT.Rows.Count > 0)
            {
                for (int g = 0; g < TDT.Rows.Count; g++)
                {
                    if (p1.Length > 0 && p2.Length > 0)
                    {
                        DataRow NewRow = TPSReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = TDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TPSReportDataTable.Rows.Add(NewRow);
                    }

                    if (p3.Length > 0)
                    {
                        DataRow NewRow = TPSReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = TDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TPSReportDataTable.Rows.Add(NewRow);
                    }

                    if (p1.Length == 0 && p2.Length == 0 && p3.Length == 0)
                    {
                        DataRow NewRow = TPSReportDataTable.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = TDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TPSReportDataTable.Rows.Add(NewRow);
                    }
                }
            }


        }

        private void GetParametrizedData(DataRow[] Rows, DataTable PDT, DataTable TDT, DataTable PRepDT, DataTable TRepDT)
        {
            string p1 = "";
            string p2 = "";
            string p3 = "";

            if (PDT.Columns["Height"] != null)
                p1 = "Height";

            if (PDT.Columns["Length"] != null)
                p1 = "Length";

            if (PDT.Columns["Width"] != null)
                p2 = "Width";

            if (p1.Length > 0 && p2.Length == 0)
                p3 = p1;

            if (p1.Length == 0 && p2.Length > 0)
                p3 = p2;

            decimal MarketingCost = 0;
            if (p1.Length == 0 && p2.Length == 0 && p3.Length == 0)
            {
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    string InvNumber = Rows[r]["InvNumber"].ToString();
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }

            }



            if (p1.Length > 0 && p2.Length > 0)
            {
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow[p1] = Convert.ToDecimal(Rows[r][p1]);
                            NewRow[p2] = Convert.ToDecimal(Rows[r][p2]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow[p1] = Convert.ToDecimal(Rows[r][p1]);
                            NewRow[p2] = Convert.ToDecimal(Rows[r][p2]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }
            }

            if (p3.Length > 0)
            {
                if (Rows.Count() > 0)
                    MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[0]["DecorConfigID"]));
                for (int r = 0; r < Rows.Count(); r++)
                {
                    if (MarketingCost > GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                        MarketingCost = GetMarketingCost(Convert.ToInt32(Rows[r]["DecorConfigID"]));
                    if (IsProfil(Convert.ToInt32(Rows[r]["DecorConfigID"])))
                    {
                        DataRow[] InvRows = PDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = PDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow[p3] = Convert.ToDecimal(Rows[r][p3]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            PDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                    else
                    {
                        DataRow[] InvRows = TDT.Select("InvNumber = '" + Rows[r]["InvNumber"].ToString() + "'");
                        if (InvRows.Count() == 0)
                        {
                            DataRow NewRow = TDT.NewRow();
                            NewRow["UNN"] = UNN;
                            NewRow["AccountingName"] = Rows[r]["AccountingName"].ToString();
                            NewRow["InvNumber"] = Rows[r]["InvNumber"].ToString();
                            NewRow["MarketingCost"] = MarketingCost;
                            NewRow["CurrencyCode"] = ProfilCurrencyCode;
                            NewRow["Measure"] = "шт.";
                            NewRow["TPSCurCode"] = TPSCurrencyCode;
                            NewRow[p3] = Convert.ToDecimal(Rows[r][p3]);
                            NewRow["Count"] = Convert.ToDecimal(Rows[r]["Count"]);
                            //NewRow["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            NewRow["Cost"] = Convert.ToDecimal(Rows[r]["Cost"]);
                            NewRow["Weight"] = GetDecorWeight(Rows[r]);
                            TDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            InvRows[0]["Count"] = Convert.ToDecimal(InvRows[0]["Count"]) +
                                Convert.ToDecimal(Rows[r]["Count"]);
                            //InvRows[0]["Price"] = Convert.ToDecimal(Rows[r]["Price"]);
                            InvRows[0]["Cost"] = Convert.ToDecimal(InvRows[0]["Cost"]) +
                                Convert.ToDecimal(Rows[r]["Cost"]);
                            InvRows[0]["Weight"] = Convert.ToDecimal(InvRows[0]["Weight"]) +
                                GetDecorWeight(Rows[r]);
                        }
                    }
                }
            }





            //REPORT TABLES
            if (PDT.Rows.Count > 0)
            {
                for (int g = 0; g < PDT.Rows.Count; g++)
                {
                    if (p1.Length > 0 && p2.Length > 0)
                    {
                        DataRow NewRow = PRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["Count"] = PDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        PRepDT.Rows.Add(NewRow);
                    }

                    if (p3.Length > 0)
                    {
                        DataRow NewRow = PRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["Count"] = PDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        PRepDT.Rows.Add(NewRow);
                    }

                    if (p1.Length == 0 && p2.Length == 0 && p3.Length == 0)
                    {
                        DataRow NewRow = PRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = PDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = PDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(PDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["Count"] = PDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(PDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        PRepDT.Rows.Add(NewRow);
                    }
                }
            }

            if (TDT.Rows.Count > 0)
            {
                for (int g = 0; g < TDT.Rows.Count; g++)
                {
                    if (p1.Length > 0 && p2.Length > 0)
                    {
                        DataRow NewRow = TRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = TDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TRepDT.Rows.Add(NewRow);
                    }

                    if (p3.Length > 0)
                    {
                        DataRow NewRow = TRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = TDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TRepDT.Rows.Add(NewRow);
                    }

                    if (p1.Length == 0 && p2.Length == 0 && p3.Length == 0)
                    {
                        DataRow NewRow = TRepDT.NewRow();

                        NewRow["UNN"] = UNN;
                        NewRow["AccountingName"] = TDT.Rows[g]["AccountingName"].ToString();
                        NewRow["InvNumber"] = TDT.Rows[g]["InvNumber"].ToString();
                        NewRow["MarketingCost"] = Convert.ToDecimal(TDT.Rows[g]["MarketingCost"]);
                        NewRow["CurrencyCode"] = ProfilCurrencyCode;
                        NewRow["Measure"] = "шт.";
                        NewRow["TPSCurCode"] = TPSCurrencyCode;
                        NewRow["Count"] = TDT.Rows[g]["Count"];
                        //NewRow["Price"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Price"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Cost"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Cost"]), 3, MidpointRounding.AwayFromZero);
                        NewRow["Weight"] = Decimal.Round(Convert.ToDecimal(TDT.Rows[g]["Weight"]), 3, MidpointRounding.AwayFromZero);

                        TRepDT.Rows.Add(NewRow);
                    }
                }
            }


        }

        private void Collect()
        {
            string InvNumber = string.Empty;

            DataTable Items = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Items = DV.ToTable(true, new string[] { "DecorID" });
            }

            for (int i = 0; i < Items.Rows.Count; i++)
            {
                int rr = Convert.ToInt32(Items.Rows[i]["DecorID"]);
                DataRow[] ItemsRows = DecorOrdersDataTable.Select("DecorID = " + Items.Rows[i]["DecorID"].ToString(),
                                                                      "Price ASC");

                int DecorConfigID = Convert.ToInt32(ItemsRows[0]["DecorConfigID"]);
                //м.п.
                if (GetReportMeasureTypeID(Convert.ToInt32(ItemsRows[0]["DecorConfigID"])) == 2)
                {
                    GroupCoverTypes(ItemsRows, 2);
                }


                //шт.
                if (GetReportMeasureTypeID(Convert.ToInt32(ItemsRows[0]["DecorConfigID"])) == 3)
                {
                    DataTable ParamTableProfil = new DataTable();
                    DataTable ParamTableTPS = new DataTable();

                    DataRow[] DCs = DecorConfigDataTable.Select("DecorConfigID = " +
                                                                                    ItemsRows[0]["DecorConfigID"].ToString());

                    CreateParamsTable(DCs[0]["ReportParam"].ToString(), ParamTableProfil);
                    CreateParamsTable(DCs[0]["ReportParam"].ToString(), ParamTableTPS);

                    GetParametrizedData(ItemsRows, ParamTableProfil, ParamTableTPS);

                    ParamTableProfil.Dispose();
                    ParamTableTPS.Dispose();
                }


                //м.кв.
                if (GetReportMeasureTypeID(Convert.ToInt32(ItemsRows[0]["DecorConfigID"])) == 1)
                {
                    GroupCoverTypes(ItemsRows, 1);
                }
            }

            Items.Dispose();
        }

        private void Collect(DataTable PRepDT, DataTable TRepDT)
        {
            string InvNumber = string.Empty;

            DataTable Items = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Items = DV.ToTable(true, new string[] { "DecorID" });
            }

            for (int i = 0; i < Items.Rows.Count; i++)
            {
                int rr = Convert.ToInt32(Items.Rows[i]["DecorID"]);
                DataRow[] ItemsRows = DecorOrdersDataTable.Select("DecorID = " + Items.Rows[i]["DecorID"].ToString(),
                                                                      "Price ASC");

                int DecorConfigID = Convert.ToInt32(ItemsRows[0]["DecorConfigID"]);
                //м.п.
                if (GetReportMeasureTypeID(Convert.ToInt32(ItemsRows[0]["DecorConfigID"])) == 2)
                {
                    GroupCoverTypes(ItemsRows, 2, PRepDT, TRepDT);
                }


                //шт.
                if (GetReportMeasureTypeID(Convert.ToInt32(ItemsRows[0]["DecorConfigID"])) == 3)
                {
                    DataTable ParamTableProfil = new DataTable();
                    DataTable ParamTableTPS = new DataTable();

                    DataRow[] DCs = DecorConfigDataTable.Select("DecorConfigID = " +
                                                                                    ItemsRows[0]["DecorConfigID"].ToString());

                    CreateParamsTable(DCs[0]["ReportParam"].ToString(), ParamTableProfil);
                    CreateParamsTable(DCs[0]["ReportParam"].ToString(), ParamTableTPS);

                    GetParametrizedData(ItemsRows, ParamTableProfil, ParamTableTPS, PRepDT, TRepDT);

                    ParamTableProfil.Dispose();
                    ParamTableTPS.Dispose();
                }


                //м.кв.
                if (GetReportMeasureTypeID(Convert.ToInt32(ItemsRows[0]["DecorConfigID"])) == 1)
                {
                    GroupCoverTypes(ItemsRows, 1, PRepDT, TRepDT);
                }
            }

            Items.Dispose();
        }

        public void DispReport(DateTime date1, DateTime date2, bool ZOV, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (ZOV)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string Filter = " (DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND DispatchDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.DecorOrders.DecorOrderID, dbo.DecorOrders.ProductID, dbo.DecorOrders.DecorID, dbo.DecorOrders.ColorID, dbo.DecorOrders.PatinaID, dbo.DecorOrders.Length, 
                dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, dbo.DecorOrders.DecorConfigID, dbo.DecorOrders.FactoryID, dbo.DecorOrders.Price, dbo.DecorOrders.Cost, 
                dbo.DecorOrders.ItemWeight, dbo.DecorOrders.Weight, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" AND DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect();

        }

        public void Report(DateTime date1, DateTime date2, bool ZOV, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (ZOV)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string Filter = " (PackingDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND PackingDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.DecorOrders.DecorOrderID, dbo.DecorOrders.ProductID, dbo.DecorOrders.DecorID, dbo.DecorOrders.ColorID, dbo.DecorOrders.PatinaID, dbo.DecorOrders.Length, 
                dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, dbo.DecorOrders.DecorConfigID, dbo.DecorOrders.FactoryID, dbo.DecorOrders.Price, dbo.DecorOrders.Cost, 
                dbo.DecorOrders.ItemWeight, dbo.DecorOrders.Weight, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" AND DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect();

        }

        public void MarketingProduced(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            ProfilMarketingProducedDT.Clear();
            TPSMarketingProducedDT.Clear();
            DecorOrdersDataTable.Clear();

            string Filter = " (PackingDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND PackingDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.DecorOrders.DecorOrderID, dbo.DecorOrders.ProductID, dbo.DecorOrders.DecorID, dbo.DecorOrders.ColorID, dbo.DecorOrders.PatinaID, dbo.DecorOrders.Length, 
                dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, dbo.DecorOrders.DecorConfigID, dbo.DecorOrders.FactoryID, dbo.DecorOrders.Price, dbo.DecorOrders.Cost, 
                dbo.DecorOrders.ItemWeight, dbo.DecorOrders.Weight, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" AND DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilMarketingProducedDT, TPSMarketingProducedDT);
        }

        public void ZOVProduced(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample)
        {
            ProfilZOVProducedDT.Clear();
            TPSZOVProducedDT.Clear();
            DecorOrdersDataTable.Clear();

            string Filter = " (PackingDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND PackingDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.DecorOrders.DecorOrderID, dbo.DecorOrders.ProductID, dbo.DecorOrders.DecorID, dbo.DecorOrders.ColorID, dbo.DecorOrders.PatinaID, dbo.DecorOrders.Length, 
                dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, dbo.DecorOrders.DecorConfigID, dbo.DecorOrders.FactoryID, dbo.DecorOrders.Price, dbo.DecorOrders.Cost, 
                dbo.DecorOrders.ItemWeight, dbo.DecorOrders.Weight, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" AND DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders))
                INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilZOVProducedDT, TPSZOVProducedDT);
        }

        public void MarketingDispatch(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            ProfilMarketingDispatchDT.Clear();
            TPSMarketingDispatchDT.Clear();
            DecorOrdersDataTable.Clear();

            string Filter = " (DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND DispatchDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.DecorOrders.DecorOrderID, dbo.DecorOrders.ProductID, dbo.DecorOrders.DecorID, dbo.DecorOrders.ColorID, dbo.DecorOrders.PatinaID, dbo.DecorOrders.Length, 
                dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, dbo.DecorOrders.DecorConfigID, dbo.DecorOrders.FactoryID, dbo.DecorOrders.Price, dbo.DecorOrders.Cost, 
                dbo.DecorOrders.ItemWeight, dbo.DecorOrders.Weight, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" AND DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + @"))
                INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilMarketingDispatchDT, TPSMarketingDispatchDT);
        }

        public void ZOVDispatch(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample)
        {
            ProfilZOVDispatchDT.Clear();
            TPSZOVDispatchDT.Clear();
            DecorOrdersDataTable.Clear();

            string Filter = " (DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND DispatchDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59')";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT dbo.DecorOrders.DecorOrderID, dbo.DecorOrders.ProductID, dbo.DecorOrders.DecorID, dbo.DecorOrders.ColorID, dbo.DecorOrders.PatinaID, dbo.DecorOrders.Length, 
                dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, dbo.DecorOrders.DecorConfigID, dbo.DecorOrders.FactoryID, dbo.DecorOrders.Price, dbo.DecorOrders.Cost, 
                dbo.DecorOrders.ItemWeight, dbo.DecorOrders.Weight, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure FROM PackageDetails
                INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" AND DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders))
                INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID=infiniu2_catalog.dbo.Measures.MeasureID
                WHERE InvNumber IS NOT NULL AND PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND " + Filter + ") ORDER BY InvNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilZOVDispatchDT, TPSZOVDispatchDT);
        }

        public void MarketingStartCount(DateTime date1, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter += " AND ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND ClientID = -1";

            ProfilMarketingStartCountDT.Clear();
            TPSMarketingStartCountDT.Clear();
            DecorOrdersDataTable.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT        DecorOrders.DecorOrderID, PackageDetails.PackageDetailID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, 
                         DecorOrders.Width, PackageDetails.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Price, DecorOrders.Cost, DecorOrders.ItemWeight, DecorOrders.Weight, 
                         infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, PackageDetails.OrderID, infiniu2_marketingreference.dbo.Clients.ClientName, 
                         MegaOrders.OrderNumber
FROM            PackageDetails INNER JOIN
                         DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                         MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                         MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID
WHERE dbo.PackageDetails.PackageID IN (SELECT TOP (100) PERCENT PackageID FROM dbo.Packages WHERE  
PackingDateTime < '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00' AND ProductType = 1 AND (DispatchDateTime IS NULL OR DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00'))
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilMarketingStartCountDT, TPSMarketingStartCountDT);
        }

        public void MarketingEndCount(DateTime date1, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter += " AND ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND ClientID = -1";

            ProfilMarketingEndCountDT.Clear();
            TPSMarketingEndCountDT.Clear();
            DecorOrdersDataTable.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT        DecorOrders.DecorOrderID, PackageDetails.PackageDetailID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, 
                         DecorOrders.Width, PackageDetails.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Price, DecorOrders.Cost, DecorOrders.ItemWeight, DecorOrders.Weight, 
                         infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, PackageDetails.OrderID, infiniu2_marketingreference.dbo.Clients.ClientName, 
                         MegaOrders.OrderNumber
FROM            PackageDetails INNER JOIN
                         DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                         MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                         MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID
WHERE dbo.PackageDetails.PackageID IN (SELECT TOP (100) PERCENT PackageID FROM dbo.Packages WHERE PackingDateTime < '" +
date1.ToString("yyyy-MM-dd") + @" 23:59:59' AND ProductType = 1 AND (DispatchDateTime IS NULL OR DispatchDateTime > '" + date1.ToString("yyyy-MM-dd") + @" 23:59:59')) 
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilMarketingEndCountDT, TPSMarketingEndCountDT);
        }

        public void ZOVStartCount(DateTime date1, bool IsSample, bool IsNotSample)
        {
            ProfilZOVStartCountDT.Clear();
            TPSZOVStartCountDT.Clear();
            DecorOrdersDataTable.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT        DecorOrders.DecorOrderID, PackageDetails.PackageDetailID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, 
                         DecorOrders.Width, PackageDetails.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Price, DecorOrders.Cost, DecorOrders.ItemWeight, DecorOrders.Weight, 
                         infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, PackageDetails.OrderID, infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber
FROM            PackageDetails INNER JOIN
                         DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                         MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                         infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID = infiniu2_zovreference.dbo.Clients.ClientID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID
WHERE        PackageDetails.PackageID IN
                             (SELECT        TOP (100) PERCENT PackageID
                               FROM            Packages
                               WHERE       PackingDateTime < '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00' AND ProductType = 1 AND (DispatchDateTime IS NULL OR DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + @" 00:00:00'))
ORDER BY infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilZOVStartCountDT, TPSZOVStartCountDT);
        }

        public void ZOVEndCount(DateTime date1, bool IsSample, bool IsNotSample)
        {
            ProfilZOVEndCountDT.Clear();
            TPSZOVEndCountDT.Clear();
            DecorOrdersDataTable.Clear();

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string SelectCommand = @"SELECT        DecorOrders.DecorOrderID, PackageDetails.PackageDetailID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID, DecorOrders.PatinaID, DecorOrders.Length, DecorOrders.Height, 
                         DecorOrders.Width, PackageDetails.Count, DecorOrders.DecorConfigID, DecorOrders.FactoryID, DecorOrders.Price, DecorOrders.Cost, DecorOrders.ItemWeight, DecorOrders.Weight, 
                         infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, PackageDetails.OrderID, infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber
FROM            PackageDetails INNER JOIN
                         DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" + MDSampleFilter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                         MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                         infiniu2_zovreference.dbo.Clients ON MainOrders.ClientID = infiniu2_zovreference.dbo.Clients.ClientID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID
WHERE        PackageDetails.PackageID IN
                             (SELECT        TOP (100) PERCENT PackageID
                               FROM            Packages
                               WHERE      PackingDateTime < '" + date1.ToString("yyyy-MM-dd") + @" 23:59:59' AND ProductType = 1 AND
                                                         (DispatchDateTime IS NULL OR DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + @" 23:59:59'))
ORDER BY infiniu2_zovreference.dbo.Clients.ClientName, MainOrders.DocNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            Collect(ProfilZOVEndCountDT, TPSZOVEndCountDT);
        }

        public void StartEndProducedDispatchReport(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, ArrayList MClients, ArrayList MClientGroups)
        {
            MarketingProduced(date1, date2, IsSample, IsNotSample, MClients, MClientGroups);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVProduced(date1, date2, IsSample, IsNotSample);
            MarketingDispatch(date1, date2, IsSample, IsNotSample, MClients, MClientGroups);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVDispatch(date1, date2, IsSample, IsNotSample);
            MarketingStartCount(date1, IsSample, IsNotSample, MClients, MClientGroups);
            MarketingEndCount(date2, IsSample, IsNotSample, MClients, MClientGroups);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVStartCount(date1, IsSample, IsNotSample);
            if (date2 < new DateTime(2016, 07, 01))
                ZOVEndCount(date2, IsSample, IsNotSample);

            CollectProfilOrders();
            CollectTPSOrders();
        }

        private void CollectProfilOrders()
        {

            AllProfilDT.Clear();

            for (int i = 0; i < ProfilMarketingStartCountDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = ProfilMarketingStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(ProfilMarketingStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = ProfilMarketingStartCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilMarketingEndCountDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = ProfilMarketingEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(ProfilMarketingEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = ProfilMarketingEndCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilMarketingProducedDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = ProfilMarketingProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(ProfilMarketingProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = ProfilMarketingProducedDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilMarketingDispatchDT.Rows.Count; i++)
            {
                string rr = ProfilMarketingDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = ProfilMarketingDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(ProfilMarketingDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilMarketingDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilMarketingDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = ProfilMarketingDispatchDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }




            for (int i = 0; i < ProfilZOVStartCountDT.Rows.Count; i++)
            {
                string rr = ProfilZOVStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = ProfilZOVStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(ProfilZOVStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = ProfilZOVStartCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilZOVEndCountDT.Rows.Count; i++)
            {
                string rr = ProfilZOVEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = ProfilZOVEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(ProfilZOVEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = ProfilZOVEndCountDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilZOVProducedDT.Rows.Count; i++)
            {
                string rr = ProfilZOVProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = ProfilZOVProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(ProfilZOVProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = ProfilZOVProducedDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ProfilZOVDispatchDT.Rows.Count; i++)
            {
                string rr = ProfilZOVDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllProfilDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = ProfilZOVDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(ProfilZOVDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllProfilDT.NewRow();
                    NewRow["AccountingName"] = ProfilZOVDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilZOVDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = ProfilZOVDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = ProfilZOVDispatchDT.Rows[i]["Count"];
                    AllProfilDT.Rows.Add(NewRow);
                }
            }

            using (DataView DV = new DataView(AllProfilDT.Copy()))
            {
                DV.Sort = "AccountingName";
                AllProfilDT.Clear();
                AllProfilDT = DV.ToTable();
            }
            foreach (DataRow item in AllProfilDT.Rows)
            {
                if (item["StartCount"] == DBNull.Value)
                    item["StartCount"] = 0;
                if (item["EndCount"] == DBNull.Value)
                    item["EndCount"] = 0;
                if (item["ProducedCount"] == DBNull.Value)
                    item["ProducedCount"] = 0;
                if (item["DispatchCount"] == DBNull.Value)
                    item["DispatchCount"] = 0;
            }
        }

        public void CollectTPSOrders()
        {
            AllTPSDT.Clear();

            for (int i = 0; i < TPSMarketingStartCountDT.Rows.Count; i++)
            {
                string rr = TPSMarketingStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = TPSMarketingStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(TPSMarketingStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = TPSMarketingStartCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSMarketingEndCountDT.Rows.Count; i++)
            {
                string rr = TPSMarketingEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = TPSMarketingEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(TPSMarketingEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = TPSMarketingEndCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSMarketingProducedDT.Rows.Count; i++)
            {
                string rr = TPSMarketingProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = TPSMarketingProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(TPSMarketingProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = TPSMarketingProducedDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSMarketingDispatchDT.Rows.Count; i++)
            {
                string rr = TPSMarketingDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = TPSMarketingDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(TPSMarketingDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSMarketingDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSMarketingDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSMarketingDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = TPSMarketingDispatchDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }




            for (int i = 0; i < TPSZOVStartCountDT.Rows.Count; i++)
            {
                string rr = TPSZOVStartCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["StartCount"] == DBNull.Value)
                            item["StartCount"] = TPSZOVStartCountDT.Rows[i]["Count"];
                        else
                            item["StartCount"] = Convert.ToDecimal(item["StartCount"]) + Convert.ToDecimal(TPSZOVStartCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVStartCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = ProfilMarketingStartCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVStartCountDT.Rows[i]["InvNumber"];
                    NewRow["StartCount"] = TPSZOVStartCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSZOVEndCountDT.Rows.Count; i++)
            {
                string rr = TPSZOVEndCountDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["EndCount"] == DBNull.Value)
                            item["EndCount"] = TPSZOVEndCountDT.Rows[i]["Count"];
                        else
                            item["EndCount"] = Convert.ToDecimal(item["EndCount"]) + Convert.ToDecimal(TPSZOVEndCountDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVEndCountDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSZOVEndCountDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVEndCountDT.Rows[i]["InvNumber"];
                    NewRow["EndCount"] = TPSZOVEndCountDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSZOVProducedDT.Rows.Count; i++)
            {
                string rr = TPSZOVProducedDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["ProducedCount"] == DBNull.Value)
                            item["ProducedCount"] = TPSZOVProducedDT.Rows[i]["Count"];
                        else
                            item["ProducedCount"] = Convert.ToDecimal(item["ProducedCount"]) + Convert.ToDecimal(TPSZOVProducedDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVProducedDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSZOVProducedDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVProducedDT.Rows[i]["InvNumber"];
                    NewRow["ProducedCount"] = TPSZOVProducedDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < TPSZOVDispatchDT.Rows.Count; i++)
            {
                string rr = TPSZOVDispatchDT.Rows[i]["InvNumber"].ToString();
                DataRow[] ItemsRows = AllTPSDT.Select("InvNumber = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        if (item["DispatchCount"] == DBNull.Value)
                            item["DispatchCount"] = TPSZOVDispatchDT.Rows[i]["Count"];
                        else
                            item["DispatchCount"] = Convert.ToDecimal(item["DispatchCount"]) + Convert.ToDecimal(TPSZOVDispatchDT.Rows[i]["Count"]);
                    }
                }
                else
                {
                    DataRow NewRow = AllTPSDT.NewRow();
                    NewRow["AccountingName"] = TPSZOVDispatchDT.Rows[i]["AccountingName"];
                    NewRow["Measure"] = TPSZOVDispatchDT.Rows[i]["Measure"];
                    NewRow["InvNumber"] = TPSZOVDispatchDT.Rows[i]["InvNumber"];
                    NewRow["DispatchCount"] = TPSZOVDispatchDT.Rows[i]["Count"];
                    AllTPSDT.Rows.Add(NewRow);
                }
            }

            using (DataView DV = new DataView(AllTPSDT.Copy()))
            {
                DV.Sort = "AccountingName";
                AllTPSDT.Clear();
                AllTPSDT = DV.ToTable();
            }
            foreach (DataRow item in AllTPSDT.Rows)
            {
                if (item["StartCount"] == DBNull.Value)
                    item["StartCount"] = 0;
                if (item["EndCount"] == DBNull.Value)
                    item["EndCount"] = 0;
                if (item["ProducedCount"] == DBNull.Value)
                    item["ProducedCount"] = 0;
                if (item["DispatchCount"] == DBNull.Value)
                    item["DispatchCount"] = 0;
            }
        }
    }


    public class ProducedProducts
    {
        decimal VAT = 1.0m;
        public FrontsProduced FrontsReport;
        public DecorProduced DecorReport = null;

        public DataTable CurrencyTypesDataTable = null;
        public DataTable ProfilReportTable = null;
        public DataTable TPSReportTable = null;

        public ProducedProducts(ref Infinium.Modules.ZOV.DecorCatalogOrder DecorCatalogOrder)
        {
            FrontsReport = new FrontsProduced();
            DecorReport = new DecorProduced(ref DecorCatalogOrder);

            CreateProfilReportTable();

            CurrencyTypesDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDataTable);
            }
        }

        private void CreateProfilReportTable()
        {
            ProfilReportTable = new DataTable();

            ProfilReportTable.Columns.Add(new DataColumn("UNN", Type.GetType("System.String")));
            ProfilReportTable.Columns.Add(new DataColumn("CurrencyCode", Type.GetType("System.String")));
            ProfilReportTable.Columns.Add(new DataColumn("TPSCurCode", Type.GetType("System.String")));
            ProfilReportTable.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            ProfilReportTable.Columns.Add(new DataColumn("InvNumber", Type.GetType("System.String")));
            ProfilReportTable.Columns.Add(new DataColumn("AccountingName", Type.GetType("System.String")));
            ProfilReportTable.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            ProfilReportTable.Columns.Add(new DataColumn("Price", Type.GetType("System.Decimal")));
            ProfilReportTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            ProfilReportTable.Columns.Add(new DataColumn("Weight", Type.GetType("System.Decimal")));
            ProfilReportTable.Columns.Add(new DataColumn("PackageCount", Type.GetType("System.Int32")));
            ProfilReportTable.Columns.Add(new DataColumn("OriginalPrice", Type.GetType("System.Decimal")));
            ProfilReportTable.Columns.Add(new DataColumn("MarketingCost", Type.GetType("System.Decimal")));

            TPSReportTable = ProfilReportTable.Clone();
        }

        //public void ConvertToCurrency(int CurrencyTypeID, decimal Rate)
        //{
        //    for (int i = 0; i < ProfilReportTable.Rows.Count; i++)
        //    {
        //        //ProfilReportTable.Rows[i]["Price"] = Decimal.Round(Convert.ToDecimal(ProfilReportTable.Rows[i]["Price"]) * Rate, 3, MidpointRounding.AwayFromZero);
        //        ProfilReportTable.Rows[i]["Cost"] = Decimal.Round(Convert.ToDecimal(ProfilReportTable.Rows[i]["Cost"]) * Rate, 3, MidpointRounding.AwayFromZero);
        //    }

        //    for (int i = 0; i < TPSReportTable.Rows.Count; i++)
        //    {
        //        //TPSReportTable.Rows[i]["Price"] = Decimal.Round(Convert.ToDecimal(TPSReportTable.Rows[i]["Price"]) * Rate, 3, MidpointRounding.AwayFromZero);
        //        TPSReportTable.Rows[i]["Cost"] = Decimal.Round(Convert.ToDecimal(TPSReportTable.Rows[i]["Cost"]) * Rate, 3, MidpointRounding.AwayFromZero);
        //    }
        //}

        public void Collect(decimal Rate)
        {
            DataTable DistinctInvNumbersDT;
            using (DataView DV = new DataView(ProfilReportTable))
            {
                DistinctInvNumbersDT = DV.ToTable(true, new string[] { "AccountingName", "InvNumber", "Measure" });
            }

            for (int i = 0; i < DistinctInvNumbersDT.Rows.Count; i++)
            {
                decimal Cost = 0;
                decimal Count = 0;
                decimal Price = 0;
                decimal Weight = 0;
                int DecCount = 2;
                string UNN = ProfilReportTable.Rows[0]["UNN"].ToString();
                string AccountingName = DistinctInvNumbersDT.Rows[i]["AccountingName"].ToString();
                string InvNumber = DistinctInvNumbersDT.Rows[i]["InvNumber"].ToString();
                string Measure = DistinctInvNumbersDT.Rows[i]["Measure"].ToString();
                string CurrencyCode = ProfilReportTable.Rows[0]["CurrencyCode"].ToString();

                //if (Convert.ToInt32(CurrencyCode) == 974)
                //    DecCount = 0;

                DataRow[] InvRows = ProfilReportTable.Select("InvNumber = '" + InvNumber + "' AND AccountingName = '" + AccountingName + "'");

                if (InvRows.Count() == 1)
                {
                    Count = Convert.ToDecimal(InvRows[0]["Count"]);
                    Cost = Convert.ToDecimal(InvRows[0]["Cost"]) * Rate / VAT;
                    Price = Convert.ToDecimal(InvRows[0]["MarketingCost"]) * Rate;
                    //if (Convert.ToInt32(CurrencyCode) == 974)
                    //{
                    //    DecCount = 0;
                    //    Price = Math.Ceiling(Price / 100.0m) * 100.0m;
                    //    Cost = Price * Count;
                    //}
                    InvRows[0]["Price"] = Decimal.Round(Price, DecCount, MidpointRounding.AwayFromZero);
                    InvRows[0]["Cost"] = Decimal.Round(Cost, DecCount, MidpointRounding.AwayFromZero);
                    continue;
                }
                else
                {
                    for (int j = 0; j < InvRows.Count(); j++)
                    {
                        Cost += Convert.ToDecimal(InvRows[j]["Cost"]);
                        Count += Convert.ToDecimal(InvRows[j]["Count"]);
                        Weight += Convert.ToDecimal(InvRows[j]["Weight"]);
                    }
                    decimal MarketingCost = Convert.ToDecimal(InvRows[0]["MarketingCost"]);
                    Price = Convert.ToDecimal(InvRows[0]["MarketingCost"]) * Rate;
                    for (int j = 0; j < InvRows.Count(); j++)
                    {
                        InvRows[j].Delete();
                    }
                    ProfilReportTable.AcceptChanges();
                    Cost = Cost * Rate / VAT;
                    //if (Convert.ToInt32(CurrencyCode) == 974)
                    //{
                    //    DecCount = 0;
                    //    Price = Math.Ceiling(Price / 100.0m) * 100.0m;
                    //    Cost = Price * Count;
                    //}
                    DataRow NewRow = ProfilReportTable.NewRow();
                    NewRow["UNN"] = UNN;
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["AccountingName"] = AccountingName;
                    NewRow["InvNumber"] = InvNumber;
                    NewRow["Measure"] = Measure;
                    NewRow["CurrencyCode"] = CurrencyCode;
                    NewRow["Count"] = Count;
                    NewRow["Price"] = Decimal.Round(Price, DecCount, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(Cost, DecCount, MidpointRounding.AwayFromZero);
                    NewRow["Weight"] = Decimal.Round(Weight, 3, MidpointRounding.AwayFromZero);
                    ProfilReportTable.Rows.Add(NewRow);
                }
            }

            DistinctInvNumbersDT.Dispose();
            using (DataView DV = new DataView(TPSReportTable))
            {
                DistinctInvNumbersDT = DV.ToTable(true, new string[] { "AccountingName", "InvNumber", "Measure" });
            }

            for (int i = 0; i < DistinctInvNumbersDT.Rows.Count; i++)
            {
                decimal Cost = 0;
                decimal Count = 0;
                decimal Price = 0;
                decimal Weight = 0;
                int DecCount = 2;
                string UNN = TPSReportTable.Rows[0]["UNN"].ToString();
                string AccountingName = DistinctInvNumbersDT.Rows[i]["AccountingName"].ToString();
                string InvNumber = DistinctInvNumbersDT.Rows[i]["InvNumber"].ToString();
                string Measure = DistinctInvNumbersDT.Rows[i]["Measure"].ToString();
                string CurrencyCode = TPSReportTable.Rows[0]["CurrencyCode"].ToString();
                string TPSCurCode = TPSReportTable.Rows[0]["TPSCurCode"].ToString();

                //if (TPSCurCode.Equals("974"))
                //    DecCount = 0;

                DataRow[] InvRows = TPSReportTable.Select("InvNumber = '" + InvNumber + "' AND AccountingName = '" + AccountingName + "'");
                if (InvRows.Count() == 1)
                {
                    Count = Convert.ToDecimal(InvRows[0]["Count"]);
                    Cost = Convert.ToDecimal(InvRows[0]["Cost"]) * Rate / VAT;
                    Price = Convert.ToDecimal(InvRows[0]["MarketingCost"]) * Rate;
                    //if (TPSCurCode.Equals("974"))
                    //{
                    //    DecCount = 0;
                    //    Price = Math.Ceiling(Price / 100.0m) * 100.0m;
                    //    Cost = Price * Count;
                    //}
                    InvRows[0]["Price"] = Decimal.Round(Price, DecCount, MidpointRounding.AwayFromZero);
                    InvRows[0]["Cost"] = Decimal.Round(Cost, DecCount, MidpointRounding.AwayFromZero);
                    continue;
                }
                else
                {
                    for (int j = 0; j < InvRows.Count(); j++)
                    {
                        Cost += Convert.ToDecimal(InvRows[j]["Cost"]);
                        Count += Convert.ToDecimal(InvRows[j]["Count"]);
                        Weight += Convert.ToDecimal(InvRows[j]["Weight"]);
                    }
                    decimal MarketingCost = Convert.ToDecimal(InvRows[0]["MarketingCost"]);
                    Price = Convert.ToDecimal(InvRows[0]["MarketingCost"]) * Rate;
                    for (int j = 0; j < InvRows.Count(); j++)
                    {
                        InvRows[j].Delete();
                    }
                    TPSReportTable.AcceptChanges();
                    Cost = Cost * Rate / VAT;
                    //if (Convert.ToInt32(CurrencyCode) == 974)
                    //{
                    //    DecCount = 0;
                    //    Price = Math.Ceiling(Price / 100.0m) * 100.0m;
                    //    Cost = Price * Count;
                    //}
                    DataRow NewRow = TPSReportTable.NewRow();
                    NewRow["UNN"] = UNN;
                    NewRow["MarketingCost"] = MarketingCost;
                    NewRow["AccountingName"] = AccountingName;
                    NewRow["Measure"] = Measure;
                    NewRow["InvNumber"] = InvNumber;
                    NewRow["CurrencyCode"] = CurrencyCode;
                    NewRow["TPSCurCode"] = TPSCurCode;
                    NewRow["Count"] = Count;
                    NewRow["Price"] = Decimal.Round(Price, DecCount, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(Cost, DecCount, MidpointRounding.AwayFromZero);
                    NewRow["Weight"] = Decimal.Round(Weight, 3, MidpointRounding.AwayFromZero);
                    TPSReportTable.Rows.Add(NewRow);
                }
            }
            using (DataView DV = new DataView(ProfilReportTable.Copy(), string.Empty, "AccountingName", DataViewRowState.CurrentRows))
            {
                ProfilReportTable.Clear();
                ProfilReportTable = DV.ToTable();
            }
            using (DataView DV = new DataView(TPSReportTable.Copy(), string.Empty, "AccountingName", DataViewRowState.CurrentRows))
            {
                TPSReportTable.Clear();
                TPSReportTable = DV.ToTable();
            }
        }

        public void GetDateRates(DateTime date, ref decimal EURBYRCurrency)
        {
            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT * FROM DateRates WHERE CAST(Date AS Date) = 
                    '" + date.ToString("yyyy-MM-dd") + "'",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                    {
                        EURBYRCurrency = Convert.ToDecimal(DT.Rows[0]["BYN"]);
                    }
                }
            }
            return;
        }

        //public void NBRBDailyRates(DateTime date, ref decimal EURBYRCurrency)
        //{
        //    string EuroXML = "";
        //    string url = "http://www.nbrb.by/Services/XmlExRates.aspx?ondate=" + date.ToString("MM/dd/yyyy");

        //    HttpWebRequest myHttpWebRequest;
        //    HttpWebResponse myHttpWebResponse;

        //    try
        //    {
        //ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
        //        myHttpWebRequest = (HttpWebRequest)HttpWebRequest.Create(url);
        //        myHttpWebRequest.KeepAlive = false;
        //        myHttpWebRequest.AllowAutoRedirect = true;
        //        CookieContainer cookieContainer = new CookieContainer();
        //        myHttpWebRequest.CookieContainer = cookieContainer;
        //        myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse();
        //    }
        //    catch
        //    {
        //        return;
        //    }

        //    XmlTextReader reader = new XmlTextReader(myHttpWebResponse.GetResponseStream());
        //    //XmlTextReader reader = new XmlTextReader("http://www.nbrb.by/Services/XmlExRates.aspx?ondate=" + date.ToString("MM/dd/yyyy"));
        //    try
        //    {
        //        while (reader.Read())
        //        {
        //            switch (reader.NodeType)
        //            {
        //                case XmlNodeType.Element:
        //                    if (reader.Name == "Currency")
        //                    {
        //                        if (reader.HasAttributes)
        //                        {
        //                            while (reader.MoveToNextAttribute())
        //                            {
        //                                if (reader.Name == "Id")
        //                                {
        //                                    if (reader.Value == "292")
        //                                    {
        //                                        reader.MoveToElement();
        //                                        EuroXML = reader.ReadOuterXml();
        //                                    }
        //                                }
        //                                if (reader.Name == "Id")
        //                                {
        //                                    if (reader.Value == "19")
        //                                    {
        //                                        reader.MoveToElement();
        //                                        EuroXML = reader.ReadOuterXml();
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }

        //                    break;
        //            }
        //        }
        //        XmlDocument euroXmlDocument = new XmlDocument();
        //        euroXmlDocument.LoadXml(EuroXML);
        //        XmlNode xmlNode = euroXmlDocument.SelectSingleNode("Currency/Rate");
        //        bool b = decimal.TryParse(xmlNode.InnerText, out EURBYRCurrency);
        //        if (!b)
        //            EURBYRCurrency = Convert.ToDecimal(xmlNode.InnerText = xmlNode.InnerText.Replace('.', ','));
        //        else
        //            EURBYRCurrency = Convert.ToDecimal(xmlNode.InnerText);
        //    }
        //    catch (WebException ex)
        //    {
        //        string s = ex.Message;
        //    }
        //}


        public void CreateZOVDispReport(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, string FileName, decimal Rate, ArrayList MClients, ArrayList MClientGroups)
        {
            ClearReport();

            string MainOrdersList = string.Empty;

            int pos = 0;


            FrontsReport.DispReport(date1, date2, true, IsSample, IsNotSample, MClients, MClientGroups);
            DecorReport.DispReport(date1, date2, true, IsSample, IsNotSample, MClients, MClientGroups);

            //PROFIL
            if (FrontsReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(FrontsReport.ProfilReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(DecorReport.ProfilReportDataTable.Rows[i]);
                }
            }

            //TPS
            if (FrontsReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(FrontsReport.TPSReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(DecorReport.TPSReportDataTable.Rows[i]);
                }
            }
            Collect(Rate);
            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 8;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Отчет ЗОВ");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 12 * 256);
            sheet1.SetColumnWidth(1, 71 * 256);
            sheet1.SetColumnWidth(2, 8 * 256);
            sheet1.SetColumnWidth(3, 8 * 256);
            sheet1.SetColumnWidth(4, 14 * 256);

            HSSFCell Cell1;

            if (ProfilReportTable.Rows.Count > 0)
            {
                //Профиль
                pos += 2;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-Профиль:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < ProfilReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }

            if (TPSReportTable.Rows.Count > 0)
            {
                //ТПС
                pos++;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-ТПС:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < TPSReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }
            pos++;
            FileName += " ЗОВ";
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }

        public void CreateMarketingDispReport(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, string FileName, decimal Rate, ArrayList MClients, ArrayList MClientGroups)
        {
            ClearReport();

            string MainOrdersList = string.Empty;

            int pos = 0;

            FrontsReport.DispReport(date1, date2, false, IsSample, IsNotSample, MClients, MClientGroups);
            DecorReport.DispReport(date1, date2, false, IsSample, IsNotSample, MClients, MClientGroups);

            //PROFIL
            if (FrontsReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(FrontsReport.ProfilReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(DecorReport.ProfilReportDataTable.Rows[i]);
                }
            }

            //TPS
            if (FrontsReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(FrontsReport.TPSReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(DecorReport.TPSReportDataTable.Rows[i]);
                }
            }

            Collect(Rate);
            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 8;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Отчет Маркетинг");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 12 * 256);
            sheet1.SetColumnWidth(1, 71 * 256);
            sheet1.SetColumnWidth(2, 8 * 256);
            sheet1.SetColumnWidth(3, 8 * 256);
            sheet1.SetColumnWidth(4, 14 * 256);

            HSSFCell Cell1;

            if (ProfilReportTable.Rows.Count > 0)
            {
                //Профиль
                pos += 2;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-Профиль:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < ProfilReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }

            if (TPSReportTable.Rows.Count > 0)
            {
                //ТПС
                pos++;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-ТПС:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < TPSReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }
            pos++;
            FileName += " Маркетинг";
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }

        public void CreateZOVReport(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, string FileName, decimal Rate, ArrayList MClients, ArrayList MClientGroups)
        {
            ClearReport();

            string MainOrdersList = string.Empty;

            int pos = 0;


            FrontsReport.Report(date1, date2, true, IsSample, IsNotSample, MClients, MClientGroups);
            DecorReport.Report(date1, date2, true, IsSample, IsNotSample, MClients, MClientGroups);

            //PROFIL
            if (FrontsReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(FrontsReport.ProfilReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(DecorReport.ProfilReportDataTable.Rows[i]);
                }
            }

            //TPS
            if (FrontsReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(FrontsReport.TPSReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(DecorReport.TPSReportDataTable.Rows[i]);
                }
            }
            Collect(Rate);
            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 8;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Отчет ЗОВ");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 12 * 256);
            sheet1.SetColumnWidth(1, 71 * 256);
            sheet1.SetColumnWidth(2, 8 * 256);
            sheet1.SetColumnWidth(3, 8 * 256);
            sheet1.SetColumnWidth(4, 14 * 256);

            HSSFCell Cell1;

            if (ProfilReportTable.Rows.Count > 0)
            {
                //Профиль
                pos += 2;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-Профиль:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < ProfilReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }

            if (TPSReportTable.Rows.Count > 0)
            {
                //ТПС
                pos++;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-ТПС:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < TPSReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }
            pos++;
            FileName += " ЗОВ";
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }

        public void CreateMarketingReport(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, string FileName, decimal Rate, ArrayList MClients, ArrayList MClientGroups)
        {
            ClearReport();

            string MainOrdersList = string.Empty;

            int pos = 0;

            FrontsReport.Report(date1, date2, false, IsSample, IsNotSample, MClients, MClientGroups);
            DecorReport.Report(date1, date2, false, IsSample, IsNotSample, MClients, MClientGroups);

            //PROFIL
            if (FrontsReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(FrontsReport.ProfilReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.ProfilReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.ProfilReportDataTable.Rows.Count; i++)
                {
                    ProfilReportTable.ImportRow(DecorReport.ProfilReportDataTable.Rows[i]);
                }
            }

            //TPS
            if (FrontsReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(FrontsReport.TPSReportDataTable.Rows[i]);
                }
            }

            if (DecorReport.TPSReportDataTable.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.TPSReportDataTable.Rows.Count; i++)
                {
                    TPSReportTable.ImportRow(DecorReport.TPSReportDataTable.Rows[i]);
                }
            }

            Collect(Rate);
            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 8;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Отчет Маркетинг");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 12 * 256);
            sheet1.SetColumnWidth(1, 71 * 256);
            sheet1.SetColumnWidth(2, 8 * 256);
            sheet1.SetColumnWidth(3, 8 * 256);
            sheet1.SetColumnWidth(4, 14 * 256);

            HSSFCell Cell1;

            if (ProfilReportTable.Rows.Count > 0)
            {
                //Профиль
                pos += 2;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-Профиль:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < ProfilReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(ProfilReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }

            if (TPSReportTable.Rows.Count > 0)
            {
                //ТПС
                pos++;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-ТПС:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Себестоимость");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < TPSReportTable.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(TPSReportTable.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable.Rows[i]["Price"]));
                    Cell1.CellStyle = PriceBelCS;
                    pos++;
                }
            }
            pos++;
            FileName += " Маркетинг";
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }

        public void StartEndProducedReport(DateTime date1, DateTime date2, bool IsSample, bool IsNotSample, string FileName, ArrayList MClients, ArrayList MClientGroups)
        {
            ClearReport();

            string MainOrdersList = string.Empty;

            int pos = 0;
            DataTable ProfilReportTable1 = FrontsReport.AllProfilDT.Clone();
            DataTable TPSReportTable1 = FrontsReport.AllTPSDT.Clone();

            FrontsReport.StartEndProducedDispatchReport(date1, date2, IsSample, IsNotSample, MClients, MClientGroups);
            DecorReport.StartEndProducedDispatchReport(date1, date2, IsSample, IsNotSample, MClients, MClientGroups);
            //PROFIL
            if (FrontsReport.AllProfilDT.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.AllProfilDT.Rows.Count; i++)
                {
                    ProfilReportTable1.ImportRow(FrontsReport.AllProfilDT.Rows[i]);
                }
            }

            if (DecorReport.AllProfilDT.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.AllProfilDT.Rows.Count; i++)
                {
                    ProfilReportTable1.ImportRow(DecorReport.AllProfilDT.Rows[i]);
                }
            }

            //TPS
            if (FrontsReport.AllTPSDT.Rows.Count > 0)
            {
                for (int i = 0; i < FrontsReport.AllTPSDT.Rows.Count; i++)
                {
                    TPSReportTable1.ImportRow(FrontsReport.AllTPSDT.Rows[i]);
                }
            }

            if (DecorReport.AllTPSDT.Rows.Count > 0)
            {
                for (int i = 0; i < DecorReport.AllTPSDT.Rows.Count; i++)
                {
                    TPSReportTable1.ImportRow(DecorReport.AllTPSDT.Rows[i]);
                }
            }

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 8;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("ЗОВ-Профиль");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 12 * 256);
            sheet1.SetColumnWidth(1, 71 * 256);
            sheet1.SetColumnWidth(2, 8 * 256);
            sheet1.SetColumnWidth(3, 8 * 256);
            sheet1.SetColumnWidth(4, 14 * 256);

            HSSFSheet sheet2 = hssfworkbook.CreateSheet("ЗОВ-ТПС");
            sheet2.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet2.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet2.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet2.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet2.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet2.SetColumnWidth(0, 12 * 256);
            sheet2.SetColumnWidth(1, 71 * 256);
            sheet2.SetColumnWidth(2, 8 * 256);
            sheet2.SetColumnWidth(3, 8 * 256);
            sheet2.SetColumnWidth(4, 14 * 256);

            HSSFCell Cell1;

            if (ProfilReportTable1.Rows.Count > 0)
            {
                //Профиль
                pos += 2;

                Cell1 = sheet1.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-Профиль:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("ОстН");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Приход");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Расход");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(6);
                Cell1.SetCellValue("ОстК");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < ProfilReportTable1.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(ProfilReportTable1.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(ProfilReportTable1.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(ProfilReportTable1.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable1.Rows[i]["StartCount"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable1.Rows[i]["ProducedCount"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable1.Rows[i]["DispatchCount"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(6);
                    Cell1.SetCellValue(Convert.ToDouble(ProfilReportTable1.Rows[i]["EndCount"]));
                    Cell1.CellStyle = CountCS;
                    pos++;
                }
            }
            pos = 0;
            if (TPSReportTable1.Rows.Count > 0)
            {
                //ТПС
                pos++;

                Cell1 = sheet2.CreateRow(pos++).CreateCell(0);
                Cell1.SetCellValue("ЗОВ-ТПС:");
                Cell1.CellStyle = SummaryWithoutBorderBelCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Инв.№");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Наименование");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("ОстН");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Приход");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Расход");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(6);
                Cell1.SetCellValue("ОстК");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;

                for (int i = 0; i < TPSReportTable1.Rows.Count; i++)
                {
                    Cell1 = sheet2.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(TPSReportTable1.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(TPSReportTable1.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(TPSReportTable1.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable1.Rows[i]["StartCount"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable1.Rows[i]["ProducedCount"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable1.Rows[i]["DispatchCount"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(6);
                    Cell1.SetCellValue(Convert.ToDouble(TPSReportTable1.Rows[i]["EndCount"]));
                    Cell1.CellStyle = CountCS;
                    pos++;
                }
            }
            pos++;
            FileName += " ЗОВ";
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }

        public void ClearReport()
        {
            ProfilReportTable.Clear();
            TPSReportTable.Clear();
            FrontsReport.ClearReport();
            DecorReport.ClearReport();
        }
    }

    public class ComplaintCostReport
    {
        DataTable ComplaintCostDT = null;

        public ComplaintCostReport()
        {
            ComplaintCostDT = new DataTable();
        }

        public void FilterByOrderDate(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(NewMegaOrders.OrderDate AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(NewMegaOrders.OrderDate AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, NewMegaOrders.OrderNumber, ClientsManagers.Name, NewMegaOrders.ConfirmDateTime, NewMegaOrders.ComplaintProfilCost + NewMegaOrders.ComplaintTPSCost, NewMegaOrders.TotalCost, CurrencyTypes.CurrencyType, NewMegaOrders.Rate, NewMegaOrders.PaymentRate, NewMegaOrders.CurrencyComplaintProfilCost + NewMegaOrders.CurrencyComplaintTPSCost, NewMegaOrders.CurrencyTotalCost
                                     infiniu2_marketingreference.dbo.Clients AS clients ON NewMegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON NewMegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (NewMegaOrders.ComplaintProfilCost > 0 OR NewMegaOrders.ComplaintTPSCost > 0 OR NewMegaOrders.IsComplaint = 1)
            ORDER BY clients.ClientName, NewMegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                ComplaintCostDT.Clear();
                DA.Fill(ComplaintCostDT);
            }
        }

        public void FilterByConfirmDate(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(MegaOrders.ConfirmDateTime AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(MegaOrders.ConfirmDateTime AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.ComplaintProfilCost + MegaOrders.ComplaintTPSCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyComplaintProfilCost + MegaOrders.CurrencyComplaintTPSCost, MegaOrders.CurrencyTotalCost
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.ComplaintProfilCost > 0 OR MegaOrders.ComplaintTPSCost > 0 OR MegaOrders.IsComplaint = 1)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                ComplaintCostDT.Clear();
                DA.Fill(ComplaintCostDT);
            }
        }

        public void FilterByPlanDispatch(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE ((CAST(ProfilDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(ProfilDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')" +
                    " OR (CAST(TPSDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(TPSDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')) ";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.ComplaintProfilCost + MegaOrders.ComplaintTPSCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyComplaintProfilCost + MegaOrders.CurrencyComplaintTPSCost, MegaOrders.CurrencyTotalCost
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.ComplaintProfilCost > 0 OR MegaOrders.ComplaintTPSCost > 0 OR MegaOrders.IsComplaint = 1)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                ComplaintCostDT.Clear();
                DA.Fill(ComplaintCostDT);
            }
        }

        public void FilterByOnProduction(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE ((CAST(ProfilOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(ProfilOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") +
                    "') OR (CAST(TPSOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(TPSOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))";
            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.ComplaintProfilCost + MegaOrders.ComplaintTPSCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyComplaintProfilCost + MegaOrders.CurrencyComplaintTPSCost, MegaOrders.CurrencyTotalCost
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.ComplaintProfilCost > 0 OR MegaOrders.ComplaintTPSCost > 0 OR MegaOrders.IsComplaint = 1)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                ComplaintCostDT.Clear();
                DA.Fill(ComplaintCostDT);
            }
        }

        public void FilterByOnAgreement(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(MegaOrders.OnAgreementDateTime AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(MegaOrders.OnAgreementDateTime AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.ComplaintProfilCost + MegaOrders.ComplaintTPSCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyComplaintProfilCost + MegaOrders.CurrencyComplaintTPSCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.ComplaintProfilCost > 0 OR MegaOrders.ComplaintTPSCost > 0 OR MegaOrders.IsComplaint = 1)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                ComplaintCostDT.Clear();
                DA.Fill(ComplaintCostDT);
            }
        }

        public void FilterByPackages(DateTime DateFrom, DateTime DateTo, int PackageStatusID)
        {
            string Date = "PackingDateTime";

            if (PackageStatusID == 2)
                Date = "StorageDateTime";
            if (PackageStatusID == 3)
                Date = "DispatchDateTime";
            if (PackageStatusID == 4)
                Date = "ExpeditionDateTime";
            string Filter = " WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE CAST(" + Date + " AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(" + Date + " AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))"; ;

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.ComplaintProfilCost + MegaOrders.ComplaintTPSCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyComplaintProfilCost + MegaOrders.CurrencyComplaintTPSCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.ComplaintProfilCost > 0 OR MegaOrders.ComplaintTPSCost > 0 OR MegaOrders.IsComplaint = 1)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                ComplaintCostDT.Clear();
                DA.Fill(ComplaintCostDT);
            }
        }

        public bool HasData
        {
            get
            {
                return ComplaintCostDT.Rows.Count > 0;
            }
        }

        public void Report(string FileName)
        {
            int pos = 0;

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Маркетинг");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            int DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 13 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 13 * 256);

            HSSFCell Cell1;

            DisplayIndex = 0;
            if (ComplaintCostDT.Rows.Count > 0)
            {
                pos += 2;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Менеджер");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Дата согласования");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Сумма рекламации");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Сумма заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Валюта");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Курс");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Расчетный курс");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Итого сумма рекламации");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Итого сумма заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                int ColumnCount = ComplaintCostDT.Columns.Count;
                for (int x = 0; x < ComplaintCostDT.Rows.Count; x++)
                {

                    for (int y = 0; y < ColumnCount; y++)
                    {
                        Type t = ComplaintCostDT.Rows[x][y].GetType();

                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(Convert.ToDouble(ComplaintCostDT.Rows[x][y]));

                            cell.CellStyle = CountCS;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(Convert.ToInt32(ComplaintCostDT.Rows[x][y]));
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                        if (t.Name == "Boolean")
                        {
                            bool b = Convert.ToBoolean(ComplaintCostDT.Rows[x][y]);
                            string str = "Да";
                            if (!b)
                                str = "Нет";
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(str);
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                        if (t.Name == "DateTime")
                        {
                            string dateTime = Convert.ToDateTime(ComplaintCostDT.Rows[x][y]).ToShortDateString();
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(dateTime);
                            cell.CellStyle = SimpleCS;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(ComplaintCostDT.Rows[x][y].ToString());
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                    }
                    pos++;
                }

                string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
                FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
                int j = 1;
                while (file.Exists == true)
                {
                    file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
                }

                FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
                hssfworkbook.Write(NewFile);
                NewFile.Close();

                System.Diagnostics.Process.Start(file.FullName);
            }
        }
    }

    public class TransportCostReport
    {
        DataTable TransportCostDT = null;

        public TransportCostReport()
        {
            TransportCostDT = new DataTable();
        }

        public void FilterByOrderDate(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(NewMegaOrders.OrderDate AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(NewMegaOrders.OrderDate AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, NewMegaOrders.OrderNumber, ClientsManagers.Name, NewMegaOrders.ConfirmDateTime, NewMegaOrders.TransportCost, NewMegaOrders.TotalCost, CurrencyTypes.CurrencyType,  NewMegaOrders.Rate, NewMegaOrders.PaymentRate,NewMegaOrders.CurrencyTransportCost, NewMegaOrders.CurrencyTotalCost
            FROM            NewMegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON NewMegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON NewMegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (NewMegaOrders.TransportCost > 0)
            ORDER BY clients.ClientName, NewMegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                TransportCostDT.Clear();
                DA.Fill(TransportCostDT);
            }
        }

        public void FilterByConfirmDate(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(MegaOrders.ConfirmDateTime AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(MegaOrders.ConfirmDateTime AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.TransportCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyTransportCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.TransportCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                TransportCostDT.Clear();
                DA.Fill(TransportCostDT);
            }
        }

        public void FilterByPlanDispatch(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE ((CAST(ProfilDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(ProfilDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')" +
                    " OR (CAST(TPSDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(TPSDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')) ";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.TransportCost, MegaOrders.TotalCost,CurrencyTypes.CurrencyType,  MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyTransportCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.TransportCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                TransportCostDT.Clear();
                DA.Fill(TransportCostDT);
            }
        }

        public void FilterByOnProduction(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE ((CAST(ProfilOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(ProfilOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") +
                    "') OR (CAST(TPSOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(TPSOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))";
            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.TransportCost, MegaOrders.TotalCost,  CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate,MegaOrders.CurrencyTransportCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.TransportCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                TransportCostDT.Clear();
                DA.Fill(TransportCostDT);
            }
        }

        public void FilterByOnAgreement(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(MegaOrders.OnAgreementDateTime AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(MegaOrders.OnAgreementDateTime AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.TransportCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyTransportCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.TransportCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                TransportCostDT.Clear();
                DA.Fill(TransportCostDT);
            }
        }

        public void FilterByPackages(DateTime DateFrom, DateTime DateTo, int PackageStatusID)
        {
            string Date = "PackingDateTime";

            if (PackageStatusID == 2)
                Date = "StorageDateTime";
            if (PackageStatusID == 3)
                Date = "DispatchDateTime";
            if (PackageStatusID == 4)
                Date = "ExpeditionDateTime";
            string Filter = " WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE CAST(" + Date + " AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(" + Date + " AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))"; ;

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.TransportCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyTransportCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.TransportCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                TransportCostDT.Clear();
                DA.Fill(TransportCostDT);
            }
        }

        public bool HasData
        {
            get
            {
                return TransportCostDT.Rows.Count > 0;
            }
        }

        public void Report(string FileName)
        {
            int pos = 0;

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Маркетинг");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            int DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 13 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 13 * 256);

            HSSFCell Cell1;

            DisplayIndex = 0;
            if (TransportCostDT.Rows.Count > 0)
            {
                pos += 2;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Менеджер");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Дата согласования");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Сумма транспорта");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Сумма заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Валюта");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Курс");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Расчетный курс");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Итого сумма транспорта");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Итого сумма заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                int ColumnCount = TransportCostDT.Columns.Count;
                for (int x = 0; x < TransportCostDT.Rows.Count; x++)
                {

                    for (int y = 0; y < ColumnCount; y++)
                    {
                        Type t = TransportCostDT.Rows[x][y].GetType();

                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(Convert.ToDouble(TransportCostDT.Rows[x][y]));

                            cell.CellStyle = CountCS;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(Convert.ToInt32(TransportCostDT.Rows[x][y]));
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                        if (t.Name == "Boolean")
                        {
                            bool b = Convert.ToBoolean(TransportCostDT.Rows[x][y]);
                            string str = "Да";
                            if (!b)
                                str = "Нет";
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(str);
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                        if (t.Name == "DateTime")
                        {
                            string dateTime = Convert.ToDateTime(TransportCostDT.Rows[x][y]).ToShortDateString();
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(dateTime);
                            cell.CellStyle = SimpleCS;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(TransportCostDT.Rows[x][y].ToString());
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                    }
                    pos++;
                }

                string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
                FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
                int j = 1;
                while (file.Exists == true)
                {
                    file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
                }

                FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
                hssfworkbook.Write(NewFile);
                NewFile.Close();

                System.Diagnostics.Process.Start(file.FullName);
            }
        }
    }

    public class AdditionalCostReport
    {
        DataTable AdditionalCostDT = null;

        public AdditionalCostReport()
        {
            AdditionalCostDT = new DataTable();
        }

        public void FilterByOrderDate(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(NewMegaOrders.OrderDate AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(NewMegaOrders.OrderDate AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, NewMegaOrders.OrderNumber, ClientsManagers.Name, NewMegaOrders.ConfirmDateTime, NewMegaOrders.AdditionalCost, NewMegaOrders.TotalCost, CurrencyTypes.CurrencyType,  NewMegaOrders.Rate, NewMegaOrders.PaymentRate,NewMegaOrders.CurrencyAdditionalCost, NewMegaOrders.CurrencyTotalCost
            FROM            NewMegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON NewMegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON NewMegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (NewMegaOrders.AdditionalCost > 0)
            ORDER BY clients.ClientName, NewMegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                AdditionalCostDT.Clear();
                DA.Fill(AdditionalCostDT);
            }
        }

        public void FilterByConfirmDate(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(MegaOrders.ConfirmDateTime AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(MegaOrders.ConfirmDateTime AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.AdditionalCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyAdditionalCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.AdditionalCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                AdditionalCostDT.Clear();
                DA.Fill(AdditionalCostDT);
            }
        }

        public void FilterByPlanDispatch(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE ((CAST(ProfilDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(ProfilDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')" +
                    " OR (CAST(TPSDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(TPSDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')) ";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.AdditionalCost, MegaOrders.TotalCost,CurrencyTypes.CurrencyType,  MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyAdditionalCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.AdditionalCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                AdditionalCostDT.Clear();
                DA.Fill(AdditionalCostDT);
            }
        }

        public void FilterByOnProduction(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE ((CAST(ProfilOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(ProfilOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") +
                    "') OR (CAST(TPSOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(TPSOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))";
            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.AdditionalCost, MegaOrders.TotalCost,  CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate,MegaOrders.CurrencyAdditionalCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.AdditionalCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                AdditionalCostDT.Clear();
                DA.Fill(AdditionalCostDT);
            }
        }

        public void FilterByOnAgreement(DateTime DateFrom, DateTime DateTo)
        {
            string Filter = " WHERE CAST(MegaOrders.OnAgreementDateTime AS date) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(MegaOrders.OnAgreementDateTime AS date) <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.AdditionalCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyAdditionalCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.AdditionalCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                AdditionalCostDT.Clear();
                DA.Fill(AdditionalCostDT);
            }
        }

        public void FilterByPackages(DateTime DateFrom, DateTime DateTo, int PackageStatusID)
        {
            string Date = "PackingDateTime";

            if (PackageStatusID == 2)
                Date = "StorageDateTime";
            if (PackageStatusID == 3)
                Date = "DispatchDateTime";
            if (PackageStatusID == 4)
                Date = "ExpeditionDateTime";
            string Filter = " WHERE MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE CAST(" + Date + " AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(" + Date + " AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))"; ;

            string SelectCommand = @"SELECT clients.ClientName, MegaOrders.OrderNumber, ClientsManagers.Name, MegaOrders.ConfirmDateTime, MegaOrders.AdditionalCost, MegaOrders.TotalCost, CurrencyTypes.CurrencyType, MegaOrders.Rate, MegaOrders.PaymentRate, MegaOrders.CurrencyAdditionalCost, MegaOrders.CurrencyTotalCost
            FROM            MegaOrders INNER JOIN
                                     infiniu2_marketingreference.dbo.Clients AS clients ON MegaOrders.ClientID = clients.ClientID INNER JOIN
                                     infiniu2_marketingreference.dbo.ClientsManagers AS ClientsManagers ON clients.ManagerID = ClientsManagers.ManagerID INNER JOIN
                                     infiniu2_catalog.dbo.CurrencyTypes AS CurrencyTypes ON MegaOrders.CurrencyTypeID = CurrencyTypes.CurrencyTypeID
            " + Filter + @" AND (MegaOrders.AdditionalCost > 0)
            ORDER BY clients.ClientName, MegaOrders.OrderNumber";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                AdditionalCostDT.Clear();
                DA.Fill(AdditionalCostDT);
            }
        }

        public bool HasData
        {
            get
            {
                return AdditionalCostDT.Rows.Count > 0;
            }
        }

        public void Report(string FileName)
        {
            int pos = 0;

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Маркетинг");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            int DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 13 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 13 * 256);

            HSSFCell Cell1;

            DisplayIndex = 0;
            if (AdditionalCostDT.Rows.Count > 0)
            {
                pos += 2;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Менеджер");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Дата согласования");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Сумма дополнительно");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Сумма заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Валюта");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Курс");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Расчетный курс");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Итого сумма дополнительно");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(DisplayIndex++);
                Cell1.SetCellValue("Итого сумма заказа");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                int ColumnCount = AdditionalCostDT.Columns.Count;
                for (int x = 0; x < AdditionalCostDT.Rows.Count; x++)
                {

                    for (int y = 0; y < ColumnCount; y++)
                    {
                        Type t = AdditionalCostDT.Rows[x][y].GetType();

                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(Convert.ToDouble(AdditionalCostDT.Rows[x][y]));

                            cell.CellStyle = CountCS;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(Convert.ToInt32(AdditionalCostDT.Rows[x][y]));
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                        if (t.Name == "Boolean")
                        {
                            bool b = Convert.ToBoolean(AdditionalCostDT.Rows[x][y]);
                            string str = "Да";
                            if (!b)
                                str = "Нет";
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(str);
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                        if (t.Name == "DateTime")
                        {
                            string dateTime = Convert.ToDateTime(AdditionalCostDT.Rows[x][y]).ToShortDateString();
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(dateTime);
                            cell.CellStyle = SimpleCS;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(pos).CreateCell(y);
                            cell.SetCellValue(AdditionalCostDT.Rows[x][y].ToString());
                            cell.CellStyle = SimpleCS;
                            continue;
                        }
                    }
                    pos++;
                }

                string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
                FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
                int j = 1;
                while (file.Exists == true)
                {
                    file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
                }

                FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
                hssfworkbook.Write(NewFile);
                NewFile.Close();

                System.Diagnostics.Process.Start(file.FullName);
            }
        }
    }

    public class WeightDispatchReport
    {
        DataTable MarketingFrontsWeightDT = null;
        DataTable MarketingDecorWeightDT = null;
        DataTable ZOVFrontsWeightDT = null;
        DataTable ZOVDecorWeightDT = null;

        DataTable AllMarketingWeightDT = null;
        DataTable AllZOVWeightDT = null;

        public WeightDispatchReport()
        {
            MarketingFrontsWeightDT = new DataTable();
            MarketingDecorWeightDT = new DataTable();
            ZOVFrontsWeightDT = new DataTable();
            ZOVDecorWeightDT = new DataTable();

            AllMarketingWeightDT = new DataTable();
            AllMarketingWeightDT.Columns.Add(new DataColumn("ClientName", Type.GetType("System.String")));
            AllMarketingWeightDT.Columns.Add(new DataColumn("FrontsWeight", Type.GetType("System.Decimal")));
            AllMarketingWeightDT.Columns.Add(new DataColumn("DecorWeight", Type.GetType("System.Decimal")));
            AllMarketingWeightDT.Columns.Add(new DataColumn("TotalWeight", Type.GetType("System.Decimal")));

            AllZOVWeightDT = new DataTable();
            AllZOVWeightDT.Columns.Add(new DataColumn("date", Type.GetType("System.String")));
            AllZOVWeightDT.Columns.Add(new DataColumn("ClientName", Type.GetType("System.String")));
            AllZOVWeightDT.Columns.Add(new DataColumn("FrontsWeight", Type.GetType("System.Decimal")));
            AllZOVWeightDT.Columns.Add(new DataColumn("DecorWeight", Type.GetType("System.Decimal")));
            AllZOVWeightDT.Columns.Add(new DataColumn("TotalWeight", Type.GetType("System.Decimal")));
        }

        public void MarketingWeightDispatch(DateTime date1, DateTime date2)
        {
            string Filter = " AND CAST(Packages.DispatchDateTime AS date) >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(Packages.DispatchDateTime AS date) <= '" + date2.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, SUM(PackageDetails.Count * FrontsOrders.Weight / FrontsOrders.Count) AS Count
                FROM FrontsOrders INNER JOIN
                PackageDetails ON FrontsOrders.FrontsOrdersID = PackageDetails.OrderID INNER JOIN
                Packages ON PackageDetails.PackageID = Packages.PackageID AND Packages.ProductType = 0 " + Filter + @" INNER JOIN
                MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID INNER JOIN
                infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
                GROUP BY infiniu2_marketingreference.dbo.Clients.ClientName
                ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketingFrontsWeightDT);
            }
            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, SUM(PackageDetails.Count * DecorOrders.Weight / DecorOrders.Count) AS Count
                FROM DecorOrders INNER JOIN
                PackageDetails ON DecorOrders.DecorOrderID = PackageDetails.OrderID INNER JOIN
                Packages ON PackageDetails.PackageID = Packages.PackageID AND Packages.ProductType = 1 " + Filter + @" INNER JOIN
                MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID INNER JOIN
                infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
                GROUP BY infiniu2_marketingreference.dbo.Clients.ClientName
                ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketingDecorWeightDT);
            }
        }

        public void ZOVWeightDispatch(DateTime date1, DateTime date2)
        {
            string Filter = " AND CAST(Packages.DispatchDateTime AS date) >= '" + date1.ToString("yyyy-MM-dd") +
                " 00:00' AND CAST(Packages.DispatchDateTime AS date) <= '" + date2.ToString("yyyy-MM-dd") + " 23:59'";

            string SelectCommand = @"SELECT CONVERT(nvarchar, Packages.DispatchDateTime, 104) AS date, 
                infiniu2_zovreference.dbo.Clients.ClientName, SUM(PackageDetails.Count * FrontsOrders.Weight / FrontsOrders.Count) AS Count
                FROM FrontsOrders INNER JOIN
                PackageDetails ON FrontsOrders.FrontsOrdersID = PackageDetails.OrderID INNER JOIN
                Packages ON PackageDetails.PackageID = Packages.PackageID AND Packages.ProductType = 0 " + Filter + @" INNER JOIN
                MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                JoinMainOrders ON MainOrders.MainOrderID = JoinMainOrders.MarketMainOrderID INNER JOIN
                infiniu2_zovreference.dbo.Clients ON JoinMainOrders.ZOVClientID = infiniu2_zovreference.dbo.Clients.ClientID
                GROUP BY CONVERT(nvarchar, Packages.DispatchDateTime, 104), infiniu2_zovreference.dbo.Clients.ClientName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(ZOVFrontsWeightDT);
            }
            SelectCommand = @"SELECT CONVERT(nvarchar, Packages.DispatchDateTime, 104) AS date, 
                infiniu2_zovreference.dbo.Clients.ClientName, SUM(PackageDetails.Count * DecorOrders.Weight / DecorOrders.Count) AS Count
                FROM DecorOrders INNER JOIN
                PackageDetails ON DecorOrders.DecorOrderID = PackageDetails.OrderID INNER JOIN
                Packages ON PackageDetails.PackageID = Packages.PackageID AND Packages.ProductType = 1 " + Filter + @" INNER JOIN
                MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
                JoinMainOrders ON MainOrders.MainOrderID = JoinMainOrders.MarketMainOrderID INNER JOIN
                infiniu2_zovreference.dbo.Clients ON JoinMainOrders.ZOVClientID = infiniu2_zovreference.dbo.Clients.ClientID
                GROUP BY CONVERT(nvarchar, Packages.DispatchDateTime, 104), infiniu2_zovreference.dbo.Clients.ClientName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(ZOVDecorWeightDT);
            }
        }

        private void CollectMarketingWeight()
        {
            for (int i = 0; i < MarketingFrontsWeightDT.Rows.Count; i++)
            {
                string rr = MarketingFrontsWeightDT.Rows[i]["ClientName"].ToString();
                DataRow[] ItemsRows = AllMarketingWeightDT.Select("ClientName = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        item["FrontsWeight"] = MarketingFrontsWeightDT.Rows[i]["Count"];
                    }
                }
                else
                {
                    DataRow NewRow = AllMarketingWeightDT.NewRow();
                    NewRow["ClientName"] = MarketingFrontsWeightDT.Rows[i]["ClientName"];
                    NewRow["FrontsWeight"] = MarketingFrontsWeightDT.Rows[i]["Count"];
                    AllMarketingWeightDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < MarketingDecorWeightDT.Rows.Count; i++)
            {
                string rr = MarketingDecorWeightDT.Rows[i]["ClientName"].ToString();
                DataRow[] ItemsRows = AllMarketingWeightDT.Select("ClientName = '" + rr + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        item["DecorWeight"] = MarketingDecorWeightDT.Rows[i]["Count"];
                    }
                }
                else
                {
                    DataRow NewRow = AllMarketingWeightDT.NewRow();
                    NewRow["ClientName"] = MarketingDecorWeightDT.Rows[i]["ClientName"];
                    NewRow["DecorWeight"] = MarketingDecorWeightDT.Rows[i]["Count"];
                    AllMarketingWeightDT.Rows.Add(NewRow);
                }
            }

            using (DataView DV = new DataView(AllMarketingWeightDT.Copy()))
            {
                DV.Sort = "ClientName";
                AllMarketingWeightDT.Clear();
                AllMarketingWeightDT = DV.ToTable();
            }
            foreach (DataRow item in AllMarketingWeightDT.Rows)
            {
                if (item["FrontsWeight"] == DBNull.Value)
                    item["FrontsWeight"] = 0;
                if (item["DecorWeight"] == DBNull.Value)
                    item["DecorWeight"] = 0;
                decimal TotalWeight = Decimal.Round((Convert.ToDecimal(item["FrontsWeight"]) + Convert.ToDecimal(item["DecorWeight"])) / 1000, 2, MidpointRounding.AwayFromZero);
                item["TotalWeight"] = TotalWeight;
            }
        }

        private void CollectZOVWeight()
        {
            for (int i = 0; i < ZOVFrontsWeightDT.Rows.Count; i++)
            {
                string date = ZOVFrontsWeightDT.Rows[i]["date"].ToString();
                string ClientName = ZOVFrontsWeightDT.Rows[i]["ClientName"].ToString();
                DataRow[] ItemsRows = AllZOVWeightDT.Select("date = '" + date + "'" + " AND ClientName = '" + ClientName + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        item["FrontsWeight"] = ZOVFrontsWeightDT.Rows[i]["Count"];
                    }
                }
                else
                {
                    DataRow NewRow = AllZOVWeightDT.NewRow();
                    NewRow["date"] = ZOVFrontsWeightDT.Rows[i]["date"];
                    NewRow["ClientName"] = ZOVFrontsWeightDT.Rows[i]["ClientName"];
                    NewRow["FrontsWeight"] = ZOVFrontsWeightDT.Rows[i]["Count"];
                    AllZOVWeightDT.Rows.Add(NewRow);
                }
            }
            for (int i = 0; i < ZOVDecorWeightDT.Rows.Count; i++)
            {
                string date = ZOVDecorWeightDT.Rows[i]["date"].ToString();
                string ClientName = ZOVDecorWeightDT.Rows[i]["ClientName"].ToString();
                DataRow[] ItemsRows = AllZOVWeightDT.Select("date = '" + date + "'" + " AND ClientName = '" + ClientName + "'");
                if (ItemsRows.Count() > 0)
                {
                    foreach (DataRow item in ItemsRows)
                    {
                        item["DecorWeight"] = ZOVDecorWeightDT.Rows[i]["Count"];
                    }
                }
                else
                {
                    DataRow NewRow = AllZOVWeightDT.NewRow();
                    NewRow["date"] = ZOVDecorWeightDT.Rows[i]["date"];
                    NewRow["ClientName"] = ZOVDecorWeightDT.Rows[i]["ClientName"];
                    NewRow["DecorWeight"] = ZOVDecorWeightDT.Rows[i]["Count"];
                    AllZOVWeightDT.Rows.Add(NewRow);
                }
            }

            using (DataView DV = new DataView(AllZOVWeightDT.Copy()))
            {
                DV.Sort = "date, ClientName";
                AllZOVWeightDT.Clear();
                AllZOVWeightDT = DV.ToTable();
            }
            foreach (DataRow item in AllZOVWeightDT.Rows)
            {
                if (item["FrontsWeight"] == DBNull.Value)
                    item["FrontsWeight"] = 0;
                if (item["DecorWeight"] == DBNull.Value)
                    item["DecorWeight"] = 0;

                decimal TotalWeight = Decimal.Round((Convert.ToDecimal(item["FrontsWeight"]) + Convert.ToDecimal(item["DecorWeight"])) / 1000, 2, MidpointRounding.AwayFromZero);
                item["TotalWeight"] = TotalWeight;
            }
        }

        public void ClearReport()
        {
            MarketingFrontsWeightDT.Clear();
            MarketingDecorWeightDT.Clear();
            ZOVFrontsWeightDT.Clear();
            ZOVDecorWeightDT.Clear();
            AllMarketingWeightDT.Clear();
            AllZOVWeightDT.Clear();
        }

        public void WeightReport(DateTime date1, DateTime date2, string FileName)
        {
            ClearReport();

            MarketingWeightDispatch(date1, date2);
            ZOVWeightDispatch(date1, date2);
            CollectMarketingWeight();
            CollectZOVWeight();

            string MainOrdersList = string.Empty;

            int pos = 0;

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle WeightCS = hssfworkbook.CreateCellStyle();
            WeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            WeightCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            WeightCS.BottomBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            WeightCS.LeftBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            WeightCS.RightBorderColor = HSSFColor.BLACK.index;
            WeightCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            WeightCS.TopBorderColor = HSSFColor.BLACK.index;
            WeightCS.SetFont(SimpleF);

            HSSFCellStyle PriceBelCS = hssfworkbook.CreateCellStyle();
            PriceBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            PriceBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceBelCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceBelCS.SetFont(SimpleF);

            HSSFCellStyle PriceForeignCS = hssfworkbook.CreateCellStyle();
            PriceForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            PriceForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            PriceForeignCS.SetFont(SimpleF);

            HSSFCellStyle ReportCS1 = hssfworkbook.CreateCellStyle();
            ReportCS1.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            ReportCS1.BottomBorderColor = HSSFColor.BLACK.index;
            ReportCS1.SetFont(HeaderF1);

            HSSFCellStyle ReportCS2 = hssfworkbook.CreateCellStyle();
            ReportCS2.SetFont(HeaderF1);

            HSSFCellStyle SummaryWithoutBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithoutBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithoutBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithoutBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithoutBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWeightCS = hssfworkbook.CreateCellStyle();
            SummaryWeightCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWeightCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderBelCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderBelCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            SummaryWithBorderBelCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderBelCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderBelCS.WrapText = true;
            SummaryWithBorderBelCS.SetFont(HeaderF2);

            HSSFCellStyle SummaryWithBorderForeignCS = hssfworkbook.CreateCellStyle();
            SummaryWithBorderForeignCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            SummaryWithBorderForeignCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.BottomBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.LeftBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.RightBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SummaryWithBorderForeignCS.TopBorderColor = HSSFColor.BLACK.index;
            SummaryWithBorderForeignCS.WrapText = true;
            SummaryWithBorderForeignCS.SetFont(HeaderF2);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Маркетинг");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 71 * 256);
            sheet1.SetColumnWidth(1, 13 * 256);
            sheet1.SetColumnWidth(2, 13 * 256);
            sheet1.SetColumnWidth(3, 14 * 256);

            HSSFSheet sheet2 = hssfworkbook.CreateSheet("ЗОВ");
            sheet2.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet2.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet2.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet2.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet2.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet2.SetColumnWidth(0, 13 * 256);
            sheet2.SetColumnWidth(1, 50 * 256);
            sheet2.SetColumnWidth(2, 13 * 256);
            sheet2.SetColumnWidth(3, 14 * 256);
            sheet2.SetColumnWidth(4, 14 * 256);

            HSSFCell Cell1;

            if (AllMarketingWeightDT.Rows.Count > 0)
            {
                //Профиль
                pos += 2;

                Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Фасады, кг");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Декор, кг");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Вес общий, т");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < AllMarketingWeightDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(AllMarketingWeightDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(Convert.ToDouble(AllMarketingWeightDT.Rows[i]["FrontsWeight"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(Convert.ToDouble(AllMarketingWeightDT.Rows[i]["DecorWeight"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(AllMarketingWeightDT.Rows[i]["TotalWeight"]));
                    Cell1.CellStyle = CountCS;
                    pos++;
                }
            }
            pos = 0;

            if (AllZOVWeightDT.Rows.Count > 0)
            {
                //Профиль
                pos += 2;

                Cell1 = sheet2.CreateRow(pos).CreateCell(0);
                Cell1.SetCellValue("Дата");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(1);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(2);
                Cell1.SetCellValue("Фасады, кг");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(3);
                Cell1.SetCellValue("Декор, кг");
                Cell1.CellStyle = SimpleHeaderCS;

                Cell1 = sheet2.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Вес общий, т");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < AllZOVWeightDT.Rows.Count; i++)
                {
                    Cell1 = sheet2.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(AllZOVWeightDT.Rows[i]["date"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(AllZOVWeightDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(Convert.ToDouble(AllZOVWeightDT.Rows[i]["FrontsWeight"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(Convert.ToDouble(AllZOVWeightDT.Rows[i]["DecorWeight"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet2.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(AllZOVWeightDT.Rows[i]["TotalWeight"]));
                    Cell1.CellStyle = CountCS;
                    pos++;
                }
            }

            pos++;

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }

    }

    public class DecorBalancesReport
    {
        DataTable BalancesDT = null;
        HSSFWorkbook hssfworkbook = new HSSFWorkbook();

        public DecorBalancesReport(string FileName)
        {
            BalancesDT = new DataTable();
            BalancesMarketingReport(false);
            BalancesZOVReport(true);
            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        private void BalancesMarketingReport(bool bZOV)
        {
            int pos = 0;

            string SheetName = "Маркетинг";
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            #region Create fonts and styles

            HSSFFont HeaderF = hssfworkbook.CreateFont();
            HeaderF.FontHeightInPoints = 9;
            HeaderF.Boldweight = 9 * 256;
            HeaderF.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS1 = hssfworkbook.CreateCellStyle();
            CountCS1.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            CountCS1.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS1.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS1.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS1.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS1.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS1.RightBorderColor = HSSFColor.BLACK.index;
            CountCS1.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS1.TopBorderColor = HSSFColor.BLACK.index;
            CountCS1.SetFont(SimpleF);

            HSSFCellStyle CountCS2 = hssfworkbook.CreateCellStyle();
            CountCS2.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.0000");
            CountCS2.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS2.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS2.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS2.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS2.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS2.RightBorderColor = HSSFColor.BLACK.index;
            CountCS2.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS2.TopBorderColor = HSSFColor.BLACK.index;
            CountCS2.SetFont(SimpleF);

            HSSFCellStyle CountCS3 = hssfworkbook.CreateCellStyle();
            CountCS3.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            CountCS3.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS3.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS3.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS3.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS3.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS3.RightBorderColor = HSSFColor.BLACK.index;
            CountCS3.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS3.TopBorderColor = HSSFColor.BLACK.index;
            CountCS3.SetFont(SimpleF);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.SetFont(HeaderF);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet(SheetName);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 30 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 20 * 256);

            HSSFCell Cell1;

            string SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(dbo.PackageDetails.Count) AS Expr2
                FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND dbo.DecorOrders.Length = - 1 AND dbo.DecorOrders.Height = - 1 AND 
                dbo.DecorOrders.Width = - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 2;
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, dbo.DecorOrders.Length, 
                SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND 
                dbo.DecorOrders.Length <> - 1 AND dbo.DecorOrders.Height = - 1 AND dbo.DecorOrders.Width = - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName, dbo.DecorOrders.Length
                ORDER BY ProductName, Decor, Color, Patina, dbo.DecorOrders.Length";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS3;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 2;
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(CAST(dbo.DecorOrders.Length * dbo.DecorOrders.Width * dbo.PackageDetails.Count AS decimal(10,2))) AS Expr1, SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND dbo.DecorOrders.Length <> - 1 AND dbo.DecorOrders.Height = - 1 AND 
                dbo.DecorOrders.Width <> - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID AND infiniu2_catalog.dbo.DecorConfig.MeasureID = 2 INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
                foreach (DataRow item in BalancesDT.Rows)
                    item["Expr1"] = Convert.ToDecimal(item["Expr1"]) / 1000;
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("м.п.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(BalancesDT.Rows[i]["Expr1"]));
                    Cell1.CellStyle = CountCS1;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 2;
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(CAST(dbo.DecorOrders.Length * dbo.DecorOrders.Width * dbo.PackageDetails.Count AS decimal(12,4))) AS Expr1, SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND dbo.DecorOrders.Length <> - 1 AND dbo.DecorOrders.Height = - 1 AND 
                dbo.DecorOrders.Width <> - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID AND infiniu2_catalog.dbo.DecorConfig.MeasureID = 1 INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
                foreach (DataRow item in BalancesDT.Rows)
                    item["Expr1"] = Convert.ToDecimal(item["Expr1"]) / 1000000;
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("м.кв.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(BalancesDT.Rows[i]["Expr1"]));
                    Cell1.CellStyle = CountCS2;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(CAST(dbo.DecorOrders.Height * dbo.DecorOrders.Width * dbo.PackageDetails.Count AS decimal(12,4))) AS Expr1, SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND 
                dbo.DecorOrders.Length = - 1 AND dbo.DecorOrders.Height <> - 1 AND dbo.DecorOrders.Width <> - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
                foreach (DataRow item in BalancesDT.Rows)
                    item["Expr1"] = Convert.ToDecimal(item["Expr1"]) / 1000000;
            }
            if (BalancesDT.Rows.Count > 0)
            {
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(BalancesDT.Rows[i]["Expr1"]));
                    Cell1.CellStyle = CountCS2;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 1;
            }

        }

        private void BalancesZOVReport(bool bZOV)
        {
            int pos = 0;

            string SheetName = "ЗОВ";

            #region Create fonts and styles

            HSSFFont HeaderF = hssfworkbook.CreateFont();
            HeaderF.FontHeightInPoints = 9;
            HeaderF.Boldweight = 9 * 256;
            HeaderF.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountCS1 = hssfworkbook.CreateCellStyle();
            CountCS1.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            CountCS1.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS1.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS1.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS1.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS1.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS1.RightBorderColor = HSSFColor.BLACK.index;
            CountCS1.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS1.TopBorderColor = HSSFColor.BLACK.index;
            CountCS1.SetFont(SimpleF);

            HSSFCellStyle CountCS2 = hssfworkbook.CreateCellStyle();
            CountCS2.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.0000");
            CountCS2.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS2.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS2.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS2.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS2.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS2.RightBorderColor = HSSFColor.BLACK.index;
            CountCS2.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS2.TopBorderColor = HSSFColor.BLACK.index;
            CountCS2.SetFont(SimpleF);

            HSSFCellStyle CountCS3 = hssfworkbook.CreateCellStyle();
            CountCS3.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            CountCS3.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS3.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS3.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS3.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS3.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS3.RightBorderColor = HSSFColor.BLACK.index;
            CountCS3.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS3.TopBorderColor = HSSFColor.BLACK.index;
            CountCS3.SetFont(SimpleF);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.SetFont(HeaderF);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet(SheetName);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 30 * 256);
            sheet1.SetColumnWidth(2, 20 * 256);
            sheet1.SetColumnWidth(3, 20 * 256);

            HSSFCell Cell1;

            string SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(dbo.PackageDetails.Count) AS Expr2
                FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND dbo.DecorOrders.Length = - 1 AND dbo.DecorOrders.Height = - 1 AND 
                dbo.DecorOrders.Width = - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 2;
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, dbo.DecorOrders.Length, 
                SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND 
                dbo.DecorOrders.Length <> - 1 AND dbo.DecorOrders.Height = - 1 AND dbo.DecorOrders.Width = - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName, dbo.DecorOrders.Length
                ORDER BY ProductName, Decor, Color, Patina, dbo.DecorOrders.Length";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS3;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 2;
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(CAST(dbo.DecorOrders.Length * dbo.DecorOrders.Width * dbo.PackageDetails.Count AS decimal(10,2))) AS Expr1, SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND dbo.DecorOrders.Length <> - 1 AND dbo.DecorOrders.Height = - 1 AND 
                dbo.DecorOrders.Width <> - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID INNER JOIN
                infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID AND infiniu2_catalog.dbo.DecorConfig.MeasureID = 2 INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
                foreach (DataRow item in BalancesDT.Rows)
                    item["Expr1"] = Convert.ToDecimal(item["Expr1"]) / 1000;
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("м.п.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(BalancesDT.Rows[i]["Expr1"]));
                    Cell1.CellStyle = CountCS1;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 2;
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(CAST(dbo.DecorOrders.Length * dbo.DecorOrders.Width * dbo.PackageDetails.Count AS decimal(12,4))) AS Expr1, SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND dbo.DecorOrders.Length <> - 1 AND dbo.DecorOrders.Height = - 1 AND 
                dbo.DecorOrders.Width <> - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID INNER JOIN
                infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID AND infiniu2_catalog.dbo.DecorConfig.MeasureID = 1 INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
                foreach (DataRow item in BalancesDT.Rows)
                    item["Expr1"] = Convert.ToDecimal(item["Expr1"]) / 1000000;
            }
            if (BalancesDT.Rows.Count > 0)
            {
                Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                Cell1.SetCellValue("м.кв.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                pos++;
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(BalancesDT.Rows[i]["Expr1"]));
                    Cell1.CellStyle = CountCS2;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
            }

            SelectCommand = @"SELECT infiniu2_catalog.dbo.DecorProducts.ProductName AS ProductName, Decor.TechStoreName AS Decor, Colors.TechStoreName AS Color, Patina.PatinaName AS Patina, 
                SUM(CAST(dbo.DecorOrders.Height * dbo.DecorOrders.Width * dbo.PackageDetails.Count AS decimal(12,4))) AS Expr1, SUM(dbo.PackageDetails.Count) AS Expr2 FROM dbo.PackageDetails INNER JOIN
                dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID AND dbo.DecorOrders.FactoryID = 2 AND 
                dbo.DecorOrders.Length = - 1 AND dbo.DecorOrders.Height <> - 1 AND dbo.DecorOrders.Width <> - 1 INNER JOIN
                dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND dbo.Packages.ProductType = 1 AND dbo.Packages.PackageStatusID IN (1, 2, 4) INNER JOIN
                JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID INNER JOIN
                infiniu2_catalog.dbo.DecorProducts ON dbo.DecorOrders.ProductID = infiniu2_catalog.dbo.DecorProducts.ProductID INNER JOIN
                infiniu2_catalog.dbo.TechStore AS Decor ON dbo.DecorOrders.DecorID = Decor.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                infiniu2_catalog.dbo.Patina AS Patina ON dbo.DecorOrders.PatinaID = Patina.PatinaID
                GROUP BY infiniu2_catalog.dbo.DecorProducts.ProductName, Decor.TechStoreName, Colors.TechStoreName, Patina.PatinaName
                ORDER BY ProductName, Decor, Color, Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                BalancesDT.Dispose();
                BalancesDT = new DataTable();
                DA.Fill(BalancesDT);
                foreach (DataRow item in BalancesDT.Rows)
                    item["Expr1"] = Convert.ToDecimal(item["Expr1"]) / 1000000;
            }
            if (BalancesDT.Rows.Count > 0)
            {
                for (int i = 0; i < BalancesDT.Rows.Count; i++)
                {
                    Cell1 = sheet1.CreateRow(pos).CreateCell(0);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["ProductName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(1);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Decor"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(2);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Color"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(3);
                    Cell1.SetCellValue(BalancesDT.Rows[i]["Patina"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(4);
                    Cell1.SetCellValue(Convert.ToDouble(BalancesDT.Rows[i]["Expr1"]));
                    Cell1.CellStyle = CountCS2;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(5);
                    Cell1.SetCellValue(Convert.ToInt32(BalancesDT.Rows[i]["Expr2"]));
                    Cell1.CellStyle = CountCS3;
                    pos++;
                }
                pos += 1;
            }

        }

    }



    public class ClientStoreReport
    {
        DataTable ZOVClientsDataTable = null;
        DataTable FrontsDT = null;
        DataTable FrontsProfilDT = null;
        DataTable FrontsTPSDT = null;
        DataTable DecorDT = null;
        DataTable DecorProfilDT = null;
        DataTable DecorTPSDT = null;

        public ClientStoreReport()
        {
            FrontsDT = new DataTable();
            DecorDT = new DataTable();
        }

        public void FillTables(DateTime date1, ArrayList MClients, ArrayList MClientGroups)
        {
            ZOVClientsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT Clients.*, ClientsGroups.ClientGroupName, Managers.Name FROM Clients INNER JOIN
                         dbo.ClientsGroups ON dbo.Clients.ClientGroupID = dbo.ClientsGroups.ClientGroupID INNER JOIN
                         dbo.Managers ON dbo.Clients.ManagerID = dbo.Managers.ManagerID",
                ConnectionStrings.ZOVReferenceConnectionString))
            {
                DA.Fill(ZOVClientsDataTable);
            }

            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " AND MegaOrders.ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " AND MegaOrders.ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND MegaOrders.ClientID = -1";

            string Filter = " AND Packages.ProductType = 0 AND Packages.PackingDateTime <  '" + date1.ToString("yyyy-MM-dd") +
                " 23:59:59' AND (DispatchDateTime IS NULL OR Packages.DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + " 23:59:59')";

            string SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, Packages.PackingDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.FrontsOrders.FrontsOrdersID, 
                        dbo.PackageDetails.Count, FrontsOrders.Square*dbo.PackageDetails.Count/FrontsOrders.Count as Square, FrontsOrders.FactoryID,
                         infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, 
                         InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr1, ZOVClientID
FROM dbo.PackageDetails INNER JOIN
                         dbo.FrontsOrders ON dbo.PackageDetails.OrderID = dbo.FrontsOrders.FrontsOrdersID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID " + Filter + @" LEFT OUTER JOIN
                         JoinMainOrders ON dbo.FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON dbo.FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON dbo.FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON dbo.FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON dbo.FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON dbo.FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(FrontsDT);
            }
            FrontsDT.Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
            for (int i = 0; i < FrontsDT.Rows.Count; i++)
            {
                if (FrontsDT.Rows[i]["ZOVClientID"] == DBNull.Value)
                    FrontsDT.Rows[i]["ZOVClientID"] = -1;
                else
                    FrontsDT.Rows[i]["ZOVClientName"] = GetZOVClientName(Convert.ToInt32(FrontsDT.Rows[i]["ZOVClientID"]));
            }
            Filter = " AND Packages.ProductType = 1 AND Packages.PackingDateTime <  '" + date1.ToString("yyyy-MM-dd") +
                " 23:59:59' AND (DispatchDateTime IS NULL OR Packages.DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + " 23:59:59')";
            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, Packages.PackingDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.DecorOrders.DecorOrderID, 
                         DecorOrders.FactoryID, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, dbo.DecorOrders.Length, dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, ZOVClientID
FROM dbo.PackageDetails INNER JOIN
                         dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID " + Filter + @" LEFT OUTER JOIN
                         JoinMainOrders ON dbo.DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                        infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.DecorOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorDT);
            }
            DecorDT.Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
            for (int i = 0; i < DecorDT.Rows.Count; i++)
            {
                if (DecorDT.Rows[i]["ZOVClientID"] == DBNull.Value)
                    DecorDT.Rows[i]["ZOVClientID"] = -1;
                else
                    DecorDT.Rows[i]["ZOVClientName"] = GetZOVClientName(Convert.ToInt32(DecorDT.Rows[i]["ZOVClientID"]));
            }
            if (FrontsProfilDT == null)
                FrontsProfilDT = FrontsDT.Clone();
            if (FrontsTPSDT == null)
                FrontsTPSDT = FrontsDT.Clone();
            if (DecorProfilDT == null)
                DecorProfilDT = DecorDT.Clone();
            if (DecorTPSDT == null)
                DecorTPSDT = DecorDT.Clone();
        }

        private string GetZOVClientName(int ClientID)
        {
            DataRow[] Rows = ZOVClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["ClientName"].ToString();
            else
                return string.Empty;
        }

        private void DivideByFactory()
        {
            DataRow[] ItemsRows = FrontsDT.Select("FactoryID = 1");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = FrontsProfilDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                FrontsProfilDT.Rows.Add(NewRow);
            }
            ItemsRows = FrontsDT.Select("FactoryID = 2");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = FrontsTPSDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                FrontsTPSDT.Rows.Add(NewRow);
            }
            ItemsRows = DecorDT.Select("FactoryID = 1");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = DecorProfilDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DecorProfilDT.Rows.Add(NewRow);
            }
            ItemsRows = DecorDT.Select("FactoryID = 2");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = DecorTPSDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DecorTPSDT.Rows.Add(NewRow);
            }
        }

        public bool HasData
        {
            get
            {
                return FrontsDT.Rows.Count > 0 || DecorDT.Rows.Count > 0;
            }
        }

        private void ClearReport()
        {
            FrontsDT.Clear();
            FrontsProfilDT.Clear();
            FrontsTPSDT.Clear();
            DecorDT.Clear();
            DecorProfilDT.Clear();
            DecorTPSDT.Clear();
        }

        public void Report(string FileName)
        {
            DivideByFactory();
            int pos = 0;

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountDecCS = hssfworkbook.CreateCellStyle();
            CountDecCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountDecCS.RightBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountDecCS.TopBorderColor = HSSFColor.BLACK.index;
            CountDecCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFCell Cell1;

            if (FrontsProfilDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады, Профиль");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Фасад");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Квадратура");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < FrontsProfilDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr36"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr37"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr38"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr1"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToDouble(FrontsProfilDT.Rows[i]["Square"]));
                    Cell1.CellStyle = CountDecCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }
            pos = 0;
            if (FrontsTPSDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады, ТПС");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Фасад");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Квадратура");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < FrontsTPSDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr36"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr37"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr38"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr1"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToDouble(FrontsTPSDT.Rows[i]["Square"]));
                    Cell1.CellStyle = CountDecCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }

            pos = 0;
            if (DecorProfilDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор, Профиль");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Артикул");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Высота");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ширина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < DecorProfilDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Height"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Width"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }
            pos = 0;
            if (DecorTPSDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор, ТПС");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Артикул");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Высота");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ширина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < DecorTPSDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Height"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Width"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }


            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }
    }


    public class ClientNotStoredReport
    {
        DataTable ZOVClientsDataTable = null;
        DataTable FrontsDT = null;
        DataTable FrontsProfilDT = null;
        DataTable FrontsTPSDT = null;
        DataTable DecorDT = null;
        DataTable DecorProfilDT = null;
        DataTable DecorTPSDT = null;

        public ClientNotStoredReport()
        {
            FrontsDT = new DataTable();
            DecorDT = new DataTable();
        }

        public void FillTables(DateTime date1, ArrayList MClients, ArrayList MClientGroups)
        {
            ZOVClientsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT Clients.*, ClientsGroups.ClientGroupName, Managers.Name FROM Clients INNER JOIN
                         dbo.ClientsGroups ON dbo.Clients.ClientGroupID = dbo.ClientsGroups.ClientGroupID INNER JOIN
                         dbo.Managers ON dbo.Clients.ManagerID = dbo.Managers.ManagerID",
                ConnectionStrings.ZOVReferenceConnectionString))
            {
                DA.Fill(ZOVClientsDataTable);
            }

            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " AND MegaOrders.ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " AND MegaOrders.ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND MegaOrders.ClientID = -1";

            string Filter = " AND Packages.ProductType = 0 AND PackageStatusID =1 AND Packages.PackingDateTime < '" + date1.ToString("yyyy-MM-dd") +
                " 23:59:59'";

            string SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, Packages.PackingDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.FrontsOrders.FrontsOrdersID, 
                        dbo.PackageDetails.Count, FrontsOrders.Square*dbo.PackageDetails.Count/FrontsOrders.Count as Square, FrontsOrders.FactoryID,
                         infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, 
                         InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr1, ZOVClientID
FROM dbo.PackageDetails INNER JOIN
                         dbo.FrontsOrders ON dbo.PackageDetails.OrderID = dbo.FrontsOrders.FrontsOrdersID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID " + Filter + @" LEFT OUTER JOIN
                         JoinMainOrders ON dbo.FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON dbo.FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON dbo.FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON dbo.FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON dbo.FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON dbo.FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(FrontsDT);
            }
            FrontsDT.Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
            for (int i = 0; i < FrontsDT.Rows.Count; i++)
            {
                if (FrontsDT.Rows[i]["ZOVClientID"] == DBNull.Value)
                    FrontsDT.Rows[i]["ZOVClientID"] = -1;
                else
                    FrontsDT.Rows[i]["ZOVClientName"] = GetZOVClientName(Convert.ToInt32(FrontsDT.Rows[i]["ZOVClientID"]));
            }

            Filter = " AND Packages.ProductType = 1 AND PackageStatusID =1 AND Packages.PackingDateTime < '" + date1.ToString("yyyy-MM-dd") +
                " 23:59:59'";

            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, Packages.PackingDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.DecorOrders.DecorOrderID, 
                         DecorOrders.FactoryID, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, dbo.DecorOrders.Length, dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, ZOVClientID
FROM dbo.PackageDetails INNER JOIN
                         dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID " + Filter + @" LEFT OUTER JOIN
                         JoinMainOrders ON dbo.DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                        infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.DecorOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorDT);
            }
            DecorDT.Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
            for (int i = 0; i < DecorDT.Rows.Count; i++)
            {
                if (DecorDT.Rows[i]["ZOVClientID"] == DBNull.Value)
                    DecorDT.Rows[i]["ZOVClientID"] = -1;
                else
                    DecorDT.Rows[i]["ZOVClientName"] = GetZOVClientName(Convert.ToInt32(DecorDT.Rows[i]["ZOVClientID"]));
            }
            if (FrontsProfilDT == null)
                FrontsProfilDT = FrontsDT.Clone();
            if (FrontsTPSDT == null)
                FrontsTPSDT = FrontsDT.Clone();
            if (DecorProfilDT == null)
                DecorProfilDT = DecorDT.Clone();
            if (DecorTPSDT == null)
                DecorTPSDT = DecorDT.Clone();
        }

        private string GetZOVClientName(int ClientID)
        {
            DataRow[] Rows = ZOVClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["ClientName"].ToString();
            else
                return string.Empty;
        }

        private void DivideByFactory()
        {
            DataRow[] ItemsRows = FrontsDT.Select("FactoryID = 1");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = FrontsProfilDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                FrontsProfilDT.Rows.Add(NewRow);
            }
            ItemsRows = FrontsDT.Select("FactoryID = 2");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = FrontsTPSDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                FrontsTPSDT.Rows.Add(NewRow);
            }
            ItemsRows = DecorDT.Select("FactoryID = 1");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = DecorProfilDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DecorProfilDT.Rows.Add(NewRow);
            }
            ItemsRows = DecorDT.Select("FactoryID = 2");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = DecorTPSDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DecorTPSDT.Rows.Add(NewRow);
            }
        }

        public bool HasData
        {
            get
            {
                return FrontsDT.Rows.Count > 0 || DecorDT.Rows.Count > 0;
            }
        }

        private void ClearReport()
        {
            FrontsDT.Clear();
            FrontsProfilDT.Clear();
            FrontsTPSDT.Clear();
            DecorDT.Clear();
            DecorProfilDT.Clear();
            DecorTPSDT.Clear();
        }

        public void Report(string FileName)
        {
            DivideByFactory();
            int pos = 0;

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountDecCS = hssfworkbook.CreateCellStyle();
            CountDecCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountDecCS.RightBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountDecCS.TopBorderColor = HSSFColor.BLACK.index;
            CountDecCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFCell Cell1;

            if (FrontsProfilDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады, Профиль");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Фасад");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Квадратура");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < FrontsProfilDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr36"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr37"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr38"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr1"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToDouble(FrontsProfilDT.Rows[i]["Square"]));
                    Cell1.CellStyle = CountDecCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }
            pos = 0;
            if (FrontsTPSDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады, ТПС");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Фасад");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Квадратура");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < FrontsTPSDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr36"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr37"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr38"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr1"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToDouble(FrontsTPSDT.Rows[i]["Square"]));
                    Cell1.CellStyle = CountDecCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }

            pos = 0;
            if (DecorProfilDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор, Профиль");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Артикул");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Высота");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ширина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < DecorProfilDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Height"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Width"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }
            pos = 0;
            if (DecorTPSDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор, ТПС");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Артикул");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Высота");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ширина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < DecorTPSDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["PackingDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Height"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Width"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }


            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }
    }



    public class ClientNotPackedReport
    {
        DataTable ZOVClientsDataTable = null;
        DataTable FrontsDT = null;
        DataTable FrontsProfilDT = null;
        DataTable FrontsTPSDT = null;
        DataTable DecorDT = null;
        DataTable DecorProfilDT = null;
        DataTable DecorTPSDT = null;

        public ClientNotPackedReport()
        {
            FrontsDT = new DataTable();
            DecorDT = new DataTable();
        }

        public void FillTables(DateTime date1, DateTime date2, ArrayList MClients, ArrayList MClientGroups)
        {
            ZOVClientsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT Clients.*, ClientsGroups.ClientGroupName, Managers.Name FROM Clients INNER JOIN
                         dbo.ClientsGroups ON dbo.Clients.ClientGroupID = dbo.ClientsGroups.ClientGroupID INNER JOIN
                         dbo.Managers ON dbo.Clients.ManagerID = dbo.Managers.ManagerID",
                ConnectionStrings.ZOVReferenceConnectionString))
            {
                DA.Fill(ZOVClientsDataTable);
            }

            string MClientFilter = string.Empty;
            if (MClients.Count > 0)
            {
                MClientFilter = " AND MegaOrders.ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }
            if (MClientGroups.Count > 0)
            {
                MClientFilter = " AND MegaOrders.ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND MegaOrders.ClientID = -1";

            string Filter = " AND (MainOrders.DocDateTime >= '" + date1.ToString("yyyy-MM-dd") +
                " 23:59:59' AND MainOrders.DocDateTime <= '" + date2.ToString("yyyy-MM-dd") + " 23:59:59')";

            string SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, MainOrders.DocDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.FrontsOrders.FrontsOrdersID, 
                        dbo.PackageDetails.Count, FrontsOrders.Square*dbo.PackageDetails.Count/FrontsOrders.Count as Square, FrontsOrders.FactoryID,
                         infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, 
                         InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr1, ZOVClientID
FROM dbo.PackageDetails INNER JOIN
                         dbo.FrontsOrders ON dbo.PackageDetails.OrderID = dbo.FrontsOrders.FrontsOrdersID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND Packages.ProductType = 0 AND Packages.PackageStatusID=0 LEFT OUTER JOIN
                         JoinMainOrders ON dbo.FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON dbo.FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON dbo.FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON dbo.FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON dbo.FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON dbo.FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID " + Filter + @" INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(FrontsDT);
            }
            FrontsDT.Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
            for (int i = 0; i < FrontsDT.Rows.Count; i++)
            {
                if (FrontsDT.Rows[i]["ZOVClientID"] == DBNull.Value)
                    FrontsDT.Rows[i]["ZOVClientID"] = -1;
                else
                    FrontsDT.Rows[i]["ZOVClientName"] = GetZOVClientName(Convert.ToInt32(FrontsDT.Rows[i]["ZOVClientID"]));
            }

            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, MainOrders.DocDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.DecorOrders.DecorOrderID, 
                         DecorOrders.FactoryID, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, dbo.DecorOrders.Length, dbo.DecorOrders.Height, dbo.DecorOrders.Width, dbo.PackageDetails.Count, ZOVClientID
FROM dbo.PackageDetails INNER JOIN
                         dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID AND Packages.ProductType = 1 AND Packages.PackageStatusID=0 LEFT OUTER JOIN
                         JoinMainOrders ON dbo.DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                        infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.DecorOrders.MainOrderID = dbo.MainOrders.MainOrderID " + Filter + @" INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorDT);
            }
            DecorDT.Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
            for (int i = 0; i < DecorDT.Rows.Count; i++)
            {
                if (DecorDT.Rows[i]["ZOVClientID"] == DBNull.Value)
                    DecorDT.Rows[i]["ZOVClientID"] = -1;
                else
                    DecorDT.Rows[i]["ZOVClientName"] = GetZOVClientName(Convert.ToInt32(DecorDT.Rows[i]["ZOVClientID"]));
            }
            if (FrontsProfilDT == null)
                FrontsProfilDT = FrontsDT.Clone();
            if (FrontsTPSDT == null)
                FrontsTPSDT = FrontsDT.Clone();
            if (DecorProfilDT == null)
                DecorProfilDT = DecorDT.Clone();
            if (DecorTPSDT == null)
                DecorTPSDT = DecorDT.Clone();
        }

        private string GetZOVClientName(int ClientID)
        {
            DataRow[] Rows = ZOVClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["ClientName"].ToString();
            else
                return string.Empty;
        }

        private void DivideByFactory()
        {
            DataRow[] ItemsRows = FrontsDT.Select("FactoryID = 1");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = FrontsProfilDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                FrontsProfilDT.Rows.Add(NewRow);
            }
            ItemsRows = FrontsDT.Select("FactoryID = 2");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = FrontsTPSDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                FrontsTPSDT.Rows.Add(NewRow);
            }
            ItemsRows = DecorDT.Select("FactoryID = 1");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = DecorProfilDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DecorProfilDT.Rows.Add(NewRow);
            }
            ItemsRows = DecorDT.Select("FactoryID = 2");
            foreach (DataRow item in ItemsRows)
            {
                DataRow NewRow = DecorTPSDT.NewRow();
                NewRow.ItemArray = item.ItemArray;
                DecorTPSDT.Rows.Add(NewRow);
            }
        }

        public bool HasData
        {
            get
            {
                return FrontsDT.Rows.Count > 0 || DecorDT.Rows.Count > 0;
            }
        }

        private void ClearReport()
        {
            FrontsDT.Clear();
            FrontsProfilDT.Clear();
            FrontsTPSDT.Clear();
            DecorDT.Clear();
            DecorProfilDT.Clear();
            DecorTPSDT.Clear();
        }

        public void Report(string FileName)
        {
            DivideByFactory();
            int pos = 0;

            //Export to excel
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont HeaderF1 = hssfworkbook.CreateFont();
            HeaderF1.FontHeightInPoints = 11;
            HeaderF1.Boldweight = 11 * 256;
            HeaderF1.FontName = "Calibri";

            HSSFFont HeaderF2 = hssfworkbook.CreateFont();
            HeaderF2.FontHeightInPoints = 10;
            HeaderF2.Boldweight = 10 * 256;
            HeaderF2.FontName = "Calibri";

            HSSFFont HeaderF3 = hssfworkbook.CreateFont();
            HeaderF3.FontHeightInPoints = 9;
            HeaderF3.Boldweight = 9 * 256;
            HeaderF3.FontName = "Calibri";

            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";

            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);

            HSSFCellStyle CountDecCS = hssfworkbook.CreateCellStyle();
            CountDecCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            CountDecCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountDecCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountDecCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountDecCS.RightBorderColor = HSSFColor.BLACK.index;
            CountDecCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountDecCS.TopBorderColor = HSSFColor.BLACK.index;
            CountDecCS.SetFont(SimpleF);

            HSSFCellStyle CountCS = hssfworkbook.CreateCellStyle();
            CountCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            CountCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CountCS.BottomBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CountCS.LeftBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CountCS.RightBorderColor = HSSFColor.BLACK.index;
            CountCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CountCS.TopBorderColor = HSSFColor.BLACK.index;
            CountCS.SetFont(SimpleF);

            HSSFCellStyle SimpleHeaderCS = hssfworkbook.CreateCellStyle();
            SimpleHeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleHeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            SimpleHeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleHeaderCS.WrapText = true;
            SimpleHeaderCS.SetFont(HeaderF3);

            #endregion

            HSSFCell Cell1;

            if (FrontsProfilDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады, Профиль");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата создания");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Фасад");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Квадратура");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < FrontsProfilDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["DocDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr36"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr37"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr38"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Expr1"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToDouble(FrontsProfilDT.Rows[i]["Square"]));
                    Cell1.CellStyle = CountDecCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsProfilDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsProfilDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }
            pos = 0;
            if (FrontsTPSDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады, ТПС");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата создания");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Фасад");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Вставка-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет наполнителя-2");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Квадратура");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < FrontsTPSDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["DocDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr36"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr37"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr38"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Expr1"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToDouble(FrontsTPSDT.Rows[i]["Square"]));
                    Cell1.CellStyle = CountDecCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(FrontsTPSDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(FrontsTPSDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }

            pos = 0;
            if (DecorProfilDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор, Профиль");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата создания");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Артикул");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Высота");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ширина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < DecorProfilDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["DocDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Height"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Width"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorProfilDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorProfilDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }
            pos = 0;
            if (DecorTPSDT.Rows.Count > 0)
            {
                HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор, ТПС");
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                pos += 2;
                int ColIndex = 0;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Клиент ЗОВ");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ заказа");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Дата создания");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Бухг.наим.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Инв.номер");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Артикул");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Цвет");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Длина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Высота");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ширина");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Кол-во");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("Ед.изм.");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("ID упаковки");
                Cell1.CellStyle = SimpleHeaderCS;
                Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                Cell1.SetCellValue("№ упаковки");
                Cell1.CellStyle = SimpleHeaderCS;

                pos++;

                for (int i = 0; i < DecorTPSDT.Rows.Count; i++)
                {
                    ColIndex = 0;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["ClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["ZOVClientName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["OrderNumber"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["DocDateTime"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["AccountingName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["InvNumber"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["TechStoreName"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["Expr35"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Length"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Height"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Width"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["Count"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(DecorTPSDT.Rows[i]["Measure"].ToString());
                    Cell1.CellStyle = SimpleCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["PackageID"]));
                    Cell1.CellStyle = CountCS;
                    Cell1 = sheet1.CreateRow(pos).CreateCell(ColIndex++);
                    Cell1.SetCellValue(Convert.ToInt32(DecorTPSDT.Rows[i]["PackNumber"]));
                    Cell1.CellStyle = CountCS;

                    pos++;
                }
            }


            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
            ClearReport();
        }
    }


    public class GeneralStatisticsMarketing : IAllFrontParameterName
    {
        PercentageDataGrid NonAgreementDataGrid = null;
        PercentageDataGrid AgreementDataGrid = null;
        PercentageDataGrid OnProductionDataGrid = null;
        PercentageDataGrid InProductionDataGrid = null;
        PercentageDataGrid OnStorageDataGrid = null;
        PercentageDataGrid OnExpeditionDataGrid = null;

        CheckedListBox ClientGroupsList = null;

        private DataTable ClientGroupsDataTable = null;

        private DataTable NonAgreementDataTable = null;
        private DataTable AgreementDataTable = null;
        private DataTable OnProductionDataTable = null;
        private DataTable InProductionDataTable = null;
        private DataTable OnStorageDataTable = null;
        private DataTable OnExpeditionDataTable = null;

        private DataTable DecorProductsDataTable = null;
        private DataTable DecorDataTable = null;
        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;

        public BindingSource NonAgreementBindingSource = null;
        public BindingSource AgreementBindingSource = null;
        public BindingSource OnProductionBindingSource = null;
        public BindingSource InProductionBindingSource = null;
        public BindingSource OnStorageBindingSource = null;
        public BindingSource OnExpeditionBindingSource = null;

        decimal NonAgreementProfilCost = 0;
        decimal AgreementProfilCost = 0;
        decimal OnProductionProfilCost = 0;
        decimal InProductionProfilCost = 0;
        decimal OnStorageProfilCost = 0;
        decimal OnExpeditionProfilCost = 0;
        decimal NonAgreementTPSCost = 0;
        decimal AgreementTPSCost = 0;
        decimal OnProductionTPSCost = 0;
        decimal InProductionTPSCost = 0;
        decimal OnStorageTPSCost = 0;
        decimal OnExpeditionTPSCost = 0;

        ArrayList ClientGroups;

        public GeneralStatisticsMarketing(ref CheckedListBox tClientGroupsList,
            ref PercentageDataGrid tNonAgreementDataGrid,
            ref PercentageDataGrid tAgreementDataGrid,
            ref PercentageDataGrid tOnProductionDataGrid,
            ref PercentageDataGrid tInProductionDataGrid,
            ref PercentageDataGrid tOnStorageDataGrid,
            ref PercentageDataGrid tOnExpeditionDataGrid)
        {
            ClientGroupsList = tClientGroupsList;
            NonAgreementDataGrid = tNonAgreementDataGrid;
            AgreementDataGrid = tAgreementDataGrid;
            OnProductionDataGrid = tOnProductionDataGrid;
            InProductionDataGrid = tInProductionDataGrid;
            OnStorageDataGrid = tOnStorageDataGrid;
            OnExpeditionDataGrid = tOnExpeditionDataGrid;

            Initialize();
        }

        private void Create()
        {
            NonAgreementDataTable = new DataTable();
            NonAgreementDataTable.Columns.Add(new DataColumn(("Status"), System.Type.GetType("System.String")));
            NonAgreementDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            NonAgreementDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            AgreementDataTable = new DataTable();
            AgreementDataTable.Columns.Add(new DataColumn(("Status"), System.Type.GetType("System.String")));
            AgreementDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            AgreementDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            OnProductionDataTable = new DataTable();
            OnProductionDataTable.Columns.Add(new DataColumn(("Status"), System.Type.GetType("System.String")));
            OnProductionDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            OnProductionDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            InProductionDataTable = new DataTable();
            InProductionDataTable.Columns.Add(new DataColumn(("Status"), System.Type.GetType("System.String")));
            InProductionDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            InProductionDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));//OnExpedition

            OnStorageDataTable = new DataTable();
            OnStorageDataTable.Columns.Add(new DataColumn(("Status"), System.Type.GetType("System.String")));
            OnStorageDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            OnStorageDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            OnExpeditionDataTable = new DataTable();
            OnExpeditionDataTable.Columns.Add(new DataColumn(("Status"), System.Type.GetType("System.String")));
            OnExpeditionDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            OnExpeditionDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            NonAgreementBindingSource = new BindingSource();
            AgreementBindingSource = new BindingSource();
            OnProductionBindingSource = new BindingSource();
            InProductionBindingSource = new BindingSource();
            OnStorageBindingSource = new BindingSource();
            OnExpeditionBindingSource = new BindingSource();

            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();
            DecorProductsDataTable = new DataTable();
            DecorDataTable = new DataTable();
            ClientGroupsDataTable = new DataTable();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Fill()
        {
            ClientGroups = new ArrayList();

            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            GetColorsDT();
            SelectCommand = @"SELECT * FROM Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            SelectCommand = @"SELECT * FROM InsetTypes";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            SelectCommand = @"SELECT * FROM InsetColors";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
            }
            SelectCommand = @"SELECT ProductID, ProductName, MeasureID, ReportParam FROM DecorProducts" +
                " WHERE (ProductID IN (SELECT ProductID FROM DecorConfig WHERE (Enabled = 1))) ORDER BY ProductName ASC";
            DecorProductsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDataTable);
            }
            DecorDataTable = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ClientGroups",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientGroupsDataTable);
            }
        }

        private void Binding()
        {
            NonAgreementBindingSource.DataSource = NonAgreementDataTable;
            NonAgreementDataGrid.DataSource = NonAgreementBindingSource;

            AgreementBindingSource.DataSource = AgreementDataTable;
            AgreementDataGrid.DataSource = AgreementBindingSource;

            OnProductionBindingSource.DataSource = OnProductionDataTable;
            OnProductionDataGrid.DataSource = OnProductionBindingSource;

            InProductionBindingSource.DataSource = InProductionDataTable;
            InProductionDataGrid.DataSource = InProductionBindingSource;

            OnStorageBindingSource.DataSource = OnStorageDataTable;
            OnStorageDataGrid.DataSource = OnStorageBindingSource;

            OnExpeditionBindingSource.DataSource = OnExpeditionDataTable;
            OnExpeditionDataGrid.DataSource = OnExpeditionBindingSource;

            ClientGroupsList.DataSource = ClientGroupsDataTable;
            ClientGroupsList.DisplayMember = "ClientGroupName";
            ClientGroupsList.ValueMember = "ClientGroupID";
        }

        private void SettingGrid()
        {
            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 1
            };
            NonAgreementDataGrid.Columns["Status"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            NonAgreementDataGrid.Columns["Status"].MinimumWidth = 100;
            NonAgreementDataGrid.Columns["Count"].DefaultCellStyle.Format = "C";
            NonAgreementDataGrid.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;
            NonAgreementDataGrid.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            NonAgreementDataGrid.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            NonAgreementDataGrid.Columns["Count"].Width = 100;
            NonAgreementDataGrid.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            NonAgreementDataGrid.Columns["Measure"].Width = 65;

            AgreementDataGrid.Columns["Status"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            AgreementDataGrid.Columns["Status"].MinimumWidth = 100;
            AgreementDataGrid.Columns["Count"].DefaultCellStyle.Format = "C";
            AgreementDataGrid.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;
            AgreementDataGrid.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            AgreementDataGrid.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            AgreementDataGrid.Columns["Count"].Width = 100;
            AgreementDataGrid.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            AgreementDataGrid.Columns["Measure"].Width = 65;

            OnProductionDataGrid.Columns["Status"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            OnProductionDataGrid.Columns["Status"].MinimumWidth = 100;
            OnProductionDataGrid.Columns["Count"].DefaultCellStyle.Format = "C";
            OnProductionDataGrid.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;
            OnProductionDataGrid.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            OnProductionDataGrid.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            OnProductionDataGrid.Columns["Count"].Width = 100;
            OnProductionDataGrid.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            OnProductionDataGrid.Columns["Measure"].Width = 65;

            InProductionDataGrid.Columns["Status"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            InProductionDataGrid.Columns["Status"].MinimumWidth = 100;
            InProductionDataGrid.Columns["Count"].DefaultCellStyle.Format = "C";
            InProductionDataGrid.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;
            InProductionDataGrid.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            InProductionDataGrid.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            InProductionDataGrid.Columns["Count"].Width = 100;
            InProductionDataGrid.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            InProductionDataGrid.Columns["Measure"].Width = 65;

            OnStorageDataGrid.Columns["Status"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            OnStorageDataGrid.Columns["Status"].MinimumWidth = 100;
            OnStorageDataGrid.Columns["Count"].DefaultCellStyle.Format = "C";
            OnStorageDataGrid.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;
            OnStorageDataGrid.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            OnStorageDataGrid.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            OnStorageDataGrid.Columns["Count"].Width = 100;
            OnStorageDataGrid.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            OnStorageDataGrid.Columns["Measure"].Width = 65;

            OnExpeditionDataGrid.Columns["Status"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            OnExpeditionDataGrid.Columns["Status"].MinimumWidth = 100;
            OnExpeditionDataGrid.Columns["Count"].DefaultCellStyle.Format = "C";
            OnExpeditionDataGrid.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;
            OnExpeditionDataGrid.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            OnExpeditionDataGrid.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            OnExpeditionDataGrid.Columns["Count"].Width = 100;
            OnExpeditionDataGrid.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            OnExpeditionDataGrid.Columns["Measure"].Width = 65;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SettingGrid();

            for (int i = 0; i < ClientGroupsList.Items.Count; i++)
                ClientGroupsList.SetItemChecked(i, true);
            ClientGroupsList.SetItemChecked(1, false);
        }

        private void FillSummaryTable(DataTable Table, decimal ProfilSquare, decimal ProfilPogon, decimal ProfilCount,
            decimal TPSSquare, decimal TPSPogon, decimal TPSCount, decimal CurvedCount)
        {
            DataRow NewRow1 = Table.NewRow();
            NewRow1["Status"] = "Фасады";
            NewRow1["Count"] = ProfilSquare + TPSSquare;
            NewRow1["Measure"] = "м.кв.";
            Table.Rows.Add(NewRow1);

            DataRow NewRow2 = Table.NewRow();
            NewRow2["Status"] = "   Профиль";
            NewRow2["Count"] = ProfilSquare;
            NewRow2["Measure"] = "м.кв.";
            Table.Rows.Add(NewRow2);

            DataRow NewRow3 = Table.NewRow();
            NewRow3["Status"] = "   ТПС";
            NewRow3["Count"] = TPSSquare;
            NewRow3["Measure"] = "м.кв.";
            Table.Rows.Add(NewRow3);

            DataRow NewRow4 = Table.NewRow();
            Table.Rows.Add(NewRow4);

            DataRow CurvedRow = Table.NewRow();
            CurvedRow["Status"] = "Гнутые";
            CurvedRow["Count"] = CurvedCount;
            CurvedRow["Measure"] = "шт.";
            Table.Rows.Add(CurvedRow);

            DataRow NewRow12 = Table.NewRow();
            Table.Rows.Add(NewRow12);

            DataRow NewRow5 = Table.NewRow();
            NewRow5["Status"] = "Погонаж";
            NewRow5["Count"] = ProfilPogon + TPSPogon;
            NewRow5["Measure"] = "м.п.";
            Table.Rows.Add(NewRow5);

            DataRow NewRow6 = Table.NewRow();
            NewRow6["Status"] = "   Профиль";
            NewRow6["Count"] = ProfilPogon;
            NewRow6["Measure"] = "м.п.";
            Table.Rows.Add(NewRow6);

            DataRow NewRow7 = Table.NewRow();
            NewRow7["Status"] = "   ТПС";
            NewRow7["Count"] = TPSPogon;
            NewRow7["Measure"] = "м.п.";
            Table.Rows.Add(NewRow7);

            DataRow NewRow8 = Table.NewRow();
            Table.Rows.Add(NewRow8);

            DataRow NewRow9 = Table.NewRow();
            NewRow9["Status"] = "Декор";
            NewRow9["Count"] = ProfilCount + TPSCount;
            NewRow9["Measure"] = "шт.";
            Table.Rows.Add(NewRow9);

            DataRow NewRow10 = Table.NewRow();
            NewRow10["Status"] = "   Профиль";
            NewRow10["Count"] = ProfilCount;
            NewRow10["Measure"] = "шт.";
            Table.Rows.Add(NewRow10);

            DataRow NewRow11 = Table.NewRow();
            NewRow11["Status"] = "   ТПС";
            NewRow11["Count"] = TPSCount;
            NewRow11["Measure"] = "шт.";
            Table.Rows.Add(NewRow11);
        }

        public void NonAgreementStatistics()
        {
            decimal NonAgreementProfilSquare = 0;
            decimal NonAgreementProfilPogon = 0;
            decimal NonAgreementProfilCount = 0;
            decimal NonAgreementTPSSquare = 0;
            decimal NonAgreementTPSPogon = 0;
            decimal NonAgreementTPSCount = 0;
            int NonAgreementCurvedCount = 0;

            GeneralNonAgreementOrders(ref NonAgreementProfilSquare, ref NonAgreementProfilPogon, ref NonAgreementProfilCount,
                ref NonAgreementTPSSquare, ref NonAgreementTPSPogon, ref NonAgreementTPSCount, ref NonAgreementCurvedCount);

            NonAgreementDataTable.Clear();
            FillSummaryTable(NonAgreementDataTable, NonAgreementProfilSquare, NonAgreementProfilPogon, NonAgreementProfilCount,
                NonAgreementTPSSquare, NonAgreementTPSPogon, NonAgreementTPSCount, NonAgreementCurvedCount);
        }

        public void AgreementStatistics()
        {
            decimal AgreementProfilSquare = 0;
            decimal AgreementProfilPogon = 0;
            decimal AgreementProfilCount = 0;
            decimal AgreementTPSSquare = 0;
            decimal AgreementTPSPogon = 0;
            decimal AgreementTPSCount = 0;
            decimal AgreementCurvedCount = 0;

            GeneralAgreementOrders(ref AgreementProfilSquare, ref AgreementProfilPogon, ref AgreementProfilCount,
                ref AgreementTPSSquare, ref AgreementTPSPogon, ref AgreementTPSCount, ref AgreementCurvedCount);

            AgreementDataTable.Clear();
            FillSummaryTable(AgreementDataTable, AgreementProfilSquare, AgreementProfilPogon, AgreementProfilCount,
                AgreementTPSSquare, AgreementTPSPogon, AgreementTPSCount, AgreementCurvedCount);
        }

        public void OnProductionStatistics()
        {
            decimal OnProductionProfilSquare = 0;
            decimal OnProductionProfilPogon = 0;
            decimal OnProductionProfilCount = 0;
            decimal OnProductionTPSSquare = 0;
            decimal OnProductionTPSPogon = 0;
            decimal OnProductionTPSCount = 0;
            decimal OnProductionCurvedCount = 0;

            GeneralOnProductionOrders(ref OnProductionProfilSquare, ref OnProductionProfilPogon, ref OnProductionProfilCount,
                ref OnProductionTPSSquare, ref OnProductionTPSPogon, ref OnProductionTPSCount, ref OnProductionCurvedCount);

            OnProductionDataTable.Clear();
            FillSummaryTable(OnProductionDataTable, OnProductionProfilSquare, OnProductionProfilPogon, OnProductionProfilCount,
                OnProductionTPSSquare, OnProductionTPSPogon, OnProductionTPSCount, OnProductionCurvedCount);
        }

        public void InProductionStatistics()
        {
            decimal InProductionProfilSquare = 0;
            decimal InProductionProfilPogon = 0;
            decimal InProductionProfilCount = 0;
            decimal InProductionTPSSquare = 0;
            decimal InProductionTPSPogon = 0;
            decimal InProductionTPSCount = 0;
            decimal InProductionCurvedCount = 0;

            GeneralInProductionOrders(ref InProductionProfilSquare, ref InProductionProfilPogon, ref InProductionProfilCount,
                ref InProductionTPSSquare, ref InProductionTPSPogon, ref InProductionTPSCount, ref InProductionCurvedCount);

            InProductionDataTable.Clear();
            FillSummaryTable(InProductionDataTable, InProductionProfilSquare, InProductionProfilPogon, InProductionProfilCount,
                InProductionTPSSquare, InProductionTPSPogon, InProductionTPSCount, InProductionCurvedCount);
        }

        public void OnStorageStatistics()
        {
            decimal OnStorageProfilSquare = 0;
            decimal OnStorageProfilPogon = 0;
            decimal OnStorageProfilCount = 0;
            decimal OnStorageTPSSquare = 0;
            decimal OnStorageTPSPogon = 0;
            decimal OnStorageTPSCount = 0;
            decimal OnStorageCurvedCount = 0;

            FillTables(DateTime.Now, ref OnStorageProfilSquare, ref OnStorageProfilPogon, ref OnStorageProfilCount,
                ref OnStorageTPSSquare, ref OnStorageTPSPogon, ref OnStorageTPSCount, ref OnStorageCurvedCount);

            OnStorageDataTable.Clear();
            FillSummaryTable(OnStorageDataTable, OnStorageProfilSquare, OnStorageProfilPogon, OnStorageProfilCount,
                OnStorageTPSSquare, OnStorageTPSPogon, OnStorageTPSCount, OnStorageCurvedCount);
        }

        public void OnExpeditionStatistics()
        {
            decimal OnExpeditionProfilSquare = 0;
            decimal OnExpeditionProfilPogon = 0;
            decimal OnExpeditionProfilCount = 0;
            decimal OnExpeditionTPSSquare = 0;
            decimal OnExpeditionTPSPogon = 0;
            decimal OnExpeditionTPSCount = 0;
            decimal OnExpeditionCurvedCount = 0;

            GeneralOnExpeditionOrders(ref OnExpeditionProfilSquare, ref OnExpeditionProfilPogon, ref OnExpeditionProfilCount,
                ref OnExpeditionTPSSquare, ref OnExpeditionTPSPogon, ref OnExpeditionTPSCount, ref OnExpeditionCurvedCount);

            OnExpeditionDataTable.Clear();
            FillSummaryTable(OnExpeditionDataTable, OnExpeditionProfilSquare, OnExpeditionProfilPogon, OnExpeditionProfilCount,
                OnExpeditionTPSSquare, OnExpeditionTPSPogon, OnExpeditionTPSCount, OnExpeditionCurvedCount);
        }

        public void GetNonAgreementCost(ref decimal ProfilCost, ref decimal TPSCost)
        {
            ProfilCost = NonAgreementProfilCost;
            TPSCost = NonAgreementTPSCost;
        }

        public void GetAgreementCost(ref decimal ProfilCost, ref decimal TPSCost)
        {
            ProfilCost = AgreementProfilCost;
            TPSCost = AgreementTPSCost;
        }

        public void GetOnProductionCost(ref decimal ProfilCost, ref decimal TPSCost)
        {
            ProfilCost = OnProductionProfilCost;
            TPSCost = OnProductionTPSCost;
        }

        public void GetInProductionCost(ref decimal ProfilCost, ref decimal TPSCost)
        {
            ProfilCost = InProductionProfilCost;
            TPSCost = InProductionTPSCost;
        }

        public void GetOnStorageCost(ref decimal ProfilCost, ref decimal TPSCost)
        {
            ProfilCost = OnStorageProfilCost;
            TPSCost = OnStorageTPSCost;
        }

        public void GetOnExpeditionCost(ref decimal ProfilCost, ref decimal TPSCost)
        {
            ProfilCost = OnExpeditionProfilCost;
            TPSCost = OnExpeditionTPSCost;
        }

        public void GetClientGroup()
        {
            ClientGroups.Clear();
            foreach (object itemChecked in ClientGroupsList.CheckedItems)
            {
                DataRowView castedItem = (DataRowView)itemChecked;
                ClientGroups.Add(Convert.ToInt32(castedItem["ClientGroupID"]));
            }
        }

        public void GeneralNonAgreementOrders(ref decimal ProfilSquare,
            ref decimal ProfilPogon, ref decimal ProfilCount, ref decimal TPSSquare,
            ref decimal TPSPogon, ref decimal TPSCount, ref int CurvedCount)
        {
            bool CheckZOV = GetZOV;
            string MegaOrderFilter = " AND ClientID = -1";

            NonAgreementProfilCost = 0;
            NonAgreementTPSCost = 0;

            if (ClientGroups.Count > 0)
            {
                MegaOrderFilter = " AND ClientID IN (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<int>().ToArray()) + "))";
            }

            using (DataTable DT = new DataTable())
            {
                //ФАСАДЫ НА СОГЛАСОВАНИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM NewFrontsOrders" +
                    " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM NewMainOrders" +
                    " WHERE ProfilProductionStatusID=1" +
                    " AND ProfilStorageStatusID=1" +
                    " AND ProfilExpeditionStatusID=1" +
                    " AND ProfilDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM NewMegaOrders" +
                    " WHERE ((AgreementStatusID=0 AND CreatedByClient=0) OR AgreementStatusID=1)" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            ProfilSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        NonAgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE MegaOrderID = 0)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                ProfilSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            NonAgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                ProfilSquare = Decimal.Round(ProfilSquare, 1, MidpointRounding.AwayFromZero);
                NonAgreementProfilCost = Decimal.Round(NonAgreementProfilCost, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM NewFrontsOrders" +
                    " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM NewMainOrders" +
                    " WHERE TPSProductionStatusID=1" +
                    " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                    " AND TPSDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM NewMegaOrders" +
                    " WHERE ((AgreementStatusID=0 AND CreatedByClient=0) OR AgreementStatusID=1)" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            TPSSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        NonAgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE MegaOrderID = 0)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                TPSSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            NonAgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                TPSSquare = Decimal.Round(TPSSquare, 1, MidpointRounding.AwayFromZero);
                NonAgreementTPSCost = Decimal.Round(NonAgreementTPSCost, 1, MidpointRounding.AwayFromZero);


                //ДЕКОР НА СОГЛАСОВАНИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT NewDecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM NewDecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON NewDecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE NewDecorOrders.FactoryID=1" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM NewMainOrders" +
                    " WHERE ProfilProductionStatusID=1" +
                    " AND ProfilStorageStatusID=1" +
                    " AND ProfilExpeditionStatusID=1" +
                    " AND ProfilDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM NewMegaOrders" +
                    " WHERE ((AgreementStatusID=0 AND CreatedByClient=0) OR AgreementStatusID=1)" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            ProfilCount += Convert.ToDecimal(Row["Count"]);
                        }
                        NonAgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=1" +
                        " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE MegaOrderID = 0)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                ProfilCount += Convert.ToDecimal(Row["Count"]);
                            }
                            NonAgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                NonAgreementProfilCost = Decimal.Round(NonAgreementProfilCost, 1, MidpointRounding.AwayFromZero);
                ProfilPogon = Decimal.Round(ProfilPogon, 1, MidpointRounding.AwayFromZero);
                ProfilCount = Decimal.Round(ProfilCount, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT NewDecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM NewDecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON NewDecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE NewDecorOrders.FactoryID=2" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM NewMainOrders" +
                    " WHERE TPSProductionStatusID=1" +
                    " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                    " AND TPSDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM NewMegaOrders" +
                    " WHERE ((AgreementStatusID=0 AND CreatedByClient=0) OR AgreementStatusID=1)" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            TPSCount += Convert.ToDecimal(Row["Count"]);
                        }
                        NonAgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=2" +
                        " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE MegaOrderID = 0)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                TPSCount += Convert.ToDecimal(Row["Count"]);
                            }
                            NonAgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                NonAgreementTPSCost = Decimal.Round(NonAgreementTPSCost, 1, MidpointRounding.AwayFromZero);
                TPSPogon = Decimal.Round(TPSPogon, 1, MidpointRounding.AwayFromZero);
                TPSCount = Decimal.Round(TPSCount, 1, MidpointRounding.AwayFromZero);
            }
        }

        public void GeneralAgreementOrders(ref decimal ProfilSquare,
            ref decimal ProfilPogon, ref decimal ProfilCount, ref decimal TPSSquare,
            ref decimal TPSPogon, ref decimal TPSCount, ref decimal CurvedCount)
        {
            bool CheckZOV = GetZOV;
            string MegaOrderFilter = " AND ClientID = -1";

            AgreementProfilCost = 0;
            AgreementTPSCost = 0;

            if (ClientGroups.Count > 0)
            {
                MegaOrderFilter = " AND ClientID IN (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<int>().ToArray()) + "))";
            }

            using (DataTable DT = new DataTable())
            {
                //ФАСАДЫ НА СОГЛАСОВАНИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID=1" +
                    " AND ProfilStorageStatusID=1" +
                    " AND ProfilExpeditionStatusID=1" +
                    " AND ProfilDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            ProfilSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        AgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID=1" +
                        " AND ProfilStorageStatusID=1" +
                        " AND ProfilExpeditionStatusID=1" +
                        " AND ProfilDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                ProfilSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            AgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                ProfilSquare = Decimal.Round(ProfilSquare, 1, MidpointRounding.AwayFromZero);
                AgreementProfilCost = Decimal.Round(AgreementProfilCost, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID=1" +
                    " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                    " AND TPSDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            TPSSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        AgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID=1" +
                        " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                        " AND TPSDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                TPSSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            AgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                TPSSquare = Decimal.Round(TPSSquare, 1, MidpointRounding.AwayFromZero);
                AgreementTPSCost = Decimal.Round(AgreementTPSCost, 1, MidpointRounding.AwayFromZero);


                //ДЕКОР НА СОГЛАСОВАНИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=1" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID=1" +
                    " AND ProfilStorageStatusID=1" +
                    " AND ProfilExpeditionStatusID=1" +
                    " AND ProfilDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            ProfilCount += Convert.ToDecimal(Row["Count"]);
                        }
                        AgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=1" +
                        " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID=1" +
                        " AND ProfilStorageStatusID=1" +
                        " AND ProfilExpeditionStatusID=1" +
                        " AND ProfilDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                ProfilCount += Convert.ToDecimal(Row["Count"]);
                            }
                            AgreementProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                AgreementProfilCost = Decimal.Round(AgreementProfilCost, 1, MidpointRounding.AwayFromZero);
                ProfilPogon = Decimal.Round(ProfilPogon, 1, MidpointRounding.AwayFromZero);
                ProfilCount = Decimal.Round(ProfilCount, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=2" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID=1" +
                    " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                    " AND TPSDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            TPSCount += Convert.ToDecimal(Row["Count"]);
                        }
                        AgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=2" +
                        " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID=1" +
                        " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                        " AND TPSDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                TPSCount += Convert.ToDecimal(Row["Count"]);
                            }
                            AgreementTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                AgreementTPSCost = Decimal.Round(AgreementTPSCost, 1, MidpointRounding.AwayFromZero);
                TPSPogon = Decimal.Round(TPSPogon, 1, MidpointRounding.AwayFromZero);
                TPSCount = Decimal.Round(TPSCount, 1, MidpointRounding.AwayFromZero);
            }
        }

        public void GeneralOnProductionOrders(ref decimal ProfilSquare,
            ref decimal ProfilPogon, ref decimal ProfilCount, ref decimal TPSSquare,
            ref decimal TPSPogon, ref decimal TPSCount, ref decimal CurvedCount)
        {
            bool CheckZOV = GetZOV;
            string MegaOrderFilter = " AND ClientID = -1";

            OnProductionProfilCost = 0;
            OnProductionTPSCost = 0;

            if (ClientGroups.Count > 0)
            {
                MegaOrderFilter = " AND ClientID IN (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<int>().ToArray()) + "))";
            }

            using (DataTable DT = new DataTable())
            {
                //ФАСАДЫ НА СОГЛАСОВАНИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Width, Cost, Square, Count FROM FrontsOrders" +
                    " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID=3" +
                    " AND ProfilStorageStatusID=1" +
                    " AND ProfilExpeditionStatusID=1" +
                    " AND ProfilDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            ProfilSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        OnProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Width, Cost, Square, Count FROM FrontsOrders" +
                        " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID=3" +
                        " AND ProfilStorageStatusID=1" +
                        " AND ProfilExpeditionStatusID=1" +
                        " AND ProfilDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                ProfilSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            OnProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                ProfilSquare = Decimal.Round(ProfilSquare, 1, MidpointRounding.AwayFromZero);
                OnProductionProfilCost = Decimal.Round(OnProductionProfilCost, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Width, Cost, Square, Count FROM FrontsOrders" +
                    " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID=3" +
                    " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                    " AND TPSDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            TPSSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        OnProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Width, Cost, Square, Count FROM FrontsOrders" +
                        " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID=3" +
                        " AND TPSStorageStatusID=1" +
                        " AND TPSExpeditionStatusID=1" +
                        " AND TPSDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                TPSSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            OnProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                TPSSquare = Decimal.Round(TPSSquare, 1, MidpointRounding.AwayFromZero);
                OnProductionTPSCost = Decimal.Round(OnProductionTPSCost, 1, MidpointRounding.AwayFromZero);


                //ДЕКОР НА СОГЛАСОВАНИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=1" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID=3" +
                    " AND ProfilStorageStatusID=1" +
                    " AND ProfilExpeditionStatusID=1" +
                    " AND ProfilDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            ProfilCount += Convert.ToDecimal(Row["Count"]);
                        }
                        OnProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=1" +
                        " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID=3" +
                        " AND ProfilStorageStatusID=1" +
                        " AND ProfilExpeditionStatusID=1" +
                        " AND ProfilDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                ProfilCount += Convert.ToDecimal(Row["Count"]);
                            }
                            OnProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                OnProductionProfilCost = Decimal.Round(OnProductionProfilCost, 1, MidpointRounding.AwayFromZero);
                ProfilPogon = Decimal.Round(ProfilPogon, 1, MidpointRounding.AwayFromZero);
                ProfilCount = Decimal.Round(ProfilCount, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=2" +
                    " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID=3" +
                    " AND TPSStorageStatusID=1" +
                    " AND TPSExpeditionStatusID=1" +
                    " AND TPSDispatchStatusID=1" +
                    " AND MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE AgreementStatusID=2" + MegaOrderFilter + "))", ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            TPSCount += Convert.ToDecimal(Row["Count"]);
                        }
                        OnProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Cost, DecorOrders.Length, DecorOrders.Height, MeasureID, Count FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=2" +
                        " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID=3" +
                        " AND TPSStorageStatusID=1" +
                        " AND TPSExpeditionStatusID=1" +
                        " AND TPSDispatchStatusID=1)", ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                TPSCount += Convert.ToDecimal(Row["Count"]);
                            }
                            OnProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                OnProductionTPSCost = Decimal.Round(OnProductionTPSCost, 1, MidpointRounding.AwayFromZero);
                TPSPogon = Decimal.Round(TPSPogon, 1, MidpointRounding.AwayFromZero);
                TPSCount = Decimal.Round(TPSCount, 1, MidpointRounding.AwayFromZero);
            }
        }

        public void GeneralInProductionOrders(ref decimal ProfilSquare,
            ref decimal ProfilPogon, ref decimal ProfilCount, ref decimal TPSSquare,
            ref decimal TPSPogon, ref decimal TPSCount, ref decimal CurvedCount)
        {
            bool CheckZOV = GetZOV;
            string MegaOrderFilter = " AND MainOrderID = -1";

            InProductionProfilCost = 0;
            InProductionTPSCost = 0;

            if (ClientGroups.Count > 0)
            {
                MegaOrderFilter = " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                       " WHERE ClientID IN (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                       " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<int>().ToArray()) + "))))";
            }

            using (DataTable DT = new DataTable())
            {
                //ФАСАДЫ В ПРОИЗВОДСТВЕ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=1 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=1 AND ProductType=0))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID = 2 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=1 AND ProfilDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            ProfilSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        InProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=1 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=1 AND ProductType=0))" +
                        " UNION" +
                        " SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID = 2 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=1 AND ProfilDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                ProfilSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            InProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                ProfilSquare = Decimal.Round(ProfilSquare, 1, MidpointRounding.AwayFromZero);
                InProductionProfilCost = Decimal.Round(InProductionProfilCost, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=2 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=2 AND ProductType=0))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID = 2 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=1 AND TPSDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            TPSSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        InProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=2 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=2 AND ProductType=0))" +
                        " UNION" +
                        " SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID = 2 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=1 AND TPSDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                TPSSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            InProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                TPSSquare = Decimal.Round(TPSSquare, 1, MidpointRounding.AwayFromZero);
                InProductionTPSCost = Decimal.Round(InProductionTPSCost, 1, MidpointRounding.AwayFromZero);


                //ДЕКОР В ПРОИЗВОДСТВЕ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=1 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=1 AND ProductType=1))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID = 2 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=1 AND ProfilDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            ProfilCount += Convert.ToDecimal(Row["Count"]);
                        }
                        InProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=1 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=1 AND ProductType=1))" +
                        " UNION" +
                        " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID = 2 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=1 AND ProfilDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                ProfilCount += Convert.ToDecimal(Row["Count"]);
                            }
                            InProductionProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                InProductionProfilCost = Decimal.Round(InProductionProfilCost, 1, MidpointRounding.AwayFromZero);
                ProfilPogon = Decimal.Round(ProfilPogon, 1, MidpointRounding.AwayFromZero);
                ProfilCount = Decimal.Round(ProfilCount, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=2 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=2 AND ProductType=1))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID = 2 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=1 AND TPSDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            TPSCount += Convert.ToDecimal(Row["Count"]);
                        }
                        InProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }

                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=2 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=0) AND FactoryID=2 AND ProductType=1))" +
                        " UNION" +
                        " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID = 2 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=1 AND TPSDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                TPSCount += Convert.ToDecimal(Row["Count"]);
                            }
                            InProductionTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                InProductionTPSCost = Decimal.Round(InProductionTPSCost, 1, MidpointRounding.AwayFromZero);
                TPSPogon = Decimal.Round(TPSPogon, 1, MidpointRounding.AwayFromZero);
                TPSCount = Decimal.Round(TPSCount, 1, MidpointRounding.AwayFromZero);
            }
        }


        public void FillTables(DateTime date1, ref decimal ProfilSquare,
            ref decimal ProfilPogon, ref decimal ProfilCount, ref decimal TPSSquare,
            ref decimal TPSPogon, ref decimal TPSCount, ref decimal CurvedCount)
        {
            string MClientFilter = string.Empty;
            if (ClientGroups.Count > 0)
            {
                MClientFilter = " AND MegaOrders.ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            if (ClientGroups.Count < 1)
                MClientFilter = " AND MegaOrders.ClientID = -1";

            string Filter = " AND Packages.ProductType = 0 AND Packages.PackingDateTime <  '" + date1.ToString("yyyy-MM-dd") +
                " 23:59:59' AND (DispatchDateTime IS NULL OR Packages.DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + " 23:59:59')";

            string SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, Packages.PackingDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.FrontsOrders.FrontsOrdersID, 
                        dbo.PackageDetails.Count, FrontsOrders.Cost*dbo.PackageDetails.Count/FrontsOrders.Count as Cost, FrontsOrders.Square*dbo.PackageDetails.Count/FrontsOrders.Count as Square, FrontsOrders.FactoryID, FrontsOrders.Width,
                         infiniu2_catalog.dbo.FrontsConfig.AccountingName, infiniu2_catalog.dbo.FrontsConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, 
                         InsetTypes.TechStoreName AS Expr36, InsetColors.TechStoreName AS Expr37, TechnoInsetTypes.TechStoreName AS Expr38, TechnoInsetColors.TechStoreName AS Expr1
FROM dbo.PackageDetails INNER JOIN
                         dbo.FrontsOrders ON dbo.PackageDetails.OrderID = dbo.FrontsOrders.FrontsOrdersID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID " + Filter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.FrontsOrders.FrontID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.FrontsOrders.ColorID = Colors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetTypes ON dbo.FrontsOrders.InsetTypeID = InsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS InsetColors ON dbo.FrontsOrders.InsetColorID = InsetColors.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetTypes ON dbo.FrontsOrders.TechnoInsetTypeID = TechnoInsetTypes.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS TechnoInsetColors ON dbo.FrontsOrders.TechnoInsetColorID = TechnoInsetColors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.FrontsConfig ON dbo.FrontsOrders.FrontConfigID = infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN
                         infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.FrontsConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["FactoryID"]) == 1)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                ProfilSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            OnStorageProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                        if (Convert.ToInt32(Row["FactoryID"]) == 2)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                TPSSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            OnStorageTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                    ProfilSquare = Decimal.Round(ProfilSquare, 1, MidpointRounding.AwayFromZero);
                    OnStorageProfilCost = Decimal.Round(OnStorageProfilCost, 1, MidpointRounding.AwayFromZero);
                    TPSSquare = Decimal.Round(TPSSquare, 1, MidpointRounding.AwayFromZero);
                    OnStorageTPSCost = Decimal.Round(OnStorageTPSCost, 1, MidpointRounding.AwayFromZero);
                }
            }
            Filter = " AND Packages.ProductType = 1 AND Packages.PackingDateTime <  '" + date1.ToString("yyyy-MM-dd") +
                " 23:59:59' AND (DispatchDateTime IS NULL OR Packages.DispatchDateTime >= '" + date1.ToString("yyyy-MM-dd") + " 23:59:59')";
            SelectCommand = @"SELECT infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, Packages.PackingDateTime, dbo.PackageDetails.PackageID, dbo.PackageDetails.PackNumber, dbo.DecorOrders.DecorOrderID, 
                         DecorOrders.FactoryID, infiniu2_catalog.dbo.DecorConfig.MeasureID, infiniu2_catalog.dbo.DecorConfig.AccountingName, infiniu2_catalog.dbo.DecorConfig.InvNumber, infiniu2_catalog.dbo.Measures.Measure, Fronts.TechStoreName, Colors.TechStoreName AS Expr35, dbo.DecorOrders.Length, dbo.DecorOrders.Height, dbo.DecorOrders.Width, 
                        dbo.PackageDetails.Count, dbo.DecorOrders.Cost*dbo.PackageDetails.Count/dbo.DecorOrders.Count AS Cost
FROM dbo.PackageDetails INNER JOIN
                         dbo.DecorOrders ON dbo.PackageDetails.OrderID = dbo.DecorOrders.DecorOrderID INNER JOIN
                         dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID " + Filter + @" LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Fronts ON dbo.DecorOrders.DecorID = Fronts.TechStoreID LEFT OUTER JOIN
                         infiniu2_catalog.dbo.TechStore AS Colors ON dbo.DecorOrders.ColorID = Colors.TechStoreID INNER JOIN
                         infiniu2_catalog.dbo.DecorConfig ON dbo.DecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN
                        infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.DecorConfig.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID INNER JOIN
                         dbo.MainOrders ON dbo.DecorOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN
                         dbo.MegaOrders ON dbo.MainOrders.MegaOrderID = dbo.MegaOrders.MegaOrderID " + MClientFilter + @" INNER JOIN
                         infiniu2_marketingreference.dbo.Clients ON dbo.MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, dbo.MegaOrders.OrderNumber, dbo.PackageDetails.PackageID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["FactoryID"]) == 1)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                ProfilCount += Convert.ToDecimal(Row["Count"]);
                            }
                            OnStorageProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                        if (Convert.ToInt32(Row["FactoryID"]) == 2)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                TPSCount += Convert.ToDecimal(Row["Count"]);
                            }
                            OnStorageTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                    OnStorageProfilCost = Decimal.Round(OnStorageProfilCost, 1, MidpointRounding.AwayFromZero);
                    ProfilPogon = Decimal.Round(ProfilPogon, 1, MidpointRounding.AwayFromZero);
                    ProfilCount = Decimal.Round(ProfilCount, 1, MidpointRounding.AwayFromZero);
                    OnStorageTPSCost = Decimal.Round(OnStorageTPSCost, 1, MidpointRounding.AwayFromZero);
                    TPSPogon = Decimal.Round(TPSPogon, 1, MidpointRounding.AwayFromZero);
                    TPSCount = Decimal.Round(TPSCount, 1, MidpointRounding.AwayFromZero);
                }
            }
        }


        //public void GeneralOnStorageOrders(ref decimal ProfilSquare,
        //    ref decimal ProfilPogon, ref decimal ProfilCount, ref decimal TPSSquare,
        //    ref decimal TPSPogon, ref decimal TPSCount, ref decimal CurvedCount)
        //{
        //    string MegaOrderFilter = " AND MainOrderID = -1";

        //    OnStorageProfilCost = 0;
        //    OnStorageTPSCost = 0;

        //    if (ClientGroups.Count > 0)
        //    {
        //        MegaOrderFilter = " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
        //            " WHERE ClientID IN (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
        //            " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<int>().ToArray()) + "))))";
        //    }

        //    using (DataTable DT = new DataTable())
        //    {
        //        //ФАСАДЫ НА ЭКСПЕДИЦИИ
        //        //Профиль
        //        using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
        //            " WHERE FactoryID=1 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
        //            " (SELECT PackageID FROM Packages WHERE (PackageStatusID=1 OR PackageStatusID=2) AND FactoryID=1 AND ProductType=0))" + MegaOrderFilter +
        //            " UNION" +
        //            " SELECT * FROM FrontsOrders" +
        //            " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
        //            " WHERE ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 2 AND ProfilStorageStatusID=1 AND ProfilDispatchStatusID = 1)" + MegaOrderFilter,
        //            ConnectionStrings.MarketingOrdersConnectionString))
        //        {
        //            DT.Clear();
        //            DA.Fill(DT);

        //            foreach (DataRow Row in DT.Rows)
        //            {
        //                if (Convert.ToInt32(Row["Width"]) == -1)
        //                {
        //                    CurvedCount += Convert.ToInt32(Row["Count"]);
        //                }
        //                else
        //                {
        //                    ProfilSquare += Convert.ToDecimal(Row["Square"]);
        //                }
        //                OnStorageProfilCost += Convert.ToDecimal(Row["Cost"]);
        //            }
        //        }
        //        ProfilSquare = Decimal.Round(ProfilSquare, 1, MidpointRounding.AwayFromZero);
        //        OnStorageProfilCost = Decimal.Round(OnStorageProfilCost, 1, MidpointRounding.AwayFromZero);

        //        //foreach (DataRow item in TempDecorDataTable.Rows)
        //        //{
        //        //    DecorOrdersDataTable.ImportRow(item);
        //        //}

        //        //ТПС
        //        using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
        //            " WHERE FactoryID=2 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
        //            " (SELECT PackageID FROM Packages WHERE (PackageStatusID=1 OR PackageStatusID=2) AND FactoryID=2 AND ProductType=0))" + MegaOrderFilter +
        //            " UNION" +
        //            " SELECT * FROM FrontsOrders" +
        //            " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
        //            " WHERE TPSProductionStatusID = 1 AND TPSStorageStatusID = 2 AND TPSStorageStatusID=1 AND TPSDispatchStatusID = 1)" + MegaOrderFilter,
        //            ConnectionStrings.MarketingOrdersConnectionString))
        //        {
        //            DT.Clear();
        //            DA.Fill(DT);

        //            foreach (DataRow Row in DT.Rows)
        //            {
        //                if (Convert.ToInt32(Row["Width"]) == -1)
        //                {
        //                    CurvedCount += Convert.ToInt32(Row["Count"]);
        //                }
        //                else
        //                {
        //                    TPSSquare += Convert.ToDecimal(Row["Square"]);
        //                }
        //                OnStorageTPSCost += Convert.ToDecimal(Row["Cost"]);
        //            }
        //        }
        //        TPSSquare = Decimal.Round(TPSSquare, 1, MidpointRounding.AwayFromZero);
        //        OnStorageTPSCost = Decimal.Round(OnStorageTPSCost, 1, MidpointRounding.AwayFromZero);


        //        //ДЕКОР НА ЭКСПЕДИЦИИ
        //        //Профиль
        //        using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
        //            " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
        //            " WHERE DecorOrders.FactoryID=1 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
        //            " (SELECT PackageID FROM Packages WHERE (PackageStatusID=1 OR PackageStatusID=2) AND FactoryID=1 AND ProductType=1))" + MegaOrderFilter +
        //            " UNION" +
        //            " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
        //            " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
        //            " WHERE DecorOrders.FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
        //            " WHERE ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 2 AND ProfilStorageStatusID=1 AND ProfilDispatchStatusID = 1)" + MegaOrderFilter,
        //            ConnectionStrings.MarketingOrdersConnectionString))
        //        {
        //            DT.Clear();
        //            DA.Fill(DT);

        //            foreach (DataRow Row in DT.Rows)
        //            {
        //                if (Convert.ToInt32(Row["MeasureID"]) == 2)
        //                {
        //                    //нет параметра "высота"
        //                    if (Row["Height"].ToString() == "-1")
        //                        ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
        //                    else
        //                        ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
        //                }
        //                else
        //                {
        //                    ProfilCount += Convert.ToDecimal(Row["Count"]);
        //                }
        //                OnStorageProfilCost += Convert.ToDecimal(Row["Cost"]);
        //            }
        //        }
        //        OnStorageProfilCost = Decimal.Round(OnStorageProfilCost, 1, MidpointRounding.AwayFromZero);
        //        ProfilPogon = Decimal.Round(ProfilPogon, 1, MidpointRounding.AwayFromZero);
        //        ProfilCount = Decimal.Round(ProfilCount, 1, MidpointRounding.AwayFromZero);

        //        //ТПС
        //        using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
        //            " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
        //            " WHERE DecorOrders.FactoryID=2 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
        //            " (SELECT PackageID FROM Packages WHERE (PackageStatusID=1 OR PackageStatusID=2) AND FactoryID=2 AND ProductType=1))" + MegaOrderFilter +
        //            " UNION" +
        //            " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
        //            " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
        //            " WHERE DecorOrders.FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
        //            " WHERE TPSProductionStatusID = 1 AND TPSStorageStatusID = 2 AND TPSStorageStatusID=1 AND TPSDispatchStatusID = 1)" + MegaOrderFilter,
        //            ConnectionStrings.MarketingOrdersConnectionString))
        //        {
        //            DT.Clear();
        //            DA.Fill(DT);

        //            foreach (DataRow Row in DT.Rows)
        //            {
        //                if (Convert.ToInt32(Row["MeasureID"]) == 2)
        //                {
        //                    //нет параметра "высота"
        //                    if (Row["Height"].ToString() == "-1")
        //                        TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
        //                    else
        //                        TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
        //                }
        //                else
        //                {
        //                    TPSCount += Convert.ToDecimal(Row["Count"]);
        //                }
        //                OnStorageTPSCost += Convert.ToDecimal(Row["Cost"]);
        //            }
        //        }
        //        OnStorageTPSCost = Decimal.Round(OnStorageTPSCost, 1, MidpointRounding.AwayFromZero);
        //        TPSPogon = Decimal.Round(TPSPogon, 1, MidpointRounding.AwayFromZero);
        //        TPSCount = Decimal.Round(TPSCount, 1, MidpointRounding.AwayFromZero);
        //    }
        //}

        public void GeneralOnExpeditionOrders(ref decimal ProfilSquare,
            ref decimal ProfilPogon, ref decimal ProfilCount, ref decimal TPSSquare,
            ref decimal TPSPogon, ref decimal TPSCount, ref decimal CurvedCount)
        {
            bool CheckZOV = GetZOV;
            string MegaOrderFilter = " AND MainOrderID = -1";

            OnExpeditionProfilCost = 0;
            OnExpeditionTPSCost = 0;

            if (ClientGroups.Count > 0)
            {
                MegaOrderFilter = " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN (SELECT MegaOrderID FROM MegaOrders" +
                    " WHERE ClientID IN (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<int>().ToArray()) + "))))";
            }

            using (DataTable DT = new DataTable())
            {
                //ФАСАДЫ НА ЭКСПЕДИЦИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=1 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=1 AND ProductType=0))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=2 AND ProfilDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            ProfilSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        OnExpeditionProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=1 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=1 AND ProductType=0))" +
                        " UNION" +
                        " SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=2 AND ProfilDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                ProfilSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            OnExpeditionProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                ProfilSquare = Decimal.Round(ProfilSquare, 1, MidpointRounding.AwayFromZero);
                OnExpeditionProfilCost = Decimal.Round(OnExpeditionProfilCost, 1, MidpointRounding.AwayFromZero);

                //foreach (DataRow item in TempDecorDataTable.Rows)
                //{
                //    DecorOrdersDataTable.ImportRow(item);
                //}

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=2 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=2 AND ProductType=0))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT * FROM FrontsOrders" +
                    " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=2 AND TPSDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["Width"]) == -1)
                        {
                            CurvedCount += Convert.ToInt32(Row["Count"]);
                        }
                        else
                        {
                            TPSSquare += Convert.ToDecimal(Row["Square"]);
                        }
                        OnExpeditionTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=2 AND FrontsOrdersID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=2 AND ProductType=0))" +
                        " UNION" +
                        " SELECT * FROM FrontsOrders" +
                        " WHERE FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=2 AND TPSDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["Width"]) == -1)
                            {
                                CurvedCount += Convert.ToInt32(Row["Count"]);
                            }
                            else
                            {
                                TPSSquare += Convert.ToDecimal(Row["Square"]);
                            }
                            OnExpeditionTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                TPSSquare = Decimal.Round(TPSSquare, 1, MidpointRounding.AwayFromZero);
                OnExpeditionTPSCost = Decimal.Round(OnExpeditionTPSCost, 1, MidpointRounding.AwayFromZero);


                //ДЕКОР НА ЭКСПЕДИЦИИ
                //Профиль
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=1 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=1 AND ProductType=1))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=2 AND ProfilDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            ProfilCount += Convert.ToDecimal(Row["Count"]);
                        }
                        OnExpeditionProfilCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=1 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=1 AND ProductType=1))" +
                        " UNION" +
                        " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=1 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilExpeditionStatusID=2 AND ProfilDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    ProfilPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    ProfilPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                ProfilCount += Convert.ToDecimal(Row["Count"]);
                            }
                            OnExpeditionProfilCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                OnExpeditionProfilCost = Decimal.Round(OnExpeditionProfilCost, 1, MidpointRounding.AwayFromZero);
                ProfilPogon = Decimal.Round(ProfilPogon, 1, MidpointRounding.AwayFromZero);
                ProfilCount = Decimal.Round(ProfilCount, 1, MidpointRounding.AwayFromZero);

                //ТПС
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=2 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                    " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=2 AND ProductType=1))" + MegaOrderFilter +
                    " UNION" +
                    " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE DecorOrders.FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                    " WHERE TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=2 AND TPSDispatchStatusID = 1)" + MegaOrderFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DT.Clear();
                    DA.Fill(DT);

                    foreach (DataRow Row in DT.Rows)
                    {
                        if (Convert.ToInt32(Row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (Row["Height"].ToString() == "-1")
                                TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            else
                                TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                        }
                        else
                        {
                            TPSCount += Convert.ToDecimal(Row["Count"]);
                        }
                        OnExpeditionTPSCost += Convert.ToDecimal(Row["Cost"]);
                    }
                }
                if (CheckZOV)
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=2 AND DecorOrderID IN (SELECT OrderID FROM PackageDetails WHERE PackageID IN" +
                        " (SELECT PackageID FROM Packages WHERE (PackageStatusID=4) AND FactoryID=2 AND ProductType=1))" +
                        " UNION" +
                        " SELECT DecorOrders.*, infiniu2_catalog.dbo.DecorConfig.MeasureID FROM DecorOrders" +
                        " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                        " WHERE DecorOrders.FactoryID=2 AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                        " WHERE TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSExpeditionStatusID=2 AND TPSDispatchStatusID = 1)",
                        ConnectionStrings.ZOVOrdersConnectionString))
                    {
                        DT.Clear();
                        DA.Fill(DT);

                        foreach (DataRow Row in DT.Rows)
                        {
                            if (Convert.ToInt32(Row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (Row["Height"].ToString() == "-1")
                                    TPSPogon += Convert.ToDecimal(Row["Length"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                                else
                                    TPSPogon += Convert.ToDecimal(Row["Height"]) * Convert.ToDecimal(Row["Count"]) / 1000;
                            }
                            else
                            {
                                TPSCount += Convert.ToDecimal(Row["Count"]);
                            }
                            OnExpeditionTPSCost += Convert.ToDecimal(Row["Cost"]);
                        }
                    }
                }
                OnExpeditionTPSCost = Decimal.Round(OnExpeditionTPSCost, 1, MidpointRounding.AwayFromZero);
                TPSPogon = Decimal.Round(TPSPogon, 1, MidpointRounding.AwayFromZero);
                TPSCount = Decimal.Round(TPSCount, 1, MidpointRounding.AwayFromZero);
            }
        }

        public void Filter()
        {
            GetClientGroup();
            NonAgreementStatistics();
            AgreementStatistics();
            OnProductionStatistics();
            InProductionStatistics();
            OnStorageStatistics();
            OnExpeditionStatistics();
        }

        public bool GetZOV
        {
            get
            {
                //foreach (object itemChecked in ClientGroupsList.CheckedItems)
                //{
                //    DataRowView castedItem = (DataRowView)itemChecked;
                //    if (Convert.ToInt32(castedItem["ClientGroupID"]) == 1)
                //        return true;
                //}

                return false;
            }
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }
        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["ColorName"].ToString();
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
            if (Rows.Count() > 0)
                PatinaName = Rows[0]["PatinaName"].ToString();
            return PatinaName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
            if (Rows.Count() > 0)
                InsetType = Rows[0]["InsetTypeName"].ToString();
            return InsetType;
        }

        public string GetInsetColorName(int InsetColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + InsetColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["InsetColorName"].ToString();
            return ColorName;
        }


        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDataTable.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorDataTable.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }
    }


    public class IncomeMonthMarketing
    {
        private int FactoryID = 0;

        public DataTable IncomeTotalDataTable = null;
        public DataTable IncomeDataTable = null;

        public DataTable FrontsOrdersDataTable = null;
        public DataTable DecorOrdersDataTable = null;

        public DataTable DecorConfigDataTable = null;

        public BindingSource IncomeBindingSource = null;

        PercentageDataGrid IncomeDataGrid;

        public IncomeMonthMarketing(ref PercentageDataGrid tIncomeDataGrid)
        {
            IncomeDataGrid = tIncomeDataGrid;

            Initialize();
        }

        public int Factory
        {
            get { return FactoryID; }
            set { FactoryID = value; }
        }

        private void Create()
        {
            IncomeTotalDataTable = new DataTable();
            IncomeTotalDataTable.Columns.Add(new DataColumn("Date", Type.GetType("System.String")));
            IncomeTotalDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            IncomeTotalDataTable.Columns.Add(new DataColumn("Date1", Type.GetType("System.DateTime")));

            IncomeDataTable = new DataTable();
            IncomeDataTable.Columns.Add(new DataColumn("DateTime", Type.GetType("System.DateTime")));
            IncomeDataTable.Columns.Add(new DataColumn("Date", Type.GetType("System.String")));
            IncomeDataTable.Columns.Add(new DataColumn("Square", Type.GetType("System.Decimal")));
            IncomeDataTable.Columns.Add(new DataColumn("DecorLinearCount", Type.GetType("System.Decimal")));
            IncomeDataTable.Columns.Add(new DataColumn("DecorItemsCount", Type.GetType("System.Decimal")));
            IncomeDataTable.Columns.Add(new DataColumn("FrontsCost", Type.GetType("System.Decimal")));
            IncomeDataTable.Columns.Add(new DataColumn("DecorCost", Type.GetType("System.Decimal")));
            IncomeDataTable.Columns.Add(new DataColumn("TotalCost", Type.GetType("System.Decimal")));

            DecorConfigDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorConfigID, MeasureID FROM DecorConfig",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorConfigDataTable);
            }

            FrontsOrdersDataTable = new DataTable();
            DecorOrdersDataTable = new DataTable();
        }

        public void Fill()
        {
            FrontsOrdersDataTable.Clear();
            DecorOrdersDataTable.Clear();
            IncomeTotalDataTable.Clear();
            IncomeDataTable.Clear();

            string FactoryFilter = string.Empty;

            if (FactoryID != 0)
                FactoryFilter = " WHERE NewFrontsOrders.FactoryID = " + FactoryID;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT CAST(NewMegaOrders.OrderDate AS DATE) AS OrderDate, NewFrontsOrders.Cost," +
                " NewFrontsOrders.Square, NewFrontsOrders.FactoryID FROM NewFrontsOrders" +
                " INNER JOIN NewMainOrders ON NewFrontsOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" + FactoryFilter,

                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(FrontsOrdersDataTable);
            }

            if (FactoryID != 0)
                FactoryFilter = " WHERE NewDecorOrders.FactoryID = " + FactoryID;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT CAST(NewMegaOrders.OrderDate AS DATE) AS OrderDate, NewDecorOrders.Cost," +
                " NewDecorOrders.Count, NewDecorOrders.Length, NewDecorOrders.FactoryID, MeasureID FROM NewDecorOrders" +
                " INNER JOIN NewMainOrders ON NewDecorOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON NewDecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID" + FactoryFilter,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            foreach (DataRow Row in FrontsOrdersDataTable.Rows)
            {
                string Date = Convert.ToDateTime(Row["OrderDate"]).ToString("yyyy. MMMM");

                DataRow[] iRows = IncomeTotalDataTable.Select("Date = '" + Date + "'");

                if (iRows.Count() == 0)
                {
                    DataRow NewRow = IncomeTotalDataTable.NewRow();
                    NewRow["Date"] = Date;
                    NewRow["Cost"] = Convert.ToDecimal(Row["Cost"]);
                    IncomeTotalDataTable.Rows.Add(NewRow);
                }
                else
                {
                    iRows[0]["Cost"] = Convert.ToDecimal(iRows[0]["Cost"]) + Convert.ToDecimal(Row["Cost"]);
                }
            }

            foreach (DataRow Row in DecorOrdersDataTable.Rows)
            {
                string Date = Convert.ToDateTime(Row["OrderDate"]).ToString("yyyy. MMMM");

                DataRow[] iRows = IncomeTotalDataTable.Select("Date = '" + Date + "'");

                if (iRows.Count() == 0)
                {
                    DataRow NewRow = IncomeTotalDataTable.NewRow();
                    NewRow["Date"] = Date;
                    NewRow["Cost"] = Convert.ToDecimal(Row["Cost"]);
                    IncomeTotalDataTable.Rows.Add(NewRow);
                }
                else
                {
                    iRows[0]["Cost"] = Convert.ToDecimal(iRows[0]["Cost"]) + Convert.ToDecimal(Row["Cost"]);
                }
            }

            FactoryFilter = string.Empty;


            //using (DataView DV = new DataView(IncomeTotalDataTable.Copy()))
            //{
            //    DV.Sort = "Date1";
            //    IncomeTotalDataTable.Clear();
            //    IncomeTotalDataTable = DV.ToTable();
            //}

            foreach (DataRow Row in IncomeTotalDataTable.Rows)
            {
                string D = Convert.ToDateTime(Row["Date"]).ToString("yyyy-MM") + "-%";

                if (FactoryID != 0)
                    FactoryFilter = " AND NewFrontsOrders.FactoryID = " + FactoryID;
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT CAST(NewMegaOrders.OrderDate AS DATE) AS OrderDate, NewFrontsOrders.Cost," +
                " NewFrontsOrders.Square, NewFrontsOrders.FactoryID FROM NewFrontsOrders" +
                " INNER JOIN NewMainOrders ON NewFrontsOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" +
                " WHERE CAST(NewMegaOrders.OrderDate AS DATE) LIKE '" + D + "'" + FactoryFilter,
                ConnectionStrings.MarketingOrdersConnectionString))
                {
                    FrontsOrdersDataTable.Clear();
                    DA.Fill(FrontsOrdersDataTable);
                }

                if (FactoryID != 0)
                    FactoryFilter = " AND NewDecorOrders.FactoryID = " + FactoryID;
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT CAST(NewMegaOrders.OrderDate AS DATE) AS OrderDate, NewDecorOrders.Cost," +
                    " NewDecorOrders.Count, NewDecorOrders.Length, NewDecorOrders.FactoryID, MeasureID FROM NewDecorOrders" +
                    " INNER JOIN NewMainOrders ON NewDecorOrders.MainOrderID = NewMainOrders.MainOrderID" +
                    " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" +
                    " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON NewDecorOrders.DecorConfigID = infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                    " WHERE CAST(NewMegaOrders.OrderDate AS DATE) LIKE '" + D + "'" + FactoryFilter,
                    ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DecorOrdersDataTable.Clear();
                    DA.Fill(DecorOrdersDataTable);
                }

                decimal Square = 0;
                decimal DecorLinearCount = 0;
                decimal DecorItemsCount = 0;
                decimal FrontsCost = 0;
                decimal DecorCost = 0;

                foreach (DataRow mRow in FrontsOrdersDataTable.Rows)
                {
                    Square += Convert.ToDecimal(mRow["Square"]);
                    FrontsCost += Convert.ToDecimal(mRow["Cost"]);
                }

                foreach (DataRow dRow in DecorOrdersDataTable.Rows)
                {
                    DecorCost += Convert.ToDecimal(dRow["Cost"]);
                    if (dRow["MeasureID"].ToString() == "2")
                        DecorLinearCount += Convert.ToDecimal(dRow["Count"]) * Convert.ToDecimal(dRow["Length"]) / 1000;
                    else
                        DecorItemsCount += Convert.ToDecimal(dRow["Count"]);
                }


                DataRow NewRow = IncomeDataTable.NewRow();
                NewRow["DateTime"] = Row["Date"];
                NewRow["Date"] = Convert.ToDateTime(Row["Date"]).ToString("yyyy. MMMM");
                NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                NewRow["FrontsCost"] = Decimal.Round(FrontsCost, 2, MidpointRounding.AwayFromZero);
                NewRow["DecorCost"] = Decimal.Round(DecorCost, 2, MidpointRounding.AwayFromZero);
                NewRow["TotalCost"] = Decimal.Round(FrontsCost + DecorCost, 2, MidpointRounding.AwayFromZero);
                NewRow["DecorLinearCount"] = Decimal.Round(DecorLinearCount, 2, MidpointRounding.AwayFromZero);
                NewRow["DecorItemsCount"] = Decimal.Round(DecorItemsCount, 2, MidpointRounding.AwayFromZero);
                IncomeDataTable.Rows.Add(NewRow);
            }
        }


        private void Binding()
        {
            IncomeBindingSource = new BindingSource()
            {
                DataSource = IncomeDataTable
            };
            IncomeDataGrid.DataSource = IncomeBindingSource;
        }

        private void SetGrids()
        {
            foreach (DataGridViewColumn Column in IncomeDataGrid.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            IncomeDataGrid.Columns["DateTime"].Visible = false;

            IncomeDataGrid.Columns["Date"].HeaderText = "Месяц";
            IncomeDataGrid.Columns["Square"].HeaderText = "Квадратура";
            IncomeDataGrid.Columns["FrontsCost"].HeaderText = "Фасады, €";
            IncomeDataGrid.Columns["DecorCost"].HeaderText = "Декор, €";
            IncomeDataGrid.Columns["TotalCost"].HeaderText = "Итого, €";
            IncomeDataGrid.Columns["DecorLinearCount"].HeaderText = "Декор, м.п.";
            IncomeDataGrid.Columns["DecorItemsCount"].HeaderText = "Декор, шт.";

            //ResultDataGrid.Columns["Client"].HeaderText = "Клиент";

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 1
            };
            NumberFormatInfo nfi2 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 1
            };
            IncomeDataGrid.Columns["Square"].DefaultCellStyle.Format = "C";
            IncomeDataGrid.Columns["Square"].DefaultCellStyle.FormatProvider = nfi1;

            IncomeDataGrid.Columns["FrontsCost"].DefaultCellStyle.Format = "C";
            IncomeDataGrid.Columns["FrontsCost"].DefaultCellStyle.FormatProvider = nfi2;

            IncomeDataGrid.Columns["DecorCost"].DefaultCellStyle.Format = "C";
            IncomeDataGrid.Columns["DecorCost"].DefaultCellStyle.FormatProvider = nfi2;

            IncomeDataGrid.Columns["TotalCost"].DefaultCellStyle.Format = "C";
            IncomeDataGrid.Columns["TotalCost"].DefaultCellStyle.FormatProvider = nfi2;

            IncomeDataGrid.Columns["DecorLinearCount"].DefaultCellStyle.Format = "C";
            IncomeDataGrid.Columns["DecorLinearCount"].DefaultCellStyle.FormatProvider = nfi1;

            IncomeDataGrid.Columns["DecorItemsCount"].DefaultCellStyle.Format = "C";
            IncomeDataGrid.Columns["DecorItemsCount"].DefaultCellStyle.FormatProvider = nfi2;

            //IncomeDataGrid.Columns["Square"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //IncomeDataGrid.Columns["FrontsCost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //IncomeDataGrid.Columns["DecorCost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //IncomeDataGrid.Columns["TotalCost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //IncomeDataGrid.Columns["DecorLinearCount"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //IncomeDataGrid.Columns["DecorItemsCount"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            //IncomeDataGrid.Columns["Square"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetGrids();
        }
    }


    public class StorageStatistics
    {
        DataTable MCurvedFSummaryDT = null;
        DataTable MFSummaryDT = null;
        DataTable MDSummaryDT = null;
        DataTable PrepareCurvedFSummaryDT = null;
        DataTable PrepareFSummaryDT = null;
        DataTable PrepareDSummaryDT = null;

        DataTable ClientGroupsDataTable = null;
        DataTable MarketingClientsDT = null;
        DataTable ZOVPrepareDT = null;

        DataTable MReadyCurvedFrontsCostDT = null;
        DataTable MReadyFrontsCostDT = null;
        DataTable MReadyDecorCostDT = null;
        DataTable MAllCurvedFrontsCostDT = null;
        DataTable MAllFrontsCostDT = null;
        DataTable MAllDecorCostDT = null;

        DataTable PrepareReadyCurvedFrontsCostDT = null;
        DataTable PrepareReadyFrontsCostDT = null;
        DataTable PrepareReadyDecorCostDT = null;
        DataTable PrepareAllCurvedFrontsCostDT = null;
        DataTable PrepareAllFrontsCostDT = null;
        DataTable PrepareAllDecorCostDT = null;

        DataTable ZReadyCurvedFrontsCostDT = null;
        DataTable ZReadyFrontsCostDT = null;
        DataTable ZReadyDecorCostDT = null;
        DataTable ZAllCurvedFrontsCostDT = null;
        DataTable ZAllFrontsCostDT = null;
        DataTable ZAllDecorCostDT = null;

        DataTable CurvedFrontsOrdersDT = null;
        DataTable FrontsOrdersDT = null;
        DataTable DecorOrdersDT = null;

        DataTable CurvedFrontsSummaryDT = null;
        DataTable FrontsSummaryDT = null;
        DataTable DecorProductsSummaryDT = null;
        DataTable DecorItemsSummaryDT = null;
        DataTable DecorConfigDT = null;

        DataTable FrontsDT = null;
        DataTable DecorProductsDT = null;
        DataTable DecorItemsDT = null;

        public BindingSource ClientGroupsBS = null;
        public BindingSource MCurvedFSummaryBS = null;
        public BindingSource MFSummaryBS = null;
        public BindingSource MDSummaryBS = null;
        public BindingSource PrepareCurvedFSummaryBS = null;
        public BindingSource PrepareFSummaryBS = null;
        public BindingSource PrepareDSummaryBS = null;

        public BindingSource CurvedFrontsSummaryBS = null;
        public BindingSource FrontsSummaryBS = null;
        public BindingSource DecorProductsSummaryBS = null;
        public BindingSource DecorItemsSummaryBS = null;

        PercentageDataGrid MCurvedFSummaryDG = null;
        PercentageDataGrid MFSummaryDG = null;
        PercentageDataGrid MDSummaryDG = null;
        PercentageDataGrid PrepareCurvedFSummaryDG = null;
        PercentageDataGrid PrepareFSummaryDG = null;
        PercentageDataGrid PrepareDSummaryDG = null;
        PercentageDataGrid CurvedFrontsDG = null;
        PercentageDataGrid FrontsDG = null;
        PercentageDataGrid DecorProductsDG = null;
        PercentageDataGrid DecorItemsDG = null;

        public StorageStatistics(
            ref PercentageDataGrid tMFSummaryDG,
            ref PercentageDataGrid tMCurvedFSummaryDG,
            ref PercentageDataGrid tMDSummaryDG,
            ref PercentageDataGrid tPrepareFSummaryDG,
            ref PercentageDataGrid tPrepareCurvedFSummaryDG,
            ref PercentageDataGrid tPrepareDSummaryDG,
            ref PercentageDataGrid tFrontsDG,
            ref PercentageDataGrid tCurvedFrontsDG,
            ref PercentageDataGrid tDecorProductsDG,
            ref PercentageDataGrid tDecorItemsDG)
        {
            MCurvedFSummaryDG = tMCurvedFSummaryDG;
            MFSummaryDG = tMFSummaryDG;
            MDSummaryDG = tMDSummaryDG;
            PrepareCurvedFSummaryDG = tPrepareCurvedFSummaryDG;
            PrepareFSummaryDG = tPrepareFSummaryDG;
            PrepareDSummaryDG = tPrepareDSummaryDG;
            CurvedFrontsDG = tCurvedFrontsDG;
            FrontsDG = tFrontsDG;
            DecorProductsDG = tDecorProductsDG;
            DecorItemsDG = tDecorItemsDG;

            Initialize();
        }

        private void Create()
        {
            MarketingClientsDT = new DataTable();
            ZOVPrepareDT = new DataTable();

            MReadyCurvedFrontsCostDT = new DataTable();
            MReadyFrontsCostDT = new DataTable();
            MReadyDecorCostDT = new DataTable();
            MAllCurvedFrontsCostDT = new DataTable();
            MAllFrontsCostDT = new DataTable();
            MAllDecorCostDT = new DataTable();

            ZReadyCurvedFrontsCostDT = new DataTable();
            ZReadyFrontsCostDT = new DataTable();
            ZReadyDecorCostDT = new DataTable();
            ZAllCurvedFrontsCostDT = new DataTable();
            ZAllFrontsCostDT = new DataTable();
            ZAllDecorCostDT = new DataTable();

            PrepareReadyCurvedFrontsCostDT = new DataTable();
            PrepareReadyFrontsCostDT = new DataTable();
            PrepareReadyDecorCostDT = new DataTable();
            PrepareAllCurvedFrontsCostDT = new DataTable();
            PrepareAllFrontsCostDT = new DataTable();
            PrepareAllDecorCostDT = new DataTable();

            DecorItemsDT = new DataTable();
            FrontsDT = new DataTable();
            DecorProductsDT = new DataTable();
            DecorConfigDT = new DataTable();

            CurvedFrontsOrdersDT = new DataTable();
            FrontsOrdersDT = new DataTable();
            DecorOrdersDT = new DataTable();

            MFSummaryDT = new DataTable();
            MFSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MFSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("ReadyPercTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ReadyPercProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));
            MCurvedFSummaryDT = MFSummaryDT.Clone();

            MDSummaryDT = new DataTable();
            MDSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MDSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("ReadyPercTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ReadyPercProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            PrepareFSummaryDT = new DataTable();
            PrepareFSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("ReadyPercTPS"), System.Type.GetType("System.Decimal")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("ReadyPercProfil"), System.Type.GetType("System.Decimal")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            PrepareCurvedFSummaryDT = PrepareFSummaryDT.Clone();

            PrepareDSummaryDT = new DataTable();
            PrepareDSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("ReadyPercTPS"), System.Type.GetType("System.Decimal")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("ReadyPercProfil"), System.Type.GetType("System.Decimal")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));

            FrontsSummaryDT = new DataTable();
            FrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            CurvedFrontsSummaryDT = new DataTable();
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDT = new DataTable();
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));
        }

        private void Fill()
        {
            ClientGroupsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ClientGroups ",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientGroupsDataTable);
            }
            ClientGroupsDataTable.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
            {
                ClientGroupsDataTable.Rows[i]["Check"] = true;
            }
            string SelectCommand = @"SELECT ProductID, ProductName FROM DecorProducts" +
                " WHERE ProductID IN (SELECT ProductID FROM DecorConfig WHERE Enabled = 1) ORDER BY ProductName ASC";
            DecorProductsDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDT);
            }
            DecorItemsDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorItemsDT);
            }

            SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDT);
            //}
            DecorConfigDT = TablesManager.DecorConfigDataTable;

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            //FillZOVPrepareTables();
            //FillMarketingTables();
            //FillZOVTables();

            sw.Stop();
            double G = sw.Elapsed.TotalMilliseconds;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
                CurvedFrontsOrdersDT = FrontsOrdersDT.Clone();
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDT);
            }
        }

        public void FillZOVPrepareTables()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT CONVERT(varchar(10), DocDateTime, 121) AS DocDateTime
            FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID IN (1, 2)) AND MegaOrderID = 0
            GROUP BY CONVERT(varchar(10), DocDateTime, 121)
            ORDER BY DocDateTime",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                ZOVPrepareDT.Clear();
                DA.Fill(ZOVPrepareDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MainOrders.DocDateTime, 121) AS DocDateTime, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID = 0
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (1, 2)) AND FrontsOrders.Width=-1
            GROUP BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID
            ORDER BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                PrepareReadyCurvedFrontsCostDT.Clear();
                DA.Fill(PrepareReadyCurvedFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MainOrders.DocDateTime, 121) AS DocDateTime, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID = 0
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (1, 2)) AND FrontsOrders.Width<>-1
            GROUP BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID
            ORDER BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                PrepareReadyFrontsCostDT.Clear();
                DA.Fill(PrepareReadyFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MainOrders.DocDateTime, 121) AS DocDateTime, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID = 0
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID IN (1, 2))
            GROUP BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), DecorOrders.FactoryID
            ORDER BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), DecorOrders.FactoryID",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                PrepareReadyDecorCostDT.Clear();
                DA.Fill(PrepareReadyDecorCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MainOrders.DocDateTime, 121) AS DocDateTime, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID = 0
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0)) AND FrontsOrders.Width=-1
            GROUP BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID
            ORDER BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                PrepareAllCurvedFrontsCostDT.Clear();
                DA.Fill(PrepareAllCurvedFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MainOrders.DocDateTime, 121) AS DocDateTime, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID = 0
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0)) AND FrontsOrders.Width<>-1
            GROUP BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID
            ORDER BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), FrontsOrders.FactoryID",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                PrepareAllFrontsCostDT.Clear();
                DA.Fill(PrepareAllFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MainOrders.DocDateTime, 121) AS DocDateTime, DecorOrders.FactoryID, SUM(DecorOrders.Cost) AS DecorCost
            FROM DecorOrders INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID = 0
            WHERE DecorOrders.DecorOrderID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1))
            GROUP BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), DecorOrders.FactoryID
            ORDER BY CONVERT(varchar(10), MainOrders.DocDateTime, 121), DecorOrders.FactoryID",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                PrepareAllDecorCostDT.Clear();
                DA.Fill(PrepareAllDecorCostDT);
            }
        }

        public void FillMarketingTables()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT MegaOrders.ClientID, ClientGroupID, infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID
            FROM MegaOrders
            INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
            WHERE MegaOrders.MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID IN (1, 2)))
            ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MarketingClientsDT.Clear();
                DA.Fill(MarketingClientsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width=-1 INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (1, 2))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MReadyCurvedFrontsCostDT.Clear();
                DA.Fill(MReadyCurvedFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width<>-1 INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (1, 2))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MReadyFrontsCostDT.Clear();
                DA.Fill(MReadyFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID IN (1, 2))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MReadyDecorCostDT.Clear();
                DA.Fill(MReadyDecorCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0)) AND FrontsOrders.Width=-1
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllCurvedFrontsCostDT.Clear();
                DA.Fill(MAllCurvedFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0)) AND FrontsOrders.Width<>-1
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllFrontsCostDT.Clear();
                DA.Fill(MAllFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost) AS DecorCost
            FROM DecorOrders INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE DecorOrders.DecorOrderID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllDecorCostDT.Clear();
                DA.Fill(MAllDecorCostDT);
            }
        }

        private void Binding()
        {
            ClientGroupsBS = new BindingSource()
            {
                DataSource = ClientGroupsDataTable
            };
            MCurvedFSummaryBS = new BindingSource()
            {
                DataSource = MCurvedFSummaryDT
            };
            MCurvedFSummaryDG.DataSource = MCurvedFSummaryBS;

            MFSummaryBS = new BindingSource()
            {
                DataSource = MFSummaryDT
            };
            MFSummaryDG.DataSource = MFSummaryBS;

            MDSummaryBS = new BindingSource()
            {
                DataSource = MDSummaryDT
            };
            MDSummaryDG.DataSource = MDSummaryBS;

            PrepareCurvedFSummaryBS = new BindingSource()
            {
                DataSource = PrepareCurvedFSummaryDT
            };
            PrepareCurvedFSummaryDG.DataSource = PrepareCurvedFSummaryBS;

            PrepareFSummaryBS = new BindingSource()
            {
                DataSource = PrepareFSummaryDT
            };
            PrepareFSummaryDG.DataSource = PrepareFSummaryBS;

            PrepareDSummaryBS = new BindingSource()
            {
                DataSource = PrepareDSummaryDT
            };
            PrepareDSummaryDG.DataSource = PrepareDSummaryBS;

            CurvedFrontsSummaryBS = new BindingSource()
            {
                DataSource = CurvedFrontsSummaryDT
            };
            CurvedFrontsDG.DataSource = CurvedFrontsSummaryBS;

            FrontsSummaryBS = new BindingSource()
            {
                DataSource = FrontsSummaryDT
            };
            FrontsDG.DataSource = FrontsSummaryBS;

            DecorProductsSummaryBS = new BindingSource()
            {
                DataSource = DecorProductsSummaryDT
            };
            DecorProductsDG.DataSource = DecorProductsSummaryBS;

            DecorItemsSummaryBS = new BindingSource()
            {
                DataSource = DecorItemsSummaryDT
            };
            DecorItemsDG.DataSource = DecorItemsSummaryBS;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetProductsGrids();
            MarketSummaryGridSettings();
            PrepareSummaryGridSettings();
        }

        public void ShowColumns(ref PercentageDataGrid FrontsGrid, ref PercentageDataGrid CurvedFrontsGrid, ref PercentageDataGrid DecorGrid, bool Profil, bool TPS, bool bClientSummary)
        {
            if (Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = true;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = true;

                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = true;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ReadyPercProfil"].Visible = true;
                DecorGrid.Columns["ReadyPercTPS"].Visible = true;
            }
            if (Profil && !TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = false;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = true;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = false;

                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = false;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = false;
                DecorGrid.Columns["ReadyPercProfil"].Visible = true;
                DecorGrid.Columns["ReadyPercTPS"].Visible = false;
            }
            if (!Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = false;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = false;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = true;

                FrontsGrid.Columns["CostProfil"].Visible = false;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = false;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = true;
                DecorGrid.Columns["CostProfil"].Visible = false;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ReadyPercProfil"].Visible = false;
                DecorGrid.Columns["ReadyPercTPS"].Visible = true;
            }
        }

        private void MarketSummaryGridSettings()
        {
            MFSummaryDG.Columns["MegaOrderID"].Visible = false;
            MFSummaryDG.Columns["ClientID"].Visible = false;
            MCurvedFSummaryDG.Columns["MegaOrderID"].Visible = false;
            MCurvedFSummaryDG.Columns["ClientID"].Visible = false;
            MDSummaryDG.Columns["MegaOrderID"].Visible = false;
            MDSummaryDG.Columns["ClientID"].Visible = false;

            MFSummaryDG.Columns["AllCostProfil"].Visible = false;
            MCurvedFSummaryDG.Columns["AllCostProfil"].Visible = false;
            MDSummaryDG.Columns["AllCostProfil"].Visible = false;
            MFSummaryDG.Columns["AllCostTPS"].Visible = false;
            MCurvedFSummaryDG.Columns["AllCostTPS"].Visible = false;
            MDSummaryDG.Columns["AllCostTPS"].Visible = false;

            if (!Security.PriceAccess)
            {
                MFSummaryDG.Columns["CostProfil"].Visible = false;
                MCurvedFSummaryDG.Columns["CostProfil"].Visible = false;
                MFSummaryDG.Columns["CostTPS"].Visible = false;
                MCurvedFSummaryDG.Columns["CostTPS"].Visible = false;
                MDSummaryDG.Columns["CostProfil"].Visible = false;
                MDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in MCurvedFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in MFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in MDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            MCurvedFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MCurvedFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MCurvedFSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MCurvedFSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MCurvedFSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            MCurvedFSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            MCurvedFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MCurvedFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MCurvedFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MCurvedFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MCurvedFSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MCurvedFSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MCurvedFSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MCurvedFSummaryDG.Columns["OrderNumber"].Width = 85;
            MCurvedFSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MCurvedFSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            MCurvedFSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MCurvedFSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            MCurvedFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MCurvedFSummaryDG.Columns["CostProfil"].Width = 110;
            MCurvedFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MCurvedFSummaryDG.Columns["CostTPS"].Width = 110;

            MCurvedFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MCurvedFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MCurvedFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MCurvedFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MCurvedFSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MCurvedFSummaryDG.AddPercentageColumn("ReadyPercProfil");
            MCurvedFSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MCurvedFSummaryDG.AddPercentageColumn("ReadyPercTPS");

            MFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MFSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MFSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MFSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            MFSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            MFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MFSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MFSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["OrderNumber"].Width = 85;
            MFSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            MFSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            MFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostProfil"].Width = 110;
            MFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostTPS"].Width = 110;

            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MFSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ReadyPercProfil");
            MFSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ReadyPercTPS");

            MDSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MDSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MDSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MDSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MDSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            MDSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            MDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MDSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MDSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MDSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["OrderNumber"].Width = 85;
            MDSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            MDSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            MDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostProfil"].Width = 110;
            MDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostTPS"].Width = 110;

            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MDSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ReadyPercProfil");
            MDSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ReadyPercTPS");

        }

        private void PrepareSummaryGridSettings()
        {
            if (!Security.PriceAccess)
            {
                PrepareCurvedFSummaryDG.Columns["CostProfil"].Visible = false;
                PrepareCurvedFSummaryDG.Columns["CostTPS"].Visible = false;
                PrepareFSummaryDG.Columns["CostProfil"].Visible = false;
                PrepareFSummaryDG.Columns["CostTPS"].Visible = false;
                PrepareDSummaryDG.Columns["CostProfil"].Visible = false;
                PrepareDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in PrepareCurvedFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in PrepareFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in PrepareDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            PrepareCurvedFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            PrepareCurvedFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            PrepareCurvedFSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            PrepareCurvedFSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            PrepareCurvedFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            PrepareCurvedFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            PrepareCurvedFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            PrepareCurvedFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            PrepareCurvedFSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareCurvedFSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            PrepareCurvedFSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareCurvedFSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            PrepareCurvedFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareCurvedFSummaryDG.Columns["CostProfil"].Width = 110;
            PrepareCurvedFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareCurvedFSummaryDG.Columns["CostTPS"].Width = 110;
            PrepareCurvedFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            PrepareCurvedFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            PrepareCurvedFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            PrepareCurvedFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            PrepareCurvedFSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareCurvedFSummaryDG.AddPercentageColumn("ReadyPercProfil");
            PrepareCurvedFSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareCurvedFSummaryDG.AddPercentageColumn("ReadyPercTPS");

            PrepareFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            PrepareFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            PrepareFSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            PrepareFSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            PrepareFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            PrepareFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            PrepareFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            PrepareFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            PrepareFSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareFSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            PrepareFSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareFSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            PrepareFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareFSummaryDG.Columns["CostProfil"].Width = 110;
            PrepareFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareFSummaryDG.Columns["CostTPS"].Width = 110;
            PrepareFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            PrepareFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            PrepareFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            PrepareFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            PrepareFSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareFSummaryDG.AddPercentageColumn("ReadyPercProfil");
            PrepareFSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareFSummaryDG.AddPercentageColumn("ReadyPercTPS");

            PrepareDSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            PrepareDSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            PrepareDSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            PrepareDSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            PrepareDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            PrepareDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            PrepareDSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            PrepareDSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            PrepareDSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareDSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            PrepareDSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareDSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            PrepareDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareDSummaryDG.Columns["CostProfil"].Width = 110;
            PrepareDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareDSummaryDG.Columns["CostTPS"].Width = 110;
            PrepareDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            PrepareDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            PrepareDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            PrepareDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            PrepareDSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareDSummaryDG.AddPercentageColumn("ReadyPercProfil");
            PrepareDSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareDSummaryDG.AddPercentageColumn("ReadyPercTPS");
        }

        private void SetProductsGrids()
        {
            if (!Security.PriceAccess)
            {
                CurvedFrontsDG.Columns["Cost"].Visible = false;
                FrontsDG.Columns["Cost"].Visible = false;
                DecorProductsDG.Columns["Cost"].Visible = false;
                DecorItemsDG.Columns["Cost"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            CurvedFrontsDG.ColumnHeadersHeight = 38;
            FrontsDG.ColumnHeadersHeight = 38;
            DecorProductsDG.ColumnHeadersHeight = 38;
            DecorItemsDG.ColumnHeadersHeight = 38;

            foreach (DataGridViewColumn Column in CurvedFrontsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in FrontsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorProductsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorItemsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            CurvedFrontsDG.Columns["FrontID"].Visible = false;
            CurvedFrontsDG.Columns["Width"].Visible = false;

            CurvedFrontsDG.Columns["Front"].HeaderText = "Фасад";
            CurvedFrontsDG.Columns["Cost"].HeaderText = " € ";
            CurvedFrontsDG.Columns["Count"].HeaderText = "шт.";

            CurvedFrontsDG.Columns["Front"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            CurvedFrontsDG.Columns["Front"].MinimumWidth = 110;
            CurvedFrontsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            CurvedFrontsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            CurvedFrontsDG.Columns["Cost"].Width = 100;
            CurvedFrontsDG.Columns["Count"].Width = 90;

            CurvedFrontsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            CurvedFrontsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;

            FrontsDG.Columns["FrontID"].Visible = false;
            FrontsDG.Columns["Width"].Visible = false;

            FrontsDG.Columns["Front"].HeaderText = "Фасад";
            FrontsDG.Columns["Cost"].HeaderText = " € ";
            FrontsDG.Columns["Square"].HeaderText = "м.кв.";
            FrontsDG.Columns["Count"].HeaderText = "шт.";

            FrontsDG.Columns["Front"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            FrontsDG.Columns["Front"].MinimumWidth = 110;
            FrontsDG.Columns["Square"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Square"].Width = 100;
            FrontsDG.Columns["Cost"].Width = 100;
            FrontsDG.Columns["Count"].Width = 90;

            FrontsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            FrontsDG.Columns["Square"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Square"].DefaultCellStyle.FormatProvider = nfi1;

            DecorProductsDG.Columns["ProductID"].Visible = false;
            DecorProductsDG.Columns["MeasureID"].Visible = false;

            DecorItemsDG.Columns["ProductID"].Visible = false;
            DecorItemsDG.Columns["DecorID"].Visible = false;
            DecorItemsDG.Columns["MeasureID"].Visible = false;

            DecorProductsDG.Columns["DecorProduct"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorProductsDG.Columns["DecorProduct"].MinimumWidth = 100;
            DecorProductsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Cost"].Width = 100;
            DecorProductsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Count"].Width = 100;
            DecorProductsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Measure"].Width = 90;

            DecorProductsDG.Columns["DecorProduct"].HeaderText = "Продукт";
            DecorProductsDG.Columns["Cost"].HeaderText = " € ";
            DecorProductsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorProductsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            DecorItemsDG.Columns["DecorID"].Visible = false;

            DecorItemsDG.Columns["DecorItem"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorItemsDG.Columns["DecorItem"].MinimumWidth = 100;
            DecorItemsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Cost"].Width = 100;
            DecorItemsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Count"].Width = 100;
            DecorItemsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Measure"].Width = 90;

            DecorItemsDG.Columns["DecorItem"].HeaderText = "Наименование";
            DecorItemsDG.Columns["Cost"].HeaderText = " € ";
            DecorItemsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorItemsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            CurvedFrontsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            CurvedFrontsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            FrontsDG.Columns["Square"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        }

        public void ClientSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;

            decimal ReadyPercProfil = 0;
            decimal ReadyPercTPS = 0;

            decimal ReadyCostProfil = 0;
            decimal ReadyCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            decimal Percentage = 0;
            decimal d1 = 0;
            decimal d2 = 0;

            string ClientName = string.Empty;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            DataTable Table = new DataTable();

            string filter = string.Empty;
            for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
            {
                if (!Convert.ToBoolean(ClientGroupsDataTable.Rows[i]["Check"]))
                    continue;

                filter += ClientGroupsDataTable.Rows[i]["ClientGroupID"].ToString() + ",";
            }
            if (filter.Length > 0)
                filter = "ClientGroupID IN (" + filter + ")";
            using (DataView DV = new DataView(MarketingClientsDT, filter, string.Empty, DataViewRowState.CurrentRows))
            {
                Table = DV.ToTable(true, new string[] { "ClientID" });
            }

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                DataRow[] erows = Table.Select("ClientID=" + ClientID);
                if (erows.Count() == 0)
                    continue;
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);

                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();

                if (FactoryID == 0)
                {
                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = MarketReadyCurvedFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyCurvedFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    d1 = 0;
                    d2 = 0;

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow[] Rows = MCurvedFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MCurvedFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ReadyPercProfil > 0)
                            {
                                NewRow["ReadyPercProfil"] = ReadyPercProfil;
                                NewRow["CostProfil"] = ReadyCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                NewRow["ReadyPercTPS"] = ReadyPercTPS;
                                NewRow["CostTPS"] = ReadyCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MCurvedFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ReadyPercProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                            }
                        }
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    d1 = 0;
                    d2 = 0;

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ReadyPercProfil > 0)
                            {
                                NewRow["ReadyPercProfil"] = ReadyPercProfil;
                                NewRow["CostProfil"] = ReadyCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                NewRow["ReadyPercTPS"] = ReadyPercTPS;
                                NewRow["CostTPS"] = ReadyCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ReadyPercProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                            }
                        }
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = MarketReadyDecorCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyDecorCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostProfil != 0 || ReadyCostTPS != 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ReadyCostProfil > 0)
                            {
                                NewRow["ReadyPercProfil"] = ReadyPercProfil;
                                NewRow["CostProfil"] = ReadyCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ReadyCostTPS > 0)
                            {
                                NewRow["ReadyPercTPS"] = ReadyPercTPS;
                                NewRow["CostTPS"] = ReadyCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ReadyPercProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                            }
                        }
                    }
                }

                if (FactoryID == 1)
                {
                    ReadyCostProfil = 0;
                    ReadyPercProfil = MarketReadyCurvedFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow[] Rows = MCurvedFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MCurvedFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MCurvedFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                        }
                    }

                    ReadyCostProfil = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                        }
                    }

                    ReadyCostProfil = 0;
                    ReadyPercProfil = MarketReadyDecorCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyCostProfil > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                        }
                    }
                }

                if (FactoryID == 2)
                {
                    ReadyCostTPS = 0;
                    ReadyPercTPS = MarketReadyCurvedFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercTPS > 0)
                    {
                        DataRow[] Rows = MCurvedFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MCurvedFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MCurvedFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercTPS"] = Percentage;
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                        }
                    }

                    ReadyCostTPS = 0;
                    ReadyPercTPS = MarketReadyFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercTPS > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercTPS"] = Percentage;
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                        }
                    }

                    ReadyCostTPS = 0;
                    ReadyPercTPS = MarketReadyDecorCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostTPS > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                        }
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MCurvedFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MCurvedFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void MarketingSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;
            int OrderNumber = 0;

            decimal ReadyPercProfil = 0;
            decimal ReadyPercTPS = 0;

            decimal ReadyCostProfil = 0;
            decimal ReadyCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string ClientName = string.Empty;

            object DocDateTime = null;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);
                OrderNumber = Convert.ToInt32(MarketingClientsDT.Rows[i]["OrderNumber"]);
                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();
                DocDateTime = GetCreationDate(MegaOrderID);

                if (FactoryID == 0)
                {
                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = MarketReadyCurvedFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyCurvedFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow NewRow = MCurvedFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ReadyPercProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                        }
                        if (ReadyPercTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                        }
                        MCurvedFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ReadyPercProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                        }
                        if (ReadyPercTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                        }
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = MarketReadyDecorCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyDecorCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostProfil != 0 || ReadyCostTPS != 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ReadyCostProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                        }
                        if (ReadyCostTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                        }
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 1)
                {
                    ReadyCostProfil = 0;
                    ReadyPercProfil = MarketReadyCurvedFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow NewRow = MCurvedFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        MCurvedFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyPercProfil = MarketReadyDecorCost(true, MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyCostProfil > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientName"] = ClientID;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 2)
                {
                    ReadyCostTPS = 0;
                    ReadyPercTPS = MarketReadyCurvedFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercTPS > 0)
                    {
                        DataRow NewRow = MCurvedFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        MCurvedFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostTPS = 0;
                    ReadyPercTPS = MarketReadyFrontsCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercTPS > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostTPS = 0;
                    ReadyPercTPS = MarketReadyDecorCost(true, MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostTPS > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MCurvedFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MCurvedFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void PrepareSummary(int FactoryID)
        {
            decimal ReadyPercProfil = 0;
            decimal ReadyPercTPS = 0;

            decimal ReadyCostProfil = 0;
            decimal ReadyCostTPS = 0;
            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string DocDateTime = string.Empty;

            PrepareFSummaryDT.Clear();
            PrepareDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < ZOVPrepareDT.Rows.Count; i++)
            {
                DocDateTime = ZOVPrepareDT.Rows[i]["DocDateTime"].ToString();

                if (FactoryID == 0)
                {
                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = PrepareReadyCurvedFrontsCost(DocDateTime, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = PrepareReadyCurvedFrontsCost(DocDateTime, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow NewRow = PrepareCurvedFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        if (ReadyPercProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                        }
                        if (ReadyPercTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                        }
                        PrepareCurvedFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = PrepareReadyFrontsCost(DocDateTime, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = PrepareReadyFrontsCost(DocDateTime, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow NewRow = PrepareFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        if (ReadyPercProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                        }
                        if (ReadyPercTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                        }
                        PrepareFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ReadyPercProfil = PrepareReadyDecorCost(DocDateTime, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = PrepareReadyDecorCost(DocDateTime, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostProfil != 0 || ReadyCostTPS != 0)
                    {
                        DataRow NewRow = PrepareDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        if (ReadyCostProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                        }
                        if (ReadyCostTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                        }
                        PrepareDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 1)
                {
                    ReadyCostProfil = 0;
                    ReadyPercProfil = PrepareReadyCurvedFrontsCost(DocDateTime, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow NewRow = PrepareCurvedFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        PrepareCurvedFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyPercProfil = PrepareReadyFrontsCost(DocDateTime, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow NewRow = PrepareFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        PrepareFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyPercProfil = PrepareReadyDecorCost(DocDateTime, 1, ref ReadyCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow NewRow = PrepareDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        PrepareDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 2)
                {
                    ReadyCostTPS = 0;
                    ReadyPercTPS = PrepareReadyCurvedFrontsCost(DocDateTime, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostTPS > 0)
                    {
                        DataRow NewRow = PrepareCurvedFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        PrepareCurvedFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostTPS = 0;
                    ReadyPercTPS = PrepareReadyFrontsCost(DocDateTime, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostTPS > 0)
                    {
                        DataRow NewRow = PrepareFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        PrepareFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostTPS = 0;
                    ReadyPercTPS = PrepareReadyDecorCost(DocDateTime, 2, ref ReadyCostTPS, ref AllCostTPS);

                    if (ReadyCostTPS > 0)
                    {
                        DataRow NewRow = PrepareDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        PrepareDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            PrepareFSummaryBS.MoveFirst();
            PrepareFSummaryBS.MoveFirst();
            PrepareDSummaryBS.MoveFirst();
        }

        public void FMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width<>-1" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void FMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width<>-1" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void CurvedFMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width=-1" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                CurvedFrontsOrdersDT.Clear();
                DA.Fill(CurvedFrontsOrdersDT);
            }

            GetCurvedFronts();
        }

        public void CurvedFMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width=-1" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                CurvedFrontsOrdersDT.Clear();
                DA.Fill(CurvedFrontsOrdersDT);
            }

            GetCurvedFronts();
        }

        public void DMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public void DMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public void PrepareOrders(int FactoryID)
        {
            string ZOVSelectCommand = string.Empty;

            string ZFrontsPackageFilter = string.Empty;
            string ZDecorPackageFilter = string.Empty;

            string PackageFactoryFilter = string.Empty;

            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            ZFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 0 " + PackageFactoryFilter + ")";

            ZDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 1 " + PackageFactoryFilter + ")";

            ZOVSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID," +
                " FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width," +
                " PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, MeasureID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width<>-1" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID = 0) AND " + ZFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);

            }

            GetFronts();

            ZOVSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID," +
                " FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width," +
                " PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, MeasureID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID AND FrontsOrders.Width=-1" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID = 0) AND " + ZFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                CurvedFrontsOrdersDT.Clear();
                DA.Fill(CurvedFrontsOrdersDT);
            }

            GetCurvedFronts();

            //decor
            ZOVSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count," +
                " (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID = 0) AND " + ZDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();

            PrepareSummary(FactoryID);
        }

        public bool HasCurvedFronts
        {
            get { return CurvedFrontsOrdersDT.Rows.Count > 0; }
        }

        public bool HasFronts
        {
            get { return FrontsOrdersDT.Rows.Count > 0; }
        }

        public bool HasDecor
        {
            get { return DecorOrdersDT.Rows.Count > 0; }
        }

        public void FilterDecorProducts(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBS.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBS.MoveFirst();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    FrontsSummaryDT.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDT.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBS.MoveFirst();
        }

        private void GetCurvedFronts()
        {
            decimal FrontCost = 0;
            int FrontCount = 0;

            CurvedFrontsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(CurvedFrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = CurvedFrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = CurvedFrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["Width"] = 0;
                    CurvedFrontsSummaryDT.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            CurvedFrontsSummaryDT.DefaultView.Sort = "Front";
            CurvedFrontsSummaryBS.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                //if (DecorProductCount < 3)
                //    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDT.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBS.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDT.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBS.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count)
        {
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
            {
                Square += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Square"]);
                Count += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                Cost += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Square = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
        }

        public void GetCurvedFrontsInfo(ref decimal Cost, ref int CurvedCount)
        {
            for (int i = 0; i < CurvedFrontsSummaryDT.Rows.Count; i++)
            {
                CurvedCount += Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Count"]);
                Cost += Convert.ToDecimal(CurvedFrontsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref int Count)
        {
            for (int i = 0; i < DecorProductsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["MeasureID"]) != 2)
                    Count += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Pogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Pogon = Decimal.Round(Pogon, 2, MidpointRounding.AwayFromZero);
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDT.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDT.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorItemsDT.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void ClearCurvedFrontsOrders(int TypeOrders)
        {
            if (TypeOrders == 1)
            {
                MCurvedFSummaryDT.Clear();
            }
            if (TypeOrders == 2)
            {
                PrepareCurvedFSummaryDT.Clear();
            }
        }

        public void ClearFrontsOrders(int TypeOrders)
        {
            if (TypeOrders == 1)
            {
                MFSummaryDT.Clear();
            }
            if (TypeOrders == 2)
            {
                PrepareFSummaryDT.Clear();
            }
        }

        public void ClearDecorOrders(int TypeOrders)
        {
            if (TypeOrders == 1)
            {
                MDSummaryDT.Clear();
            }
            if (TypeOrders == 2)
            {
                PrepareDSummaryDT.Clear();
            }
        }

        private decimal MarketReadyCurvedFrontsCost(bool IsMarket, int MegaOrderID, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyFrontsCost = 0;
            decimal AllFrontsCost = 0;

            if (IsMarket)
            {
                DataRow[] RFRows = MReadyCurvedFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = MAllCurvedFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }
            else
            {
                DataRow[] RFRows = ZReadyCurvedFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = ZAllCurvedFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }

            ReadyCost = ReadyFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ReadyFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketReadyFrontsCost(bool IsMarket, int MegaOrderID, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyFrontsCost = 0;
            decimal AllFrontsCost = 0;

            if (IsMarket)
            {
                DataRow[] RFRows = MReadyFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = MAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }
            else
            {
                DataRow[] RFRows = ZReadyCurvedFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = ZAllCurvedFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }

            ReadyCost = ReadyFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ReadyFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketReadyDecorCost(bool IsMarket, int MegaOrderID, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyDecorCost = 0;
            decimal AllDecorCost = 0;

            if (IsMarket)
            {
                DataRow[] RDRows = MReadyDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RDRows)
                    ReadyDecorCost += Convert.ToDecimal(Row["DecorCost"]);

                DataRow[] ADRows = MAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in ADRows)
                    AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);
            }
            else
            {
                DataRow[] RDRows = ZReadyDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RDRows)
                    ReadyDecorCost += Convert.ToDecimal(Row["DecorCost"]);

                DataRow[] ADRows = ZAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in ADRows)
                    AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);
            }

            ReadyCost = ReadyDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ReadyDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal PrepareReadyCurvedFrontsCost(string DocDateTime, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = PrepareReadyCurvedFrontsCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = PrepareAllCurvedFrontsCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            ReadyCost = ReadyFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ReadyFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal PrepareReadyFrontsCost(string DocDateTime, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = PrepareReadyFrontsCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = PrepareAllFrontsCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            ReadyCost = ReadyFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ReadyFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal PrepareReadyDecorCost(string DocDateTime, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyDecorCost = 0;
            decimal AllDecorCost = 0;

            DataRow[] RDRows = PrepareReadyDecorCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RDRows)
                ReadyDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DataRow[] ADRows = PrepareAllDecorCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in ADRows)
                AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            ReadyCost = ReadyDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ReadyDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private object GetCreationDate(int MegaOrderID)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            object DocDateTime = null;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT OrderDate FROM MegaOrders" +
                " WHERE MegaOrderID = " + MegaOrderID,
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["OrderDate"] != DBNull.Value)
                        DocDateTime = Convert.ToDateTime(DT.Rows[0]["OrderDate"]);
                }
            }
            return DocDateTime;
        }
    }


    public class ExpeditionStatistics
    {
        DataTable MFSummaryDT = null;
        DataTable MDSummaryDT = null;
        DataTable PrepareFSummaryDT = null;
        DataTable PrepareDSummaryDT = null;
        DataTable ZFSummaryDT = null;
        DataTable ZDSummaryDT = null;

        DataTable MarketingClientsDT = null;
        DataTable ZOVDispatchDT = null;
        DataTable ZOVPrepareDT = null;

        DataTable MExpFrontsCostDT = null;
        DataTable MExpDecorCostDT = null;
        DataTable MAllFrontsCostDT = null;
        DataTable MAllDecorCostDT = null;

        DataTable PrepareExpFrontsCostDT = null;
        DataTable PrepareExpDecorCostDT = null;
        DataTable PrepareAllFrontsCostDT = null;
        DataTable PrepareAllDecorCostDT = null;

        DataTable ZExpFrontsCostDT = null;
        DataTable ZExpDecorCostDT = null;
        DataTable ZAllFrontsCostDT = null;
        DataTable ZAllDecorCostDT = null;

        DataTable FrontsOrdersDT = null;
        DataTable DecorOrdersDT = null;

        DataTable TempFrontsDT = null;
        DataTable TempDecorDT = null;

        DataTable FrontsSummaryDT = null;
        DataTable DecorProductsSummaryDT = null;
        DataTable DecorItemsSummaryDT = null;
        DataTable DecorConfigDT = null;

        DataTable FrontsDT = null;
        DataTable DecorProductsDT = null;
        DataTable DecorItemsDT = null;

        public BindingSource MFSummaryBS = null;
        public BindingSource MDSummaryBS = null;
        public BindingSource PrepareFSummaryBS = null;
        public BindingSource PrepareDSummaryBS = null;
        public BindingSource ZFSummaryBS = null;
        public BindingSource ZDSummaryBS = null;

        public BindingSource FrontsSummaryBS = null;
        public BindingSource DecorProductsSummaryBS = null;
        public BindingSource DecorItemsSummaryBS = null;

        PercentageDataGrid MFSummaryDG = null;
        PercentageDataGrid MDSummaryDG = null;
        PercentageDataGrid PrepareFSummaryDG = null;
        PercentageDataGrid PrepareDSummaryDG = null;
        PercentageDataGrid ZFSummaryDG = null;
        PercentageDataGrid ZDSummaryDG = null;
        PercentageDataGrid FrontsDG = null;
        PercentageDataGrid DecorProductsDG = null;
        PercentageDataGrid DecorItemsDG = null;

        public ExpeditionStatistics(
            ref PercentageDataGrid tMFSummaryDG,
            ref PercentageDataGrid tMDSummaryDG,
            ref PercentageDataGrid tPrepareFSummaryDG,
            ref PercentageDataGrid tPrepareDSummaryDG,
            ref PercentageDataGrid tZFSummaryDG,
            ref PercentageDataGrid tZDSummaryDG,
            ref PercentageDataGrid tFrontsDG,
            ref PercentageDataGrid tDecorProductsDG,
            ref PercentageDataGrid tDecorItemsDG)
        {
            MFSummaryDG = tMFSummaryDG;
            MDSummaryDG = tMDSummaryDG;
            PrepareFSummaryDG = tPrepareFSummaryDG;
            PrepareDSummaryDG = tPrepareDSummaryDG;
            ZFSummaryDG = tZFSummaryDG;
            ZDSummaryDG = tZDSummaryDG;
            FrontsDG = tFrontsDG;
            DecorProductsDG = tDecorProductsDG;
            DecorItemsDG = tDecorItemsDG;

            Initialize();
        }

        private void Create()
        {
            MarketingClientsDT = new DataTable();
            ZOVDispatchDT = new DataTable();
            ZOVPrepareDT = new DataTable();

            MExpFrontsCostDT = new DataTable();
            MExpDecorCostDT = new DataTable();
            MAllFrontsCostDT = new DataTable();
            MAllDecorCostDT = new DataTable();

            ZExpFrontsCostDT = new DataTable();
            ZExpDecorCostDT = new DataTable();
            ZAllFrontsCostDT = new DataTable();
            ZAllDecorCostDT = new DataTable();

            PrepareExpFrontsCostDT = new DataTable();
            PrepareExpDecorCostDT = new DataTable();
            PrepareAllFrontsCostDT = new DataTable();
            PrepareAllDecorCostDT = new DataTable();

            TempFrontsDT = new DataTable();
            TempDecorDT = new DataTable();

            DecorItemsDT = new DataTable();
            FrontsDT = new DataTable();
            DecorProductsDT = new DataTable();
            DecorConfigDT = new DataTable();

            FrontsOrdersDT = new DataTable();
            DecorOrdersDT = new DataTable();

            MFSummaryDT = new DataTable();
            MFSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MFSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpDateTPS"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpDateProfil"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            MDSummaryDT = new DataTable();
            MDSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MDSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpDateTPS"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpDateProfil"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            PrepareFSummaryDT = new DataTable();
            PrepareFSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            PrepareFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));

            PrepareDSummaryDT = new DataTable();
            PrepareDSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            PrepareDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));

            ZFSummaryDT = new DataTable();
            ZFSummaryDT.Columns.Add(new DataColumn(("DispatchDate"), System.Type.GetType("System.DateTime")));
            ZFSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            ZFSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            ZFSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            ZFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            ZFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));

            ZDSummaryDT = new DataTable();
            ZDSummaryDT.Columns.Add(new DataColumn(("DispatchDate"), System.Type.GetType("System.DateTime")));
            ZDSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            ZDSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            ZDSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            ZDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            ZDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));

            FrontsSummaryDT = new DataTable();
            FrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDT = new DataTable();
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT ProductID, ProductName FROM DecorProducts" +
                " WHERE ProductID IN (SELECT ProductID FROM DecorConfig WHERE Enabled = 1) ORDER BY ProductName ASC";
            DecorProductsDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDT);
            }
            DecorItemsDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorItemsDT);
            }

            SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDT);
            //}
            DecorConfigDT = TablesManager.DecorConfigDataTable;

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            sw.Stop();
            double G = sw.Elapsed.TotalMilliseconds;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                TempFrontsDT.Clear();
                DA.Fill(TempFrontsDT);
            }

            //decor
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(TempDecorDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDT);
            }
        }

        public void FillMarketingTables()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT MegaOrders.ClientID, infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID
            FROM MegaOrders
            INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
            WHERE MegaOrders.MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID IN (4)))
            ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MarketingClientsDT.Clear();
                DA.Fill(MarketingClientsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (4))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MExpFrontsCostDT.Clear();
                DA.Fill(MExpFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID IN (4))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MExpDecorCostDT.Clear();
                DA.Fill(MExpDecorCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllFrontsCostDT.Clear();
                DA.Fill(MAllFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost) AS DecorCost
            FROM DecorOrders INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE DecorOrders.DecorOrderID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllDecorCostDT.Clear();
                DA.Fill(MAllDecorCostDT);
            }
        }

        private void Binding()
        {
            MFSummaryBS = new BindingSource()
            {
                DataSource = MFSummaryDT
            };
            MFSummaryDG.DataSource = MFSummaryBS;

            MDSummaryBS = new BindingSource()
            {
                DataSource = MDSummaryDT
            };
            MDSummaryDG.DataSource = MDSummaryBS;

            PrepareFSummaryBS = new BindingSource()
            {
                DataSource = PrepareFSummaryDT
            };
            PrepareFSummaryDG.DataSource = PrepareFSummaryBS;

            PrepareDSummaryBS = new BindingSource()
            {
                DataSource = PrepareDSummaryDT
            };
            PrepareDSummaryDG.DataSource = PrepareDSummaryBS;

            ZFSummaryBS = new BindingSource()
            {
                DataSource = ZFSummaryDT
            };
            ZFSummaryDG.DataSource = ZFSummaryBS;

            ZDSummaryBS = new BindingSource()
            {
                DataSource = ZDSummaryDT
            };
            ZDSummaryDG.DataSource = ZDSummaryBS;

            FrontsSummaryBS = new BindingSource()
            {
                DataSource = FrontsSummaryDT
            };
            FrontsDG.DataSource = FrontsSummaryBS;

            DecorProductsSummaryBS = new BindingSource()
            {
                DataSource = DecorProductsSummaryDT
            };
            DecorProductsDG.DataSource = DecorProductsSummaryBS;

            DecorItemsSummaryBS = new BindingSource()
            {
                DataSource = DecorItemsSummaryDT
            };
            DecorItemsDG.DataSource = DecorItemsSummaryBS;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetProductsGrids();
            MarketSummaryGridSettings();
            PrepareSummaryGridSettings();
            ZOVSummaryGridSettings();
        }

        public void ShowColumns(ref PercentageDataGrid FrontsGrid, ref PercentageDataGrid DecorGrid, bool Profil, bool TPS, bool bClientSummary)
        {
            if (Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ExpPercProfil"].Visible = true;
                FrontsGrid.Columns["ExpPercTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ExpPercProfil"].Visible = true;
                DecorGrid.Columns["ExpPercTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = true;
            }
            if (Profil && !TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = false;
                FrontsGrid.Columns["ExpPercProfil"].Visible = true;
                FrontsGrid.Columns["ExpPercTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = false;
                DecorGrid.Columns["ExpPercProfil"].Visible = true;
                DecorGrid.Columns["ExpPercTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = true;
            }
            if (!Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = false;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ExpPercProfil"].Visible = false;
                FrontsGrid.Columns["ExpPercTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = false;

                DecorGrid.Columns["CostProfil"].Visible = false;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ExpPercProfil"].Visible = false;
                DecorGrid.Columns["ExpPercTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = false;
            }
            if (bClientSummary)
            {
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = false;
            }
        }

        private void MarketSummaryGridSettings()
        {
            MFSummaryDG.Columns["MegaOrderID"].Visible = false;
            MFSummaryDG.Columns["ClientID"].Visible = false;
            MDSummaryDG.Columns["MegaOrderID"].Visible = false;
            MDSummaryDG.Columns["ClientID"].Visible = false;

            MFSummaryDG.Columns["AllCostProfil"].Visible = false;
            MDSummaryDG.Columns["AllCostProfil"].Visible = false;
            MFSummaryDG.Columns["AllCostTPS"].Visible = false;
            MDSummaryDG.Columns["AllCostTPS"].Visible = false;

            if (!Security.PriceAccess)
            {
                MFSummaryDG.Columns["CostProfil"].Visible = false;
                MFSummaryDG.Columns["CostTPS"].Visible = false;
                MDSummaryDG.Columns["CostProfil"].Visible = false;
                MDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in MFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in MDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            MFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MFSummaryDG.Columns["ExpDateTPS"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MFSummaryDG.Columns["ExpDateProfil"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MFSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MFSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MFSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            MFSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r      ТПС, %";
            MFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MFSummaryDG.Columns["ExpDateProfil"].HeaderText = "Профиль, вход\n\r   на эксп-цию";
            MFSummaryDG.Columns["ExpDateTPS"].HeaderText = "  ТПС, вход\n\rна эксп-цию";
            MFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MFSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MFSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["OrderNumber"].Width = 85;
            MFSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            MFSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            MFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostProfil"].Width = 110;
            MFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostTPS"].Width = 110;
            MFSummaryDG.Columns["ExpDateTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ExpDateTPS"].MinimumWidth = 110;
            MFSummaryDG.Columns["ExpDateProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ExpDateProfil"].MinimumWidth = 110;

            //MFSummaryDG.Columns["AllCostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MFSummaryDG.Columns["AllCostProfil"].Width = 110;
            //MFSummaryDG.Columns["AllCostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MFSummaryDG.Columns["AllCostTPS"].Width = 110;

            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MFSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ExpPercProfil");
            MFSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ExpPercTPS");

            MDSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MDSummaryDG.Columns["ExpDateTPS"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MDSummaryDG.Columns["ExpDateProfil"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MDSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MDSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MDSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MDSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            MDSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r     ТПС, %";
            MDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MDSummaryDG.Columns["ExpDateProfil"].HeaderText = "Профиль, вход\n\r   на эксп-цию";
            MDSummaryDG.Columns["ExpDateTPS"].HeaderText = "  ТПС, вход\n\rна эксп-цию";
            MDSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MDSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MDSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["OrderNumber"].Width = 85;
            MDSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            MDSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            MDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostProfil"].Width = 110;
            MDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostTPS"].Width = 110;
            MDSummaryDG.Columns["ExpDateTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ExpDateTPS"].MinimumWidth = 110;
            MDSummaryDG.Columns["ExpDateProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ExpDateProfil"].MinimumWidth = 110;

            //MDSummaryDG.Columns["AllCostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MDSummaryDG.Columns["AllCostProfil"].Width = 110;
            //MDSummaryDG.Columns["AllCostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MDSummaryDG.Columns["AllCostTPS"].Width = 110;

            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MDSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ExpPercProfil");
            MDSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ExpPercTPS");

        }

        private void PrepareSummaryGridSettings()
        {
            if (!Security.PriceAccess)
            {
                PrepareFSummaryDG.Columns["CostProfil"].Visible = false;
                PrepareFSummaryDG.Columns["CostTPS"].Visible = false;
                PrepareDSummaryDG.Columns["CostProfil"].Visible = false;
                PrepareDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in PrepareFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in PrepareDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            PrepareFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            PrepareFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            PrepareFSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            PrepareFSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r      ТПС, %";
            PrepareFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            PrepareFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            PrepareFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            PrepareFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            PrepareFSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareFSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            PrepareFSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareFSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            PrepareFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareFSummaryDG.Columns["CostProfil"].Width = 110;
            PrepareFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareFSummaryDG.Columns["CostTPS"].Width = 110;
            PrepareFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            PrepareFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            PrepareFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            PrepareFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            PrepareFSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareFSummaryDG.AddPercentageColumn("ExpPercProfil");
            PrepareFSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareFSummaryDG.AddPercentageColumn("ExpPercTPS");

            PrepareDSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            PrepareDSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            PrepareDSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            PrepareDSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r     ТПС, %";
            PrepareDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            PrepareDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            PrepareDSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            PrepareDSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            PrepareDSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareDSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            PrepareDSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            PrepareDSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            PrepareDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareDSummaryDG.Columns["CostProfil"].Width = 110;
            PrepareDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            PrepareDSummaryDG.Columns["CostTPS"].Width = 110;
            PrepareDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            PrepareDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            PrepareDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            PrepareDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            PrepareDSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareDSummaryDG.AddPercentageColumn("ExpPercProfil");
            PrepareDSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            PrepareDSummaryDG.AddPercentageColumn("ExpPercTPS");
        }

        private void ZOVSummaryGridSettings()
        {
            if (!Security.PriceAccess)
            {
                ZFSummaryDG.Columns["CostProfil"].Visible = false;
                ZFSummaryDG.Columns["CostTPS"].Visible = false;
                ZDSummaryDG.Columns["CostProfil"].Visible = false;
                ZDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in ZFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in ZDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            ZFSummaryDG.Columns["DispatchDate"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZFSummaryDG.Columns["DispatchDate"].HeaderText = "Дата отгрузки";
            ZFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            ZFSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            ZFSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r      ТПС, %";
            ZFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            ZFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            ZFSummaryDG.Columns["DispatchDate"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZFSummaryDG.Columns["DispatchDate"].MinimumWidth = 110;
            ZFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            ZFSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZFSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            ZFSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZFSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            ZFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZFSummaryDG.Columns["CostProfil"].Width = 110;
            ZFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZFSummaryDG.Columns["CostTPS"].Width = 110;
            ZFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            ZFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            ZFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            ZFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            ZFSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZFSummaryDG.AddPercentageColumn("ExpPercProfil");
            ZFSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZFSummaryDG.AddPercentageColumn("ExpPercTPS");

            ZDSummaryDG.Columns["DispatchDate"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZDSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZDSummaryDG.Columns["DispatchDate"].HeaderText = "Дата отгрузки";
            ZDSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            ZDSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            ZDSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r     ТПС, %";
            ZDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            ZDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            ZDSummaryDG.Columns["DispatchDate"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZDSummaryDG.Columns["DispatchDate"].MinimumWidth = 110;
            ZDSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZDSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            ZDSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZDSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            ZDSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZDSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            ZDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZDSummaryDG.Columns["CostProfil"].Width = 110;
            ZDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZDSummaryDG.Columns["CostTPS"].Width = 110;
            ZDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            ZDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            ZDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            ZDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            ZDSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZDSummaryDG.AddPercentageColumn("ExpPercProfil");
            ZDSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZDSummaryDG.AddPercentageColumn("ExpPercTPS");
        }

        private void SetProductsGrids()
        {
            if (!Security.PriceAccess)
            {
                FrontsDG.Columns["Cost"].Visible = false;
                DecorProductsDG.Columns["Cost"].Visible = false;
                DecorItemsDG.Columns["Cost"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            FrontsDG.ColumnHeadersHeight = 38;
            DecorProductsDG.ColumnHeadersHeight = 38;
            DecorItemsDG.ColumnHeadersHeight = 38;

            foreach (DataGridViewColumn Column in FrontsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorProductsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorItemsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            FrontsDG.Columns["FrontID"].Visible = false;
            FrontsDG.Columns["Width"].Visible = false;

            FrontsDG.Columns["Front"].HeaderText = "Фасад";
            FrontsDG.Columns["Cost"].HeaderText = " € ";
            FrontsDG.Columns["Square"].HeaderText = "м.кв.";
            FrontsDG.Columns["Count"].HeaderText = "шт.";

            FrontsDG.Columns["Front"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            FrontsDG.Columns["Front"].MinimumWidth = 110;
            FrontsDG.Columns["Square"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Square"].Width = 100;
            FrontsDG.Columns["Cost"].Width = 100;
            FrontsDG.Columns["Count"].Width = 90;

            FrontsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            FrontsDG.Columns["Square"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Square"].DefaultCellStyle.FormatProvider = nfi1;

            DecorProductsDG.Columns["ProductID"].Visible = false;
            DecorProductsDG.Columns["MeasureID"].Visible = false;

            DecorItemsDG.Columns["ProductID"].Visible = false;
            DecorItemsDG.Columns["DecorID"].Visible = false;
            DecorItemsDG.Columns["MeasureID"].Visible = false;

            DecorProductsDG.Columns["DecorProduct"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorProductsDG.Columns["DecorProduct"].MinimumWidth = 100;
            DecorProductsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Cost"].Width = 100;
            DecorProductsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Count"].Width = 100;
            DecorProductsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Measure"].Width = 90;

            DecorProductsDG.Columns["DecorProduct"].HeaderText = "Продукт";
            DecorProductsDG.Columns["Cost"].HeaderText = " € ";
            DecorProductsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorProductsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            DecorItemsDG.Columns["DecorID"].Visible = false;

            DecorItemsDG.Columns["DecorItem"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorItemsDG.Columns["DecorItem"].MinimumWidth = 100;
            DecorItemsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Cost"].Width = 100;
            DecorItemsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Count"].Width = 100;
            DecorItemsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Measure"].Width = 90;

            DecorItemsDG.Columns["DecorItem"].HeaderText = "Наименование";
            DecorItemsDG.Columns["Cost"].HeaderText = " € ";
            DecorItemsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorItemsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            FrontsDG.Columns["Square"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        }

        public void ClientSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;

            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            decimal Percentage = 0;
            decimal d1 = 0;
            decimal d2 = 0;

            string ClientName = string.Empty;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(MarketingClientsDT))
            {
                Table = DV.ToTable(true, new string[] { "ClientID" });
            }

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);

                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();

                if (FactoryID == 0)
                {
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpFrontsCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpFrontsCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    d1 = 0;
                    d2 = 0;

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ExpCostProfil > 0)
                            {
                                NewRow["ExpPercProfil"] = ExpPercProfil;
                                NewRow["CostProfil"] = ExpCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                NewRow["ExpPercTPS"] = ExpPercTPS;
                                NewRow["CostTPS"] = ExpCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ExpCostProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                            }
                        }
                    }

                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpDecorCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpDecorCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ExpCostProfil > 0)
                            {
                                NewRow["ExpPercProfil"] = ExpPercProfil;
                                NewRow["CostProfil"] = ExpCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                NewRow["ExpPercTPS"] = ExpPercTPS;
                                NewRow["CostTPS"] = ExpCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ExpCostProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                            }
                        }
                    }
                }

                if (FactoryID == 1)
                {
                    ExpCostProfil = 0;
                    ExpPercProfil = MarketExpFrontsCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                        }
                    }

                    ExpCostProfil = 0;
                    ExpCostProfil = MarketExpDecorCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                        }
                    }
                }

                if (FactoryID == 2)
                {
                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpFrontsCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                        }
                    }

                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpDecorCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                        }
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void MarketingSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;
            int OrderNumber = 0;

            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string ClientName = string.Empty;

            object DocDateTime = null;
            object ExpDateTPS = null;
            object ExpDateProfil = null;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);
                OrderNumber = Convert.ToInt32(MarketingClientsDT.Rows[i]["OrderNumber"]);
                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();
                DocDateTime = GetCreationDate(MegaOrderID);

                if (FactoryID == 0)
                {
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpFrontsCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpFrontsCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            ExpDateProfil = StorageAdoptionDate(true, MegaOrderID, 1, 0);
                            if (ExpDateProfil != null)
                                NewRow["ExpDateProfil"] = ExpDateProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            ExpDateTPS = StorageAdoptionDate(true, MegaOrderID, 2, 0);
                            if (ExpDateTPS != null)
                                NewRow["ExpDateTPS"] = ExpDateTPS;
                        }
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpDecorCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpDecorCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            ExpDateProfil = StorageAdoptionDate(true, MegaOrderID, 1, 1);
                            if (ExpDateProfil != null)
                                NewRow["ExpDateProfil"] = ExpDateProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            ExpDateTPS = StorageAdoptionDate(true, MegaOrderID, 2, 1);
                            if (ExpDateTPS != null)
                                NewRow["ExpDateTPS"] = ExpDateTPS;
                        }
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 1)
                {
                    ExpCostProfil = 0;
                    ExpPercProfil = MarketExpFrontsCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        ExpDateProfil = StorageAdoptionDate(true, MegaOrderID, 1, 0);
                        if (ExpDateProfil != null)
                            NewRow["ExpDateProfil"] = ExpDateProfil;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpCostProfil = MarketExpDecorCost(true, MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientName"] = ClientID;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        ExpDateProfil = StorageAdoptionDate(true, MegaOrderID, 1, 1);
                        if (ExpDateProfil != null)
                            NewRow["ExpDateProfil"] = ExpDateProfil;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 2)
                {
                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpFrontsCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        ExpDateTPS = StorageAdoptionDate(true, MegaOrderID, 2, 0);
                        if (ExpDateTPS != null)
                            NewRow["ExpDateTPS"] = ExpDateTPS;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpDecorCost(true, MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        ExpDateTPS = StorageAdoptionDate(true, MegaOrderID, 2, 1);
                        if (ExpDateTPS != null)
                            NewRow["ExpDateTPS"] = ExpDateTPS;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void PrepareSummary(int FactoryID)
        {
            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;
            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string DocDateTime = string.Empty;

            PrepareFSummaryDT.Clear();
            PrepareDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < ZOVPrepareDT.Rows.Count; i++)
            {
                DocDateTime = ZOVPrepareDT.Rows[i]["DocDateTime"].ToString();

                if (FactoryID == 0)
                {
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = PrepareExpFrontsCost(DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = PrepareExpFrontsCost(DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = PrepareFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                        }
                        PrepareFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = PrepareExpDecorCost(DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = PrepareExpDecorCost(DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = PrepareDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                        }
                        PrepareDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 1)
                {
                    ExpCostProfil = 0;
                    ExpPercProfil = PrepareExpFrontsCost(DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = PrepareFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        PrepareFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpPercProfil = PrepareExpDecorCost(DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = PrepareDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        PrepareDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 2)
                {
                    ExpCostTPS = 0;
                    ExpPercTPS = PrepareExpFrontsCost(DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = PrepareFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        PrepareFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostTPS = 0;
                    ExpPercTPS = PrepareExpDecorCost(DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = PrepareDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        PrepareDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            //PrepareFSummaryDT.DefaultView.Sort = "ReadyPercTPS desc, ExpPercTPS desc, ReadyPercProfil desc, ExpPercProfil desc";
            //PrepareDSummaryDT.DefaultView.Sort = "ReadyPercTPS desc, ExpPercTPS desc, ReadyPercProfil desc, ExpPercProfil desc";
            PrepareFSummaryBS.MoveFirst();
            PrepareDSummaryBS.MoveFirst();
        }

        public void ZOVSummary(int FactoryID)
        {
            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;
            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string DocDateTime = string.Empty;
            string DispatchDate = string.Empty;

            ZFSummaryDT.Clear();
            ZDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < ZOVDispatchDT.Rows.Count; i++)
            {
                DispatchDate = ZOVDispatchDT.Rows[i]["DispatchDate"].ToString();
                DocDateTime = ZOVDispatchDT.Rows[i]["DocDateTime"].ToString();

                if (FactoryID == 0)
                {
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = ZOVExpFrontsCost(DispatchDate, DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = ZOVExpFrontsCost(DispatchDate, DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = ZFSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DocDateTime"] = DocDateTime;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                        }
                        ZFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = ZOVExpDecorCost(DispatchDate, DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = ZOVExpDecorCost(DispatchDate, DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = ZDSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DocDateTime"] = DocDateTime;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                        }
                        ZDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 1)
                {
                    ExpCostProfil = 0;
                    ExpPercProfil = ZOVExpFrontsCost(DispatchDate, DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = ZFSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        ZFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpPercProfil = ZOVExpDecorCost(DispatchDate, DocDateTime, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = ZDSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        ZDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 2)
                {
                    ExpCostTPS = 0;
                    ExpPercTPS = ZOVExpFrontsCost(DispatchDate, DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = ZFSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        ZFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostTPS = 0;
                    ExpPercTPS = ZOVExpDecorCost(DispatchDate, DocDateTime, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = ZDSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        ZDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            //ZFSummaryDT.DefaultView.Sort = "ReadyPercTPS desc, ExpPercTPS desc, ReadyPercProfil desc, ExpPercProfil desc";
            //ZDSummaryDT.DefaultView.Sort = "ReadyPercTPS desc, ExpPercTPS desc, ReadyPercProfil desc, ExpPercProfil desc";
            ZFSummaryBS.MoveFirst();
            ZDSummaryBS.MoveFirst();
        }

        public void FMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void FMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void DMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public void DMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public bool HasFronts
        {
            get { return FrontsOrdersDT.Rows.Count > 0; }
        }

        public bool HasDecor
        {
            get { return DecorOrdersDT.Rows.Count > 0; }
        }

        public void FilterDecorProducts(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBS.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBS.MoveFirst();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["Width"] = 0;
                    FrontsSummaryDT.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
                DataRow[] CurvedRows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDT.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гнутый";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrontCount;
                    FrontsSummaryDT.Rows.Add(CurvedNewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDT.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBS.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                //if (DecorProductCount < 3)
                //    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDT.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBS.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDT.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBS.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count, ref int CurvedCount)
        {
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(FrontsSummaryDT.Rows[i]["Width"]) == -1)
                    CurvedCount += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Square += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Square"]);
                    Count += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Square = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref int Count)
        {
            for (int i = 0; i < DecorProductsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["MeasureID"]) != 2)
                    Count += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Pogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Pogon = Decimal.Round(Pogon, 2, MidpointRounding.AwayFromZero);
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDT.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDT.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorItemsDT.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void ClearFrontsOrders(int TypeOrders)
        {
            if (TypeOrders == 1)
            {
                MFSummaryDT.Clear();
            }
            if (TypeOrders == 2)
            {
                PrepareFSummaryDT.Clear();
            }
            if (TypeOrders == 3)
            {
                ZFSummaryDT.Clear();
            }
        }

        public void ClearDecorOrders(int TypeOrders)
        {
            if (TypeOrders == 1)
            {
                MDSummaryDT.Clear();
            }
            if (TypeOrders == 2)
            {
                PrepareDSummaryDT.Clear();
            }
            if (TypeOrders == 3)
            {
                ZDSummaryDT.Clear();
            }
        }

        private decimal MarketExpFrontsCost(bool IsMarket, int MegaOrderID, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ExpFrontsCost = 0;
            decimal AllFrontsCost = 0;

            if (IsMarket)
            {
                DataRow[] RFRows = MExpFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    ExpFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = MAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }
            else
            {
                DataRow[] RFRows = ZExpFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    ExpFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = ZAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }

            ExpCost = ExpFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ExpFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketExpDecorCost(bool IsMarket, int MegaOrderID, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ExpDecorCost = 0;
            decimal AllDecorCost = 0;

            if (IsMarket)
            {
                DataRow[] RDRows = MExpDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RDRows)
                    ExpDecorCost += Convert.ToDecimal(Row["DecorCost"]);

                DataRow[] ADRows = MAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in ADRows)
                    AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);
            }
            else
            {
                DataRow[] RDRows = ZExpDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RDRows)
                    ExpDecorCost += Convert.ToDecimal(Row["DecorCost"]);

                DataRow[] ADRows = ZAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in ADRows)
                    AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);
            }

            ExpCost = ExpDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ExpDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal PrepareExpFrontsCost(string DocDateTime, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = PrepareExpFrontsCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = PrepareAllFrontsCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            ExpCost = ReadyFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ReadyFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal PrepareExpDecorCost(string DocDateTime, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyDecorCost = 0;
            decimal AllDecorCost = 0;

            DataRow[] RDRows = PrepareExpDecorCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RDRows)
                ReadyDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DataRow[] ADRows = PrepareAllDecorCostDT.Select("DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in ADRows)
                AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            ExpCost = ReadyDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ReadyDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal ZOVExpFrontsCost(string DispatchDate, string DocDateTime, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = ZExpFrontsCostDT.Select("DispatchDate = '" + DispatchDate + "' AND DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = ZAllFrontsCostDT.Select("DispatchDate = '" + DispatchDate + "' AND DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            ExpCost = ReadyFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ReadyFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal ZOVExpDecorCost(string DispatchDate, string DocDateTime, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyDecorCost = 0;
            decimal AllDecorCost = 0;

            DataRow[] RDRows = ZExpDecorCostDT.Select("DispatchDate = '" + DispatchDate + "' AND DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RDRows)
                ReadyDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DataRow[] ADRows = ZAllDecorCostDT.Select("DispatchDate = '" + DispatchDate + "' AND DocDateTime = '" + DocDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in ADRows)
                AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            ExpCost = ReadyDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ReadyDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private object GetCreationDate(int MegaOrderID)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            object DocDateTime = null;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT OrderDate FROM MegaOrders" +
                " WHERE MegaOrderID = " + MegaOrderID,
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["OrderDate"] != DBNull.Value)
                        DocDateTime = Convert.ToDateTime(DT.Rows[0]["OrderDate"]);
                }
            }
            return DocDateTime;
        }
        private object StorageAdoptionDate(bool IsMarket, int MegaOrderID, int FactoryID, int ProductType)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (!IsMarket)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            object StorageDateTime = null;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MIN(StorageDateTime) AS StorageDate FROM Packages" +
                " WHERE ProductType = " + ProductType + " AND FactoryID = " + FactoryID + " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                " WHERE MegaOrderID = " + MegaOrderID + ")",
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["StorageDate"] != DBNull.Value)
                        StorageDateTime = Convert.ToDateTime(DT.Rows[0]["StorageDate"]);
                }
            }
            return StorageDateTime;
        }
    }


    public class MarketingStorageStatistics
    {
        DataTable MFSummaryDT = null;
        DataTable MDSummaryDT = null;

        DataTable MarketingClientsDT = null;

        DataTable MReadyFrontsCostDT = null;
        DataTable MReadyDecorCostDT = null;
        DataTable MExpFrontsCostDT = null;
        DataTable MExpDecorCostDT = null;
        DataTable MAllFrontsCostDT = null;
        DataTable MAllDecorCostDT = null;

        DataTable FrontsOrdersDT = null;
        DataTable DecorOrdersDT = null;

        DataTable TempFrontsDT = null;
        DataTable TempDecorDT = null;

        DataTable FrontsSummaryDT = null;
        DataTable DecorProductsSummaryDT = null;
        DataTable DecorItemsSummaryDT = null;
        DataTable DecorConfigDT = null;

        DataTable FrontsDT = null;
        DataTable DecorProductsDT = null;
        DataTable DecorItemsDT = null;
        DataTable ClientGroupsDataTable = null;

        public BindingSource MFSummaryBS = null;
        public BindingSource MDSummaryBS = null;

        public BindingSource ClientGroupsBS = null;
        public BindingSource FrontsSummaryBS = null;
        public BindingSource DecorProductsSummaryBS = null;
        public BindingSource DecorItemsSummaryBS = null;

        PercentageDataGrid MFSummaryDG = null;
        PercentageDataGrid MDSummaryDG = null;
        PercentageDataGrid FrontsDG = null;
        PercentageDataGrid DecorProductsDG = null;
        PercentageDataGrid DecorItemsDG = null;

        public MarketingStorageStatistics(
            ref PercentageDataGrid tMFSummaryDG,
            ref PercentageDataGrid tMDSummaryDG,
            ref PercentageDataGrid tFrontsDG,
            ref PercentageDataGrid tDecorProductsDG,
            ref PercentageDataGrid tDecorItemsDG)
        {
            MFSummaryDG = tMFSummaryDG;
            MDSummaryDG = tMDSummaryDG;
            FrontsDG = tFrontsDG;
            DecorProductsDG = tDecorProductsDG;
            DecorItemsDG = tDecorItemsDG;

            Initialize();
        }

        private void Create()
        {
            MarketingClientsDT = new DataTable();

            MReadyFrontsCostDT = new DataTable();
            MReadyDecorCostDT = new DataTable();
            MExpFrontsCostDT = new DataTable();
            MExpDecorCostDT = new DataTable();
            MAllFrontsCostDT = new DataTable();
            MAllDecorCostDT = new DataTable();

            TempFrontsDT = new DataTable();
            TempDecorDT = new DataTable();

            DecorItemsDT = new DataTable();
            FrontsDT = new DataTable();
            DecorProductsDT = new DataTable();
            DecorConfigDT = new DataTable();

            FrontsOrdersDT = new DataTable();
            DecorOrdersDT = new DataTable();
            ClientGroupsDataTable = new DataTable();

            MFSummaryDT = new DataTable();
            MFSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MFSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("ReadyPercTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpDateTPS"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("ReadyPercProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpDateProfil"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            MDSummaryDT = new DataTable();
            MDSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MDSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("ReadyPercTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpDateTPS"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("ReadyPercProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpDateProfil"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            FrontsSummaryDT = new DataTable();
            FrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDT = new DataTable();
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));
        }

        private void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ClientGroups WHERE ClientGroupID<>1",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientGroupsDataTable);
            }
            ClientGroupsDataTable.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
            {
                ClientGroupsDataTable.Rows[i]["Check"] = true;
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT MegaOrders.ClientID, ClientGroupID, infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID
            FROM MegaOrders
            INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
            WHERE MegaOrders.MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID IN (1, 2)))
            ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketingClientsDT);
            }

            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDT);
            }

            SelectCommand = @"SELECT ProductID, ProductName FROM DecorProducts" +
                " WHERE ProductID IN (SELECT ProductID FROM DecorConfig WHERE Enabled = 1) ORDER BY ProductName ASC";
            DecorProductsDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDT);
            }
            DecorItemsDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorItemsDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDT);
            //}
            DecorConfigDT = TablesManager.DecorConfigDataTable;

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            FillMarketingTables();

            sw.Stop();
            double G = sw.Elapsed.TotalMilliseconds;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                TempFrontsDT.Clear();
                DA.Fill(TempFrontsDT);
            }

            //decor
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(TempDecorDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDT);
            }
        }

        private void FillMarketingTables()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (1, 2))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MReadyFrontsCostDT.Clear();
                DA.Fill(MReadyFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID IN (1, 2))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MReadyDecorCostDT.Clear();
                DA.Fill(MReadyDecorCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (2))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MExpFrontsCostDT.Clear();
                DA.Fill(MExpFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID IN (2))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MExpDecorCostDT.Clear();
                DA.Fill(MExpDecorCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllFrontsCostDT.Clear();
                DA.Fill(MAllFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost) AS DecorCost
            FROM DecorOrders INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE DecorOrders.DecorOrderID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllDecorCostDT.Clear();
                DA.Fill(MAllDecorCostDT);
            }
        }

        private void Binding()
        {
            ClientGroupsBS = new BindingSource()
            {
                DataSource = ClientGroupsDataTable
            };
            MFSummaryBS = new BindingSource()
            {
                DataSource = MFSummaryDT
            };
            MFSummaryDG.DataSource = MFSummaryBS;

            MDSummaryBS = new BindingSource()
            {
                DataSource = MDSummaryDT
            };
            MDSummaryDG.DataSource = MDSummaryBS;

            FrontsSummaryBS = new BindingSource()
            {
                DataSource = FrontsSummaryDT
            };
            FrontsDG.DataSource = FrontsSummaryBS;

            DecorProductsSummaryBS = new BindingSource()
            {
                DataSource = DecorProductsSummaryDT
            };
            DecorProductsDG.DataSource = DecorProductsSummaryBS;

            DecorItemsSummaryBS = new BindingSource()
            {
                DataSource = DecorItemsSummaryDT
            };
            DecorItemsDG.DataSource = DecorItemsSummaryBS;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetProductsGrids();
            MarketSummaryGridSettings();
        }

        public void ShowColumns(ref PercentageDataGrid FrontsGrid, ref PercentageDataGrid DecorGrid, bool Profil, bool TPS, bool bClientSummary)
        {
            if (Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = true;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = true;
                FrontsGrid.Columns["ExpPercProfil"].Visible = true;
                FrontsGrid.Columns["ExpPercTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ReadyPercProfil"].Visible = true;
                DecorGrid.Columns["ReadyPercTPS"].Visible = true;
                DecorGrid.Columns["ExpPercProfil"].Visible = true;
                DecorGrid.Columns["ExpPercTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = true;
            }
            if (Profil && !TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = false;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = true;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = false;
                FrontsGrid.Columns["ExpPercProfil"].Visible = true;
                FrontsGrid.Columns["ExpPercTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = false;
                DecorGrid.Columns["ReadyPercProfil"].Visible = true;
                DecorGrid.Columns["ReadyPercTPS"].Visible = false;
                DecorGrid.Columns["ExpPercProfil"].Visible = true;
                DecorGrid.Columns["ExpPercTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = true;
            }
            if (!Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = false;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ReadyPercProfil"].Visible = false;
                FrontsGrid.Columns["ReadyPercTPS"].Visible = true;
                FrontsGrid.Columns["ExpPercProfil"].Visible = false;
                FrontsGrid.Columns["ExpPercTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = false;

                DecorGrid.Columns["CostProfil"].Visible = false;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ReadyPercProfil"].Visible = false;
                DecorGrid.Columns["ReadyPercTPS"].Visible = true;
                DecorGrid.Columns["ExpPercProfil"].Visible = false;
                DecorGrid.Columns["ExpPercTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = false;
            }
            if (bClientSummary)
            {
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = false;
            }
        }

        private void MarketSummaryGridSettings()
        {
            MFSummaryDG.Columns["MegaOrderID"].Visible = false;
            MFSummaryDG.Columns["ClientID"].Visible = false;
            MDSummaryDG.Columns["MegaOrderID"].Visible = false;
            MDSummaryDG.Columns["ClientID"].Visible = false;

            MFSummaryDG.Columns["AllCostProfil"].Visible = false;
            MDSummaryDG.Columns["AllCostProfil"].Visible = false;
            MFSummaryDG.Columns["AllCostTPS"].Visible = false;
            MDSummaryDG.Columns["AllCostTPS"].Visible = false;

            if (!Security.PriceAccess)
            {
                MFSummaryDG.Columns["CostProfil"].Visible = false;
                MFSummaryDG.Columns["CostTPS"].Visible = false;
                MDSummaryDG.Columns["CostProfil"].Visible = false;
                MDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in MFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in MDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            MFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MFSummaryDG.Columns["ExpDateTPS"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MFSummaryDG.Columns["ExpDateProfil"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MFSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MFSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MFSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            MFSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            MFSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            MFSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r      ТПС, %";
            MFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MFSummaryDG.Columns["ExpDateProfil"].HeaderText = "Профиль, вход\n\r   на эксп-цию";
            MFSummaryDG.Columns["ExpDateTPS"].HeaderText = "  ТПС, вход\n\rна эксп-цию";
            MFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MFSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MFSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["OrderNumber"].Width = 85;
            MFSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            MFSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            MFSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            MFSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            MFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostProfil"].Width = 110;
            MFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostTPS"].Width = 110;
            MFSummaryDG.Columns["ExpDateTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ExpDateTPS"].MinimumWidth = 110;
            MFSummaryDG.Columns["ExpDateProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ExpDateProfil"].MinimumWidth = 110;

            //MFSummaryDG.Columns["AllCostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MFSummaryDG.Columns["AllCostProfil"].Width = 110;
            //MFSummaryDG.Columns["AllCostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MFSummaryDG.Columns["AllCostTPS"].Width = 110;

            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MFSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ReadyPercProfil");
            MFSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ReadyPercTPS");
            MFSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ExpPercProfil");
            MFSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ExpPercTPS");

            MDSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MDSummaryDG.Columns["ExpDateTPS"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MDSummaryDG.Columns["ExpDateProfil"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MDSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MDSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MDSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MDSummaryDG.Columns["ReadyPercProfil"].HeaderText = "Произведено\n\r  Профиль, %";
            MDSummaryDG.Columns["ReadyPercTPS"].HeaderText = "Произведено\n\r      ТПС, %";
            MDSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            MDSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r     ТПС, %";
            MDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MDSummaryDG.Columns["ExpDateProfil"].HeaderText = "Профиль, вход\n\r   на эксп-цию";
            MDSummaryDG.Columns["ExpDateTPS"].HeaderText = "  ТПС, вход\n\rна эксп-цию";
            MDSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MDSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MDSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["OrderNumber"].Width = 85;
            MDSummaryDG.Columns["ReadyPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ReadyPercProfil"].MinimumWidth = 135;
            MDSummaryDG.Columns["ReadyPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ReadyPercTPS"].MinimumWidth = 135;
            MDSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            MDSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            MDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostProfil"].Width = 110;
            MDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostTPS"].Width = 110;
            MDSummaryDG.Columns["ExpDateTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ExpDateTPS"].MinimumWidth = 110;
            MDSummaryDG.Columns["ExpDateProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ExpDateProfil"].MinimumWidth = 110;

            //MDSummaryDG.Columns["AllCostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MDSummaryDG.Columns["AllCostProfil"].Width = 110;
            //MDSummaryDG.Columns["AllCostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MDSummaryDG.Columns["AllCostTPS"].Width = 110;

            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MDSummaryDG.Columns["ReadyPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ReadyPercProfil");
            MDSummaryDG.Columns["ReadyPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ReadyPercTPS");
            MDSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ExpPercProfil");
            MDSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ExpPercTPS");

        }

        private void SetProductsGrids()
        {
            if (!Security.PriceAccess)
            {
                FrontsDG.Columns["Cost"].Visible = false;
                DecorProductsDG.Columns["Cost"].Visible = false;
                DecorItemsDG.Columns["Cost"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            FrontsDG.ColumnHeadersHeight = 38;
            DecorProductsDG.ColumnHeadersHeight = 38;
            DecorItemsDG.ColumnHeadersHeight = 38;

            foreach (DataGridViewColumn Column in FrontsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorProductsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorItemsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            FrontsDG.Columns["FrontID"].Visible = false;
            FrontsDG.Columns["Width"].Visible = false;

            FrontsDG.Columns["Front"].HeaderText = "Фасад";
            FrontsDG.Columns["Cost"].HeaderText = " € ";
            FrontsDG.Columns["Square"].HeaderText = "м.кв.";
            FrontsDG.Columns["Count"].HeaderText = "шт.";

            FrontsDG.Columns["Front"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            FrontsDG.Columns["Front"].MinimumWidth = 110;
            FrontsDG.Columns["Square"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Square"].Width = 100;
            FrontsDG.Columns["Cost"].Width = 100;
            FrontsDG.Columns["Count"].Width = 90;

            FrontsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            FrontsDG.Columns["Square"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Square"].DefaultCellStyle.FormatProvider = nfi1;

            DecorProductsDG.Columns["ProductID"].Visible = false;
            DecorProductsDG.Columns["MeasureID"].Visible = false;

            DecorItemsDG.Columns["ProductID"].Visible = false;
            DecorItemsDG.Columns["DecorID"].Visible = false;
            DecorItemsDG.Columns["MeasureID"].Visible = false;

            DecorProductsDG.Columns["DecorProduct"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorProductsDG.Columns["DecorProduct"].MinimumWidth = 100;
            DecorProductsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Cost"].Width = 100;
            DecorProductsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Count"].Width = 100;
            DecorProductsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Measure"].Width = 90;

            DecorProductsDG.Columns["DecorProduct"].HeaderText = "Продукт";
            DecorProductsDG.Columns["Cost"].HeaderText = " € ";
            DecorProductsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorProductsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            DecorItemsDG.Columns["DecorID"].Visible = false;

            DecorItemsDG.Columns["DecorItem"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorItemsDG.Columns["DecorItem"].MinimumWidth = 100;
            DecorItemsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Cost"].Width = 100;
            DecorItemsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Count"].Width = 100;
            DecorItemsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Measure"].Width = 90;

            DecorItemsDG.Columns["DecorItem"].HeaderText = "Наименование";
            DecorItemsDG.Columns["Cost"].HeaderText = " € ";
            DecorItemsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorItemsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            FrontsDG.Columns["Square"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        }

        public void ClientSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;

            decimal ReadyPercProfil = 0;
            decimal ReadyPercTPS = 0;
            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ReadyCostProfil = 0;
            decimal ReadyCostTPS = 0;
            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            decimal Percentage = 0;
            decimal d1 = 0;
            decimal d2 = 0;

            string ClientName = string.Empty;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            DataTable Table = new DataTable();

            string filter = string.Empty;
            for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
            {
                if (!Convert.ToBoolean(ClientGroupsDataTable.Rows[i]["Check"]))
                    continue;

                filter += ClientGroupsDataTable.Rows[i]["ClientGroupID"].ToString() + ",";
            }
            if (filter.Length > 0)
                filter = "ClientGroupID IN (" + filter + ")";
            using (DataView DV = new DataView(MarketingClientsDT, filter, string.Empty, DataViewRowState.CurrentRows))
            {
                Table = DV.ToTable(true, new string[] { "ClientID" });
            }

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                DataRow[] erows = Table.Select("ClientID=" + ClientID);
                if (erows.Count() == 0)
                    continue;
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);

                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();

                if (FactoryID == 0)
                {
                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyFrontsCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    d1 = 0;
                    d2 = 0;

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ReadyPercProfil > 0)
                            {
                                NewRow["ReadyPercProfil"] = ReadyPercProfil;
                                NewRow["ExpPercProfil"] = ExpPercProfil;
                                NewRow["CostProfil"] = ReadyCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                NewRow["ReadyPercTPS"] = ReadyPercTPS;
                                NewRow["ExpPercTPS"] = ExpPercTPS;
                                NewRow["CostTPS"] = ReadyCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ReadyPercProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercProfil"] = Percentage;
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercTPS"] = Percentage;
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                            }
                        }
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ReadyPercProfil = MarketReadyDecorCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyDecorCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ReadyCostProfil != 0 || ReadyCostTPS != 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ReadyCostProfil > 0)
                            {
                                NewRow["ReadyPercProfil"] = ReadyPercProfil;
                                NewRow["ExpPercProfil"] = ExpPercProfil;
                                NewRow["CostProfil"] = ReadyCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ReadyCostTPS > 0)
                            {
                                NewRow["ReadyPercTPS"] = ReadyPercTPS;
                                NewRow["ExpPercTPS"] = ExpPercTPS;
                                NewRow["CostTPS"] = ReadyCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ReadyPercProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercProfil"] = Percentage;
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                            }
                            if (ReadyPercTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ReadyPercTPS"] = Percentage;
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                            }
                        }
                    }
                }

                if (FactoryID == 1)
                {
                    ReadyCostProfil = 0;
                    ExpCostProfil = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercProfil"] = Percentage;
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                        }
                    }

                    ReadyCostProfil = 0;
                    ExpCostProfil = 0;
                    ReadyPercProfil = MarketReadyDecorCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ExpCostProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ReadyCostProfil > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ReadyCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercProfil"] = Percentage;
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ReadyCostProfil;
                        }
                    }
                }

                if (FactoryID == 2)
                {
                    ReadyCostTPS = 0;
                    ExpCostTPS = 0;
                    ReadyPercTPS = MarketReadyFrontsCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ReadyPercTPS > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercTPS"] = Percentage;
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                        }
                    }

                    ReadyCostTPS = 0;
                    ExpCostTPS = 0;
                    ReadyPercTPS = MarketReadyDecorCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ReadyCostTPS > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ReadyCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ReadyPercTPS"] = Percentage;
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ReadyCostTPS;
                        }
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void MarketingSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;
            int OrderNumber = 0;

            decimal ReadyPercProfil = 0;
            decimal ReadyPercTPS = 0;
            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ReadyCostProfil = 0;
            decimal ReadyCostTPS = 0;
            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string ClientName = string.Empty;

            object DocDateTime = null;
            object ExpDateTPS = null;
            object ExpDateProfil = null;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);
                OrderNumber = Convert.ToInt32(MarketingClientsDT.Rows[i]["OrderNumber"]);
                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();
                DocDateTime = GetCreationDate(MegaOrderID);

                if (FactoryID == 0)
                {
                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyFrontsCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ReadyPercProfil != 0 || ReadyPercTPS != 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ReadyPercProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                            ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 0);
                            if (ExpDateProfil != null)
                                NewRow["ExpDateProfil"] = ExpDateProfil;
                        }
                        if (ReadyPercTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                            ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 0);
                            if (ExpDateTPS != null)
                                NewRow["ExpDateTPS"] = ExpDateTPS;
                        }
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ReadyCostTPS = 0;
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ReadyPercProfil = MarketReadyDecorCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ReadyPercTPS = MarketReadyDecorCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ReadyCostProfil != 0 || ReadyCostTPS != 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ReadyCostProfil > 0)
                        {
                            NewRow["ReadyPercProfil"] = ReadyPercProfil;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ReadyCostProfil;
                            ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 1);
                            if (ExpDateProfil != null)
                                NewRow["ExpDateProfil"] = ExpDateProfil;
                        }
                        if (ReadyCostTPS > 0)
                        {
                            NewRow["ReadyPercTPS"] = ReadyPercTPS;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ReadyCostTPS;
                            ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 1);
                            if (ExpDateTPS != null)
                                NewRow["ExpDateTPS"] = ExpDateTPS;
                        }
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 1)
                {
                    ReadyCostProfil = 0;
                    ExpCostProfil = 0;
                    ReadyPercProfil = MarketReadyFrontsCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ReadyPercProfil > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 0);
                        if (ExpDateProfil != null)
                            NewRow["ExpDateProfil"] = ExpDateProfil;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostProfil = 0;
                    ExpCostProfil = 0;
                    ReadyPercProfil = MarketReadyDecorCost(MegaOrderID, 1, ref ReadyCostProfil, ref AllCostProfil);
                    ExpCostProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ReadyCostProfil > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientName"] = ClientID;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercProfil"] = ReadyPercProfil;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ReadyCostProfil;
                        ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 1);
                        if (ExpDateProfil != null)
                            NewRow["ExpDateProfil"] = ExpDateProfil;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 2)
                {
                    ReadyCostTPS = 0;
                    ExpCostTPS = 0;
                    ReadyPercTPS = MarketReadyFrontsCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ReadyPercTPS > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 0);
                        if (ExpDateTPS != null)
                            NewRow["ExpDateTPS"] = ExpDateTPS;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ReadyCostTPS = 0;
                    ExpCostTPS = 0;
                    ReadyPercTPS = MarketReadyDecorCost(MegaOrderID, 2, ref ReadyCostTPS, ref AllCostTPS);
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ReadyCostTPS > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ReadyPercTPS"] = ReadyPercTPS;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ReadyCostTPS;
                        ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 1);
                        if (ExpDateTPS != null)
                            NewRow["ExpDateTPS"] = ExpDateTPS;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void FMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void FMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void DMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public void DMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (1, 2) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public bool HasFronts
        {
            get { return FrontsOrdersDT.Rows.Count > 0; }
        }

        public bool HasDecor
        {
            get { return DecorOrdersDT.Rows.Count > 0; }
        }

        public void FilterDecorProducts(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBS.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBS.MoveFirst();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["Width"] = 0;
                    FrontsSummaryDT.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
                DataRow[] CurvedRows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDT.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гнутый";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrontCount;
                    FrontsSummaryDT.Rows.Add(CurvedNewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDT.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBS.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                //if (DecorProductCount < 3)
                //    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDT.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBS.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDT.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBS.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count, ref int CurvedCount)
        {
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(FrontsSummaryDT.Rows[i]["Width"]) == -1)
                    CurvedCount += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Square += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Square"]);
                    Count += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Square = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref int Count)
        {
            for (int i = 0; i < DecorProductsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["MeasureID"]) != 2)
                    Count += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Pogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Pogon = Decimal.Round(Pogon, 2, MidpointRounding.AwayFromZero);
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDT.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDT.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorItemsDT.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public ArrayList GetMarketingClientGroups()
        {
            ArrayList ClientGroupIDs = new ArrayList();

            for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
            {
                if (!Convert.ToBoolean(ClientGroupsDataTable.Rows[i]["Check"]))
                    continue;

                ClientGroupIDs.Add(Convert.ToInt32(ClientGroupsDataTable.Rows[i]["ClientGroupID"]));
            }

            return ClientGroupIDs;
        }
        public void ClearFrontsOrders()
        {
            MFSummaryDT.Clear();
        }

        public void ClearDecorOrders()
        {
            MDSummaryDT.Clear();
        }

        private decimal MarketReadyFrontsCost(int MegaOrderID, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = MReadyFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                ReadyFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = MAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            ReadyCost = ReadyFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ReadyFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketReadyDecorCost(int MegaOrderID, int FactoryID, ref decimal ReadyCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ReadyDecorCost = 0;
            decimal AllDecorCost = 0;

            DataRow[] RDRows = MReadyDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RDRows)
                ReadyDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DataRow[] ADRows = MAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in ADRows)
                AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            ReadyCost = ReadyDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ReadyDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketExpFrontsCost(int MegaOrderID, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ExpFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = MExpFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                ExpFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = MAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            ExpCost = ExpFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ExpFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketExpDecorCost(int MegaOrderID, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ExpDecorCost = 0;
            decimal AllDecorCost = 0;

            DataRow[] RDRows = MExpDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RDRows)
                ExpDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DataRow[] ADRows = MAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in ADRows)
                AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            ExpCost = ExpDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ExpDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private object GetCreationDate(int MegaOrderID)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            object DocDateTime = null;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT OrderDate FROM MegaOrders" +
                " WHERE MegaOrderID = " + MegaOrderID,
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["OrderDate"] != DBNull.Value)
                        DocDateTime = Convert.ToDateTime(DT.Rows[0]["OrderDate"]);
                }
            }
            return DocDateTime;
        }

        private object StorageAdoptionDate(int MegaOrderID, int FactoryID, int ProductType)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            object StorageDateTime = null;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MIN(StorageDateTime) AS StorageDate FROM Packages" +
                " WHERE ProductType = " + ProductType + " AND FactoryID = " + FactoryID + " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                " WHERE MegaOrderID = " + MegaOrderID + ")",
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["StorageDate"] != DBNull.Value)
                        StorageDateTime = Convert.ToDateTime(DT.Rows[0]["StorageDate"]);
                }
            }
            return StorageDateTime;
        }
    }


    public class MarketingExpeditionStatistics
    {
        DataTable MFSummaryDT = null;
        DataTable MDSummaryDT = null;

        DataTable MarketingClientsDT = null;

        DataTable MExpFrontsCostDT = null;
        DataTable MExpDecorCostDT = null;
        DataTable MAllFrontsCostDT = null;
        DataTable MAllDecorCostDT = null;

        DataTable FrontsOrdersDT = null;
        DataTable DecorOrdersDT = null;

        DataTable TempFrontsDT = null;
        DataTable TempDecorDT = null;

        DataTable FrontsSummaryDT = null;
        DataTable DecorProductsSummaryDT = null;
        DataTable DecorItemsSummaryDT = null;
        DataTable DecorConfigDT = null;

        DataTable FrontsDT = null;
        DataTable DecorProductsDT = null;
        DataTable DecorItemsDT = null;

        public BindingSource MFSummaryBS = null;
        public BindingSource MDSummaryBS = null;

        public BindingSource FrontsSummaryBS = null;
        public BindingSource DecorProductsSummaryBS = null;
        public BindingSource DecorItemsSummaryBS = null;

        PercentageDataGrid MFSummaryDG = null;
        PercentageDataGrid MDSummaryDG = null;
        PercentageDataGrid FrontsDG = null;
        PercentageDataGrid DecorProductsDG = null;
        PercentageDataGrid DecorItemsDG = null;

        public MarketingExpeditionStatistics(
            ref PercentageDataGrid tMFSummaryDG,
            ref PercentageDataGrid tMDSummaryDG,
            ref PercentageDataGrid tFrontsDG,
            ref PercentageDataGrid tDecorProductsDG,
            ref PercentageDataGrid tDecorItemsDG)
        {
            MFSummaryDG = tMFSummaryDG;
            MDSummaryDG = tMDSummaryDG;
            FrontsDG = tFrontsDG;
            DecorProductsDG = tDecorProductsDG;
            DecorItemsDG = tDecorItemsDG;

            Initialize();
        }

        private void Create()
        {
            MarketingClientsDT = new DataTable();

            MExpFrontsCostDT = new DataTable();
            MExpDecorCostDT = new DataTable();
            MAllFrontsCostDT = new DataTable();
            MAllDecorCostDT = new DataTable();

            TempFrontsDT = new DataTable();
            TempDecorDT = new DataTable();

            DecorItemsDT = new DataTable();
            FrontsDT = new DataTable();
            DecorProductsDT = new DataTable();
            DecorConfigDT = new DataTable();

            FrontsOrdersDT = new DataTable();
            DecorOrdersDT = new DataTable();

            MFSummaryDT = new DataTable();
            MFSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MFSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpDateTPS"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("ExpDateProfil"), System.Type.GetType("System.DateTime")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            MDSummaryDT = new DataTable();
            MDSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MDSummaryDT.Columns.Add(new DataColumn(("MegaOrderID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("DocDateTime"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpPercTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpDateTPS"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpPercProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("ExpDateProfil"), System.Type.GetType("System.DateTime")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            FrontsSummaryDT = new DataTable();
            FrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDT = new DataTable();
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));
        }

        private void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT MegaOrders.ClientID, infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID
            FROM MegaOrders
            INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
            WHERE MegaOrders.MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID IN (4)))
            ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketingClientsDT);
            }

            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDT);
            }

            SelectCommand = @"SELECT ProductID, ProductName FROM DecorProducts" +
                " WHERE ProductID IN (SELECT ProductID FROM DecorConfig WHERE Enabled = 1) ORDER BY ProductName ASC";
            DecorProductsDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDT);
            }
            DecorItemsDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorItemsDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDT);
            //}
            DecorConfigDT = TablesManager.DecorConfigDataTableAll;

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            FillMarketingTables();

            sw.Stop();
            double G = sw.Elapsed.TotalMilliseconds;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                TempFrontsDT.Clear();
                DA.Fill(TempFrontsDT);
            }

            //decor
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(TempDecorDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDT);
            }
        }

        private void FillMarketingTables()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID IN (4))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MExpFrontsCostDT.Clear();
                DA.Fill(MExpFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID IN (4))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MExpDecorCostDT.Clear();
                DA.Fill(MExpDecorCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllFrontsCostDT.Clear();
                DA.Fill(MAllFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost) AS DecorCost
            FROM DecorOrders INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE DecorOrders.DecorOrderID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1))
            GROUP BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MegaOrders.ClientID, MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllDecorCostDT.Clear();
                DA.Fill(MAllDecorCostDT);
            }
        }

        private void Binding()
        {
            MFSummaryBS = new BindingSource()
            {
                DataSource = MFSummaryDT
            };
            MFSummaryDG.DataSource = MFSummaryBS;

            MDSummaryBS = new BindingSource()
            {
                DataSource = MDSummaryDT
            };
            MDSummaryDG.DataSource = MDSummaryBS;

            FrontsSummaryBS = new BindingSource()
            {
                DataSource = FrontsSummaryDT
            };
            FrontsDG.DataSource = FrontsSummaryBS;

            DecorProductsSummaryBS = new BindingSource()
            {
                DataSource = DecorProductsSummaryDT
            };
            DecorProductsDG.DataSource = DecorProductsSummaryBS;

            DecorItemsSummaryBS = new BindingSource()
            {
                DataSource = DecorItemsSummaryDT
            };
            DecorItemsDG.DataSource = DecorItemsSummaryBS;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetProductsGrids();
            MarketSummaryGridSettings();
        }

        public void ShowColumns(ref PercentageDataGrid FrontsGrid, ref PercentageDataGrid DecorGrid, bool Profil, bool TPS, bool bClientSummary)
        {
            if (Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ExpPercProfil"].Visible = true;
                FrontsGrid.Columns["ExpPercTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ExpPercProfil"].Visible = true;
                DecorGrid.Columns["ExpPercTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = true;
            }
            if (Profil && !TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = false;
                FrontsGrid.Columns["ExpPercProfil"].Visible = true;
                FrontsGrid.Columns["ExpPercTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = false;
                DecorGrid.Columns["ExpPercProfil"].Visible = true;
                DecorGrid.Columns["ExpPercTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = true;
            }
            if (!Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = false;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["ExpPercProfil"].Visible = false;
                FrontsGrid.Columns["ExpPercTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = true;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = false;

                DecorGrid.Columns["CostProfil"].Visible = false;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["ExpPercProfil"].Visible = false;
                DecorGrid.Columns["ExpPercTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = true;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = false;
            }
            if (bClientSummary)
            {
                if (FrontsGrid.Columns.Contains("ExpDateTPS"))
                    FrontsGrid.Columns["ExpDateTPS"].Visible = false;
                if (FrontsGrid.Columns.Contains("ExpDateProfil"))
                    FrontsGrid.Columns["ExpDateProfil"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateTPS"))
                    DecorGrid.Columns["ExpDateTPS"].Visible = false;
                if (DecorGrid.Columns.Contains("ExpDateProfil"))
                    DecorGrid.Columns["ExpDateProfil"].Visible = false;
            }
        }

        private void MarketSummaryGridSettings()
        {
            MFSummaryDG.Columns["MegaOrderID"].Visible = false;
            MFSummaryDG.Columns["ClientID"].Visible = false;
            MDSummaryDG.Columns["MegaOrderID"].Visible = false;
            MDSummaryDG.Columns["ClientID"].Visible = false;

            MFSummaryDG.Columns["AllCostProfil"].Visible = false;
            MDSummaryDG.Columns["AllCostProfil"].Visible = false;
            MFSummaryDG.Columns["AllCostTPS"].Visible = false;
            MDSummaryDG.Columns["AllCostTPS"].Visible = false;

            if (!Security.PriceAccess)
            {
                MFSummaryDG.Columns["CostProfil"].Visible = false;
                MFSummaryDG.Columns["CostTPS"].Visible = false;
                MDSummaryDG.Columns["CostProfil"].Visible = false;
                MDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in MFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in MDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            MFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MFSummaryDG.Columns["ExpDateTPS"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MFSummaryDG.Columns["ExpDateProfil"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MFSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MFSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MFSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MFSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            MFSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r      ТПС, %";
            MFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MFSummaryDG.Columns["ExpDateProfil"].HeaderText = "Профиль, вход\n\r   на эксп-цию";
            MFSummaryDG.Columns["ExpDateTPS"].HeaderText = "  ТПС, вход\n\rна эксп-цию";
            MFSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MFSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MFSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["OrderNumber"].Width = 85;
            MFSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            MFSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            MFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostProfil"].Width = 110;
            MFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostTPS"].Width = 110;
            MFSummaryDG.Columns["ExpDateTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ExpDateTPS"].MinimumWidth = 110;
            MFSummaryDG.Columns["ExpDateProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ExpDateProfil"].MinimumWidth = 110;

            //MFSummaryDG.Columns["AllCostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MFSummaryDG.Columns["AllCostProfil"].Width = 110;
            //MFSummaryDG.Columns["AllCostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MFSummaryDG.Columns["AllCostTPS"].Width = 110;

            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MFSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ExpPercProfil");
            MFSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("ExpPercTPS");

            MDSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            MDSummaryDG.Columns["ExpDateTPS"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MDSummaryDG.Columns["ExpDateProfil"].DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
            MDSummaryDG.Columns["DocDateTime"].HeaderText = "Дата создания";
            MDSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MDSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MDSummaryDG.Columns["ExpPercProfil"].HeaderText = "Экспедиция\n\r Профиль, %";
            MDSummaryDG.Columns["ExpPercTPS"].HeaderText = "Экспедиция\n\r     ТПС, %";
            MDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MDSummaryDG.Columns["ExpDateProfil"].HeaderText = "Профиль, вход\n\r   на эксп-цию";
            MDSummaryDG.Columns["ExpDateTPS"].HeaderText = "  ТПС, вход\n\rна эксп-цию";
            MDSummaryDG.Columns["DocDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["DocDateTime"].MinimumWidth = 110;
            MDSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MDSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["OrderNumber"].Width = 85;
            MDSummaryDG.Columns["ExpPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ExpPercProfil"].MinimumWidth = 135;
            MDSummaryDG.Columns["ExpPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["ExpPercTPS"].MinimumWidth = 135;
            MDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostProfil"].Width = 110;
            MDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostTPS"].Width = 110;
            MDSummaryDG.Columns["ExpDateTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ExpDateTPS"].MinimumWidth = 110;
            MDSummaryDG.Columns["ExpDateProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ExpDateProfil"].MinimumWidth = 110;

            //MDSummaryDG.Columns["AllCostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MDSummaryDG.Columns["AllCostProfil"].Width = 110;
            //MDSummaryDG.Columns["AllCostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            //MDSummaryDG.Columns["AllCostTPS"].Width = 110;

            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MDSummaryDG.Columns["ExpPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ExpPercProfil");
            MDSummaryDG.Columns["ExpPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("ExpPercTPS");

        }

        private void SetProductsGrids()
        {
            if (!Security.PriceAccess)
            {
                FrontsDG.Columns["Cost"].Visible = false;
                DecorProductsDG.Columns["Cost"].Visible = false;
                DecorItemsDG.Columns["Cost"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            FrontsDG.ColumnHeadersHeight = 38;
            DecorProductsDG.ColumnHeadersHeight = 38;
            DecorItemsDG.ColumnHeadersHeight = 38;

            foreach (DataGridViewColumn Column in FrontsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorProductsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorItemsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            FrontsDG.Columns["FrontID"].Visible = false;
            FrontsDG.Columns["Width"].Visible = false;

            FrontsDG.Columns["Front"].HeaderText = "Фасад";
            FrontsDG.Columns["Cost"].HeaderText = " € ";
            FrontsDG.Columns["Square"].HeaderText = "м.кв.";
            FrontsDG.Columns["Count"].HeaderText = "шт.";

            FrontsDG.Columns["Front"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            FrontsDG.Columns["Front"].MinimumWidth = 110;
            FrontsDG.Columns["Square"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Square"].Width = 100;
            FrontsDG.Columns["Cost"].Width = 100;
            FrontsDG.Columns["Count"].Width = 90;

            FrontsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            FrontsDG.Columns["Square"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Square"].DefaultCellStyle.FormatProvider = nfi1;

            DecorProductsDG.Columns["ProductID"].Visible = false;
            DecorProductsDG.Columns["MeasureID"].Visible = false;

            DecorItemsDG.Columns["ProductID"].Visible = false;
            DecorItemsDG.Columns["DecorID"].Visible = false;
            DecorItemsDG.Columns["MeasureID"].Visible = false;

            DecorProductsDG.Columns["DecorProduct"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorProductsDG.Columns["DecorProduct"].MinimumWidth = 100;
            DecorProductsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Cost"].Width = 100;
            DecorProductsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Count"].Width = 100;
            DecorProductsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Measure"].Width = 90;

            DecorProductsDG.Columns["DecorProduct"].HeaderText = "Продукт";
            DecorProductsDG.Columns["Cost"].HeaderText = " € ";
            DecorProductsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorProductsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            DecorItemsDG.Columns["DecorID"].Visible = false;

            DecorItemsDG.Columns["DecorItem"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorItemsDG.Columns["DecorItem"].MinimumWidth = 100;
            DecorItemsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Cost"].Width = 100;
            DecorItemsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Count"].Width = 100;
            DecorItemsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Measure"].Width = 90;

            DecorItemsDG.Columns["DecorItem"].HeaderText = "Наименование";
            DecorItemsDG.Columns["Cost"].HeaderText = " € ";
            DecorItemsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorItemsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            FrontsDG.Columns["Square"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        }

        public void ClientSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;

            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            decimal Percentage = 0;
            decimal d1 = 0;
            decimal d2 = 0;

            string ClientName = string.Empty;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(MarketingClientsDT))
            {
                Table = DV.ToTable(true, new string[] { "ClientID" });
            }

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);

                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();

                if (FactoryID == 0)
                {
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    d1 = 0;
                    d2 = 0;

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ExpCostProfil > 0)
                            {
                                NewRow["ExpPercProfil"] = ExpPercProfil;
                                NewRow["CostProfil"] = ExpCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                NewRow["ExpPercTPS"] = ExpPercTPS;
                                NewRow["CostTPS"] = ExpCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ExpCostProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                            }
                        }
                    }

                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (ExpCostProfil > 0)
                            {
                                NewRow["ExpPercProfil"] = ExpPercProfil;
                                NewRow["CostProfil"] = ExpCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                NewRow["ExpPercTPS"] = ExpPercTPS;
                                NewRow["CostTPS"] = ExpCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (ExpCostProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                            }
                            if (ExpCostTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["ExpPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                            }
                        }
                    }
                }

                if (FactoryID == 1)
                {
                    ExpCostProfil = 0;
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                        }
                    }

                    ExpCostProfil = 0;
                    ExpCostProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + ExpCostProfil;
                        }
                    }
                }

                if (FactoryID == 2)
                {
                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                        }
                    }

                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Percentage = (d1 + ExpCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["ExpPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + ExpCostTPS;
                        }
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void MarketingSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;
            int OrderNumber = 0;

            decimal ExpPercProfil = 0;
            decimal ExpPercTPS = 0;

            decimal ExpCostProfil = 0;
            decimal ExpCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string ClientName = string.Empty;

            object DocDateTime = null;
            object ExpDateTPS = null;
            object ExpDateProfil = null;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);
                OrderNumber = Convert.ToInt32(MarketingClientsDT.Rows[i]["OrderNumber"]);
                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();
                DocDateTime = GetCreationDate(MegaOrderID);

                if (FactoryID == 0)
                {
                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 0);
                            if (ExpDateProfil != null)
                                NewRow["ExpDateProfil"] = ExpDateProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 0);
                            if (ExpDateTPS != null)
                                NewRow["ExpDateTPS"] = ExpDateTPS;
                        }
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpCostTPS = 0;
                    ExpPercProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostProfil != 0 || ExpCostTPS != 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        if (ExpCostProfil > 0)
                        {
                            NewRow["ExpPercProfil"] = ExpPercProfil;
                            NewRow["CostProfil"] = ExpCostProfil;
                            ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 1);
                            if (ExpDateProfil != null)
                                NewRow["ExpDateProfil"] = ExpDateProfil;
                        }
                        if (ExpCostTPS > 0)
                        {
                            NewRow["ExpPercTPS"] = ExpPercTPS;
                            NewRow["CostTPS"] = ExpCostTPS;
                            ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 1);
                            if (ExpDateTPS != null)
                                NewRow["ExpDateTPS"] = ExpDateTPS;
                        }
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 1)
                {
                    ExpCostProfil = 0;
                    ExpPercProfil = MarketExpFrontsCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 0);
                        if (ExpDateProfil != null)
                            NewRow["ExpDateProfil"] = ExpDateProfil;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostProfil = 0;
                    ExpCostProfil = MarketExpDecorCost(MegaOrderID, 1, ref ExpCostProfil, ref AllCostProfil);

                    if (ExpCostProfil > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientName"] = ClientID;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercProfil"] = ExpPercProfil;
                        NewRow["CostProfil"] = ExpCostProfil;
                        ExpDateProfil = StorageAdoptionDate(MegaOrderID, 1, 1);
                        if (ExpDateProfil != null)
                            NewRow["ExpDateProfil"] = ExpDateProfil;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 2)
                {
                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpFrontsCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 0);
                        if (ExpDateTPS != null)
                            NewRow["ExpDateTPS"] = ExpDateTPS;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    ExpCostTPS = 0;
                    ExpPercTPS = MarketExpDecorCost(MegaOrderID, 2, ref ExpCostTPS, ref AllCostTPS);

                    if (ExpCostTPS > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["DocDateTime"] = DocDateTime;
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["MegaOrderID"] = MegaOrderID;
                        NewRow["ExpPercTPS"] = ExpPercTPS;
                        NewRow["CostTPS"] = ExpCostTPS;
                        ExpDateTPS = StorageAdoptionDate(MegaOrderID, 2, 1);
                        if (ExpDateTPS != null)
                            NewRow["ExpDateTPS"] = ExpDateTPS;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void FMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void FMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 0 " + PackageFactoryFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void DMarketingOrders1(int FactoryID, int MegaOrderID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string MegaOrderFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (MegaOrderID != -1)
                MegaOrderFilter = " AND MegaOrders.MegaOrderID = " + MegaOrderID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + MegaOrderFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public void DMarketingOrders(int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID IN (4) AND ProductType = 1 " + PackageFactoryFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public bool HasFronts
        {
            get { return FrontsOrdersDT.Rows.Count > 0; }
        }

        public bool HasDecor
        {
            get { return DecorOrdersDT.Rows.Count > 0; }
        }

        public void FilterDecorProducts(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBS.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBS.MoveFirst();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["Width"] = 0;
                    FrontsSummaryDT.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
                DataRow[] CurvedRows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDT.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гнутый";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrontCount;
                    FrontsSummaryDT.Rows.Add(CurvedNewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDT.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBS.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                //if (DecorProductCount < 3)
                //    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDT.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBS.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDT.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBS.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count, ref int CurvedCount)
        {
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(FrontsSummaryDT.Rows[i]["Width"]) == -1)
                    CurvedCount += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Square += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Square"]);
                    Count += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Square = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref int Count)
        {
            for (int i = 0; i < DecorProductsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["MeasureID"]) != 2)
                    Count += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Pogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Pogon = Decimal.Round(Pogon, 2, MidpointRounding.AwayFromZero);
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDT.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDT.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorItemsDT.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void ClearFrontsOrders()
        {
            MFSummaryDT.Clear();
        }

        public void ClearDecorOrders()
        {
            MDSummaryDT.Clear();
        }

        private decimal MarketExpFrontsCost(int MegaOrderID, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ExpFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = MExpFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                ExpFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = MAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            ExpCost = ExpFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = ExpFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketExpDecorCost(int MegaOrderID, int FactoryID, ref decimal ExpCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal ExpDecorCost = 0;
            decimal AllDecorCost = 0;

            DataRow[] RDRows = MExpDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RDRows)
                ExpDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DataRow[] ADRows = MAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
            foreach (DataRow Row in ADRows)
                AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            ExpCost = ExpDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = ExpDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private object GetCreationDate(int MegaOrderID)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            object DocDateTime = null;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT OrderDate FROM MegaOrders" +
                " WHERE MegaOrderID = " + MegaOrderID,
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["OrderDate"] != DBNull.Value)
                        DocDateTime = Convert.ToDateTime(DT.Rows[0]["OrderDate"]);
                }
            }
            return DocDateTime;
        }

        private object StorageAdoptionDate(int MegaOrderID, int FactoryID, int ProductType)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;

            object StorageDateTime = null;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MIN(StorageDateTime) AS StorageDate FROM Packages" +
                " WHERE ProductType = " + ProductType + " AND FactoryID = " + FactoryID + " AND MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                " WHERE MegaOrderID = " + MegaOrderID + ")",
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["StorageDate"] != DBNull.Value)
                        StorageDateTime = Convert.ToDateTime(DT.Rows[0]["StorageDate"]);
                }
            }
            return StorageDateTime;
        }
    }


    public class DispatchStatistics
    {
        DataTable MFSummaryDT = null;
        DataTable MDSummaryDT = null;
        DataTable ZFSummaryDT = null;
        DataTable ZDSummaryDT = null;

        DataTable MarketingClientsDT = null;
        DataTable ZOVDispatchDT = null;

        DataTable MDispFrontsCostDT = null;
        DataTable MDispDecorCostDT = null;
        DataTable MAllFrontsCostDT = null;
        DataTable MAllDecorCostDT = null;

        DataTable ZDispFrontsCostDT = null;
        DataTable ZDispDecorCostDT = null;
        DataTable ZAllFrontsCostDT = null;
        DataTable ZAllDecorCostDT = null;

        DataTable FrontsOrdersDT = null;
        DataTable DecorOrdersDT = null;

        DataTable FrontsSummaryDT = null;
        DataTable DecorProductsSummaryDT = null;
        DataTable DecorItemsSummaryDT = null;
        DataTable DecorConfigDT = null;

        DataTable FrontsDT = null;
        DataTable DecorProductsDT = null;
        DataTable DecorItemsDT = null;

        public BindingSource MFSummaryBS = null;
        public BindingSource MDSummaryBS = null;
        public BindingSource ZFSummaryBS = null;
        public BindingSource ZDSummaryBS = null;

        public BindingSource FrontsSummaryBS = null;
        public BindingSource DecorProductsSummaryBS = null;
        public BindingSource DecorItemsSummaryBS = null;

        PercentageDataGrid MFSummaryDG = null;
        PercentageDataGrid MDSummaryDG = null;
        PercentageDataGrid ZFSummaryDG = null;
        PercentageDataGrid ZDSummaryDG = null;
        PercentageDataGrid FrontsDG = null;
        PercentageDataGrid DecorProductsDG = null;
        PercentageDataGrid DecorItemsDG = null;

        public DispatchStatistics(
            ref PercentageDataGrid tMFSummaryDG,
            ref PercentageDataGrid tMDSummaryDG,
            ref PercentageDataGrid tZFSummaryDG,
            ref PercentageDataGrid tZDSummaryDG,
            ref PercentageDataGrid tFrontsDG,
            ref PercentageDataGrid tDecorProductsDG,
            ref PercentageDataGrid tDecorItemsDG)
        {
            MFSummaryDG = tMFSummaryDG;
            MDSummaryDG = tMDSummaryDG;
            ZFSummaryDG = tZFSummaryDG;
            ZDSummaryDG = tZDSummaryDG;
            FrontsDG = tFrontsDG;
            DecorProductsDG = tDecorProductsDG;
            DecorItemsDG = tDecorItemsDG;

            Initialize();
        }

        private void Create()
        {
            MarketingClientsDT = new DataTable();
            ZOVDispatchDT = new DataTable();

            MDispFrontsCostDT = new DataTable();
            MDispDecorCostDT = new DataTable();
            MAllFrontsCostDT = new DataTable();
            MAllDecorCostDT = new DataTable();

            ZDispFrontsCostDT = new DataTable();
            ZDispDecorCostDT = new DataTable();
            ZAllFrontsCostDT = new DataTable();
            ZAllDecorCostDT = new DataTable();

            DecorItemsDT = new DataTable();
            FrontsDT = new DataTable();
            DecorProductsDT = new DataTable();
            DecorConfigDT = new DataTable();

            FrontsOrdersDT = new DataTable();
            DecorOrdersDT = new DataTable();

            MFSummaryDT = new DataTable();
            MFSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MFSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MFSummaryDT.Columns.Add(new DataColumn(("DispPercTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("DispPercProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MFSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            MDSummaryDT = new DataTable();
            MDSummaryDT.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("ClientName"), System.Type.GetType("System.String")));
            MDSummaryDT.Columns.Add(new DataColumn(("OrderNumber"), System.Type.GetType("System.Int32")));
            MDSummaryDT.Columns.Add(new DataColumn(("DispPercTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("DispPercProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostTPS"), System.Type.GetType("System.Decimal")));
            MDSummaryDT.Columns.Add(new DataColumn(("AllCostProfil"), System.Type.GetType("System.Decimal")));

            ZFSummaryDT = new DataTable();
            ZFSummaryDT.Columns.Add(new DataColumn(("DispatchDateTime"), System.Type.GetType("System.DateTime")));
            ZFSummaryDT.Columns.Add(new DataColumn(("DispatchDate"), System.Type.GetType("System.DateTime")));
            ZFSummaryDT.Columns.Add(new DataColumn(("DispPercTPS"), System.Type.GetType("System.Decimal")));
            ZFSummaryDT.Columns.Add(new DataColumn(("DispPercProfil"), System.Type.GetType("System.Decimal")));
            ZFSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            ZFSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));

            ZDSummaryDT = new DataTable();
            ZDSummaryDT.Columns.Add(new DataColumn(("DispatchDateTime"), System.Type.GetType("System.DateTime")));
            ZDSummaryDT.Columns.Add(new DataColumn(("DispatchDate"), System.Type.GetType("System.DateTime")));
            ZDSummaryDT.Columns.Add(new DataColumn(("DispPercTPS"), System.Type.GetType("System.Decimal")));
            ZDSummaryDT.Columns.Add(new DataColumn(("DispPercProfil"), System.Type.GetType("System.Decimal")));
            ZDSummaryDT.Columns.Add(new DataColumn(("CostTPS"), System.Type.GetType("System.Decimal")));
            ZDSummaryDT.Columns.Add(new DataColumn(("CostProfil"), System.Type.GetType("System.Decimal")));

            FrontsSummaryDT = new DataTable();
            FrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDT = new DataTable();
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDT);
            }

            SelectCommand = @"SELECT ProductID, ProductName FROM DecorProducts" +
                " WHERE ProductID IN (SELECT ProductID FROM DecorConfig WHERE Enabled = 1) ORDER BY ProductName ASC";
            DecorProductsDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDT);
            }
            DecorItemsDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorItemsDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDT);
            //}
            DecorConfigDT = TablesManager.DecorConfigDataTableAll;

            //System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            //sw.Start();

            //FillMarketingTables(DateTime.Now.AddDays(-3), DateTime.Now);
            //FillZOVTables(DateTime.Now.AddDays(-3), DateTime.Now);

            //sw.Stop();
            //double G = sw.Elapsed.TotalMilliseconds;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDT);
            }
        }

        public void FillZOVTables(DateTime FirstDate, DateTime SecondDate)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MegaOrders.DispatchDate, 121) AS DispatchDate, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            Packages ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID <> 0
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0)
            GROUP BY CONVERT(varchar(10), MegaOrders.DispatchDate, 121), FrontsOrders.FactoryID
            ORDER BY DispatchDate",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                ZAllFrontsCostDT.Clear();
                DA.Fill(ZAllFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), MegaOrders.DispatchDate, 121) AS DispatchDate, DecorOrders.FactoryID, SUM(DecorOrders.Cost) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            Packages ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID <> 0
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1)
            GROUP BY CONVERT(varchar(10), MegaOrders.DispatchDate, 121), DecorOrders.FactoryID
            ORDER BY DispatchDate",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                ZAllDecorCostDT.Clear();
                DA.Fill(ZAllDecorCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT CONVERT(varchar(10), Packages.DispatchDateTime, 121) AS DispatchDateTime, CONVERT(varchar(10), MegaOrders.DispatchDate, 121) AS DispatchDate 
            FROM MainOrders 
            INNER JOIN Packages ON MainOrders.MainOrderID = Packages.MainOrderID
            INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MainOrders.MegaOrderID <> 0
            WHERE MainOrders.MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID = 3)
            GROUP BY CONVERT(varchar(10), Packages.DispatchDateTime, 121), CONVERT(varchar(10), MegaOrders.DispatchDate, 121)
            ORDER BY DispatchDateTime, DispatchDate",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                ZOVDispatchDT.Clear();
                DA.Fill(ZOVDispatchDT);
            }

            string DispDateFilter = " AND CAST(DispatchDateTime AS date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(DispatchDateTime AS date) <='" + SecondDate.ToString("yyyy-MM-dd") + "'";

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), Packages.DispatchDateTime, 121) AS DispatchDateTime, CONVERT(varchar(10), MegaOrders.DispatchDate, 121) AS DispatchDate, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            Packages ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID <> 0
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID = 3 " + DispDateFilter + @")
            GROUP BY CONVERT(varchar(10), Packages.DispatchDateTime, 121), CONVERT(varchar(10), MegaOrders.DispatchDate, 121), FrontsOrders.FactoryID
            ORDER BY DispatchDateTime, DispatchDate",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                ZDispFrontsCostDT.Clear();
                DA.Fill(ZDispFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT CONVERT(varchar(10), Packages.DispatchDateTime, 121) AS DispatchDateTime, CONVERT(varchar(10), MegaOrders.DispatchDate, 121) AS DispatchDate, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            Packages ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MegaOrders.MegaOrderID <> 0
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID = 3 " + DispDateFilter + @")
            GROUP BY CONVERT(varchar(10), Packages.DispatchDateTime, 121), CONVERT(varchar(10), MegaOrders.DispatchDate, 121), DecorOrders.FactoryID
            ORDER BY DispatchDateTime, DispatchDate",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                ZDispDecorCostDT.Clear();
                DA.Fill(ZDispDecorCostDT);
            }
        }

        public void FillMarketingTables(DateTime FirstDate, DateTime SecondDate)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost) AS FrontsCost
            FROM FrontsOrders INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE FrontsOrders.FrontsOrdersID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0))
            GROUP BY MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllFrontsCostDT.Clear();
                DA.Fill(MAllFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost) AS DecorCost
            FROM DecorOrders INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID INNER JOIN
            MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID
            WHERE DecorOrders.DecorOrderID IN
            (SELECT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1))
            GROUP BY MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MAllDecorCostDT.Clear();
                DA.Fill(MAllDecorCostDT);
            }


            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT MegaOrders.ClientID, infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID
            FROM MegaOrders
            INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
            WHERE MegaOrders.MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID = 3))
            ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MarketingClientsDT.Clear();
                DA.Fill(MarketingClientsDT);
            }

            string DispDateFilter = " AND CAST(DispatchDateTime AS date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(DispatchDateTime AS date) <='" + SecondDate.ToString("yyyy-MM-dd") + "'";

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MainOrders.MegaOrderID, FrontsOrders.FactoryID, SUM(FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS FrontsCost
            FROM PackageDetails INNER JOIN
            FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
            MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID 
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND PackageStatusID = 3 " + DispDateFilter + @")
            GROUP BY MainOrders.MegaOrderID, FrontsOrders.FactoryID
            ORDER BY MainOrders.MegaOrderID, FrontsOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MDispFrontsCostDT.Clear();
                DA.Fill(MDispFrontsCostDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT MainOrders.MegaOrderID, DecorOrders.FactoryID, SUM(DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS DecorCost
            FROM PackageDetails INNER JOIN
            DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
            MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID 
            WHERE PackageDetails.PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND PackageStatusID = 3 " + DispDateFilter + @")
            GROUP BY MainOrders.MegaOrderID, DecorOrders.FactoryID
            ORDER BY MainOrders.MegaOrderID, DecorOrders.FactoryID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                MDispDecorCostDT.Clear();
                DA.Fill(MDispDecorCostDT);
            }
        }

        private void Binding()
        {
            MFSummaryBS = new BindingSource()
            {
                DataSource = MFSummaryDT
            };
            MFSummaryDG.DataSource = MFSummaryBS;

            MDSummaryBS = new BindingSource()
            {
                DataSource = MDSummaryDT
            };
            MDSummaryDG.DataSource = MDSummaryBS;

            ZFSummaryBS = new BindingSource()
            {
                DataSource = ZFSummaryDT
            };
            ZFSummaryDG.DataSource = ZFSummaryBS;

            ZDSummaryBS = new BindingSource()
            {
                DataSource = ZDSummaryDT
            };
            ZDSummaryDG.DataSource = ZDSummaryBS;

            FrontsSummaryBS = new BindingSource()
            {
                DataSource = FrontsSummaryDT
            };
            FrontsDG.DataSource = FrontsSummaryBS;

            DecorProductsSummaryBS = new BindingSource()
            {
                DataSource = DecorProductsSummaryDT
            };
            DecorProductsDG.DataSource = DecorProductsSummaryBS;

            DecorItemsSummaryBS = new BindingSource()
            {
                DataSource = DecorItemsSummaryDT
            };
            DecorItemsDG.DataSource = DecorItemsSummaryBS;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetProductsGrids();
            MarketSummaryGridSettings();
            ZOVSummaryGridSettings();
        }

        public void ShowColumns(ref PercentageDataGrid FrontsGrid, ref PercentageDataGrid DecorGrid, bool Profil, bool TPS)
        {
            if (Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["DispPercProfil"].Visible = true;
                FrontsGrid.Columns["DispPercTPS"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["DispPercProfil"].Visible = true;
                DecorGrid.Columns["DispPercTPS"].Visible = true;
            }
            if (Profil && !TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = false;
                FrontsGrid.Columns["DispPercProfil"].Visible = true;
                FrontsGrid.Columns["DispPercTPS"].Visible = false;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = false;
                DecorGrid.Columns["DispPercProfil"].Visible = true;
                DecorGrid.Columns["DispPercTPS"].Visible = false;
            }
            if (!Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = false;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["DispPercProfil"].Visible = false;
                FrontsGrid.Columns["DispPercTPS"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = false;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["DispPercProfil"].Visible = false;
                DecorGrid.Columns["DispPercTPS"].Visible = true;
            }
        }

        private void MarketSummaryGridSettings()
        {
            MFSummaryDG.Columns["ClientID"].Visible = false;
            MDSummaryDG.Columns["ClientID"].Visible = false;

            MFSummaryDG.Columns["AllCostProfil"].Visible = false;
            MDSummaryDG.Columns["AllCostProfil"].Visible = false;
            MFSummaryDG.Columns["AllCostTPS"].Visible = false;
            MDSummaryDG.Columns["AllCostTPS"].Visible = false;

            if (!Security.PriceAccess)
            {
                MFSummaryDG.Columns["CostProfil"].Visible = false;
                MFSummaryDG.Columns["CostTPS"].Visible = false;
                MDSummaryDG.Columns["CostProfil"].Visible = false;
                MDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in MFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in MDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            MFSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MFSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MFSummaryDG.Columns["DispPercProfil"].HeaderText = "Отгружено\n\r Профиль, %";
            MFSummaryDG.Columns["DispPercTPS"].HeaderText = "Отгружено\n\r      ТПС, %";
            MFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MFSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MFSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MFSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["OrderNumber"].Width = 85;
            MFSummaryDG.Columns["DispPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["DispPercProfil"].MinimumWidth = 135;
            MFSummaryDG.Columns["DispPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MFSummaryDG.Columns["DispPercTPS"].MinimumWidth = 135;
            MFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostProfil"].Width = 110;
            MFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MFSummaryDG.Columns["CostTPS"].Width = 110;
            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MFSummaryDG.Columns["DispPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("DispPercProfil");
            MFSummaryDG.Columns["DispPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MFSummaryDG.AddPercentageColumn("DispPercTPS");

            MDSummaryDG.Columns["ClientName"].HeaderText = "Клиент";
            MDSummaryDG.Columns["OrderNumber"].HeaderText = "№ заказа";
            MDSummaryDG.Columns["DispPercProfil"].HeaderText = "Отгружено\n\r Профиль, %";
            MDSummaryDG.Columns["DispPercTPS"].HeaderText = "Отгружено\n\r     ТПС, %";
            MDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            MDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            MDSummaryDG.Columns["ClientName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            MDSummaryDG.Columns["ClientName"].MinimumWidth = 110;
            MDSummaryDG.Columns["OrderNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["OrderNumber"].Width = 85;
            MDSummaryDG.Columns["DispPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["DispPercProfil"].MinimumWidth = 135;
            MDSummaryDG.Columns["DispPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            MDSummaryDG.Columns["DispPercTPS"].MinimumWidth = 135;
            MDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostProfil"].Width = 110;
            MDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            MDSummaryDG.Columns["CostTPS"].Width = 110;
            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            MDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            MDSummaryDG.Columns["DispPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("DispPercProfil");
            MDSummaryDG.Columns["DispPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            MDSummaryDG.AddPercentageColumn("DispPercTPS");

        }

        private void ZOVSummaryGridSettings()
        {
            if (!Security.PriceAccess)
            {
                ZFSummaryDG.Columns["CostProfil"].Visible = false;
                ZFSummaryDG.Columns["CostTPS"].Visible = false;
                ZDSummaryDG.Columns["CostProfil"].Visible = false;
                ZDSummaryDG.Columns["CostTPS"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            foreach (DataGridViewColumn Column in ZFSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in ZDSummaryDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            ZFSummaryDG.Columns["DispatchDate"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZFSummaryDG.Columns["DispatchDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            //ZFSummaryDG.Columns["DispatchDate"].DefaultCellStyle.Format = "dd.MM.yyyy";
            //ZFSummaryDG.Columns["DocDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZFSummaryDG.Columns["DispatchDate"].HeaderText = " Ожидаемая\n\rдата отгрузки";
            ZFSummaryDG.Columns["DispatchDateTime"].HeaderText = "Фактическая\n\rдата отгрузки";
            ZFSummaryDG.Columns["DispPercProfil"].HeaderText = "Отгружено\n\r Профиль, %";
            ZFSummaryDG.Columns["DispPercTPS"].HeaderText = "Отгружено\n\r      ТПС, %";
            ZFSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            ZFSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            ZFSummaryDG.Columns["DispatchDate"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZFSummaryDG.Columns["DispatchDate"].MinimumWidth = 110;
            ZFSummaryDG.Columns["DispatchDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZFSummaryDG.Columns["DispatchDateTime"].MinimumWidth = 110;
            ZFSummaryDG.Columns["DispPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZFSummaryDG.Columns["DispPercProfil"].MinimumWidth = 135;
            ZFSummaryDG.Columns["DispPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZFSummaryDG.Columns["DispPercTPS"].MinimumWidth = 135;
            ZFSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZFSummaryDG.Columns["CostProfil"].Width = 110;
            ZFSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZFSummaryDG.Columns["CostTPS"].Width = 110;
            ZFSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            ZFSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            ZFSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            ZFSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            ZFSummaryDG.Columns["DispPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZFSummaryDG.AddPercentageColumn("DispPercProfil");
            ZFSummaryDG.Columns["DispPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZFSummaryDG.AddPercentageColumn("DispPercTPS");

            ZDSummaryDG.Columns["DispatchDate"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZDSummaryDG.Columns["DispatchDateTime"].DefaultCellStyle.Format = "dd.MM.yyyy";
            ZDSummaryDG.Columns["DispatchDate"].HeaderText = " Ожидаемая\n\rдата отгрузки";
            ZDSummaryDG.Columns["DispatchDateTime"].HeaderText = "Фактическая\n\rдата отгрузки";
            ZDSummaryDG.Columns["DispPercProfil"].HeaderText = "Отгружено\n\r Профиль, %";
            ZDSummaryDG.Columns["DispPercTPS"].HeaderText = "Отгружено\n\r     ТПС, %";
            ZDSummaryDG.Columns["CostProfil"].HeaderText = "Профиль, €";
            ZDSummaryDG.Columns["CostTPS"].HeaderText = "ТПС, €";
            ZDSummaryDG.Columns["DispatchDate"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZDSummaryDG.Columns["DispatchDate"].MinimumWidth = 110;
            ZDSummaryDG.Columns["DispatchDateTime"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            ZDSummaryDG.Columns["DispatchDateTime"].MinimumWidth = 110;
            ZDSummaryDG.Columns["DispPercProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZDSummaryDG.Columns["DispPercProfil"].MinimumWidth = 135;
            ZDSummaryDG.Columns["DispPercTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            ZDSummaryDG.Columns["DispPercTPS"].MinimumWidth = 135;
            ZDSummaryDG.Columns["CostProfil"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZDSummaryDG.Columns["CostProfil"].Width = 110;
            ZDSummaryDG.Columns["CostTPS"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            ZDSummaryDG.Columns["CostTPS"].Width = 110;
            ZDSummaryDG.Columns["CostProfil"].DefaultCellStyle.Format = "N";
            ZDSummaryDG.Columns["CostProfil"].DefaultCellStyle.FormatProvider = nfi1;
            ZDSummaryDG.Columns["CostTPS"].DefaultCellStyle.Format = "N";
            ZDSummaryDG.Columns["CostTPS"].DefaultCellStyle.FormatProvider = nfi1;

            ZDSummaryDG.Columns["DispPercProfil"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZDSummaryDG.AddPercentageColumn("DispPercProfil");
            ZDSummaryDG.Columns["DispPercTPS"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            ZDSummaryDG.AddPercentageColumn("DispPercTPS");
        }

        private void SetProductsGrids()
        {
            if (!Security.PriceAccess)
            {
                FrontsDG.Columns["Cost"].Visible = false;
                DecorProductsDG.Columns["Cost"].Visible = false;
                DecorItemsDG.Columns["Cost"].Visible = false;
            }

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                CurrencyGroupSeparator = " ",
                CurrencySymbol = string.Empty,
                CurrencyDecimalDigits = 2,
                CurrencyDecimalSeparator = ".",

                NumberGroupSeparator = " ",
                NumberDecimalDigits = 2,
                NumberDecimalSeparator = ","
            };
            FrontsDG.ColumnHeadersHeight = 38;
            DecorProductsDG.ColumnHeadersHeight = 38;
            DecorItemsDG.ColumnHeadersHeight = 38;

            foreach (DataGridViewColumn Column in FrontsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorProductsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }
            foreach (DataGridViewColumn Column in DecorItemsDG.Columns)
            {
                Column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
            }

            FrontsDG.Columns["FrontID"].Visible = false;
            FrontsDG.Columns["Width"].Visible = false;

            FrontsDG.Columns["Front"].HeaderText = "Фасад";
            FrontsDG.Columns["Cost"].HeaderText = " € ";
            FrontsDG.Columns["Square"].HeaderText = "м.кв.";
            FrontsDG.Columns["Count"].HeaderText = "шт.";

            FrontsDG.Columns["Front"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            FrontsDG.Columns["Front"].MinimumWidth = 110;
            FrontsDG.Columns["Square"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            FrontsDG.Columns["Square"].Width = 100;
            FrontsDG.Columns["Cost"].Width = 100;
            FrontsDG.Columns["Count"].Width = 90;

            FrontsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            FrontsDG.Columns["Square"].DefaultCellStyle.Format = "N";
            FrontsDG.Columns["Square"].DefaultCellStyle.FormatProvider = nfi1;

            DecorProductsDG.Columns["ProductID"].Visible = false;
            DecorProductsDG.Columns["MeasureID"].Visible = false;

            DecorItemsDG.Columns["ProductID"].Visible = false;
            DecorItemsDG.Columns["DecorID"].Visible = false;
            DecorItemsDG.Columns["MeasureID"].Visible = false;

            DecorProductsDG.Columns["DecorProduct"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorProductsDG.Columns["DecorProduct"].MinimumWidth = 100;
            DecorProductsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Cost"].Width = 100;
            DecorProductsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Count"].Width = 100;
            DecorProductsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorProductsDG.Columns["Measure"].Width = 90;

            DecorProductsDG.Columns["DecorProduct"].HeaderText = "Продукт";
            DecorProductsDG.Columns["Cost"].HeaderText = " € ";
            DecorProductsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorProductsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorProductsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            DecorItemsDG.Columns["DecorID"].Visible = false;

            DecorItemsDG.Columns["DecorItem"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            DecorItemsDG.Columns["DecorItem"].MinimumWidth = 100;
            DecorItemsDG.Columns["Cost"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Cost"].Width = 100;
            DecorItemsDG.Columns["Count"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Count"].Width = 100;
            DecorItemsDG.Columns["Measure"].AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
            DecorItemsDG.Columns["Measure"].Width = 90;

            DecorItemsDG.Columns["DecorItem"].HeaderText = "Наименование";
            DecorItemsDG.Columns["Cost"].HeaderText = " € ";
            DecorItemsDG.Columns["Count"].HeaderText = "Кол-во";
            DecorItemsDG.Columns["Measure"].HeaderText = "Ед.изм.";

            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.FormatProvider = nfi1;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Format = "N";
            DecorItemsDG.Columns["Count"].DefaultCellStyle.FormatProvider = nfi1;

            FrontsDG.Columns["Square"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            FrontsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;

            DecorProductsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorProductsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Cost"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
            DecorItemsDG.Columns["Count"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
        }

        public void ClientSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;

            decimal DispPercProfil = 0;
            decimal DispPercTPS = 0;

            decimal DispCostProfil = 0;
            decimal DispCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            decimal Percentage = 0;
            decimal d1 = 0;
            decimal d2 = 0;

            string ClientName = string.Empty;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(MarketingClientsDT))
            {
                Table = DV.ToTable(true, new string[] { "ClientID" });
            }

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);

                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();

                d1 = 0;
                d2 = 0;

                if (FactoryID == 0)
                {
                    DispCostProfil = 0;
                    DispCostTPS = 0;
                    DispPercProfil = MarketDispFrontsCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);
                    DispPercTPS = MarketDispFrontsCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispPercProfil != 0 || DispPercTPS != 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (DispPercProfil > 0)
                            {
                                NewRow["DispPercProfil"] = DispPercProfil;
                                NewRow["CostProfil"] = DispCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (DispPercTPS > 0)
                            {
                                NewRow["DispPercTPS"] = DispPercTPS;
                                NewRow["CostTPS"] = DispCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (DispPercProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + DispCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["DispPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + DispCostProfil;
                            }
                            if (DispPercTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + DispCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["DispPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + DispCostTPS;
                            }
                        }
                    }

                    DispCostProfil = 0;
                    DispCostTPS = 0;
                    DispPercProfil = MarketDispDecorCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);
                    DispPercTPS = MarketDispDecorCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispCostProfil != 0 || DispCostTPS != 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            if (DispCostProfil > 0)
                            {
                                NewRow["DispPercProfil"] = DispPercProfil;
                                NewRow["CostProfil"] = DispCostProfil;
                                NewRow["AllCostProfil"] = AllCostProfil;
                            }
                            if (DispCostTPS > 0)
                            {
                                NewRow["DispPercTPS"] = DispPercTPS;
                                NewRow["CostTPS"] = DispCostTPS;
                                NewRow["AllCostTPS"] = AllCostTPS;
                            }
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (DispPercProfil > 0)
                            {
                                if (Rows[0]["CostProfil"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                                if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                                Percentage = (d1 + DispCostProfil) / (d2 + AllCostProfil);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["DispPercProfil"] = Percentage;
                                Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                                Rows[0]["CostProfil"] = d1 + DispCostProfil;
                            }
                            if (DispPercTPS > 0)
                            {
                                if (Rows[0]["CostTPS"] != DBNull.Value)
                                    d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                                if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                    d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                                Percentage = (d1 + DispCostTPS) / (d2 + AllCostTPS);
                                Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                                Rows[0]["DispPercTPS"] = Percentage;
                                Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                                Rows[0]["CostTPS"] = d1 + DispCostTPS;
                            }
                        }
                    }
                }

                if (FactoryID == 1)
                {
                    DispCostProfil = 0;
                    DispPercProfil = MarketDispFrontsCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);

                    if (DispPercProfil > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["DispPercProfil"] = DispPercProfil;
                            NewRow["CostProfil"] = DispCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + DispCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["DispPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + DispCostProfil;
                        }
                    }

                    DispCostProfil = 0;
                    DispPercProfil = MarketDispDecorCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);

                    if (DispCostProfil > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["DispPercProfil"] = DispPercProfil;
                            NewRow["CostProfil"] = DispCostProfil;
                            NewRow["AllCostProfil"] = AllCostProfil;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostProfil"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostProfil"]);
                            if (Rows[0]["AllCostProfil"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostProfil"]);
                            Percentage = (d1 + DispCostProfil) / (d2 + AllCostProfil);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["DispPercProfil"] = Percentage;
                            Rows[0]["AllCostProfil"] = d2 + AllCostProfil;
                            Rows[0]["CostProfil"] = d1 + DispCostProfil;
                        }
                    }
                }

                if (FactoryID == 2)
                {
                    DispCostTPS = 0;
                    DispPercTPS = MarketDispFrontsCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispPercTPS > 0)
                    {
                        DataRow[] Rows = MFSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MFSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["DispPercTPS"] = DispPercTPS;
                            NewRow["CostTPS"] = DispCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MFSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + DispCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["DispPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + DispCostTPS;
                        }
                    }

                    DispCostTPS = 0;
                    DispPercTPS = MarketDispDecorCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispCostTPS > 0)
                    {
                        DataRow[] Rows = MDSummaryDT.Select("ClientName='" + ClientName + "'");
                        if (Rows.Count() == 0)
                        {
                            DataRow NewRow = MDSummaryDT.NewRow();
                            NewRow["ClientID"] = ClientID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["DispPercTPS"] = DispPercTPS;
                            NewRow["CostTPS"] = DispCostTPS;
                            NewRow["AllCostTPS"] = AllCostTPS;
                            MDSummaryDT.Rows.Add(NewRow);
                        }
                        else
                        {
                            if (Rows[0]["CostTPS"] != DBNull.Value)
                                d1 = Convert.ToDecimal(Rows[0]["CostTPS"]);
                            if (Rows[0]["AllCostTPS"] != DBNull.Value)
                                d2 = Convert.ToDecimal(Rows[0]["AllCostTPS"]);
                            Percentage = (d1 + DispCostTPS) / (d2 + AllCostTPS);
                            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);
                            Rows[0]["DispPercTPS"] = Percentage;
                            Rows[0]["AllCostTPS"] = d2 + AllCostTPS;
                            Rows[0]["CostTPS"] = d1 + DispCostTPS;
                        }
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void MarketingSummary(int FactoryID)
        {
            int ClientID = 0;
            int MegaOrderID = 0;
            int OrderNumber = 0;

            decimal DispPercProfil = 0;
            decimal DispPercTPS = 0;

            decimal DispCostProfil = 0;
            decimal DispCostTPS = 0;

            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string ClientName = string.Empty;

            MFSummaryDT.Clear();
            MDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < MarketingClientsDT.Rows.Count; i++)
            {
                ClientID = Convert.ToInt32(MarketingClientsDT.Rows[i]["ClientID"]);
                MegaOrderID = Convert.ToInt32(MarketingClientsDT.Rows[i]["MegaOrderID"]);
                OrderNumber = Convert.ToInt32(MarketingClientsDT.Rows[i]["OrderNumber"]);
                ClientName = MarketingClientsDT.Rows[i]["ClientName"].ToString();

                if (FactoryID == 0)
                {
                    DispCostProfil = 0;
                    DispCostTPS = 0;
                    DispPercProfil = MarketDispFrontsCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);
                    DispPercTPS = MarketDispFrontsCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispPercProfil != 0 || DispPercTPS != 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        if (DispPercProfil > 0)
                        {
                            NewRow["DispPercProfil"] = DispPercProfil;
                            NewRow["CostProfil"] = DispCostProfil;
                        }
                        if (DispPercTPS > 0)
                        {
                            NewRow["DispPercTPS"] = DispPercTPS;
                            NewRow["CostTPS"] = DispCostTPS;
                        }
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    DispCostProfil = 0;
                    DispCostTPS = 0;
                    DispPercProfil = MarketDispDecorCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);
                    DispPercTPS = MarketDispDecorCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispCostProfil != 0 || DispCostTPS != 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        if (DispCostProfil > 0)
                        {
                            NewRow["DispPercProfil"] = DispPercProfil;
                            NewRow["CostProfil"] = DispCostProfil;
                        }
                        if (DispCostTPS > 0)
                        {
                            NewRow["DispPercTPS"] = DispPercTPS;
                            NewRow["CostTPS"] = DispCostTPS;
                        }
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 1)
                {
                    DispCostProfil = 0;
                    DispPercProfil = MarketDispFrontsCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);

                    if (DispPercProfil > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["DispPercProfil"] = DispPercProfil;
                        NewRow["CostProfil"] = DispCostProfil;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    DispCostProfil = 0;
                    DispPercProfil = MarketDispDecorCost(true, MegaOrderID, 1, ref DispCostProfil, ref AllCostProfil);

                    if (DispCostProfil > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["DispPercProfil"] = DispPercProfil;
                        NewRow["CostProfil"] = DispCostProfil;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }

                if (FactoryID == 2)
                {
                    DispCostTPS = 0;
                    DispPercTPS = MarketDispFrontsCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispPercTPS > 0)
                    {
                        DataRow NewRow = MFSummaryDT.NewRow();
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["DispPercTPS"] = DispPercTPS;
                        NewRow["CostTPS"] = DispCostTPS;
                        MFSummaryDT.Rows.Add(NewRow);
                    }

                    DispCostTPS = 0;
                    DispPercTPS = MarketDispDecorCost(true, MegaOrderID, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispCostTPS > 0)
                    {
                        DataRow NewRow = MDSummaryDT.NewRow();
                        NewRow["ClientID"] = ClientID;
                        NewRow["ClientName"] = ClientName;
                        NewRow["OrderNumber"] = OrderNumber;
                        NewRow["DispPercTPS"] = DispPercTPS;
                        NewRow["CostTPS"] = DispCostTPS;
                        MDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            MFSummaryDT.DefaultView.Sort = "ClientName";
            MDSummaryDT.DefaultView.Sort = "ClientName";
            MFSummaryBS.MoveFirst();
            MDSummaryBS.MoveFirst();
        }

        public void ZOVSummary(int FactoryID)
        {
            decimal DispPercProfil = 0;
            decimal DispPercTPS = 0;

            decimal DispCostProfil = 0;
            decimal DispCostTPS = 0;
            decimal AllCostProfil = 0;
            decimal AllCostTPS = 0;

            string DispatchDateTime = string.Empty;
            string DispatchDate = string.Empty;

            ZFSummaryDT.Clear();
            ZDSummaryDT.Clear();

            if (FactoryID == -1)
                return;

            for (int i = 0; i < ZOVDispatchDT.Rows.Count; i++)
            {
                DispatchDate = ZOVDispatchDT.Rows[i]["DispatchDate"].ToString();
                DispatchDateTime = ZOVDispatchDT.Rows[i]["DispatchDateTime"].ToString();

                if (FactoryID == 0)
                {
                    DispCostProfil = 0;
                    DispCostTPS = 0;
                    DispPercProfil = ZOVDispFrontsCost(DispatchDate, DispatchDateTime, 1, ref DispCostProfil, ref AllCostProfil);
                    DispPercTPS = ZOVDispFrontsCost(DispatchDate, DispatchDateTime, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispPercProfil != 0 || DispPercTPS != 0)
                    {
                        DataRow NewRow = ZFSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DispatchDateTime"] = DispatchDateTime;
                        if (DispPercProfil > 0)
                        {
                            NewRow["DispPercProfil"] = DispPercProfil;
                            NewRow["CostProfil"] = DispCostProfil;
                        }
                        if (DispPercTPS > 0)
                        {
                            NewRow["DispPercTPS"] = DispPercTPS;
                            NewRow["CostTPS"] = DispCostTPS;
                        }
                        ZFSummaryDT.Rows.Add(NewRow);
                    }

                    DispCostProfil = 0;
                    DispCostTPS = 0;
                    DispPercProfil = ZOVDispDecorCost(DispatchDate, DispatchDateTime, 1, ref DispCostProfil, ref AllCostProfil);
                    DispPercTPS = ZOVDispDecorCost(DispatchDate, DispatchDateTime, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispCostProfil != 0 || DispCostTPS != 0)
                    {
                        DataRow NewRow = ZDSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DispatchDateTime"] = DispatchDateTime;
                        if (DispCostProfil > 0)
                        {
                            NewRow["DispPercProfil"] = DispPercProfil;
                            NewRow["CostProfil"] = DispCostProfil;
                        }
                        if (DispCostTPS > 0)
                        {
                            NewRow["DispPercTPS"] = DispPercTPS;
                            NewRow["CostTPS"] = DispCostTPS;
                        }
                        ZDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 1)
                {
                    DispCostProfil = 0;
                    DispPercProfil = ZOVDispFrontsCost(DispatchDate, DispatchDateTime, 1, ref DispCostProfil, ref AllCostProfil);

                    if (DispCostProfil > 0)
                    {
                        DataRow NewRow = ZFSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DispatchDateTime"] = DispatchDateTime;
                        NewRow["DispPercProfil"] = DispPercProfil;
                        NewRow["CostProfil"] = DispCostProfil;
                        ZFSummaryDT.Rows.Add(NewRow);
                    }

                    DispCostProfil = 0;
                    DispPercProfil = ZOVDispDecorCost(DispatchDate, DispatchDateTime, 1, ref DispCostProfil, ref AllCostProfil);

                    if (DispCostProfil > 0)
                    {
                        DataRow NewRow = ZDSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DispatchDateTime"] = DispatchDateTime;
                        NewRow["DispPercProfil"] = DispPercProfil;
                        NewRow["CostProfil"] = DispCostProfil;
                        ZDSummaryDT.Rows.Add(NewRow);
                    }
                }
                if (FactoryID == 2)
                {
                    DispCostTPS = 0;
                    DispPercTPS = ZOVDispFrontsCost(DispatchDate, DispatchDateTime, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispCostTPS > 0)
                    {
                        DataRow NewRow = ZFSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DispatchDateTime"] = DispatchDateTime;
                        NewRow["DispPercTPS"] = DispPercTPS;
                        NewRow["CostTPS"] = DispCostTPS;
                        ZFSummaryDT.Rows.Add(NewRow);
                    }

                    DispCostTPS = 0;
                    DispPercTPS = ZOVDispDecorCost(DispatchDate, DispatchDateTime, 2, ref DispCostTPS, ref AllCostTPS);

                    if (DispCostTPS > 0)
                    {
                        DataRow NewRow = ZDSummaryDT.NewRow();
                        NewRow["DispatchDate"] = DispatchDate;
                        NewRow["DispatchDateTime"] = DispatchDateTime;
                        NewRow["DispPercTPS"] = DispPercTPS;
                        NewRow["CostTPS"] = DispCostTPS;
                        ZDSummaryDT.Rows.Add(NewRow);
                    }
                }
            }

            //ZFSummaryDT.DefaultView.Sort = "DispPercTPS desc, DispPercProfil desc";
            //ZDSummaryDT.DefaultView.Sort = "DispPercTPS desc, DispPercProfil desc";
            ZFSummaryBS.MoveFirst();
            ZDSummaryBS.MoveFirst();
        }

        public void FMarketingOrders(DateTime FirstDate, DateTime SecondDate, int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MFrontsPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string DispDateFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            DispDateFilter = " AND CAST(DispatchDateTime AS date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(DispatchDateTime AS date) <='" + SecondDate.ToString("yyyy-MM-dd") + "'";

            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID = 3 AND ProductType = 0 " + PackageFactoryFilter + DispDateFilter + ")";

            MarketingSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();
        }

        public void DMarketingOrders(DateTime FirstDate, DateTime SecondDate, int FactoryID, int ClientID)
        {
            string MarketingSelectCommand = string.Empty;

            string MDecorPackageFilter = string.Empty;

            string ClientFilter = string.Empty;
            string DispDateFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (ClientID != -1)
                ClientFilter = " AND ClientID = " + ClientID;
            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            DispDateFilter = " AND CAST(DispatchDateTime AS date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(DispatchDateTime AS date) <='" + SecondDate.ToString("yyyy-MM-dd") + "'";

            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID = 3 AND ProductType = 1 " + PackageFactoryFilter + DispDateFilter + ")";

            //decor
            MarketingSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + ClientFilter +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }

            GetDecorProducts();
            GetDecorItems();
        }

        public void ZOVOrders(DateTime FirstDate, DateTime SecondDate, int FactoryID)
        {
            string ZOVSelectCommand = string.Empty;

            string ZFrontsPackageFilter = string.Empty;
            string ZDecorPackageFilter = string.Empty;

            string DispDateFilter = string.Empty;
            string PackageFactoryFilter = string.Empty;

            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            DispDateFilter = " AND CAST(DispatchDateTime AS date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(DispatchDateTime AS date) <='" + SecondDate.ToString("yyyy-MM-dd") + "'";

            ZFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID = 3 AND ProductType = 0 " + PackageFactoryFilter + DispDateFilter + ")";

            ZDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE PackageStatusID = 3 AND ProductType = 1 " + PackageFactoryFilter + DispDateFilter + ")";

            ZOVSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID," +
                " FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width," +
                " PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, MeasureID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID <> 0) AND " + ZFrontsPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }

            GetFronts();

            //decor
            ZOVSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID <> 0) AND " + ZDecorPackageFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);

            }

            GetDecorProducts();
            GetDecorItems();

            ZOVSummary(FactoryID);
        }

        public bool HasFronts
        {
            get { return FrontsOrdersDT.Rows.Count > 0; }
        }

        public bool HasDecor
        {
            get { return DecorOrdersDT.Rows.Count > 0; }
        }

        public void FilterDecorProducts(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBS.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBS.MoveFirst();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["Width"] = 0;
                    FrontsSummaryDT.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
                DataRow[] CurvedRows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDT.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гнутый";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrontCount;
                    FrontsSummaryDT.Rows.Add(CurvedNewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDT.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBS.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                //if (DecorProductCount < 3)
                //    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDT.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBS.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDT.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBS.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count, ref int CurvedCount)
        {
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(FrontsSummaryDT.Rows[i]["Width"]) == -1)
                    CurvedCount += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Square += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Square"]);
                    Count += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Square = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref int Count)
        {
            for (int i = 0; i < DecorProductsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["MeasureID"]) != 2)
                    Count += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Pogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Pogon = Decimal.Round(Pogon, 2, MidpointRounding.AwayFromZero);
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDT.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDT.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorItemsDT.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public void ClearFrontsOrders(int TypeOrders)
        {
            if (TypeOrders == 1)
            {
                MFSummaryDT.Clear();
            }
            if (TypeOrders == 3)
            {
                ZFSummaryDT.Clear();
            }
        }

        public void ClearDecorOrders(int TypeOrders)
        {
            if (TypeOrders == 1)
            {
                MDSummaryDT.Clear();
            }
            if (TypeOrders == 3)
            {
                ZDSummaryDT.Clear();
            }
        }

        private decimal MarketDispFrontsCost(bool IsMarket, int MegaOrderID, int FactoryID, ref decimal DispCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal DispFrontsCost = 0;
            decimal AllFrontsCost = 0;

            if (IsMarket)
            {
                DataRow[] RFRows = MDispFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    DispFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = MAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }
            else
            {
                DataRow[] RFRows = ZDispFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RFRows)
                    DispFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

                DataRow[] AFRows = ZAllFrontsCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in AFRows)
                    AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);
            }

            DispCost = DispFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = DispFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal MarketDispDecorCost(bool IsMarket, int MegaOrderID, int FactoryID, ref decimal DispCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal DispDecorCost = 0;
            decimal AllDecorCost = 0;

            if (IsMarket)
            {
                DataRow[] RDRows = MDispDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RDRows)
                    DispDecorCost += Convert.ToDecimal(Row["DecorCost"]);

                DataRow[] ADRows = MAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in ADRows)
                    AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);
            }
            else
            {
                DataRow[] RDRows = ZDispDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in RDRows)
                    DispDecorCost += Convert.ToDecimal(Row["DecorCost"]);

                DataRow[] ADRows = ZAllDecorCostDT.Select("MegaOrderID = " + MegaOrderID + " AND FactoryID = " + FactoryID);
                foreach (DataRow Row in ADRows)
                    AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);
            }

            DispCost = DispDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = DispDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal ZOVDispFrontsCost(string DispatchDate, string DispatchDateTime, int FactoryID, ref decimal DispCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal DispFrontsCost = 0;
            decimal AllFrontsCost = 0;

            DataRow[] RFRows = ZDispFrontsCostDT.Select("DispatchDate = '" + DispatchDate + "' AND DispatchDateTime = '" + DispatchDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RFRows)
                DispFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DataRow[] AFRows = ZAllFrontsCostDT.Select("DispatchDate = '" + DispatchDate + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in AFRows)
                AllFrontsCost += Convert.ToDecimal(Row["FrontsCost"]);

            DispCost = DispFrontsCost;
            AllCost = AllFrontsCost;

            if (AllFrontsCost > 0)
                Percentage = DispFrontsCost / AllFrontsCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }

        private decimal ZOVDispDecorCost(string DispatchDate, string DispatchDateTime, int FactoryID, ref decimal DispCost, ref decimal AllCost)
        {
            decimal Percentage = 0;
            decimal DispDecorCost = 0;
            decimal AllDecorCost = 0;

            DataRow[] RDRows = ZDispDecorCostDT.Select("DispatchDate = '" + DispatchDate + "' AND DispatchDateTime = '" + DispatchDateTime + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in RDRows)
                DispDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DataRow[] ADRows = ZAllDecorCostDT.Select("DispatchDate = '" + DispatchDate + "' AND FactoryID = " + FactoryID);
            foreach (DataRow Row in ADRows)
                AllDecorCost += Convert.ToDecimal(Row["DecorCost"]);

            DispCost = DispDecorCost;
            AllCost = AllDecorCost;

            if (AllDecorCost > 0)
                Percentage = DispDecorCost / AllDecorCost;
            Percentage = Decimal.Round(Percentage * 100, 2, MidpointRounding.AwayFromZero);

            return Percentage;
        }
    }


    public class ConditionOrdersStatistics
    {
        DataTable ClientGroupsDT = null;
        DataTable MarketingClientsDT = null;
        DataTable ZOVDispatchDT = null;

        DataTable FrontsOrdersDT = null;
        DataTable DecorOrdersDT = null;

        public DataTable FrontsSummaryDT = null;
        public DataTable DecorProductsSummaryDT = null;
        public DataTable DecorItemsSummaryDT = null;
        DataTable DecorConfigDT = null;

        DataTable FrontsDT = null;
        DataTable DecorProductsDT = null;
        DataTable DecorItemsDT = null;

        public BindingSource ClientGroupsBS = null;

        public BindingSource FrontsSummaryBS = null;
        public BindingSource DecorProductsSummaryBS = null;
        public BindingSource DecorItemsSummaryBS = null;

        public ConditionOrdersStatistics()
        {
            Initialize();
        }

        private void Create()
        {
            ClientGroupsDT = new DataTable();
            MarketingClientsDT = new DataTable();
            ZOVDispatchDT = new DataTable();

            DecorItemsDT = new DataTable();
            FrontsDT = new DataTable();
            DecorProductsDT = new DataTable();
            DecorConfigDT = new DataTable();

            FrontsOrdersDT = new DataTable();
            DecorOrdersDT = new DataTable();

            FrontsSummaryDT = new DataTable();
            FrontsSummaryDT.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDT = new DataTable();
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Cost"), Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDT.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));
        }

        private void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ClientGroups",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientGroupsDT);
            }
            ClientGroupsDT.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            for (int i = 0; i < ClientGroupsDT.Rows.Count; i++)
            {
                if (i == 1)
                    ClientGroupsDT.Rows[i]["Check"] = false;
                else
                    ClientGroupsDT.Rows[i]["Check"] = true;
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT MegaOrders.ClientID, infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID
            FROM MegaOrders
            INNER JOIN infiniu2_marketingreference.dbo.Clients ON MegaOrders.ClientID = infiniu2_marketingreference.dbo.Clients.ClientID
            WHERE MegaOrders.MegaOrderID IN (SELECT MegaOrderID FROM MainOrders WHERE MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID = 3))
            ORDER BY infiniu2_marketingreference.dbo.Clients.ClientName, MegaOrders.OrderNumber, MegaOrders.MegaOrderID",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarketingClientsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(
            @"SELECT CONVERT(varchar(10), Packages.DispatchDateTime, 121) AS DispatchDateTime, CONVERT(varchar(10), MegaOrders.DispatchDate, 121) AS DispatchDate 
            FROM MainOrders 
            INNER JOIN Packages ON MainOrders.MainOrderID = Packages.MainOrderID
            INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID AND MainOrders.MegaOrderID <> 0
            WHERE MainOrders.MainOrderID IN (SELECT MainOrderID FROM Packages WHERE PackageStatusID = 3)
            GROUP BY CONVERT(varchar(10), Packages.DispatchDateTime, 121), CONVERT(varchar(10), MegaOrders.DispatchDate, 121)
            ORDER BY DispatchDateTime, DispatchDate",
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(ZOVDispatchDT);
            }

            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDT);
            }

            SelectCommand = @"SELECT ProductID, ProductName FROM DecorProducts" +
                " WHERE ProductID IN (SELECT ProductID FROM DecorConfig WHERE Enabled = 1) ORDER BY ProductName ASC";
            DecorProductsDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDT);
            }
            DecorItemsDT = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID AND Enabled = 1 ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorItemsDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDT);
            //}
            DecorConfigDT = TablesManager.DecorConfigDataTableAll;

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            sw.Stop();
            double G = sw.Elapsed.TotalMilliseconds;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 FrontID, PatinaID, ColorID, InsetTypeID," +
                " InsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(FrontsOrdersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDT);
            }
        }

        private void Binding()
        {
            ClientGroupsBS = new BindingSource()
            {
                DataSource = ClientGroupsDT
            };
            FrontsSummaryBS = new BindingSource()
            {
                DataSource = FrontsSummaryDT
            };
            DecorProductsSummaryBS = new BindingSource()
            {
                DataSource = DecorProductsSummaryDT
            };
            DecorItemsSummaryBS = new BindingSource()
            {
                DataSource = DecorItemsSummaryDT
            };
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
        }

        public void ShowColumns(ref PercentageDataGrid FrontsGrid, ref PercentageDataGrid DecorGrid, bool Profil, bool TPS)
        {
            if (Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["DispPercProfil"].Visible = true;
                FrontsGrid.Columns["DispPercTPS"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["DispPercProfil"].Visible = true;
                DecorGrid.Columns["DispPercTPS"].Visible = true;
            }
            if (Profil && !TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = true;
                FrontsGrid.Columns["CostTPS"].Visible = false;
                FrontsGrid.Columns["DispPercProfil"].Visible = true;
                FrontsGrid.Columns["DispPercTPS"].Visible = false;

                DecorGrid.Columns["CostProfil"].Visible = true;
                DecorGrid.Columns["CostTPS"].Visible = false;
                DecorGrid.Columns["DispPercProfil"].Visible = true;
                DecorGrid.Columns["DispPercTPS"].Visible = false;
            }
            if (!Profil && TPS)
            {
                FrontsGrid.Columns["CostProfil"].Visible = false;
                FrontsGrid.Columns["CostTPS"].Visible = true;
                FrontsGrid.Columns["DispPercProfil"].Visible = false;
                FrontsGrid.Columns["DispPercTPS"].Visible = true;

                DecorGrid.Columns["CostProfil"].Visible = false;
                DecorGrid.Columns["CostTPS"].Visible = true;
                DecorGrid.Columns["DispPercProfil"].Visible = false;
                DecorGrid.Columns["DispPercTPS"].Visible = true;
            }
        }

        public void GetOnAgreementOrders(DateTime FixingDate, int FactoryID)
        {
            ArrayList ClientGroups = IsMarketingSelect();

            DataTable DT = new DataTable();

            if (ClientGroups.Count > 0)
            {
                DT.Clear();
                DT = MarketingOnAgreementFronts(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = MarketingOnAgreementDecor(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }

            if (IsZOVSelect())
            {
                DT.Clear();
                DT = ZOVOnAgreementFronts(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = ZOVOnAgreementDecor(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }

            DT.Dispose();

            GetFronts();
            GetDecorProducts();
            GetDecorItems();
        }

        public void GetAgreedOrders(DateTime FixingDate, int FactoryID)
        {
            ArrayList ClientGroups = IsMarketingSelect();

            DataTable DT = new DataTable();

            if (ClientGroups.Count > 0)
            {
                DT.Clear();
                DT = MarketingAgreedFronts(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = MarketingAgreedDecor(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }

            if (IsZOVSelect())
            {
                DT.Clear();
                DT = ZOVAgreedFronts(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = ZOVAgreedDecor(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }

            DT.Dispose();

            GetFronts();
            GetDecorProducts();
            GetDecorItems();
        }

        public void GetOnProductionOrders(DateTime FixingDate, int FactoryID)
        {
            ArrayList ClientGroups = IsMarketingSelect();

            DataTable DT = new DataTable();

            if (ClientGroups.Count > 0)
            {
                DT.Clear();
                DT = MarketingOnProductionFronts(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = MarketingOnProductionDecor(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }

            if (IsZOVSelect())
            {
                DT.Clear();
                DT = ZOVOnProductionFronts(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = ZOVOnProductionDecor(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }

            DT.Dispose();

            GetFronts();
            GetDecorProducts();
            GetDecorItems();
        }

        public void GetInProductionOrders(DateTime FixingDate, int FactoryID)
        {
            ArrayList ClientGroups = IsMarketingSelect();

            DataTable DT = new DataTable();

            if (ClientGroups.Count > 0)
            {
                DT.Clear();
                DT = MarketingInProductionFronts(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = MarketingInProductionDecor(ClientGroups, FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }
            if (IsZOVSelect())
            {
                DT.Clear();
                DT = ZOVInProductionFronts(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    FrontsOrdersDT.ImportRow(item);

                DT.Clear();
                DT = ZOVInProductionDecor(FixingDate, FactoryID);
                foreach (DataRow item in DT.Rows)
                    DecorOrdersDT.ImportRow(item);
            }

            DT.Dispose();

            GetFronts();
            GetDecorProducts();
            GetDecorItems();
        }

        #region Marketing
        /// <summary>
        /// фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingOnAgreementFronts(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND AgreementStatusID <> 2";
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " NewFrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = @" WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))";
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " NewFrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (NewMainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " NewFrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (NewMainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            SelectCommand = "SELECT NewFrontsOrders.FrontID, NewFrontsOrders.PatinaID, NewFrontsOrders.ColorID, NewFrontsOrders.InsetTypeID," +
                " NewFrontsOrders.InsetColorID, NewFrontsOrders.TechnoColorID, NewFrontsOrders.TechnoInsetTypeID, NewFrontsOrders.TechnoInsetColorID, NewFrontsOrders.Height, NewFrontsOrders.Width, NewFrontsOrders.Count, NewFrontsOrders.Square, NewFrontsOrders.Cost, MeasureID, ClientID FROM NewFrontsOrders" +
                " INNER JOIN NewMainOrders ON NewFrontsOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON NewFrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " NewFrontsOrders.MainOrderID IN (SELECT MainOrderID FROM NewMainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM NewMegaOrders " + ClientFilter + AgreementFilter + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingOnAgreementDecor(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND AgreementStatusID <> 2";
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " NewDecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))";
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " NewDecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (NewMainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " NewDecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (NewMainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            //decor
            SelectCommand = "SELECT NewDecorOrders.ProductID, NewDecorOrders.DecorID, NewDecorOrders.ColorID,NewDecorOrders.PatinaID," +
                " NewDecorOrders.Height, NewDecorOrders.Length, NewDecorOrders.Width, NewDecorOrders.Count, NewDecorOrders.Cost, NewDecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM NewDecorOrders" +
                " INNER JOIN NewMainOrders ON NewDecorOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON NewDecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " NewDecorOrders.MainOrderID IN (SELECT MainOrderID FROM NewMainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM NewMegaOrders " + ClientFilter + AgreementFilter + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingAgreedFronts(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND AgreementStatusID = 2";
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = @" WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))";
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            SelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, ClientID FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ClientFilter + AgreementFilter + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingAgreedDecor(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND AgreementStatusID = 2";
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))";
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            //decor
            SelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ClientFilter + AgreementFilter + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// фасады на производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingOnProductionFronts(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            SelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, ClientID FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ClientFilter + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// декор на производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingOnProductionDecor(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            //decor
            SelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ClientFilter + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// фасады в производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingInProductionFronts(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;
            string PackagesFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
                PackagesFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
                PackagesFilter = " AND FrontsOrdersID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND FrontsOrdersID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 0 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND FrontsOrdersID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 0 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            SelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, ClientID FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ClientFilter + "))" + PackagesFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// декор в производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable MarketingInProductionDecor(ArrayList ClientGroups, DateTime FixingDate, int FactoryID)
        {
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;
            string PackagesFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
                PackagesFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
                PackagesFilter = " AND DecorOrderID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND DecorOrderID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 1 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND DecorOrderID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 1 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }

            if (ClientGroups.Count > 0)
            {
                ClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", ClientGroups.OfType<Int32>().ToArray()) + "))";
            }
            else
                ClientFilter = " WHERE ClientID = -1";

            //decor
            SelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ClientFilter + "))" + PackagesFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        #endregion

        #region ZOV
        /// <summary>
        /// ЗОВ фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVOnAgreementFronts(DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND MegaOrderID = 0";
            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = @" WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))" + AgreementFilter;
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }

            SelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.Square, FrontsOrders.Cost, MeasureID FROM FrontsOrders" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// ЗОВ фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVOnAgreementDecor(DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND MegaOrderID = 0";
            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))" + AgreementFilter;
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }

            //decor
            SelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// ЗОВ фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVAgreedFronts(DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND MegaOrderID <> 0";
            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = @" WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))" + AgreementFilter;
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }

            SelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.Square, FrontsOrders.Cost, MeasureID FROM FrontsOrders" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// ЗОВ фасады на согласовании
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVAgreedDecor(DateTime FixingDate, int FactoryID)
        {
            string AgreementFilter = " AND MegaOrderID <> 0";
            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE (DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                      "' AND ( ( (ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))" +
                    " OR " + " ( (TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "') ) ))" + AgreementFilter;
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 2 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((ProfilOnProductionDate IS NULL AND ProfilProductionStatusID = 1 AND ProfilStorageStatusID = 1 AND ProfilDispatchStatusID = 1) OR (ProfilOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (MainOrders.FactoryID <> 1 AND DocDateTime < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "' AND ((TPSOnProductionDate IS NULL AND TPSProductionStatusID = 1 AND TPSStorageStatusID = 1 AND TPSDispatchStatusID = 1) OR (TPSOnProductionDate > '" +
                    FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')))" + AgreementFilter;
            }

            //decor
            SelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// ЗОВ фасады на производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVOnProductionFronts(DateTime FixingDate, int FactoryID)
        {
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }

            SelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.Square, FrontsOrders.Cost, MeasureID FROM FrontsOrders" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter + ")";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// ЗОВ декор на производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVOnProductionDecor(DateTime FixingDate, int FactoryID)
        {
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND ProfilProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSOnProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' AND TPSProductionDate > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
            }

            //decor
            SelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ClientFilter + "))";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// ЗОВ фасады в производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVInProductionFronts(DateTime FixingDate, int FactoryID)
        {
            string ClientFilter = string.Empty;

            string MainOrdersFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;
            string PackagesFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
                PackagesFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
                PackagesFilter = " AND FrontsOrdersID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 0 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 1)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND FrontsOrdersID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 0 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 2)
            {
                FrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND FrontsOrdersID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 0 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }

            SelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.Square, FrontsOrders.Cost, MeasureID FROM FrontsOrders" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + FrontsFactoryFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter + ")" + PackagesFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        /// <summary>
        /// ЗОВ декор в производстве
        /// </summary>
        /// <param name="FactoryID"></param>
        /// <returns></returns>
        public DataTable ZOVInProductionDecor(DateTime FixingDate, int FactoryID)
        {
            string MainOrdersFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;
            string PackagesFilter = string.Empty;

            string SelectCommand = string.Empty;

            DataTable DT = new DataTable();

            if (FactoryID == -1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE MainOrderID = -1";
                PackagesFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MainOrdersFilter = " WHERE ((ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") +
                    "') OR (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "'))";
                PackagesFilter = " AND DecorOrderID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE ProductType = 1 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 1)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (ProfilProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND DecorOrderID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 1 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }
            if (FactoryID == 2)
            {
                DecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
                MainOrdersFilter = " WHERE (TPSProductionDate < '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                PackagesFilter = " AND DecorOrderID IN (SELECT DISTINCT OrderID FROM PackageDetails WHERE PackageID IN (SELECT PackageID FROM Packages WHERE FactoryID = " + FactoryID + " AND ProductType = 1 AND (PackingDateTime > '" + FixingDate.ToString("yyyy-MM-dd HH:mm:ss") + "' OR PackageStatusID = 0)))";
            }

            //decor
            SelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + DecorFactoryFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MainOrdersFilter + ")" + PackagesFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DA.Fill(DT);
            }

            return DT;
        }

        #endregion

        public void ClearOrders()
        {
            FrontsOrdersDT.Clear();
            DecorOrdersDT.Clear();
            FrontsSummaryDT.Clear();
            DecorProductsSummaryDT.Clear();
            DecorItemsSummaryDT.Clear();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Width"] = 0;
                    NewRow["Count"] = FrontCount;
                    FrontsSummaryDT.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
                DataRow[] CurvedRows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDT.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гнутый";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrontCost, 2, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrontCount;
                    FrontsSummaryDT.Rows.Add(CurvedNewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDT.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBS.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                //if (DecorProductCount < 3)
                //    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDT.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBS.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDT.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDT.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDT.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDT.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBS.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count, ref int CurvedCount)
        {
            for (int i = 0; i < FrontsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(FrontsSummaryDT.Rows[i]["Width"]) == -1)
                    CurvedCount += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Square += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Square"]);
                    Count += Convert.ToInt32(FrontsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(FrontsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Square = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref int Count)
        {
            for (int i = 0; i < DecorProductsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["MeasureID"]) != 2)
                    Count += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["Count"]);
                else
                {
                    Pogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Count"]);
                }
                Cost += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["Cost"]);
            }

            Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);
            Pogon = Decimal.Round(Pogon, 2, MidpointRounding.AwayFromZero);
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDT.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDT.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorItemsDT.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        public bool IsZOVSelect()
        {
            for (int i = 0; i < ClientGroupsDT.Rows.Count; i++)
            {
                if (Convert.ToBoolean(ClientGroupsDT.Rows[i]["Check"]))
                    return true;
            }

            return false;
        }

        public ArrayList IsMarketingSelect()
        {
            ArrayList ClientGroupIDs = new ArrayList();

            for (int i = 0; i < ClientGroupsDT.Rows.Count; i++)
            {
                if (!Convert.ToBoolean(ClientGroupsDT.Rows[i]["Check"]))
                    continue;

                ClientGroupIDs.Add(Convert.ToInt32(ClientGroupsDT.Rows[i]["ClientGroupID"]));
            }

            return ClientGroupIDs;
        }
    }


    public class CommonStatistics : IAllFrontParameterName
    {
        private int CurrentManagerID = -1;

        public DataTable FrontsOrdersDataTable = null;
        public DataTable DecorOrdersDataTable = null;

        DataTable TempFrontsDataTable = null;
        DataTable TempDecorDataTable = null;
        DataTable ClientsDataTable = null;
        DataTable ClientGroupsDataTable = null;
        DataTable ManagersDataTable = null;

        DataTable FrontsSummaryDataTable = null;
        DataTable FrameColorsSummaryDataTable = null;
        DataTable TechnoColorsSummaryDataTable = null;
        DataTable InsetTypesSummaryDataTable = null;
        DataTable InsetColorsSummaryDataTable = null;
        DataTable TechnoInsetTypesSummaryDataTable = null;
        DataTable TechnoInsetColorsSummaryDataTable = null;
        DataTable SizesSummaryDataTable = null;
        DataTable DecorProductsSummaryDataTable = null;
        DataTable DecorItemsSummaryDataTable = null;
        DataTable DecorColorsSummaryDataTable = null;
        DataTable DecorSizesSummaryDataTable = null;
        DataTable DecorConfigDataTable = null;

        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;
        DataTable DecorProductsDataTable = null;
        DataTable DecorDataTable = null;
        DataTable TechStoreDataTable = null;

        public BindingSource ClientsBindingSource = null;
        public BindingSource ClientGroupsBindingSource = null;
        public BindingSource ManagersBindingSource = null;
        public BindingSource FrontsSummaryBindingSource = null;
        public BindingSource FrameColorsSummaryBindingSource = null;
        public BindingSource TechnoColorsSummaryBindingSource = null;
        public BindingSource InsetTypesSummaryBindingSource = null;
        public BindingSource InsetColorsSummaryBindingSource = null;
        public BindingSource TechnoInsetTypesSummaryBindingSource = null;
        public BindingSource TechnoInsetColorsSummaryBindingSource = null;
        public BindingSource SizesSummaryBindingSource = null;
        public BindingSource DecorProductsSummaryBindingSource = null;
        public BindingSource DecorItemsSummaryBindingSource = null;
        public BindingSource DecorColorsSummaryBindingSource = null;
        public BindingSource DecorSizesSummaryBindingSource = null;

        public CommonStatistics()
        {
            Initialize();
        }

        private void Create()
        {
            TempFrontsDataTable = new DataTable();
            TempDecorDataTable = new DataTable();

            ClientsDataTable = new DataTable();
            ClientGroupsDataTable = new DataTable();
            ManagersDataTable = new DataTable();

            DecorDataTable = new DataTable();
            DecorProductsDataTable = new DataTable();
            DecorConfigDataTable = new DataTable();
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();

            FrontsOrdersDataTable = new DataTable();

            DecorOrdersDataTable = new DataTable();

            FrontsSummaryDataTable = new DataTable();
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            FrameColorsSummaryDataTable = new DataTable();
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("FrameColor"), System.Type.GetType("System.String")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            TechnoColorsSummaryDataTable = new DataTable();
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColor"), System.Type.GetType("System.String")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            InsetTypesSummaryDataTable = new DataTable();
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetType"), System.Type.GetType("System.String")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            InsetColorsSummaryDataTable = new DataTable();
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetColor"), System.Type.GetType("System.String")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            TechnoInsetTypesSummaryDataTable = new DataTable();
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetType"), System.Type.GetType("System.String")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            TechnoInsetColorsSummaryDataTable = new DataTable();
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetColor"), System.Type.GetType("System.String")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            SizesSummaryDataTable = new DataTable();
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Size"), System.Type.GetType("System.String")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetTypeID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDataTable = new DataTable();
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDataTable = new DataTable();
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorColorsSummaryDataTable = new DataTable();
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("Color"), System.Type.GetType("System.String")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorSizesSummaryDataTable = new DataTable();
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Size"), System.Type.GetType("System.String")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Length"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            TempFrontsDataTable = new DataTable();
            TempFrontsDataTable.Columns.Add(new DataColumn("Front", Type.GetType("System.String")));
            TempFrontsDataTable.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
            TempFrontsDataTable.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
            TempFrontsDataTable.Columns.Add(new DataColumn("Empty", Type.GetType("System.String")));
            TempFrontsDataTable.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            TempFrontsDataTable.Columns.Add(new DataColumn("ColorCount", Type.GetType("System.Decimal")));
            TempFrontsDataTable.Columns.Add(new DataColumn("ColorMeasure", Type.GetType("System.String")));

            FrontsSummaryBindingSource = new BindingSource();
            FrameColorsSummaryBindingSource = new BindingSource();
            TechnoColorsSummaryBindingSource = new BindingSource();
            InsetTypesSummaryBindingSource = new BindingSource();
            InsetColorsSummaryBindingSource = new BindingSource();
            TechnoInsetTypesSummaryBindingSource = new BindingSource();
            TechnoInsetColorsSummaryBindingSource = new BindingSource();
            SizesSummaryBindingSource = new BindingSource();

            DecorProductsSummaryBindingSource = new BindingSource();
            DecorItemsSummaryBindingSource = new BindingSource();
            DecorColorsSummaryBindingSource = new BindingSource();
            DecorSizesSummaryBindingSource = new BindingSource();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            GetColorsDT();
            SelectCommand = @"SELECT * FROM Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            SelectCommand = @"SELECT * FROM InsetTypes";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            SelectCommand = @"SELECT * FROM InsetColors";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
            }
            SelectCommand = @"SELECT ProductID, ProductName, MeasureID, ReportParam FROM DecorProducts" +
                " WHERE (ProductID IN (SELECT ProductID FROM DecorConfig WHERE (Enabled = 1))) ORDER BY ProductName ASC";
            DecorProductsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDataTable);
            }
            DecorDataTable = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ManagerID, Name FROM ClientsManagers ORDER BY Name",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ManagersDataTable);
            }
            ManagersDataTable.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            for (int i = 0; i < ManagersDataTable.Rows.Count; i++)
            {
                ManagersDataTable.Rows[i]["Check"] = false;
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ClientGroups",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientGroupsDataTable);
            }
            ClientGroupsDataTable.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
            {
                ClientGroupsDataTable.Rows[i]["Check"] = true;
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientID, ClientName, ManagerID FROM Clients", ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientsDataTable);
            }
            ClientsDataTable.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            for (int i = 0; i < ClientsDataTable.Rows.Count; i++)
            {
                ClientsDataTable.Rows[i]["Check"] = false;
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDataTable);
            //}
            DecorConfigDataTable = TablesManager.DecorConfigDataTableAll;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0  FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                TempFrontsDataTable.Clear();
                DA.Fill(TempFrontsDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0  FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            TechStoreDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            //decor
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(TempDecorDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByPlanDispatch(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample, bool IsTransport)
        {
            string MClientFilter = string.Empty;

            string MFrontsFactoryFilter = string.Empty;
            string MDecorFactoryFilter = string.Empty;

            string MarketingSelectCommand = string.Empty;

            ArrayList MClients = SelectedMarketingClients;
            ArrayList MClientGroups = SelectedMarketingClientGroups;

            if (FactoryID != 0)
            {
                MFrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MDecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            if (FactoryID == 0)
                MClientFilter = " WHERE ((CAST(ProfilDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(ProfilDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')" +
                    " OR (CAST(TPSDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(TPSDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')) ";

            if (FactoryID == 1)
                MClientFilter = " WHERE CAST(ProfilDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(ProfilDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            if (FactoryID == 2)
                MClientFilter = " WHERE CAST(TPSDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(TPSDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }

            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " WHERE ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }

            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;

            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    MDSampleFilter = " (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    MDSampleFilter = " DecorOrders.IsSample = 0 AND";
            }
            string TransportFilter = " ";
            if (IsTransport)
                TransportFilter = " AND MegaOrders.TransportCost<>0 ";
            MarketingSelectCommand = "SELECT MegaOrders.MegaOrderID, MegaOrders.OrderNumber, FrontsOrders.MainOrderID, FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width," +
                " FrontsOrders.Count, FrontsOrders.IsSample, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsFactoryFilter + MFSampleFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            //decor
            MarketingSelectCommand = "SELECT MegaOrders.MegaOrderID, MegaOrders.OrderNumber, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.IsSample, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorFactoryFilter + MDSampleFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByOrderDate(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample, bool IsTransport)
        {
            string MClientFilter = string.Empty;

            string MFilter = string.Empty;
            string MFrontsFactoryFilter = string.Empty;
            string MDecorFactoryFilter = string.Empty;

            string MarketingSelectCommand = string.Empty;

            ArrayList MClients = SelectedMarketingClients;
            ArrayList MClientGroups = SelectedMarketingClientGroups;

            if (FactoryID != 0)
            {
                MFrontsFactoryFilter = " NewFrontsOrders.FactoryID = " + FactoryID + " AND ";
                MDecorFactoryFilter = " NewDecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            MFilter = " CAST(CreateDateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(CreateDateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' AND ";

            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }

            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " WHERE ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }

            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;

            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " NewFrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    MFSampleFilter = " NewFrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    MDSampleFilter = " (NewDecorOrders.IsSample = 1 OR (NewDecorOrders.ProductID=42 AND NewDecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    MDSampleFilter = " NewDecorOrders.IsSample = 0 AND";
            }
            string TransportFilter = " ";
            if (IsTransport)
                TransportFilter = " AND NewMegaOrders.TransportCost<>0 ";
            MarketingSelectCommand = "SELECT NewMegaOrders.MegaOrderID, NewMegaOrders.OrderNumber, NewFrontsOrders.MainOrderID, NewFrontsOrders.FrontID, NewFrontsOrders.PatinaID, NewFrontsOrders.ColorID, NewFrontsOrders.InsetTypeID," +
                " NewFrontsOrders.InsetColorID, NewFrontsOrders.TechnoColorID, NewFrontsOrders.TechnoInsetTypeID, NewFrontsOrders.TechnoInsetColorID, NewFrontsOrders.Height, NewFrontsOrders.Width," +
                " NewFrontsOrders.Count, NewFrontsOrders.IsSample, NewFrontsOrders.Square, NewFrontsOrders.Cost, MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM NewFrontsOrders" +
                " INNER JOIN NewMainOrders ON NewFrontsOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON NewFrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON NewFrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFilter + MFrontsFactoryFilter + MFSampleFilter + " NewFrontsOrders.MainOrderID IN (SELECT MainOrderID FROM NewMainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM NewMegaOrders " + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            //decor
            MarketingSelectCommand = "SELECT NewMegaOrders.MegaOrderID, NewMegaOrders.OrderNumber, NewDecorOrders.MainOrderID, NewDecorOrders.ProductID, NewDecorOrders.DecorID, NewDecorOrders.ColorID,NewDecorOrders.PatinaID," +
                " NewDecorOrders.Height, NewDecorOrders.Length, NewDecorOrders.Width, NewDecorOrders.Count, NewDecorOrders.IsSample, NewDecorOrders.Cost, NewDecorOrders.DecorConfigID, " +
                " MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM NewDecorOrders" +
                " INNER JOIN NewMainOrders ON NewDecorOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON NewDecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON NewDecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MFilter + MDecorFactoryFilter + MDSampleFilter + " NewDecorOrders.MainOrderID IN (SELECT MainOrderID FROM NewMainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM NewMegaOrders " + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByOnProduction(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample, bool IsTransport)
        {
            string MClientFilter = string.Empty;

            string MFrontsFactoryFilter = string.Empty;
            string MDecorFactoryFilter = string.Empty;

            string MMainOrdersFilter = string.Empty;

            string MarketingSelectCommand = string.Empty;

            ArrayList MClients = SelectedMarketingClients;
            ArrayList MClientGroups = SelectedMarketingClientGroups;

            if (FactoryID != 0)
            {
                MFrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MDecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            if (FactoryID == -1)
            {
                MMainOrdersFilter = " WHERE MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                MMainOrdersFilter = " WHERE ((CAST(ProfilOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(ProfilOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") +
                    "') OR (CAST(TPSOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(TPSOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))";
            }
            if (FactoryID == 1)
            {
                MMainOrdersFilter = " WHERE (CAST(ProfilOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(ProfilOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "')";
            }
            if (FactoryID == 2)
            {
                MMainOrdersFilter = " WHERE (CAST(TPSOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(TPSOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "')";
            }

            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }

            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " WHERE ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }

            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;

            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    MDSampleFilter = " (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    MDSampleFilter = " DecorOrders.IsSample = 0 AND";
            }
            string TransportFilter = " ";
            if (IsTransport)
                TransportFilter = " AND MegaOrders.TransportCost<>0 ";
            MarketingSelectCommand = "SELECT MegaOrders.MegaOrderID, MegaOrders.OrderNumber, FrontsOrders.MainOrderID, FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, " +
                " FrontsOrders.Count, FrontsOrders.IsSample, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsFactoryFilter + MFSampleFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MMainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            //decor
            MarketingSelectCommand = "SELECT MegaOrders.MegaOrderID, MegaOrders.OrderNumber, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.IsSample, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorFactoryFilter + MDSampleFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + MMainOrdersFilter +
                " AND MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByConfirmDate(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample, bool IsTransport)
        {
            string MClientFilter = string.Empty;
            string MFilter = string.Empty;

            string MFrontsFactoryFilter = string.Empty;
            string MDecorFactoryFilter = string.Empty;

            string MarketingSelectCommand = string.Empty;

            ArrayList MClients = SelectedMarketingClients;
            ArrayList MClientGroups = SelectedMarketingClientGroups;

            if (FactoryID != 0)
            {
                MFrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MDecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            MFilter = " WHERE CAST(ConfirmDateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(ConfirmDateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }

            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }

            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND ClientID = -1";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;

            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    MDSampleFilter = " (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    MDSampleFilter = " DecorOrders.IsSample = 0 AND";
            }
            string TransportFilter = " ";
            if (IsTransport)
                TransportFilter = " AND MegaOrders.TransportCost<>0 ";
            MarketingSelectCommand = "SELECT MegaOrders.ConfirmDateTime, MegaOrders.MegaOrderID, MegaOrders.OrderNumber, FrontsOrders.MainOrderID, FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width," +
                " FrontsOrders.Count, FrontsOrders.IsSample, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsFactoryFilter + MFSampleFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                " WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MFilter + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            //decor
            MarketingSelectCommand = "SELECT MegaOrders.ConfirmDateTime, MegaOrders.MegaOrderID, MegaOrders.OrderNumber, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.IsSample, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorFactoryFilter + MDSampleFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                " WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MFilter + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByOnAgreement(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample, bool IsTransport)
        {
            string MClientFilter = string.Empty;
            string MFilter = string.Empty;

            string MFrontsFactoryFilter = string.Empty;
            string MDecorFactoryFilter = string.Empty;

            string MarketingSelectCommand = string.Empty;

            ArrayList MClients = SelectedMarketingClients;
            ArrayList MClientGroups = SelectedMarketingClientGroups;

            if (FactoryID != 0)
            {
                MFrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                MDecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            MFilter = " WHERE CAST(OnAgreementDateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(OnAgreementDateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }

            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " AND ClientID IN" +
                        " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                        " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }

            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " AND ClientID = -1";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;

            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    MFSampleFilter = " FrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    MDSampleFilter = " (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    MDSampleFilter = " DecorOrders.IsSample = 0 AND";
            }
            string TransportFilter = " ";
            if (IsTransport)
                TransportFilter = " AND MegaOrders.TransportCost<>0 ";
            MarketingSelectCommand = "SELECT MegaOrders.OnAgreementDateTime, MegaOrders.MegaOrderID, MegaOrders.OrderNumber, FrontsOrders.MainOrderID, FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width," +
                " FrontsOrders.Count, FrontsOrders.IsSample, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsFactoryFilter + MFSampleFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                " WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MFilter + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            //decor
            MarketingSelectCommand = "SELECT MegaOrders.OnAgreementDateTime, MegaOrders.MegaOrderID, MegaOrders.OrderNumber, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.IsSample, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorFactoryFilter + MDSampleFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders" +
                " WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MFilter + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByPackages(
            DateTime DateFrom, DateTime DateTo,
            int PackageStatusID,
            int FactoryID, bool IsSample, bool IsNotSample, bool IsTransport)
        {
            string MarketingSelectCommand = string.Empty;
            string MClientFilter = string.Empty;

            string Date = string.Empty;
            string DateFilter = string.Empty;

            string MFrontsPackageFilter = string.Empty;
            string MDecorPackageFilter = string.Empty;

            string PackageFactoryFilter = string.Empty;
            string PackageProductFilter = string.Empty;

            ArrayList MClients = SelectedMarketingClients;
            ArrayList MClientGroups = SelectedMarketingClientGroups;

            if (PackageStatusID == 1)
                Date = "PackingDateTime";
            if (PackageStatusID == 2)
                Date = "StorageDateTime";
            if (PackageStatusID == 3)
                Date = "DispatchDateTime";
            if (PackageStatusID == 4)
                Date = "ExpeditionDateTime";
            DateFilter = " (CAST(" + Date + " AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(" + Date + " AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')"; ;

            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            PackageProductFilter = " AND ProductType = 0";
            MFrontsPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE " + DateFilter + PackageFactoryFilter + PackageProductFilter + ")";

            PackageProductFilter = " AND ProductType = 1";
            MDecorPackageFilter = " PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE " + DateFilter + PackageFactoryFilter + PackageProductFilter + ")";

            if (MClients.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
                else
                    MClientFilter = " WHERE ClientID IN (" + string.Join(",", MClients.OfType<Int32>().ToArray()) + ")";
            }

            if (MClientGroups.Count > 0)
            {
                if (MClientFilter.Length > 0)
                    MClientFilter += " AND ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
                else
                    MClientFilter = " WHERE ClientID IN" +
                    " (SELECT ClientID FROM infiniu2_marketingreference.dbo.Clients" +
                    " WHERE ClientGroupID IN (" + string.Join(",", MClientGroups.OfType<Int32>().ToArray()) + "))";
            }

            if (MClients.Count < 1 && MClientGroups.Count < 1)
                MClientFilter = " WHERE ClientID = -1";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    MFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    MDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) ";
                if (IsNotSample)
                    MDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            string TransportFilter = " ";
            if (IsTransport)
                TransportFilter = " AND MegaOrders.TransportCost<>0 ";

            MarketingSelectCommand = "SELECT MegaOrders.MegaOrderID, MegaOrders.OrderNumber, FrontsOrdersID, FrontsOrders.MainOrderID, FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width," +
                " PackageDetails.Count, FrontsOrders.IsSample, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, MeasureID, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, ClientID, JoinMainOrders.ZOVClientID FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON FrontsOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE " + MFrontsPackageFilter + MFSampleFilter + " AND FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + " )) ORDER BY FrontsOrdersID";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            //decor
            MarketingSelectCommand = "SELECT MegaOrders.MegaOrderID, MegaOrders.OrderNumber, DecorOrders.MainOrderID, DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, PackageDetails.Count, DecorOrders.IsSample, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID, JoinMainOrders.ZOVClientID FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" + TransportFilter +
                " LEFT OUTER JOIN JoinMainOrders ON DecorOrders.MainOrderID = JoinMainOrders.MarketMainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE " + MDecorPackageFilter + MDSampleFilter + " AND DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + MClientFilter + " ))";

            using (SqlDataAdapter DA = new SqlDataAdapter(MarketingSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void GetOutProduction(DateTime DateFrom, DateTime DateTo, int FactoryID)
        {
            ArrayList MClients = SelectedMarketingClients;
            ArrayList MClientGroups = SelectedMarketingClientGroups;
        }

        private void Binding()
        {
            ManagersBindingSource = new BindingSource()
            {
                DataSource = ManagersDataTable
            };

            ClientGroupsBindingSource = new BindingSource()
            {
                DataSource = ClientGroupsDataTable
            };

            ClientsBindingSource = new BindingSource()
            {
                DataSource = ClientsDataTable,
                Sort = "ClientName ASC"
            };

            FrontsSummaryBindingSource.DataSource = FrontsSummaryDataTable;
            FrameColorsSummaryBindingSource.DataSource = FrameColorsSummaryDataTable;
            TechnoColorsSummaryBindingSource.DataSource = TechnoColorsSummaryDataTable;
            InsetTypesSummaryBindingSource.DataSource = InsetTypesSummaryDataTable;
            InsetColorsSummaryBindingSource.DataSource = InsetColorsSummaryDataTable;
            TechnoInsetTypesSummaryBindingSource.DataSource = TechnoInsetTypesSummaryDataTable;
            TechnoInsetColorsSummaryBindingSource.DataSource = TechnoInsetColorsSummaryDataTable;
            SizesSummaryBindingSource.DataSource = SizesSummaryDataTable;
            DecorProductsSummaryBindingSource.DataSource = DecorProductsSummaryDataTable;
            DecorItemsSummaryBindingSource.DataSource = DecorItemsSummaryDataTable;
            DecorColorsSummaryBindingSource.DataSource = DecorColorsSummaryDataTable;
            DecorSizesSummaryBindingSource.DataSource = DecorSizesSummaryDataTable;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetGrids();
        }

        private static void FreezeBand(DataGridViewBand band)
        {
            band.Frozen = true;
            DataGridViewCellStyle style = new DataGridViewCellStyle()
            {
                BackColor = Color.WhiteSmoke
            };
            band.DefaultCellStyle = style;
        }

        public void checkbox3_CheckedChanged(bool check)
        {
            CheckAllClients(check);
            CheckAllManagers(check);
        }

        private void SetGrids()
        {

        }

        public void FilterFrameColors(int FrontID)
        {
            FrameColorsSummaryBindingSource.Filter = "FrontID=" + FrontID;
            FrameColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterTechnoColors(int FrontID, int ColorID, int PatinaID)
        {
            TechnoColorsSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND ColorID=" + ColorID + " AND PatinaID=" + PatinaID;
            TechnoColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterInsetTypes(int FrontID, int ColorID, int PatinaID, int TechnoColorID)
        {
            InsetTypesSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND ColorID=" + ColorID + " AND ColorID=" + ColorID + " AND TechnoColorID=" + TechnoColorID;
            InsetTypesSummaryBindingSource.MoveFirst();
        }

        public void FilterInsetColors(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID)
        {
            InsetColorsSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" +
                PatinaID + " AND InsetTypeID=" + InsetTypeID + " AND ColorID=" + ColorID;
            InsetColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterTechnoInsetTypes(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID, int InsetColorID)
        {
            TechnoInsetTypesSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND TechnoColorID=" + TechnoColorID + " AND InsetColorID=" + InsetColorID + " AND InsetTypeID=" + InsetTypeID +
                " AND ColorID=" + ColorID;
            TechnoInsetTypesSummaryBindingSource.MoveFirst();
        }

        public void FilterTechnoInsetColors(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID, int InsetColorID, int TechnoInsetTypeID)
        {
            TechnoInsetColorsSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND InsetTypeID=" + InsetTypeID +
                " AND ColorID=" + ColorID + " AND TechnoColorID=" + TechnoColorID +
                " AND InsetColorID=" + InsetColorID + " AND TechnoInsetTypeID=" + TechnoInsetTypeID;
            TechnoInsetColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterSizes(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID, int InsetColorID, int TechnoInsetTypeID, int TechnoInsetColorID)
        {
            SizesSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND ColorID=" + ColorID + " AND TechnoColorID=" + TechnoColorID +
                " AND InsetTypeID=" + InsetTypeID + " AND InsetColorID=" + InsetColorID + " AND TechnoInsetTypeID=" + TechnoInsetTypeID + " AND TechnoInsetColorID=" + TechnoInsetColorID;
            SizesSummaryBindingSource.MoveFirst();
        }

        public void FilterDecorProducts(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBindingSource.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBindingSource.MoveFirst();
        }

        public void FilterDecorItems(int ProductID, int DecorID, int MeasureID)
        {
            DecorColorsSummaryBindingSource.Filter = "ProductID=" + ProductID + " AND DecorID="
                + DecorID + " AND MeasureID=" + MeasureID;
            DecorColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterDecorSizes(int ProductID, int DecorID, int ColorID, int MeasureID)
        {
            DecorSizesSummaryBindingSource.Filter = "ProductID=" + ProductID +
                " AND DecorID=" + DecorID + " AND ColorID=" + ColorID + " AND MeasureID=" + MeasureID;
            DecorSizesSummaryBindingSource.MoveFirst();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDataTable.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 3, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                    NewRow["Width"] = 0;
                    NewRow["Count"] = FrontCount;
                    FrontsSummaryDataTable.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDataTable.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гнутый";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrontCount;
                    FrontsSummaryDataTable.Rows.Add(CurvedNewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDataTable.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBindingSource.MoveFirst();
        }

        private void GetFrameColors()
        {
            decimal FrameColorCost = 0;
            decimal FrameColorSquare = 0;
            int FrameColorCount = 0;
            FrameColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrameColorCost += Convert.ToDecimal(row["Cost"]);
                        FrameColorSquare += Convert.ToDecimal(row["Square"]);
                        FrameColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrameColorsSummaryDataTable.NewRow();
                    if (Convert.ToInt32(Table.Rows[i]["PatinaID"]) == -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"])) + " + " + GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["Square"] = Decimal.Round(FrameColorSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrameColorCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Width"] = 0;
                    NewRow["Count"] = FrameColorCount;
                    FrameColorsSummaryDataTable.Rows.Add(NewRow);

                    FrameColorCost = 0;
                    FrameColorSquare = 0;
                    FrameColorCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrameColorCost += Convert.ToDecimal(row["Cost"]);
                        FrameColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrameColorsSummaryDataTable.NewRow();
                    if (Convert.ToInt32(Table.Rows[i]["PatinaID"]) == -1)
                        CurvedNewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    else
                        CurvedNewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"])) + " + " + GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrameColorCost, 2, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrameColorCount;
                    FrameColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    FrameColorCost = 0;
                    FrameColorCount = 0;
                }
            }
            Table.Dispose();
            FrameColorsSummaryDataTable.DefaultView.Sort = "FrameColor, Square DESC";
            FrameColorsSummaryBindingSource.MoveFirst();
        }

        private void GetTechnoColors()
        {
            decimal Square = 0;
            int Count = 0;

            TechnoColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "TechnoColorID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        Square += Convert.ToDecimal(row["Square"]);
                        Count += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = TechnoColorsSummaryDataTable.NewRow();
                    NewRow["TechnoColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = Count;
                    TechnoColorsSummaryDataTable.Rows.Add(NewRow);

                    Square = 0;
                    Count = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        Square += Convert.ToDecimal(row["Square"]);
                        Count += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = TechnoColorsSummaryDataTable.NewRow();
                    CurvedNewRow["TechnoColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = Count;
                    TechnoColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    Square = 0;
                    Count = 0;
                }
            }
            Table.Dispose();
            TechnoColorsSummaryDataTable.DefaultView.Sort = "TechnoColor, Count DESC";
            TechnoColorsSummaryBindingSource.MoveFirst();
        }

        private void GetInsetTypes()
        {
            decimal InsetTypeSquare = 0;
            int InsetTypeCount = 0;

            int MarginHeight = 0;
            int MarginWidth = 0;
            decimal GridHeight = 0;
            decimal GridWidth = 0;

            InsetTypesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "TechnoColorID", "InsetTypeID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        InsetTypeSquare += Convert.ToDecimal(row["Square"]);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }
                    //foreach (DataRow row in Rows)
                    //{
                    //    GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                    //    GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                    //    GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                    //    if (GridHeight < 0 || GridWidth < 0)
                    //    {
                    //        GridHeight = 0;
                    //        GridWidth = 0;
                    //    }
                    //    InsetTypeSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                    //    InsetTypeCount += Convert.ToInt32(row["Count"]);
                    //}

                    DataRow NewRow = InsetTypesSummaryDataTable.NewRow();
                    NewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Table.Rows[i]["InsetTypeID"];
                    //if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                    //    InsetTypeSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetTypeSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetTypeCount;
                    InsetTypesSummaryDataTable.Rows.Add(NewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        InsetTypeSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = InsetTypesSummaryDataTable.NewRow();
                    CurvedNewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetTypeCount;
                    InsetTypesSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }
            }
            Table.Dispose();
            InsetTypesSummaryDataTable.DefaultView.Sort = "InsetType, Count DESC";
            InsetTypesSummaryBindingSource.MoveFirst();
        }

        private void GetInsetColors()
        {
            decimal InsetColorSquare = 0;
            int InsetColorCount = 0;

            int MarginHeight = 0;
            int MarginWidth = 0;
            decimal GridHeight = 0;
            decimal GridWidth = 0;

            InsetColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "PatinaID", "InsetTypeID", "InsetColorID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        InsetColorSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = InsetColorsSummaryDataTable.NewRow();
                    NewRow["InsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                        InsetColorSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetColorSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetColorCount;
                    InsetColorsSummaryDataTable.Rows.Add(NewRow);

                    InsetColorSquare = 0;
                    InsetColorCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        InsetColorSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = InsetColorsSummaryDataTable.NewRow();
                    CurvedNewRow["InsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetColorCount;
                    InsetColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetColorCount = 0;
                }
            }
            Table.Dispose();
            InsetColorsSummaryDataTable.DefaultView.Sort = "InsetColor, Count DESC";
            InsetColorsSummaryBindingSource.MoveFirst();
        }

        private void GetTechnoInsetTypes()
        {
            decimal InsetTypeSquare = 0;
            int InsetTypeCount = 0;

            TechnoInsetTypesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        InsetTypeSquare += Convert.ToDecimal(row["Square"]);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = TechnoInsetTypesSummaryDataTable.NewRow();
                    NewRow["TechnoInsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Table.Rows[i]["InsetTypeID"];
                    NewRow["InsetColorID"] = Table.Rows[i]["InsetColorID"];
                    NewRow["TechnoInsetTypeID"] = Table.Rows[i]["TechnoInsetTypeID"];
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                        InsetTypeSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetTypeSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetTypeCount;
                    TechnoInsetTypesSummaryDataTable.Rows.Add(NewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        InsetTypeSquare += Convert.ToDecimal(row["Square"]);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = TechnoInsetTypesSummaryDataTable.NewRow();
                    CurvedNewRow["TechnoInsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetTypeCount;
                    TechnoInsetTypesSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }
            }
            Table.Dispose();
            TechnoInsetTypesSummaryDataTable.DefaultView.Sort = "TechnoInsetType, Count DESC";
            TechnoInsetTypesSummaryBindingSource.MoveFirst();
        }

        private void GetTechnoInsetColors()
        {
            decimal InsetColorSquare = 0;
            int InsetColorCount = 0;

            TechnoInsetColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "PatinaID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        InsetColorSquare += Convert.ToDecimal(row["Square"]);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = TechnoInsetColorsSummaryDataTable.NewRow();
                    NewRow["TechnoInsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    NewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    NewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                        InsetColorSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetColorSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetColorCount;
                    TechnoInsetColorsSummaryDataTable.Rows.Add(NewRow);

                    InsetColorSquare = 0;
                    InsetColorCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        InsetColorSquare += Convert.ToDecimal(row["Square"]);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = TechnoInsetColorsSummaryDataTable.NewRow();
                    CurvedNewRow["TechnoInsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    CurvedNewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetColorCount;
                    TechnoInsetColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetColorCount = 0;
                }
            }
            Table.Dispose();
            TechnoInsetColorsSummaryDataTable.DefaultView.Sort = "TechnoInsetColor, Count DESC";
            TechnoInsetColorsSummaryBindingSource.MoveFirst();
        }

        private void GetSizes()
        {
            decimal SizeSquare = 0;
            int SizeCount = 0;
            SizesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "PatinaID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        SizeSquare += Convert.ToDecimal(row["Square"]);
                        SizeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = SizesSummaryDataTable.NewRow();
                    NewRow["Size"] = Convert.ToInt32(Table.Rows[i]["Height"]) + " x " + Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    NewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["Square"] = Decimal.Round(SizeSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = SizeCount;
                    SizesSummaryDataTable.Rows.Add(NewRow);

                    SizeSquare = 0;
                    SizeCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        SizeSquare += Convert.ToDecimal(row["Square"]);
                        SizeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = SizesSummaryDataTable.NewRow();
                    CurvedNewRow["Size"] = Convert.ToInt32(Table.Rows[i]["Height"]) + " x " + Convert.ToInt32(Table.Rows[i]["Width"]);
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    CurvedNewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    CurvedNewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    CurvedNewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    CurvedNewRow["Count"] = SizeCount;
                    SizesSummaryDataTable.Rows.Add(CurvedNewRow);

                    SizeCount = 0;
                }
            }
            Table.Dispose();
            SizesSummaryDataTable.DefaultView.Sort = "Square DESC";
            SizesSummaryBindingSource.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                if (DecorProductCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDataTable.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDataTable.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBindingSource.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDataTable.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDataTable.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBindingSource.MoveFirst();
        }

        private void GetDecorColors()
        {
            decimal DecorColorCost = 0;
            decimal DecorColorCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "ColorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorColorCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorColorCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        DecorColorCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        DecorColorCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorColorCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorColorCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorColorsSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["Color"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                if (DecorColorCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorColorCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorColorCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorColorsSummaryDataTable.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorColorCost = 0;
                DecorColorCount = 0;
            }
            Table.Dispose();
            DecorColorsSummaryDataTable.DefaultView.Sort = "Color, Count DESC";
            DecorColorsSummaryBindingSource.MoveFirst();
        }

        private void GetDecorSizes()
        {
            decimal DecorSizeCost = 0;
            decimal DecorSizeCount = 0;
            int decimals = 2;
            int Height = 0;
            int Length = 0;
            int Width = 0;
            string Measure = string.Empty;
            string Sizes = string.Empty;
            DecorSizesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "ColorID", "MeasureID", "Length", "Height", "Width" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]) +
                    " AND Length=" + Convert.ToInt32(Table.Rows[i]["Length"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorSizeCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorSizeCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        DecorSizeCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        DecorSizeCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorSizeCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorSizeCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorSizesSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                if (DecorSizeCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorSizeCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorSizeCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;

                Height = Convert.ToInt32(Table.Rows[i]["Height"]);
                Length = Convert.ToInt32(Table.Rows[i]["Length"]);
                Width = Convert.ToInt32(Table.Rows[i]["Width"]);

                if (Height > -1)
                    Sizes = Height.ToString();

                if (Sizes != string.Empty)
                {
                    if (Width > -1)
                        Sizes += " x " + Width.ToString();
                }
                else
                {
                    if (Length > -1)
                    {
                        Sizes = Length.ToString();
                        if (Width > -1)
                            Sizes += " x " + Width.ToString();
                    }
                    else
                    {
                        if (Width > -1)
                            Sizes = Width.ToString();
                    }
                }

                DecorSizesSummaryDataTable.Rows.Add(NewRow);
                NewRow["Size"] = Sizes;
                Sizes = string.Empty;
                Measure = string.Empty;
                DecorSizeCost = 0;
                DecorSizeCount = 0;
            }
            Table.Dispose();
            DecorSizesSummaryDataTable.DefaultView.Sort = "Count DESC";
            DecorSizesSummaryBindingSource.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count, ref int CurvedCount)
        {
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref decimal Count)
        {
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["ColorName"].ToString();
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
            if (Rows.Count() > 0)
                PatinaName = Rows[0]["PatinaName"].ToString();
            return PatinaName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
            if (Rows.Count() > 0)
                InsetType = Rows[0]["InsetTypeName"].ToString();
            return InsetType;
        }

        public string GetInsetColorName(int InsetColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + InsetColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["InsetColorName"].ToString();
            return ColorName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDataTable.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorDataTable.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        //private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        //{
        //    DataRow[] Rows = InsetMarginsDataTable.Select("FrontID = " + FrontID);
        //    if (Rows.Count() == 0)
        //        return;
        //    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
        //    MarginWidth = Convert.ToInt32(Rows[0]["GridWidth"]);
        //}

        private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        {
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + FrontID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    MarginWidth = Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
            }
        }

        public ArrayList SelectedMarketingClients
        {
            get
            {
                ArrayList Clients = new ArrayList();

                for (int i = 0; i < ClientsDataTable.Rows.Count; i++)
                {
                    if (!Convert.ToBoolean(ClientsDataTable.Rows[i]["Check"]))
                        continue;

                    Clients.Add(Convert.ToInt32(ClientsDataTable.Rows[i]["ClientID"]));
                }

                return Clients;
            }
        }

        public ArrayList SelectedMarketingClientGroups
        {
            get
            {
                ArrayList ClientGroupIDs = new ArrayList();

                for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
                {
                    if (!Convert.ToBoolean(ClientGroupsDataTable.Rows[i]["Check"]))
                        continue;
                    //if (Convert.ToInt32(ClientGroupsDataTable.Rows[i]["ClientGroupID"]) == 1)
                    //    continue;

                    ClientGroupIDs.Add(Convert.ToInt32(ClientGroupsDataTable.Rows[i]["ClientGroupID"]));
                }

                return ClientGroupIDs;
            }
        }

        public void GetCurrentManager()
        {
            if (ManagersBindingSource.Count == 0)
            {
                CurrentManagerID = -1;
                return;
            }
            if (((DataRowView)ManagersBindingSource.Current).Row["ManagerID"] == DBNull.Value)
                return;
            else
                CurrentManagerID = Convert.ToInt32(((DataRowView)ManagersBindingSource.Current).Row["ManagerID"]);
        }

        public void SetCheckClientsByManager(bool Check)
        {
            //string filter = string.Empty;
            //ArrayList ManagerIDs = new ArrayList();

            //for (int i = 0; i < ManagersDataTable.Rows.Count; i++)
            //{
            //    if (!Convert.ToBoolean(ManagersDataTable.Rows[i]["Check"]))
            //        continue;
            //    ManagerIDs.Add(ManagersDataTable.Rows[i]["ManagerID"].ToString());
            //}

            //foreach (string item in ManagerIDs)
            //    filter += item.ToString() + ",";
            //if (filter.Length > 0)
            //    filter = "ManagerID IN (" + filter + ")";
            //else
            //    filter = "";
            //ClientsBindingSource.Filter = filter;

            CurrentManagerID = Convert.ToInt32(((DataRowView)ManagersBindingSource.Current).Row["ManagerID"]);
            for (int i = 0; i < ClientsDataTable.Rows.Count; i++)
            {
                int ManagerID = Convert.ToInt32(ClientsDataTable.Rows[i]["ManagerID"]);
                if (ManagerID == CurrentManagerID)
                    ClientsDataTable.Rows[i]["Check"] = Check;
            }
        }

        public void CheckAllManagers(bool Check)
        {
            for (int i = 0; i < ManagersDataTable.Rows.Count; i++)
            {
                ManagersDataTable.Rows[i]["Check"] = Check;
            }
        }

        public void CheckAllClients(bool Check)
        {
            for (int i = 0; i < ClientsDataTable.Rows.Count; i++)
            {
                ClientsDataTable.Rows[i]["Check"] = Check;
            }
        }

        public void CheckAllClientGroups(bool Check)
        {
            for (int i = 0; i < ClientGroupsDataTable.Rows.Count; i++)
            {
                ClientGroupsDataTable.Rows[i]["Check"] = Check;
            }
        }

        public void ShowCheckColumn(PercentageDataGrid tPercentageDataGrid, bool Shown)
        {
            tPercentageDataGrid.Columns["Check"].Visible = Shown;
        }

        // Given H,S,L in range of 0-1
        // Returns a Color (RGB struct) in range of 0-255
        public static ColorRGB HSL2RGB(double h, double sl, double l)

        {

            double v;

            double r, g, b;



            r = l;   // default to gray

            g = l;

            b = l;

            v = (l <= 0.5) ? (l * (1.0 + sl)) : (l + sl - l * sl);

            if (v > 0)

            {

                double m;

                double sv;

                int sextant;

                double fract, vsf, mid1, mid2;



                m = l + l - v;

                sv = (v - m) / v;

                h *= 6.0;

                sextant = (int)h;

                fract = h - sextant;

                vsf = v * sv * fract;

                mid1 = m + vsf;

                mid2 = v - vsf;

                switch (sextant)

                {

                    case 0:

                        r = v;

                        g = mid1;

                        b = m;

                        break;

                    case 1:

                        r = mid2;

                        g = v;

                        b = m;

                        break;

                    case 2:

                        r = m;

                        g = v;

                        b = mid1;

                        break;

                    case 3:

                        r = m;

                        g = mid2;

                        b = v;

                        break;

                    case 4:

                        r = mid1;

                        g = m;

                        b = v;

                        break;

                    case 5:

                        r = v;

                        g = m;

                        b = mid2;

                        break;

                }

            }

            ColorRGB rgb;

            rgb.R = Convert.ToByte(r * 255.0f);

            rgb.G = Convert.ToByte(g * 255.0f);

            rgb.B = Convert.ToByte(b * 255.0f);

            return rgb;

        }

        // Given a Color (RGB Struct) in range of 0-255
        // Return H,S,L in range of 0-1
        public static void RGB2HSL(ColorRGB rgb, out double h, out double s, out double l)

        {

            double r = rgb.R / 255.0;

            double g = rgb.G / 255.0;

            double b = rgb.B / 255.0;

            double v;

            double m;

            double vm;

            double r2, g2, b2;



            h = 0; // default to black

            s = 0;

            l = 0;

            v = Math.Max(r, g);

            v = Math.Max(v, b);

            m = Math.Min(r, g);

            m = Math.Min(m, b);

            l = (m + v) / 2.0;

            if (l <= 0.0)

            {

                return;

            }

            vm = v - m;

            s = vm;

            if (s > 0.0)

            {

                s /= (l <= 0.5) ? (v + m) : (2.0 - v - m);

            }

            else

            {

                return;

            }

            r2 = (v - r) / vm;

            g2 = (v - g) / vm;

            b2 = (v - b) / vm;

            if (r == v)

            {

                h = (g == m ? 5.0 + b2 : 1.0 - g2);

            }

            else if (g == v)

            {

                h = (b == m ? 1.0 + r2 : 3.0 - b2);

            }

            else

            {

                h = (r == m ? 3.0 + g2 : 5.0 - r2);

            }

            h /= 6.0;

        }
    }

    public class ZOVOrdersStatistics : IAllFrontParameterName
    {
        private int CurrentZOVClientGroupID = -1;

        public DataTable FrontsOrdersDataTable = null;
        public DataTable DecorOrdersDataTable = null;

        DataTable ZOVClientsDataTable = null;
        DataTable ZOVClientGroupsDataTable = null;

        DataTable FrontsSummaryDataTable = null;
        DataTable FrameColorsSummaryDataTable = null;
        DataTable TechnoColorsSummaryDataTable = null;
        DataTable InsetTypesSummaryDataTable = null;
        DataTable InsetColorsSummaryDataTable = null;
        DataTable TechnoInsetTypesSummaryDataTable = null;
        DataTable TechnoInsetColorsSummaryDataTable = null;
        DataTable SizesSummaryDataTable = null;
        DataTable DecorProductsSummaryDataTable = null;
        DataTable DecorItemsSummaryDataTable = null;
        DataTable DecorColorsSummaryDataTable = null;
        DataTable DecorSizesSummaryDataTable = null;
        DataTable DecorConfigDataTable = null;

        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;
        DataTable DecorProductsDataTable = null;
        DataTable DecorDataTable = null;
        DataTable TechStoreDataTable = null;

        public BindingSource ZOVClientsBindingSource = null;
        public BindingSource ZOVClientGroupsBindingSource = null;
        public BindingSource FrontsSummaryBindingSource = null;
        public BindingSource FrameColorsSummaryBindingSource = null;
        public BindingSource TechnoColorsSummaryBindingSource = null;
        public BindingSource InsetTypesSummaryBindingSource = null;
        public BindingSource InsetColorsSummaryBindingSource = null;
        public BindingSource TechnoInsetTypesSummaryBindingSource = null;
        public BindingSource TechnoInsetColorsSummaryBindingSource = null;
        public BindingSource SizesSummaryBindingSource = null;
        public BindingSource DecorProductsSummaryBindingSource = null;
        public BindingSource DecorItemsSummaryBindingSource = null;
        public BindingSource DecorColorsSummaryBindingSource = null;
        public BindingSource DecorSizesSummaryBindingSource = null;

        public ZOVOrdersStatistics()
        {
            Initialize();
        }

        private void Create()
        {
            ZOVClientsDataTable = new DataTable();
            ZOVClientGroupsDataTable = new DataTable();

            DecorDataTable = new DataTable();
            DecorProductsDataTable = new DataTable();
            DecorConfigDataTable = new DataTable();
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();

            FrontsOrdersDataTable = new DataTable();

            DecorOrdersDataTable = new DataTable();

            FrontsSummaryDataTable = new DataTable();
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            FrontsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            FrameColorsSummaryDataTable = new DataTable();
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("FrameColor"), System.Type.GetType("System.String")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            FrameColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            TechnoColorsSummaryDataTable = new DataTable();
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColor"), System.Type.GetType("System.String")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            TechnoColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            InsetTypesSummaryDataTable = new DataTable();
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetType"), System.Type.GetType("System.String")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            InsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            InsetColorsSummaryDataTable = new DataTable();
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetColor"), System.Type.GetType("System.String")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            InsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            TechnoInsetTypesSummaryDataTable = new DataTable();
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetType"), System.Type.GetType("System.String")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            TechnoInsetTypesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            TechnoInsetColorsSummaryDataTable = new DataTable();
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetColor"), System.Type.GetType("System.String")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetTypeID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetColorID"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            TechnoInsetColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));

            SizesSummaryDataTable = new DataTable();
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Size"), System.Type.GetType("System.String")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("PatinaID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("TechnoColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetTypeID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("TechnoInsetColorID"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));
            SizesSummaryDataTable.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));

            DecorProductsSummaryDataTable = new DataTable();
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("DecorProduct"), System.Type.GetType("System.String")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorItemsSummaryDataTable = new DataTable();
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("DecorItem"), System.Type.GetType("System.String")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorItemsSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorColorsSummaryDataTable = new DataTable();
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("Color"), System.Type.GetType("System.String")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorColorsSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            DecorSizesSummaryDataTable = new DataTable();
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("ProductID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("DecorID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("MeasureID"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Size"), System.Type.GetType("System.String")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Length"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Decimal")));
            DecorSizesSummaryDataTable.Columns.Add(new DataColumn(("Measure"), System.Type.GetType("System.String")));

            FrontsSummaryBindingSource = new BindingSource();
            FrameColorsSummaryBindingSource = new BindingSource();
            TechnoColorsSummaryBindingSource = new BindingSource();
            InsetTypesSummaryBindingSource = new BindingSource();
            InsetColorsSummaryBindingSource = new BindingSource();
            TechnoInsetTypesSummaryBindingSource = new BindingSource();
            TechnoInsetColorsSummaryBindingSource = new BindingSource();
            SizesSummaryBindingSource = new BindingSource();

            DecorProductsSummaryBindingSource = new BindingSource();
            DecorItemsSummaryBindingSource = new BindingSource();
            DecorColorsSummaryBindingSource = new BindingSource();
            DecorSizesSummaryBindingSource = new BindingSource();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            GetColorsDT();
            SelectCommand = @"SELECT * FROM Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            SelectCommand = @"SELECT * FROM InsetTypes";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            SelectCommand = @"SELECT * FROM InsetColors";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
            }
            SelectCommand = @"SELECT ProductID, ProductName, MeasureID, ReportParam FROM DecorProducts" +
                " WHERE (ProductID IN (SELECT ProductID FROM DecorConfig WHERE (Enabled = 1))) ORDER BY ProductName ASC";
            DecorProductsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDataTable);
            }
            DecorDataTable = new DataTable();
            SelectCommand = @"SELECT DISTINCT TechStore.TechStoreID AS DecorID, TechStore.TechStoreName AS Name, DecorConfig.ProductID FROM TechStore 
                INNER JOIN DecorConfig ON TechStore.TechStoreID = DecorConfig.DecorID ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ClientsGroups ORDER BY ClientGroupName",
                ConnectionStrings.ZOVReferenceConnectionString))
            {
                DA.Fill(ZOVClientGroupsDataTable);
            }
            ZOVClientGroupsDataTable.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            ZOVClientGroupsDataTable.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            for (int i = 0; i < ZOVClientGroupsDataTable.Rows.Count; i++)
            {
                ZOVClientGroupsDataTable.Rows[i]["Check"] = false;
            }


            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientID, ClientName, ClientsGroups.ClientGroupName, Clients.ClientGroupID FROM Clients " +
                " INNER JOIN ClientsGroups ON Clients.ClientGroupID=ClientsGroups.ClientGroupID", ConnectionStrings.ZOVReferenceConnectionString))
            {
                DA.Fill(ZOVClientsDataTable);
            }
            ZOVClientsDataTable.Columns.Add(new DataColumn("Check", Type.GetType("System.Boolean")));
            ZOVClientsDataTable.Columns.Add(new DataColumn("Color", Type.GetType("System.String")));
            for (int i = 0; i < ZOVClientsDataTable.Rows.Count; i++)
            {
                ZOVClientsDataTable.Rows[i]["Check"] = false;
            }
            GenerateColors();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDataTable);
            //}
            DecorConfigDataTable = TablesManager.DecorConfigDataTableAll;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0  FrontID, ColorID, PatinaID, InsetTypeID, InsetColorID, TechnoColorID, TechnoInsetTypeID, TechnoInsetColorID, Height, Width, Count, Square, Cost FROM FrontsOrders",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            TechStoreDataTable = new DataTable();
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore",
            //    ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(TechStoreDataTable);
            //}
            TechStoreDataTable = TablesManager.TechStoreDataTable;

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID", ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByPrepare(DateTime DateFrom, DateTime DateTo)
        {
            string ZOVSelectCommand = string.Empty;

            ZOVSelectCommand = "SELECT infiniu2_zovorders.dbo.FrontsOrders.FrontID, infiniu2_zovorders.dbo.FrontsOrders.PatinaID, infiniu2_zovorders.dbo.FrontsOrders.ColorID, infiniu2_zovorders.dbo.FrontsOrders.InsetTypeID," +
                " infiniu2_zovorders.dbo.FrontsOrders.InsetColorID, infiniu2_zovorders.dbo.FrontsOrders.TechnoColorID, infiniu2_zovorders.dbo.FrontsOrders.TechnoInsetTypeID, infiniu2_zovorders.dbo.FrontsOrders.TechnoInsetColorID, infiniu2_zovorders.dbo.FrontsOrders.Height, infiniu2_zovorders.dbo.FrontsOrders.Width, infiniu2_zovorders.dbo.FrontsOrders.Count, infiniu2_zovorders.dbo.FrontsOrders.Square, infiniu2_zovorders.dbo.FrontsOrders.Cost, MeasureID FROM infiniu2_zovorders.dbo.FrontsOrders" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON infiniu2_zovorders.dbo.FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID = 0" +
                " AND CAST(DocDateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(DocDateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            ZOVSelectCommand = "SELECT infiniu2_zovorders.dbo.DecorOrders.ProductID, infiniu2_zovorders.dbo.DecorOrders.DecorID, infiniu2_zovorders.dbo.DecorOrders.ColorID,DecorOrders.PatinaID," +
                " infiniu2_zovorders.dbo.DecorOrders.Height, infiniu2_zovorders.dbo.DecorOrders.Length, infiniu2_zovorders.dbo.DecorOrders.Width, infiniu2_zovorders.dbo.DecorOrders.Count," +
                " infiniu2_zovorders.dbo.DecorOrders.Cost, infiniu2_zovorders.dbo.DecorOrders.DecorConfigID, " +
                " MeasureID FROM infiniu2_zovorders.dbo.DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON infiniu2_zovorders.dbo.DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID = 0" +
                " AND CAST(DocDateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(DocDateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.ZOVOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByPlanDispatch(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample)
        {
            FrontsOrdersDataTable = new DataTable();
            DecorOrdersDataTable = new DataTable();
            string ZFilter = string.Empty;

            string ZFrontsFactoryFilter = string.Empty;
            string ZDecorFactoryFilter = string.Empty;

            string ZOVSelectCommand = string.Empty;

            ArrayList ZClients = SelectedZOVClients;
            string ZClientFilter = string.Empty;

            if (ZClients.Count > 0)
            {
                if (ZClientFilter.Length > 0)
                    ZClientFilter += " AND infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
                else
                    ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
            }

            if (ZClients.Count < 1)
                ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID = -1";

            if (FactoryID != 0)
            {
                ZFrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                ZDecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            if (FactoryID == 0)
                ZFilter = " WHERE ((CAST(ProfilDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(ProfilDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')" +
                    " OR (CAST(TPSDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(TPSDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')) ";

            if (FactoryID == 1)
                ZFilter = " WHERE CAST(ProfilDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(ProfilDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            if (FactoryID == 2)
                ZFilter = " WHERE CAST(TPSDispatchDate AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    "' AND CAST(TPSDispatchDate AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            string ZFSampleFilter = string.Empty;
            string ZDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    ZFSampleFilter = " FrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    ZFSampleFilter = " FrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    ZDSampleFilter = " (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    ZDSampleFilter = " DecorOrders.IsSample = 0 AND";
            }

            ZOVSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, " +
                " FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.IsSample, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM FrontsOrders" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZFrontsFactoryFilter + ZFSampleFilter + " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ZFilter + " ))" + " AND FrontsOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            ZOVSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count,DecorOrders.IsSample, " +
                " DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZDecorFactoryFilter + ZDSampleFilter + " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders WHERE MegaOrderID IN" +
                " (SELECT MegaOrderID FROM MegaOrders " + ZFilter + " ))" + " AND DecorOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByOrderDate(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample)
        {
            FrontsOrdersDataTable = new DataTable();
            DecorOrdersDataTable = new DataTable();
            string ZFilter = string.Empty;

            string ZFrontsFactoryFilter = string.Empty;
            string ZDecorFactoryFilter = string.Empty;

            string ZOVSelectCommand = string.Empty;

            ArrayList ZClients = SelectedZOVClients;
            string ZClientFilter = string.Empty;

            if (ZClients.Count > 0)
            {
                if (ZClientFilter.Length > 0)
                    ZClientFilter += " AND infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
                else
                    ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
            }

            if (ZClients.Count < 1)
                ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID = -1";

            if (FactoryID != 0)
            {
                ZFrontsFactoryFilter = " NewFrontsOrders.FactoryID = " + FactoryID + " AND ";
                ZDecorFactoryFilter = " NewDecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            ZFilter = " CAST(JoinMainOrders.DateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(JoinMainOrders.DateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            string MFSampleFilter = string.Empty;
            string MDSampleFilter = string.Empty;
            if (IsSample)
                MFSampleFilter = " NewFrontsOrders.IsSample = 1 AND";
            if (IsNotSample)
                MFSampleFilter = " NewFrontsOrders.IsSample = 0 AND";
            if (IsSample)
                MDSampleFilter = " (NewDecorOrders.IsSample = 1 OR (NewDecorOrders.ProductID=42 AND NewDecorOrders.IsSample = 0)) AND";
            if (IsNotSample)
                MDSampleFilter = " NewDecorOrders.IsSample = 0 AND";

            string ZFSampleFilter = string.Empty;
            string ZDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    ZFSampleFilter = " NewFrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    ZFSampleFilter = " NewFrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    ZDSampleFilter = " (NewDecorOrders.IsSample = 1 OR (NewDecorOrders.ProductID=42 AND NewDecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    ZDSampleFilter = " NewDecorOrders.IsSample = 0 AND";
            }

            ZOVSelectCommand = "SELECT NewFrontsOrders.FrontID, NewFrontsOrders.PatinaID, NewFrontsOrders.ColorID, NewFrontsOrders.InsetTypeID," +
                " NewFrontsOrders.InsetColorID, NewFrontsOrders.TechnoColorID, NewFrontsOrders.TechnoInsetTypeID, NewFrontsOrders.TechnoInsetColorID, " +
                " NewFrontsOrders.Height, NewFrontsOrders.Width, NewFrontsOrders.Count, NewFrontsOrders.IsSample, NewFrontsOrders.Square, NewFrontsOrders.Cost, MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM NewFrontsOrders" +
                " INNER JOIN NewMainOrders ON NewFrontsOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON NewFrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.NewMainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZFrontsFactoryFilter + ZFSampleFilter + " NewFrontsOrders.MainOrderID IN (SELECT MarketMainOrderID FROM JoinMainOrders WHERE " + ZFilter +
                ") AND NewFrontsOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            ZOVSelectCommand = "SELECT NewDecorOrders.ProductID, NewDecorOrders.DecorID, NewDecorOrders.ColorID,NewDecorOrders.PatinaID," +
                " NewDecorOrders.Height, NewDecorOrders.Length, NewDecorOrders.Width, NewDecorOrders.Count, NewDecorOrders.IsSample, NewDecorOrders.Cost, NewDecorOrders.DecorConfigID, " +
                " MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM NewDecorOrders" +
                " INNER JOIN NewMainOrders ON NewDecorOrders.MainOrderID = NewMainOrders.MainOrderID" +
                " INNER JOIN NewMegaOrders ON NewMainOrders.MegaOrderID = NewMegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON NewDecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.NewMainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZDecorFactoryFilter + ZDSampleFilter + " NewDecorOrders.MainOrderID IN (SELECT MarketMainOrderID FROM JoinMainOrders WHERE " + ZFilter +
                ") AND NewDecorOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByOnProduction(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample)
        {
            FrontsOrdersDataTable = new DataTable();
            DecorOrdersDataTable = new DataTable();
            string ZFrontsFactoryFilter = string.Empty;
            string ZDecorFactoryFilter = string.Empty;

            string ZMainOrdersFilter = string.Empty;

            string ZOVSelectCommand = string.Empty;

            ArrayList ZClients = SelectedZOVClients;
            string ZClientFilter = string.Empty;

            if (ZClients.Count > 0)
            {
                if (ZClientFilter.Length > 0)
                    ZClientFilter += " AND infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
                else
                    ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
            }

            if (ZClients.Count < 1)
                ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID = -1";

            if (FactoryID != 0)
            {
                ZFrontsFactoryFilter = " FrontsOrders.FactoryID = " + FactoryID + " AND ";
                ZDecorFactoryFilter = " DecorOrders.FactoryID = " + FactoryID + " AND ";
            }

            if (FactoryID == -1)
            {
                ZMainOrdersFilter = " WHERE MainOrders.MainOrderID = -1";
            }
            if (FactoryID == 0)
            {
                ZMainOrdersFilter = " WHERE ((CAST(MainOrders.ProfilOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(MainOrders.ProfilOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") +
                    "') OR (CAST(MainOrders.TPSOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(MainOrders.TPSOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "'))";
            }
            if (FactoryID == 1)
            {
                ZMainOrdersFilter = " WHERE (CAST(MainOrders.ProfilOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(MainOrders.ProfilOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "')";
            }
            if (FactoryID == 2)
            {
                ZMainOrdersFilter = " WHERE (CAST(MainOrders.TPSOnProductionDate AS Date) >= '" + DateFrom.ToString("yyyy-MM-dd") + "' AND CAST(MainOrders.TPSOnProductionDate AS Date) <= '" + DateTo.ToString("yyyy-MM-dd") + "')";
            }

            string ZFSampleFilter = string.Empty;
            string ZDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    ZFSampleFilter = " FrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    ZFSampleFilter = " FrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    ZDSampleFilter = " (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    ZDSampleFilter = " DecorOrders.IsSample = 0 AND";
            }
            ZOVSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, " +
                " FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.IsSample, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM FrontsOrders" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN" +
                " dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZFrontsFactoryFilter + ZFSampleFilter +
                " FrontsOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + ZMainOrdersFilter + ")" + " AND FrontsOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            ZOVSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count,DecorOrders.IsSample, " +
                " DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN" +
                " dbo.MainOrders ON dbo.DecorOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZDecorFactoryFilter + ZDSampleFilter +
                " DecorOrders.MainOrderID IN (SELECT MainOrderID FROM MainOrders " + ZMainOrdersFilter + ")" + " AND DecorOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByConfirmDate(
            DateTime DateFrom, DateTime DateTo,
            int FactoryID, bool IsSample, bool IsNotSample)
        {
            FrontsOrdersDataTable = new DataTable();
            DecorOrdersDataTable = new DataTable();
            string ZFilter = string.Empty;

            string ZFrontsFactoryFilter = string.Empty;
            string ZDecorFactoryFilter = string.Empty;

            string ZOVSelectCommand = string.Empty;

            ArrayList ZClients = SelectedZOVClients;
            string ZClientFilter = string.Empty;

            if (ZClients.Count > 0)
            {
                if (ZClientFilter.Length > 0)
                    ZClientFilter += " AND infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
                else
                    ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
            }

            if (ZClients.Count < 1)
                ZClientFilter = " WHERE infiniu2_marketingorders.dbo.JoinMainOrders.ZOVClientID = -1";

            ZFilter = " CAST(JoinMainOrders.DateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(JoinMainOrders.DateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            if (FactoryID != 0)
            {
                ZFrontsFactoryFilter = " AND FrontsOrders.FactoryID = " + FactoryID;
                ZDecorFactoryFilter = " AND DecorOrders.FactoryID = " + FactoryID;
            }

            ZFilter = " CAST(JoinMainOrders.DateTime AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(JoinMainOrders.DateTime AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "' ";

            string ZFSampleFilter = string.Empty;
            string ZDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    ZFSampleFilter = " FrontsOrders.IsSample = 1 AND";
                if (IsNotSample)
                    ZFSampleFilter = " FrontsOrders.IsSample = 0 AND";
                if (IsSample)
                    ZDSampleFilter = " (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0)) AND";
                if (IsNotSample)
                    ZDSampleFilter = " DecorOrders.IsSample = 0 AND";
            }

            ZOVSelectCommand = "SELECT FrontsOrders.FrontID, FrontsOrders.PatinaID, FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, " +
                " FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.Count, FrontsOrders.IsSample, FrontsOrders.Square, FrontsOrders.Cost, MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM FrontsOrders" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig" +
                " ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN" +
                " dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZFrontsFactoryFilter + ZFSampleFilter + " FrontsOrders.MainOrderID IN (SELECT MarketMainOrderID FROM JoinMainOrders WHERE " + ZFilter +
                ") AND FrontsOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();

            ZOVSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count,DecorOrders.IsSample, " +
                " DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber FROM DecorOrders" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN" +
                " dbo.MainOrders ON dbo.DecorOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID" +
                " WHERE " + ZDecorFactoryFilter + ZDSampleFilter + " DecorOrders.MainOrderID IN (SELECT MarketMainOrderID FROM JoinMainOrders WHERE " + ZFilter +
                ") AND DecorOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM JoinMainOrders " + ZClientFilter + " )";

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        public void FilterByPackages(
            DateTime DateFrom, DateTime DateTo,
            int PackageStatusID,
            int FactoryID, bool IsSample, bool IsNotSample)
        {
            FrontsOrdersDataTable = new DataTable();
            DecorOrdersDataTable = new DataTable();
            string ZOVSelectCommand = string.Empty;

            string Date = string.Empty;
            string DateFilter = string.Empty;

            string ZFrontsPackageFilter = string.Empty;
            string ZDecorPackageFilter = string.Empty;

            string PackageFactoryFilter = string.Empty;
            string PackageProductFilter = string.Empty;

            ArrayList ZClients = SelectedZOVClients;
            string ZClientFilter = string.Empty;

            if (ZClients.Count > 0)
            {
                if (ZClientFilter.Length > 0)
                    ZClientFilter += " AND JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
                else
                    ZClientFilter = " WHERE JoinMainOrders.ZOVClientID IN (" + string.Join(",", ZClients.OfType<Int32>().ToArray()) + ")";
            }

            if (ZClients.Count < 1)
                ZClientFilter = " WHERE JoinMainOrders.ZOVClientID = -1";

            if (PackageStatusID == 1)
                Date = "PackingDateTime";
            if (PackageStatusID == 2)
                Date = "StorageDateTime";
            if (PackageStatusID == 3)
                Date = "DispatchDateTime";
            if (PackageStatusID == 4)
                Date = "ExpeditionDateTime";
            DateFilter = " (CAST(" + Date + " AS DATE) >= '" + DateFrom.ToString("yyyy-MM-dd") +
                "' AND CAST(" + Date + " AS DATE) <= '" + DateTo.ToString("yyyy-MM-dd") + "')"; ;

            if (FactoryID != 0)
                PackageFactoryFilter = " AND FactoryID = " + FactoryID;

            PackageProductFilter = " AND ProductType = 0";
            ZFrontsPackageFilter = " PackageDetails.PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE " + DateFilter + PackageFactoryFilter + PackageProductFilter + ")";

            PackageProductFilter = " AND ProductType = 1";
            ZDecorPackageFilter = " PackageDetails.PackageID IN" +
                " (SELECT PackageID FROM Packages WHERE " + DateFilter + PackageFactoryFilter + PackageProductFilter + ")";

            string ZFSampleFilter = string.Empty;
            string ZDSampleFilter = string.Empty;
            if (!IsSample || !IsNotSample)
            {
                if (IsSample)
                    ZFSampleFilter = " AND FrontsOrders.IsSample = 1";
                if (IsNotSample)
                    ZFSampleFilter = " AND FrontsOrders.IsSample = 0";
                if (IsSample)
                    ZDSampleFilter = " AND (DecorOrders.IsSample = 1 OR (DecorOrders.ProductID=42 AND DecorOrders.IsSample = 0))";
                if (IsNotSample)
                    ZDSampleFilter = " AND DecorOrders.IsSample = 0";
            }

            ZOVSelectCommand = "SELECT FrontsOrdersID, FrontsOrders.FrontID, FrontsOrders.PatinaID," +
                " FrontsOrders.ColorID, FrontsOrders.InsetTypeID," +
                " FrontsOrders.InsetColorID, FrontsOrders.TechnoColorID, FrontsOrders.TechnoInsetTypeID, FrontsOrders.TechnoInsetColorID, FrontsOrders.Height, FrontsOrders.Width, FrontsOrders.IsSample," +
                " PackageDetails.Count, (FrontsOrders.Square * PackageDetails.Count / FrontsOrders.Count) AS Square, (FrontsOrders.Cost * PackageDetails.Count / FrontsOrders.Count) AS Cost, " +
                " MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber, CONVERT(VARCHAR(24), Packages.DispatchDateTime, 104) AS DispatchDateTime FROM PackageDetails" +
                " INNER JOIN FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID" +
                " INNER JOIN infiniu2_catalog.dbo.FrontsConfig ON FrontsOrders.FrontConfigID=infiniu2_catalog.dbo.FrontsConfig.FrontConfigID INNER JOIN" +
                " dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID INNER JOIN" +
                " dbo.MainOrders ON dbo.FrontsOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID AND FrontsOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )" +
                " WHERE " + ZFrontsPackageFilter + ZFSampleFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                FrontsOrdersDataTable.Clear();
                DA.Fill(FrontsOrdersDataTable);
            }

            GetFronts();
            GetFrameColors();
            GetTechnoColors();
            GetInsetTypes();
            GetInsetColors();
            GetTechnoInsetTypes();
            GetTechnoInsetColors();
            GetSizes();

            ZOVSelectCommand = "SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,DecorOrders.PatinaID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.IsSample, PackageDetails.Count, (DecorOrders.Cost * PackageDetails.Count / DecorOrders.Count) AS Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, JoinMainOrders.ZOVClientID, JoinMainOrders.DocNumber, CONVERT(VARCHAR(24), Packages.DispatchDateTime, 104) AS DispatchDateTime FROM PackageDetails" +
                " INNER JOIN DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID INNER JOIN" +
                " dbo.Packages ON dbo.PackageDetails.PackageID = dbo.Packages.PackageID INNER JOIN" +
                " dbo.MainOrders ON dbo.DecorOrders.MainOrderID = dbo.MainOrders.MainOrderID INNER JOIN" +
                " dbo.JoinMainOrders ON dbo.MainOrders.MainOrderID = dbo.JoinMainOrders.MarketMainOrderID AND DecorOrders.MainOrderID IN" +
                " (SELECT MarketMainOrderID FROM infiniu2_marketingorders.dbo.JoinMainOrders " + ZClientFilter + " )" +
                " WHERE " + ZDecorPackageFilter + ZDSampleFilter;

            using (SqlDataAdapter DA = new SqlDataAdapter(ZOVSelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DecorOrdersDataTable.Clear();
                DA.Fill(DecorOrdersDataTable);
            }

            GetDecorProducts();
            GetDecorItems();
            GetDecorColors();
            GetDecorSizes();
        }

        private void Binding()
        {
            ZOVClientGroupsBindingSource = new BindingSource()
            {
                DataSource = ZOVClientGroupsDataTable,
                Sort = "ClientGroupName ASC"
            };

            ZOVClientsBindingSource = new BindingSource()
            {
                DataSource = ZOVClientsDataTable,
                Sort = "ClientGroupName, ClientName ASC"
            };

            FrontsSummaryBindingSource.DataSource = FrontsSummaryDataTable;

            FrameColorsSummaryBindingSource.DataSource = FrameColorsSummaryDataTable;

            TechnoColorsSummaryBindingSource.DataSource = TechnoColorsSummaryDataTable;

            InsetTypesSummaryBindingSource.DataSource = InsetTypesSummaryDataTable;

            InsetColorsSummaryBindingSource.DataSource = InsetColorsSummaryDataTable;

            TechnoInsetTypesSummaryBindingSource.DataSource = TechnoInsetTypesSummaryDataTable;

            TechnoInsetColorsSummaryBindingSource.DataSource = TechnoInsetColorsSummaryDataTable;

            SizesSummaryBindingSource.DataSource = SizesSummaryDataTable;

            DecorProductsSummaryBindingSource.DataSource = DecorProductsSummaryDataTable;

            DecorItemsSummaryBindingSource.DataSource = DecorItemsSummaryDataTable;

            DecorColorsSummaryBindingSource.DataSource = DecorColorsSummaryDataTable;

            DecorSizesSummaryBindingSource.DataSource = DecorSizesSummaryDataTable;
        }

        public void Initialize()
        {
            Create();
            Fill();
            Binding();
            SetGrids();
        }

        private static void FreezeBand(DataGridViewBand band)
        {
            band.Frozen = true;
            DataGridViewCellStyle style = new DataGridViewCellStyle()
            {
                BackColor = Color.WhiteSmoke
            };
            band.DefaultCellStyle = style;
        }

        public void checkbox1_CheckedChanged(bool check)
        {
            CheckAllZOVClientGroups(check);
            CheckAllZOVClients(check);
        }

        public void checkbox2_CheckedChanged(bool check)
        {
            CheckAllZOVClients(check);
        }

        private void SetGrids()
        {

        }

        public void FilterFrameColors(int FrontID)
        {
            FrameColorsSummaryBindingSource.Filter = "FrontID=" + FrontID;
            FrameColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterTechnoColors(int FrontID, int ColorID, int PatinaID)
        {
            TechnoColorsSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND ColorID=" + ColorID + " AND PatinaID=" + PatinaID;
            TechnoColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterInsetTypes(int FrontID, int ColorID, int PatinaID, int TechnoColorID)
        {
            InsetTypesSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND ColorID=" + ColorID + " AND ColorID=" + ColorID + " AND TechnoColorID=" + TechnoColorID;
            InsetTypesSummaryBindingSource.MoveFirst();
        }

        public void FilterInsetColors(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID)
        {
            InsetColorsSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" +
                PatinaID + " AND InsetTypeID=" + InsetTypeID + " AND ColorID=" + ColorID;
            InsetColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterTechnoInsetTypes(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID, int InsetColorID)
        {
            TechnoInsetTypesSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND TechnoColorID=" + TechnoColorID + " AND InsetColorID=" + InsetColorID + " AND InsetTypeID=" + InsetTypeID +
                " AND ColorID=" + ColorID;
            TechnoInsetTypesSummaryBindingSource.MoveFirst();
        }

        public void FilterTechnoInsetColors(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID, int InsetColorID, int TechnoInsetTypeID)
        {
            TechnoInsetColorsSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND InsetTypeID=" + InsetTypeID +
                " AND ColorID=" + ColorID + " AND TechnoColorID=" + TechnoColorID +
                " AND InsetColorID=" + InsetColorID + " AND TechnoInsetTypeID=" + TechnoInsetTypeID;
            TechnoInsetColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterSizes(int FrontID, int ColorID, int PatinaID, int TechnoColorID, int InsetTypeID, int InsetColorID, int TechnoInsetTypeID, int TechnoInsetColorID)
        {
            SizesSummaryBindingSource.Filter = "FrontID=" + FrontID + " AND PatinaID=" + PatinaID +
                " AND ColorID=" + ColorID + " AND TechnoColorID=" + TechnoColorID +
                " AND InsetTypeID=" + InsetTypeID + " AND InsetColorID=" + InsetColorID + " AND TechnoInsetTypeID=" + TechnoInsetTypeID + " AND TechnoInsetColorID=" + TechnoInsetColorID;
            SizesSummaryBindingSource.MoveFirst();
        }

        public void FilterDecorProducts(int ProductID, int MeasureID)
        {
            DecorItemsSummaryBindingSource.Filter = "ProductID=" + ProductID + " AND MeasureID=" + MeasureID;
            DecorItemsSummaryBindingSource.MoveFirst();
        }

        public void FilterDecorItems(int ProductID, int DecorID, int MeasureID)
        {
            DecorColorsSummaryBindingSource.Filter = "ProductID=" + ProductID + " AND DecorID="
                + DecorID + " AND MeasureID=" + MeasureID;
            DecorColorsSummaryBindingSource.MoveFirst();
        }

        public void FilterDecorSizes(int ProductID, int DecorID, int ColorID, int MeasureID)
        {
            DecorSizesSummaryBindingSource.Filter = "ProductID=" + ProductID +
                " AND DecorID=" + DecorID + " AND ColorID=" + ColorID + " AND MeasureID=" + MeasureID;
            DecorSizesSummaryBindingSource.MoveFirst();
        }

        private void GetFronts()
        {
            decimal FrontCost = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            FrontsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrontsSummaryDataTable.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 3, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                    NewRow["Width"] = 0;
                    NewRow["Count"] = FrontCount;
                    FrontsSummaryDataTable.Rows.Add(NewRow);

                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrontsSummaryDataTable.NewRow();
                    CurvedNewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"])) + " гнутый";
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrontCount;
                    FrontsSummaryDataTable.Rows.Add(CurvedNewRow);

                    FrontCost = 0;
                    FrontCount = 0;
                }
            }

            Table.Dispose();
            FrontsSummaryDataTable.DefaultView.Sort = "Front, Square DESC";
            FrontsSummaryBindingSource.MoveFirst();
        }

        private void GetFrameColors()
        {
            decimal FrameColorCost = 0;
            decimal FrameColorSquare = 0;
            int FrameColorCount = 0;
            FrameColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrameColorCost += Convert.ToDecimal(row["Cost"]);
                        FrameColorSquare += Convert.ToDecimal(row["Square"]);
                        FrameColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = FrameColorsSummaryDataTable.NewRow();
                    if (Convert.ToInt32(Table.Rows[i]["PatinaID"]) == -1)
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    else
                        NewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"])) + " + " + GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["Square"] = Decimal.Round(FrameColorSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Cost"] = Decimal.Round(FrameColorCost, 2, MidpointRounding.AwayFromZero);
                    NewRow["Width"] = 0;
                    NewRow["Count"] = FrameColorCount;
                    FrameColorsSummaryDataTable.Rows.Add(NewRow);

                    FrameColorCost = 0;
                    FrameColorSquare = 0;
                    FrameColorCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        FrameColorCost += Convert.ToDecimal(row["Cost"]);
                        FrameColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = FrameColorsSummaryDataTable.NewRow();
                    if (Convert.ToInt32(Table.Rows[i]["PatinaID"]) == -1)
                        CurvedNewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    else
                        CurvedNewRow["FrameColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"])) + " + " + GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Cost"] = Decimal.Round(FrameColorCost, 2, MidpointRounding.AwayFromZero);
                    CurvedNewRow["Count"] = FrameColorCount;
                    FrameColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    FrameColorCost = 0;
                    FrameColorCount = 0;
                }
            }
            Table.Dispose();
            FrameColorsSummaryDataTable.DefaultView.Sort = "FrameColor, Square DESC";
            FrameColorsSummaryBindingSource.MoveFirst();
        }

        private void GetTechnoColors()
        {
            decimal Square = 0;
            int Count = 0;

            TechnoColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "TechnoColorID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        Square += Convert.ToDecimal(row["Square"]);
                        Count += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = TechnoColorsSummaryDataTable.NewRow();
                    NewRow["TechnoColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(Square, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = Count;
                    TechnoColorsSummaryDataTable.Rows.Add(NewRow);

                    Square = 0;
                    Count = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        Square += Convert.ToDecimal(row["Square"]);
                        Count += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = TechnoColorsSummaryDataTable.NewRow();
                    CurvedNewRow["TechnoColor"] = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = Count;
                    TechnoColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    Square = 0;
                    Count = 0;
                }
            }
            Table.Dispose();
            TechnoColorsSummaryDataTable.DefaultView.Sort = "TechnoColor, Count DESC";
            TechnoColorsSummaryBindingSource.MoveFirst();
        }

        private void GetInsetTypes()
        {
            decimal InsetTypeSquare = 0;
            int InsetTypeCount = 0;

            int MarginHeight = 0;
            int MarginWidth = 0;
            decimal GridHeight = 0;
            decimal GridWidth = 0;

            InsetTypesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "TechnoColorID", "InsetTypeID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        InsetTypeSquare += Convert.ToDecimal(row["Square"]);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }
                    //foreach (DataRow row in Rows)
                    //{
                    //    GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                    //    GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                    //    GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                    //    if (GridHeight < 0 || GridWidth < 0)
                    //    {
                    //        GridHeight = 0;
                    //        GridWidth = 0;
                    //    }
                    //    InsetTypeSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                    //    InsetTypeCount += Convert.ToInt32(row["Count"]);
                    //}

                    DataRow NewRow = InsetTypesSummaryDataTable.NewRow();
                    NewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Table.Rows[i]["InsetTypeID"];
                    //if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                    //    InsetTypeSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetTypeSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetTypeCount;
                    InsetTypesSummaryDataTable.Rows.Add(NewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        InsetTypeSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = InsetTypesSummaryDataTable.NewRow();
                    CurvedNewRow["InsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetTypeCount;
                    InsetTypesSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }
            }
            Table.Dispose();
            InsetTypesSummaryDataTable.DefaultView.Sort = "InsetType, Count DESC";
            InsetTypesSummaryBindingSource.MoveFirst();
        }

        private void GetInsetColors()
        {
            decimal InsetColorSquare = 0;
            int InsetColorCount = 0;

            int MarginHeight = 0;
            int MarginWidth = 0;
            decimal GridHeight = 0;
            decimal GridWidth = 0;

            InsetColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "PatinaID", "InsetTypeID", "InsetColorID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) + " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        InsetColorSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = InsetColorsSummaryDataTable.NewRow();
                    NewRow["InsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                        InsetColorSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetColorSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetColorCount;
                    InsetColorsSummaryDataTable.Rows.Add(NewRow);

                    InsetColorSquare = 0;
                    InsetColorCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        GetGridMargins(Convert.ToInt32(row["FrontID"]), ref MarginHeight, ref MarginWidth);
                        GridHeight = Convert.ToInt32(Convert.ToInt32(row["Height"]) - MarginHeight);
                        GridWidth = Convert.ToInt32(Convert.ToInt32(row["Width"]) - MarginWidth);
                        if (GridHeight < 0 || GridWidth < 0)
                        {
                            GridHeight = 0;
                            GridWidth = 0;
                        }
                        InsetColorSquare += Decimal.Round(GridHeight * GridWidth * Convert.ToInt32(row["Count"]) / 1000000, 2, MidpointRounding.AwayFromZero);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = InsetColorsSummaryDataTable.NewRow();
                    CurvedNewRow["InsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetColorCount;
                    InsetColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetColorCount = 0;
                }
            }
            Table.Dispose();
            InsetColorsSummaryDataTable.DefaultView.Sort = "InsetColor, Count DESC";
            InsetColorsSummaryBindingSource.MoveFirst();
        }

        private void GetTechnoInsetTypes()
        {
            decimal InsetTypeSquare = 0;
            int InsetTypeCount = 0;

            TechnoInsetTypesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "PatinaID", "TechnoColorID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        InsetTypeSquare += Convert.ToDecimal(row["Square"]);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = TechnoInsetTypesSummaryDataTable.NewRow();
                    NewRow["TechnoInsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Table.Rows[i]["InsetTypeID"];
                    NewRow["InsetColorID"] = Table.Rows[i]["InsetColorID"];
                    NewRow["TechnoInsetTypeID"] = Table.Rows[i]["TechnoInsetTypeID"];
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                        InsetTypeSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetTypeSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetTypeCount;
                    TechnoInsetTypesSummaryDataTable.Rows.Add(NewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        InsetTypeSquare += Convert.ToDecimal(row["Square"]);
                        InsetTypeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = TechnoInsetTypesSummaryDataTable.NewRow();
                    CurvedNewRow["TechnoInsetType"] = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetTypeCount;
                    TechnoInsetTypesSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetTypeSquare = 0;
                    InsetTypeCount = 0;
                }
            }
            Table.Dispose();
            TechnoInsetTypesSummaryDataTable.DefaultView.Sort = "TechnoInsetType, Count DESC";
            TechnoInsetTypesSummaryBindingSource.MoveFirst();
        }

        private void GetTechnoInsetColors()
        {
            decimal InsetColorSquare = 0;
            int InsetColorCount = 0;

            TechnoInsetColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "PatinaID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND Width<>-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        InsetColorSquare += Convert.ToDecimal(row["Square"]);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = TechnoInsetColorsSummaryDataTable.NewRow();
                    NewRow["TechnoInsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    NewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    NewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    if (Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) == 1)
                        InsetColorSquare = 0;
                    NewRow["Width"] = 0;
                    NewRow["Square"] = Decimal.Round(InsetColorSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = InsetColorCount;
                    TechnoInsetColorsSummaryDataTable.Rows.Add(NewRow);

                    InsetColorSquare = 0;
                    InsetColorCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) + " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND Width=-1 AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        InsetColorSquare += Convert.ToDecimal(row["Square"]);
                        InsetColorCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = TechnoInsetColorsSummaryDataTable.NewRow();
                    CurvedNewRow["TechnoInsetColor"] = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    CurvedNewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    CurvedNewRow["Width"] = -1;
                    CurvedNewRow["Count"] = InsetColorCount;
                    TechnoInsetColorsSummaryDataTable.Rows.Add(CurvedNewRow);

                    InsetColorCount = 0;
                }
            }
            Table.Dispose();
            TechnoInsetColorsSummaryDataTable.DefaultView.Sort = "TechnoInsetColor, Count DESC";
            TechnoInsetColorsSummaryBindingSource.MoveFirst();
        }

        private void GetSizes()
        {
            decimal SizeSquare = 0;
            int SizeCount = 0;
            SizesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID", "ColorID", "TechnoColorID", "PatinaID", "InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        SizeSquare += Convert.ToDecimal(row["Square"]);
                        SizeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow NewRow = SizesSummaryDataTable.NewRow();
                    NewRow["Size"] = Convert.ToInt32(Table.Rows[i]["Height"]) + " x " + Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    NewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    NewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    NewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    NewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    NewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    NewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["Square"] = Decimal.Round(SizeSquare, 2, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = SizeCount;
                    SizesSummaryDataTable.Rows.Add(NewRow);

                    SizeSquare = 0;
                    SizeCount = 0;
                }

                DataRow[] CurvedRows = FrontsOrdersDataTable.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1 AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (CurvedRows.Count() != 0)
                {
                    foreach (DataRow row in CurvedRows)
                    {
                        SizeSquare += Convert.ToDecimal(row["Square"]);
                        SizeCount += Convert.ToInt32(row["Count"]);
                    }

                    DataRow CurvedNewRow = SizesSummaryDataTable.NewRow();
                    CurvedNewRow["Size"] = Convert.ToInt32(Table.Rows[i]["Height"]) + " x " + Convert.ToInt32(Table.Rows[i]["Width"]);
                    CurvedNewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    CurvedNewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                    CurvedNewRow["PatinaID"] = Convert.ToInt32(Table.Rows[i]["PatinaID"]);
                    CurvedNewRow["InsetColorID"] = Convert.ToInt32(Table.Rows[i]["InsetColorID"]);
                    CurvedNewRow["InsetTypeID"] = Convert.ToInt32(Table.Rows[i]["InsetTypeID"]);
                    CurvedNewRow["TechnoColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoColorID"]);
                    CurvedNewRow["TechnoInsetColorID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]);
                    CurvedNewRow["TechnoInsetTypeID"] = Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]);
                    CurvedNewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    CurvedNewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    CurvedNewRow["Count"] = SizeCount;
                    SizesSummaryDataTable.Rows.Add(CurvedNewRow);

                    SizeCount = 0;
                }
            }
            Table.Dispose();
            SizesSummaryDataTable.DefaultView.Sort = "Square DESC";
            SizesSummaryBindingSource.MoveFirst();
        }

        private void GetDecorProducts()
        {
            decimal DecorProductCost = 0;
            decimal DecorProductCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorProductsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        DecorProductCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                        {
                            DecorProductCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }
                        else
                        {
                            DecorProductCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        }

                        DecorProductCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorProductsSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                if (DecorProductCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorProductCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorProductCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorProductsSummaryDataTable.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorProductCost = 0;
                DecorProductCount = 0;
            }
            DecorProductsSummaryDataTable.DefaultView.Sort = "DecorProduct, Measure ASC, Count DESC";
            DecorProductsSummaryBindingSource.MoveFirst();
        }

        private void GetDecorItems()
        {
            decimal DecorItemCost = 0;
            decimal DecorItemCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorItemsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        DecorItemCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorItemCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorItemCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorItemCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorItemsSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["DecorItem"] = GetDecorName(Convert.ToInt32(Table.Rows[i]["DecorID"]));
                if (DecorItemCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorItemCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorItemCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorItemsSummaryDataTable.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorItemCost = 0;
                DecorItemCount = 0;
            }
            Table.Dispose();
            DecorItemsSummaryDataTable.DefaultView.Sort = "DecorItem, Count DESC";
            DecorItemsSummaryBindingSource.MoveFirst();
        }

        private void GetDecorColors()
        {
            decimal DecorColorCost = 0;
            decimal DecorColorCount = 0;
            int decimals = 2;
            string Measure = string.Empty;
            DecorColorsSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "ColorID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) + " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorColorCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorColorCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        DecorColorCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        DecorColorCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorColorCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorColorCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorColorCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorColorsSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                NewRow["Color"] = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                if (DecorColorCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorColorCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorColorCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;
                DecorColorsSummaryDataTable.Rows.Add(NewRow);

                Measure = string.Empty;
                DecorColorCost = 0;
                DecorColorCount = 0;
            }
            Table.Dispose();
            DecorColorsSummaryDataTable.DefaultView.Sort = "Color, Count DESC";
            DecorColorsSummaryBindingSource.MoveFirst();
        }

        private void GetDecorSizes()
        {
            decimal DecorSizeCost = 0;
            decimal DecorSizeCount = 0;
            int decimals = 2;
            int Height = 0;
            int Length = 0;
            int Width = 0;
            string Measure = string.Empty;
            string Sizes = string.Empty;
            DecorSizesSummaryDataTable.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "DecorID", "ColorID", "MeasureID", "Length", "Height", "Width" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = DecorOrdersDataTable.Select("ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                    " AND DecorID=" + Convert.ToInt32(Table.Rows[i]["DecorID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]) +
                    " AND Length=" + Convert.ToInt32(Table.Rows[i]["Length"]) +
                    " AND Height=" + Convert.ToInt32(Table.Rows[i]["Height"]) +
                    " AND Width=" + Convert.ToInt32(Table.Rows[i]["Width"]));
                if (Rows.Count() == 0)
                    continue;

                foreach (DataRow row in Rows)
                {
                    if (Convert.ToInt32(row["ProductID"]) == 2)
                    {
                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        if (row["Height"].ToString() == "-1")
                            DecorSizeCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorSizeCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        Measure = "м.п.";
                        continue;
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 1)
                    {
                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        DecorSizeCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 3)
                    {
                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        DecorSizeCount += Convert.ToInt32(row["Count"]);
                        Measure = "шт.";
                    }

                    if (Convert.ToInt32(row["MeasureID"]) == 2)
                    {
                        //нет параметра "высота"
                        if (row["Height"].ToString() == "-1")
                            DecorSizeCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                        else
                            DecorSizeCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;

                        DecorSizeCost += Convert.ToDecimal(row["Cost"]);
                        Measure = "м.п.";
                    }
                }

                DataRow NewRow = DecorSizesSummaryDataTable.NewRow();
                NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                NewRow["DecorID"] = Convert.ToInt32(Table.Rows[i]["DecorID"]);
                NewRow["ColorID"] = Convert.ToInt32(Table.Rows[i]["ColorID"]);
                NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                if (DecorSizeCount < 3)
                    decimals = 1;
                NewRow["Cost"] = Decimal.Round(DecorSizeCost, decimals, MidpointRounding.AwayFromZero);
                NewRow["Count"] = Decimal.Round(DecorSizeCount, decimals, MidpointRounding.AwayFromZero);
                NewRow["Measure"] = Measure;

                Height = Convert.ToInt32(Table.Rows[i]["Height"]);
                Length = Convert.ToInt32(Table.Rows[i]["Length"]);
                Width = Convert.ToInt32(Table.Rows[i]["Width"]);

                if (Height > -1)
                    Sizes = Height.ToString();

                if (Sizes != string.Empty)
                {
                    if (Width > -1)
                        Sizes += " x " + Width.ToString();
                }
                else
                {
                    if (Length > -1)
                    {
                        Sizes = Length.ToString();
                        if (Width > -1)
                            Sizes += " x " + Width.ToString();
                    }
                    else
                    {
                        if (Width > -1)
                            Sizes = Width.ToString();
                    }
                }

                DecorSizesSummaryDataTable.Rows.Add(NewRow);
                NewRow["Size"] = Sizes;
                Sizes = string.Empty;
                Measure = string.Empty;
                DecorSizeCost = 0;
                DecorSizeCount = 0;
            }
            Table.Dispose();
            DecorSizesSummaryDataTable.DefaultView.Sort = "Count DESC";
            DecorSizesSummaryBindingSource.MoveFirst();
        }

        public void GetFrontsInfo(ref decimal Square, ref decimal Cost, ref int Count, ref int CurvedCount)
        {
        }

        public void GetDecorInfo(ref decimal Pogon, ref decimal Cost, ref decimal Count)
        {
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["ColorName"].ToString();
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
            if (Rows.Count() > 0)
                PatinaName = Rows[0]["PatinaName"].ToString();
            return PatinaName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
            if (Rows.Count() > 0)
                InsetType = Rows[0]["InsetTypeName"].ToString();
            return InsetType;
        }

        public string GetInsetColorName(int InsetColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + InsetColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["InsetColorName"].ToString();
            return ColorName;
        }

        /// <summary>
        /// Возвращает название продукта
        /// </summary>
        /// <param name="ProductID"></param>
        /// <returns></returns>
        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDataTable.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        /// <summary>
        /// Возвращает название наименования
        /// </summary>
        /// <param name="DecorID"></param>
        /// <returns></returns>
        private string GetDecorName(int DecorID)
        {
            string DecorName = string.Empty;
            try
            {
                DataRow[] Rows = DecorDataTable.Select("DecorID = " + DecorID);
                DecorName = Rows[0]["Name"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return DecorName;
        }

        private DateTime GetCurrentDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.LightConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return Convert.ToDateTime(DT.Rows[0][0]);
                }
            }
        }

        //private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        //{
        //    DataRow[] Rows = InsetMarginsDataTable.Select("FrontID = " + FrontID);
        //    if (Rows.Count() == 0)
        //        return;
        //    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
        //    MarginWidth = Convert.ToInt32(Rows[0]["GridWidth"]);
        //}

        private void GetGridMargins(int FrontID, ref int MarginHeight, ref int MarginWidth)
        {
            DataRow[] Rows = TechStoreDataTable.Select("TechStoreID = " + FrontID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["InsetHeightAdmission"] != DBNull.Value)
                    MarginHeight = Convert.ToInt32(Rows[0]["InsetHeightAdmission"]);
                if (Rows[0]["InsetWidthAdmission"] != DBNull.Value)
                    MarginWidth = Convert.ToInt32(Rows[0]["InsetWidthAdmission"]);
            }
        }

        public ArrayList SelectedZOVClients
        {
            get
            {
                ArrayList Clients = new ArrayList();

                for (int i = 0; i < ZOVClientsDataTable.Rows.Count; i++)
                {
                    if (!Convert.ToBoolean(ZOVClientsDataTable.Rows[i]["Check"]))
                        continue;

                    Clients.Add(Convert.ToInt32(ZOVClientsDataTable.Rows[i]["ClientID"]));
                }

                return Clients;
            }
        }

        public ArrayList SelectedZOVClientGroups
        {
            get
            {
                ArrayList ClientGroupIDs = new ArrayList();

                for (int i = 0; i < ZOVClientGroupsDataTable.Rows.Count; i++)
                {
                    if (!Convert.ToBoolean(ZOVClientGroupsDataTable.Rows[i]["Check"]))
                        continue;

                    ClientGroupIDs.Add(Convert.ToInt32(ZOVClientGroupsDataTable.Rows[i]["ClientGroupID"]));
                }

                return ClientGroupIDs;
            }
        }

        public void CheckAllZOVClients(bool Check)
        {
            for (int i = 0; i < ZOVClientsDataTable.Rows.Count; i++)
            {
                ZOVClientsDataTable.Rows[i]["Check"] = Check;
            }
        }

        public void CheckAllZOVClientGroups(bool Check)
        {
            for (int i = 0; i < ZOVClientGroupsDataTable.Rows.Count; i++)
            {
                ZOVClientGroupsDataTable.Rows[i]["Check"] = Check;
            }
        }

        public void GetCurrentZOVGroup()
        {
            if (ZOVClientGroupsBindingSource.Count == 0)
            {
                CurrentZOVClientGroupID = -1;
                return;
            }
            if (((DataRowView)ZOVClientGroupsBindingSource.Current).Row["ClientGroupID"] == DBNull.Value)
                return;
            else
                CurrentZOVClientGroupID = Convert.ToInt32(((DataRowView)ZOVClientGroupsBindingSource.Current).Row["ClientGroupID"]);
        }

        public void SetCheckClients(bool Check)
        {
            string GroupFilter = string.Empty;
            //if (CurrentClientGroupID != -2)
            GroupFilter = "ClientGroupID = " + CurrentZOVClientGroupID;

            DataRow[] Rows = ZOVClientsDataTable.Select(GroupFilter);

            foreach (DataRow row in Rows)
            {
                row["Check"] = Check;
            }
        }

        public bool IsZOVGroupClientsSelect()
        {
            for (int i = 0; i < ZOVClientGroupsDataTable.Rows.Count; i++)
            {
                if (Convert.ToBoolean(ZOVClientGroupsDataTable.Rows[i]["Check"]))
                    return true;
            }
            return false;
        }

        public bool IsZOVClientsSelect()
        {
            for (int i = 0; i < ZOVClientsDataTable.Rows.Count; i++)
            {
                if (Convert.ToBoolean(ZOVClientsDataTable.Rows[i]["Check"]))
                    return true;
            }
            return false;
        }

        public void ShowCheckColumn(PercentageDataGrid tPercentageDataGrid, bool Shown)
        {
            tPercentageDataGrid.Columns["Check"].Visible = Shown;
        }

        // Given H,S,L in range of 0-1
        // Returns a Color (RGB struct) in range of 0-255
        public static ColorRGB HSL2RGB(double h, double sl, double l)

        {

            double v;

            double r, g, b;



            r = l;   // default to gray

            g = l;

            b = l;

            v = (l <= 0.5) ? (l * (1.0 + sl)) : (l + sl - l * sl);

            if (v > 0)

            {

                double m;

                double sv;

                int sextant;

                double fract, vsf, mid1, mid2;



                m = l + l - v;

                sv = (v - m) / v;

                h *= 6.0;

                sextant = (int)h;

                fract = h - sextant;

                vsf = v * sv * fract;

                mid1 = m + vsf;

                mid2 = v - vsf;

                switch (sextant)

                {

                    case 0:

                        r = v;

                        g = mid1;

                        b = m;

                        break;

                    case 1:

                        r = mid2;

                        g = v;

                        b = m;

                        break;

                    case 2:

                        r = m;

                        g = v;

                        b = mid1;

                        break;

                    case 3:

                        r = m;

                        g = mid2;

                        b = v;

                        break;

                    case 4:

                        r = mid1;

                        g = m;

                        b = v;

                        break;

                    case 5:

                        r = v;

                        g = m;

                        b = mid2;

                        break;

                }

            }

            ColorRGB rgb;

            rgb.R = Convert.ToByte(r * 255.0f);

            rgb.G = Convert.ToByte(g * 255.0f);

            rgb.B = Convert.ToByte(b * 255.0f);

            return rgb;

        }

        // Given a Color (RGB Struct) in range of 0-255
        // Return H,S,L in range of 0-1
        public static void RGB2HSL(ColorRGB rgb, out double h, out double s, out double l)

        {

            double r = rgb.R / 255.0;

            double g = rgb.G / 255.0;

            double b = rgb.B / 255.0;

            double v;

            double m;

            double vm;

            double r2, g2, b2;



            h = 0; // default to black

            s = 0;

            l = 0;

            v = Math.Max(r, g);

            v = Math.Max(v, b);

            m = Math.Min(r, g);

            m = Math.Min(m, b);

            l = (m + v) / 2.0;

            if (l <= 0.0)

            {

                return;

            }

            vm = v - m;

            s = vm;

            if (s > 0.0)

            {

                s /= (l <= 0.5) ? (v + m) : (2.0 - v - m);

            }

            else

            {

                return;

            }

            r2 = (v - r) / vm;

            g2 = (v - g) / vm;

            b2 = (v - b) / vm;

            if (r == v)

            {

                h = (g == m ? 5.0 + b2 : 1.0 - g2);

            }

            else if (g == v)

            {

                h = (b == m ? 1.0 + r2 : 3.0 - b2);

            }

            else

            {

                h = (r == m ? 3.0 + g2 : 5.0 - r2);

            }

            h /= 6.0;

        }

        public void GenerateColors()
        {
            string[] colors = new string[ZOVClientGroupsDataTable.Rows.Count];

            Random rand = new Random();
            int max = byte.MaxValue + 1;
            for (int i = 0; i < ZOVClientGroupsDataTable.Rows.Count; i++)
            {
                int ID = Convert.ToInt32(ZOVClientGroupsDataTable.Rows[i]["ClientGroupID"]);

                int r = rand.Next(10, max);
                int g = rand.Next(10, max);
                int b = rand.Next(10, max);
                Color c = Color.FromArgb(100, r, g, b);
                string hex = c.R.ToString("X2") + c.G.ToString("X2") + c.B.ToString("X2");
                colors[i] = hex;
                ZOVClientGroupsDataTable.Rows[i]["Color"] = "#" + hex;
                DataRow[] Rows = ZOVClientsDataTable.Select("ClientGroupID=" + ID);
                for (int j = 0; j < Rows.Count(); j++)
                {
                    Rows[j]["Color"] = "#" + hex;
                }
            }

            //string[] colors = new string[ZOVClientGroupsDataTable.Rows.Count];
            //double counter = 1 / ZOVClientGroupsDataTable.Rows.Count;
            //for (int i = 0; i < ZOVClientGroupsDataTable.Rows.Count; i++)
            //{
            //    int ID = Convert.ToInt32(ZOVClientGroupsDataTable.Rows[i]["ClientGroupID"]);
            //    ColorRGB colorRGB = HSL2RGB(i * 0.01, 0.5, 0.5);

            //    string hex = colorRGB.R.ToString("X2") + colorRGB.G.ToString("X2") + colorRGB.B.ToString("X2");
            //    colors[i] = hex;
            //    ZOVClientGroupsDataTable.Rows[i]["Color"] = "#" + hex;
            //    DataRow[] Rows = ZOVClientsDataTable.Select("ClientGroupID=" + ID);
            //    for (int j = 0; j < Rows.Count(); j++)
            //    {
            //        Rows[j]["Color"] = "#" + hex;
            //    }
            //}
        }

        public void Colors()
        {
            string[] colors = new string[ZOVClientGroupsDataTable.Rows.Count];
            double counter = 1 / ZOVClientGroupsDataTable.Rows.Count;
            for (int i = 0; i < ZOVClientGroupsDataTable.Rows.Count; i++)
            {
                int ID = Convert.ToInt32(ZOVClientGroupsDataTable.Rows[i]["ClientGroupID"]);
                ColorRGB colorRGB = HSL2RGB(i * 0.01, 0.5, 0.5);

                string hex = colorRGB.R.ToString("X2") + colorRGB.G.ToString("X2") + colorRGB.B.ToString("X2");
                colors[i] = hex;
                ZOVClientGroupsDataTable.Rows[i]["Color"] = "#" + hex;
                DataRow[] Rows = ZOVClientsDataTable.Select("ClientGroupID=" + ID);
                for (int j = 0; j < Rows.Count(); j++)
                {
                    Rows[j]["Color"] = "#" + hex;
                }
            }
        }
    }

    public struct ColorRGB

    {

        public byte R;

        public byte G;

        public byte B;

        public ColorRGB(Color value)

        {

            this.R = value.R;

            this.G = value.G;

            this.B = value.B;

        }

        public static implicit operator Color(ColorRGB rgb)

        {

            Color c = Color.FromArgb(rgb.R, rgb.G, rgb.B);

            return c;

        }

        public static explicit operator ColorRGB(Color c)

        {

            return new ColorRGB(c);

        }

    }

    public class MarketingBatchStatistics
    {
        private DataTable FrontsDT = null;
        private DataTable DecorProductsDT = null;
        private DataTable DecorConfigDT = null;

        private DataTable MegaBatchDT = null;
        private DataTable FrontsOrdersDT = null;
        private DataTable DecorOrdersDT = null;
        private DataTable SimpleFrontsSummaryDT = null;
        private DataTable CurvedFrontsSummaryDT = null;
        private DataTable DecorProductsSummaryDT = null;

        private DataTable MarkProfilReadyFrontsDT = null;
        private DataTable MarkProfilReadyDecorDT = null;
        private DataTable MarkTPSReadyFrontsDT = null;
        private DataTable MarkTPSReadyDecorDT = null;
        private DataTable MarkAllFrontsDT = null;
        private DataTable MarkAllDecorDT = null;
        private DataTable MarkProfilOnProdFrontsDT = null;
        private DataTable MarkTPSOnProdFrontsDT = null;
        private DataTable MarkProfilOnProdDecorDT = null;
        private DataTable MarkTPSOnProdDecorDT = null;

        public BindingSource MegaBatchBS = null;
        public BindingSource SimpleFrontsSummaryBS = null;
        public BindingSource CurvedFrontsSummaryBS = null;
        public BindingSource DecorProductsSummaryBS = null;

        public MarketingBatchStatistics()
        {
            Create();
            Fill();
            Binding();
        }

        private void Create()
        {
            FrontsDT = new DataTable();
            DecorProductsDT = new DataTable();
            DecorConfigDT = new DataTable();
            MegaBatchDT = new DataTable();
            FrontsOrdersDT = new DataTable();
            DecorOrdersDT = new DataTable();

            MarkProfilReadyFrontsDT = new DataTable();
            MarkProfilReadyDecorDT = new DataTable();
            MarkTPSReadyFrontsDT = new DataTable();
            MarkTPSReadyDecorDT = new DataTable();

            MarkAllFrontsDT = new DataTable();
            MarkAllDecorDT = new DataTable();

            MarkProfilOnProdFrontsDT = new DataTable();
            MarkProfilOnProdDecorDT = new DataTable();
            MarkTPSOnProdFrontsDT = new DataTable();
            MarkTPSOnProdDecorDT = new DataTable();

            MegaBatchBS = new BindingSource();
            SimpleFrontsSummaryBS = new BindingSource();
            CurvedFrontsSummaryBS = new BindingSource();
            DecorProductsSummaryBS = new BindingSource();

            SimpleFrontsSummaryDT = new DataTable();
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("Front", System.Type.GetType("System.String")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("FrontID", System.Type.GetType("System.Int32")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("Width", System.Type.GetType("System.Int32")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("AllSquare", System.Type.GetType("System.String")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("AllCount", System.Type.GetType("System.Int32")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("OnProdSquare", System.Type.GetType("System.String")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("OnProdCount", System.Type.GetType("System.Int32")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("InProdSquare", System.Type.GetType("System.String")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("InProdCount", System.Type.GetType("System.Int32")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("ReadySquare", System.Type.GetType("System.String")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("ReadyCount", System.Type.GetType("System.Int32")));
            SimpleFrontsSummaryDT.Columns.Add(new DataColumn("Ready", System.Type.GetType("System.Boolean")));

            CurvedFrontsSummaryDT = new DataTable();
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("Front", System.Type.GetType("System.String")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("FrontID", System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("Width", System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("AllCount", System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("OnProdCount", System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("InProdCount", System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("ReadyCount", System.Type.GetType("System.Int32")));
            CurvedFrontsSummaryDT.Columns.Add(new DataColumn("Ready", System.Type.GetType("System.Boolean")));

            DecorProductsSummaryDT = new DataTable();
            DecorProductsSummaryDT.Columns.Add(new DataColumn("DecorProduct", System.Type.GetType("System.String")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("ProductID", System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("MeasureID", System.Type.GetType("System.Int32")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("AllCount", System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("OnProdCount", System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("InProdCount", System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("ReadyCount", System.Type.GetType("System.Decimal")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("Ready", System.Type.GetType("System.Boolean")));
            DecorProductsSummaryDT.Columns.Add(new DataColumn("Measure", System.Type.GetType("System.String")));
        }

        private void Fill()
        {
            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ProductID, ProductName, MeasureID, ReportParam FROM DecorProducts", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductsDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM DecorConfig", ConnectionStrings.CatalogConnectionString))
            //{
            //    DA.Fill(DecorConfigDT);
            //}
            DecorConfigDT = TablesManager.DecorConfigDataTableAll;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM MegaBatch",
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MegaBatchDT);
            }
            MegaBatchDT.Columns.Add(new DataColumn("Firm", Type.GetType("System.String")));
            MegaBatchDT.Columns.Add(new DataColumn("GroupType", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("ProfilOnProductionPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("ProfilInProductionPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("ProfilReadyPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("ProfilReady", Type.GetType("System.Boolean")));
            MegaBatchDT.Columns.Add(new DataColumn("ProfilPackingDate", Type.GetType("System.String")));
            MegaBatchDT.Columns.Add(new DataColumn("TPSOnProductionPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("TPSInProductionPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("FilenkaPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("TrimmingPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("AssemblyPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("DeyingPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("TPSReadyPerc", Type.GetType("System.Int32")));
            MegaBatchDT.Columns.Add(new DataColumn("TPSReady", Type.GetType("System.Boolean")));
            MegaBatchDT.Columns.Add(new DataColumn("TPSPackingDate", Type.GetType("System.String")));

            SelectCommand = "SELECT TOP 0 Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, " +
                " SUM(FrontsOrders.Square) AS AllSquare, SUM(FrontsOrders.Count) AS AllCount" +
                " FROM FrontsOrders" +
                " INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (FrontsOrders.FactoryID = 1) AND MainOrders.ProfilProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width" +
                " ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkProfilOnProdFrontsDT);
                MarkProfilOnProdFrontsDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = "SELECT TOP 0 Batch.MegaBatchID, DecorOrders.ProductID," +
                " SUM(DecorOrders.Count) AS AllCount" +
                " FROM DecorOrders" +
                " INNER JOIN BatchDetails ON DecorOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (DecorOrders.FactoryID = 1) AND MainOrders.ProfilProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, DecorOrders.ProductID" +
                " ORDER BY Batch.MegaBatchID, DecorOrders.ProductID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkProfilOnProdDecorDT);
                MarkProfilOnProdDecorDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = "SELECT TOP 0 Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width," +
                " SUM(FrontsOrders.Square) AS AllSquare, SUM(FrontsOrders.Count) AS AllCount" +
                " FROM FrontsOrders" +
                " INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID" +
                " INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (FrontsOrders.FactoryID = 2) AND MainOrders.TPSProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width" +
                " ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkTPSOnProdFrontsDT);
                MarkTPSOnProdFrontsDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = "SELECT TOP 0 Batch.MegaBatchID, DecorOrders.ProductID," +
                " SUM(DecorOrders.Count) AS AllCount" +
                " FROM DecorOrders" +
                " INNER JOIN BatchDetails ON DecorOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (DecorOrders.FactoryID = 2) AND MainOrders.TPSProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, DecorOrders.ProductID" +
                " ORDER BY Batch.MegaBatchID, DecorOrders.ProductID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkTPSOnProdDecorDT);
                MarkTPSOnProdDecorDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = @"SELECT TOP 0 Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount, 
                      SUM(FrontsOrders.Square / FrontsOrders.Count * PackageDetails.Count) AS AllSquare
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID
            WHERE (Packages.ProductType = 0) AND (Packages.FactoryID = 1) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkProfilReadyFrontsDT);
                MarkProfilReadyFrontsDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = @"SELECT TOP 0 Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID
            WHERE (Packages.ProductType = 1) AND (Packages.FactoryID = 1) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkProfilReadyDecorDT);
                MarkProfilReadyDecorDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = @"SELECT TOP 0 Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount, 
                      SUM(FrontsOrders.Square / FrontsOrders.Count * PackageDetails.Count) AS AllSquare
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 2 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID
            WHERE (Packages.ProductType = 0) AND (Packages.FactoryID = 2) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkTPSReadyFrontsDT);
                MarkTPSReadyFrontsDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = @"SELECT TOP 0 Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 2 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID
            WHERE (Packages.ProductType = 1) AND (Packages.FactoryID = 2) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkTPSReadyDecorDT);
                MarkTPSReadyDecorDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = @"SELECT TOP 0 Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, FrontsOrders.FactoryID AS FFactoryID, BatchDetails.FactoryID AS BFactoryID, SUM(FrontsOrders.Count) AS AllCount, SUM(FrontsOrders.Square) AS AllSquare
            FROM FrontsOrders INNER JOIN
                      BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID
            GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, FrontsOrders.FactoryID, BatchDetails.FactoryID
            ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, FrontsOrders.FactoryID, BatchDetails.FactoryID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkAllFrontsDT);
                MarkAllFrontsDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }

            SelectCommand = @"SELECT TOP 0 Batch.MegaBatchID, DecorOrders.ProductID, DecorOrders.FactoryID AS FFactoryID, BatchDetails.FactoryID AS BFactoryID, SUM(DecorOrders.Count) AS AllCount
            FROM DecorOrders INNER JOIN
                      BatchDetails ON DecorOrders.MainOrderID = BatchDetails.MainOrderID INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID
            GROUP BY Batch.MegaBatchID, DecorOrders.ProductID, DecorOrders.FactoryID, BatchDetails.FactoryID
            ORDER BY Batch.MegaBatchID, DecorOrders.ProductID, DecorOrders.FactoryID, BatchDetails.FactoryID";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(MarkAllDecorDT);
                MarkAllDecorDT.Columns.Add(new DataColumn(("GroupType"), System.Type.GetType("System.Int32")));
            }


            SelectCommand = "SELECT TOP 0 * FROM FrontsOrders" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails WHERE BatchID IN (SELECT BatchID FROM Batch))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand,
                ConnectionStrings.MarketingOrdersConnectionString))
            {
                DA.Fill(FrontsOrdersDT);
            }
        }

        private void Binding()
        {
            MegaBatchBS.DataSource = MegaBatchDT;
            SimpleFrontsSummaryBS.DataSource = SimpleFrontsSummaryDT;
            CurvedFrontsSummaryBS.DataSource = CurvedFrontsSummaryDT;
            DecorProductsSummaryBS.DataSource = DecorProductsSummaryDT;
        }

        public void FilterBatch(bool Marketing, bool ZOV, bool Profil, bool TPS, bool DoNotShowReady, bool SimpleFronts, bool CurvedFronts, bool Decor)
        {
            string BatchFilter = string.Empty;
            string FactoryFilter = string.Empty;
            string Filter = string.Empty;
            int FactoryID = 0;
            if (Profil && !TPS)
                FactoryFilter = " AND FFactoryID = 1";
            if (!Profil && TPS)
                FactoryFilter = " AND FFactoryID = 2";
            if (Marketing && ZOV)
            {
                if (SimpleFronts)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllFrontsDT.Select("Width<>-1 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
                if (CurvedFronts)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllFrontsDT.Select("Width=-1 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
                if (Decor)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllDecorDT.Select("MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
            }
            if (Marketing && !ZOV)
            {
                Filter = "GroupType = 1";
                if (SimpleFronts)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllFrontsDT.Select("GroupType = 1 AND Width<>-1 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
                if (CurvedFronts)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllFrontsDT.Select("GroupType = 1 AND Width=-1 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
                if (Decor)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllDecorDT.Select("GroupType = 1 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
            }
            if (!Marketing && ZOV)
            {
                Filter = "GroupType = 0";
                if (SimpleFronts)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllFrontsDT.Select("GroupType = 0 AND Width<>-1 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
                if (CurvedFronts)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllFrontsDT.Select("GroupType = 0 AND Width=-1 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
                if (Decor)
                {
                    foreach (DataRow item in MegaBatchDT.Rows)
                    {
                        DataRow[] rows = MarkAllDecorDT.Select("GroupType = 0 AND MegaBatchID=" + Convert.ToInt32(item["MegaBatchID"]) + FactoryFilter);
                        if (rows.Count() == 0)
                            BatchFilter += item["MegaBatchID"].ToString() + ",";
                    }
                }
            }
            if (!Marketing && !ZOV)
                Filter = "GroupType = -1";

            if (DoNotShowReady)
            {
                if (Profil && !TPS)
                    FactoryID = 1;
                if (!Profil && TPS)
                    FactoryID = 2;
                if (!Profil && !TPS)
                    FactoryID = -1;

                if (Filter.Length > 0)
                {
                    if (FactoryID == 0)
                        Filter += " AND (ProfilReady = false OR TPSReady = false)";
                    if (FactoryID == 1)
                        Filter += " AND (ProfilReady = false)";
                    if (FactoryID == 2)
                        Filter += " AND (TPSReady = false)";
                    if (FactoryID == -1)
                        Filter += " AND (MegaBatchID = 0)";
                }
                else
                {
                    if (FactoryID == 0)
                        Filter = "(ProfilReady = false OR TPSReady = false)";
                    if (FactoryID == 1)
                        Filter = "(ProfilReady = false)";
                    if (FactoryID == 2)
                        Filter = "(TPSReady = false)";
                    if (FactoryID == -1)
                        Filter += "(MegaBatchID = 0)";
                }
            }
            if (BatchFilter.Length > 0 && Filter.Length == 0)
                BatchFilter = "MegaBatchID NOT IN (" + BatchFilter.Substring(0, BatchFilter.Length - 1) + ")";
            if (BatchFilter.Length > 0 && Filter.Length > 0)
                BatchFilter = " AND MegaBatchID NOT IN (" + BatchFilter.Substring(0, BatchFilter.Length - 1) + ")";
            MegaBatchBS.Filter = Filter + BatchFilter;
            MegaBatchBS.MoveFirst();
        }

        public void UpdateMegaBatch(bool Marketing, bool ZOV, DateTime FirstDate, DateTime SecondDate)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (ZOV)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;
            string SelectCommand = "SELECT MegaBatchID, CreateDateTime, ProfilEntryDateTime, TPSEntryDateTime, Notes FROM MegaBatch" +
                " WHERE CAST(CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + "' ORDER BY MegaBatchID DESC";
            MegaBatchDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MegaBatchDT);
                }
                for (int i = 0; i < MegaBatchDT.Rows.Count; i++)
                {
                    MegaBatchDT.Rows[i]["Firm"] = "Маркетинг";
                    MegaBatchDT.Rows[i]["GroupType"] = 1;
                }
            }
            if (ZOV)
            {
                DataTable DT = MegaBatchDT.Clone();
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                {
                    DT.Rows[i]["Firm"] = "ЗОВ";
                    DT.Rows[i]["GroupType"] = 0;
                }
                foreach (DataRow item in DT.Rows)
                    MegaBatchDT.ImportRow(item);
                DT.Dispose();
            }
        }

        public void UpdateFrontsOrders(bool Marketing, bool ZOV, DateTime FirstDate, DateTime SecondDate)
        {
            string SelectCommand = "SELECT Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, " +
                " SUM(FrontsOrders.Square) AS AllSquare, SUM(FrontsOrders.Count) AS AllCount" +
                " FROM FrontsOrders" +
                " INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN" +
                     " MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
                INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (FrontsOrders.FactoryID = 1) AND MainOrders.ProfilProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width" +
                " ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width";
            DataTable DT = MarkProfilOnProdFrontsDT.Clone();
            MarkProfilOnProdFrontsDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkProfilOnProdFrontsDT);
                }
                for (int i = 0; i < MarkProfilOnProdFrontsDT.Rows.Count; i++)
                    MarkProfilOnProdFrontsDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkProfilOnProdFrontsDT.ImportRow(item);
            }

            SelectCommand = "SELECT Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width," +
                " SUM(FrontsOrders.Square) AS AllSquare, SUM(FrontsOrders.Count) AS AllCount" +
                " FROM FrontsOrders" +
                " INNER JOIN BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN" +
                     " MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
                 INNER JOIN MainOrders ON FrontsOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (FrontsOrders.FactoryID = 2) AND MainOrders.TPSProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width" +
                " ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width";
            MarkTPSOnProdFrontsDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkTPSOnProdFrontsDT);
                }
                for (int i = 0; i < MarkTPSOnProdFrontsDT.Rows.Count; i++)
                    MarkTPSOnProdFrontsDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkTPSOnProdFrontsDT.ImportRow(item);
            }

            SelectCommand = @"SELECT Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount, 
                      SUM(FrontsOrders.Square / FrontsOrders.Count * PackageDetails.Count) AS AllSquare
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
            WHERE (Packages.ProductType = 0) AND (Packages.FactoryID = 1) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID";
            MarkProfilReadyFrontsDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkProfilReadyFrontsDT);
                }
                for (int i = 0; i < MarkProfilReadyFrontsDT.Rows.Count; i++)
                    MarkProfilReadyFrontsDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkProfilReadyFrontsDT.ImportRow(item);
            }

            SelectCommand = @"SELECT Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount, 
                      SUM(FrontsOrders.Square / FrontsOrders.Count * PackageDetails.Count) AS AllSquare
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      FrontsOrders ON PackageDetails.OrderID = FrontsOrders.FrontsOrdersID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 2 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
            WHERE (Packages.ProductType = 0) AND (Packages.FactoryID = 2) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, Packages.PackageStatusID";
            MarkTPSReadyFrontsDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkTPSReadyFrontsDT);
                }
                for (int i = 0; i < MarkTPSReadyFrontsDT.Rows.Count; i++)
                    MarkTPSReadyFrontsDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkTPSReadyFrontsDT.ImportRow(item);
            }

            SelectCommand = @"SELECT Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, FrontsOrders.FactoryID AS FFactoryID, BatchDetails.FactoryID AS BFactoryID, SUM(FrontsOrders.Count) AS AllCount, SUM(FrontsOrders.Square) AS AllSquare
            FROM FrontsOrders INNER JOIN
                      BatchDetails ON FrontsOrders.MainOrderID = BatchDetails.MainOrderID INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
            GROUP BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, FrontsOrders.FactoryID, BatchDetails.FactoryID
            ORDER BY Batch.MegaBatchID, FrontsOrders.FrontID, FrontsOrders.Width, FrontsOrders.FactoryID, BatchDetails.FactoryID";
            MarkAllFrontsDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkAllFrontsDT);
                }
                for (int i = 0; i < MarkAllFrontsDT.Rows.Count; i++)
                    MarkAllFrontsDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkAllFrontsDT.ImportRow(item);
            }
            DT.Dispose();
        }

        public void UpdateDecorOrders(bool Marketing, bool ZOV, DateTime FirstDate, DateTime SecondDate)
        {
            string SelectCommand = "SELECT Batch.MegaBatchID, DecorOrders.ProductID," +
                " SUM(DecorOrders.Count) AS AllCount" +
                " FROM DecorOrders" +
                " INNER JOIN BatchDetails ON DecorOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN" +
                     " MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
                  INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (DecorOrders.FactoryID = 1) AND MainOrders.ProfilProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, DecorOrders.ProductID" +
                " ORDER BY Batch.MegaBatchID, DecorOrders.ProductID";
            DataTable DT = MarkProfilOnProdDecorDT.Clone();
            MarkProfilOnProdDecorDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkProfilOnProdDecorDT);
                }
                for (int i = 0; i < MarkProfilOnProdDecorDT.Rows.Count; i++)
                    MarkProfilOnProdDecorDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkProfilOnProdDecorDT.ImportRow(item);
            }

            SelectCommand = "SELECT Batch.MegaBatchID, DecorOrders.ProductID," +
                " SUM(DecorOrders.Count) AS AllCount" +
                " FROM DecorOrders" +
                " INNER JOIN BatchDetails ON DecorOrders.MainOrderID = BatchDetails.MainOrderID" +
                " INNER JOIN Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN" +
                     " MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
                INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " WHERE (DecorOrders.FactoryID = 2) AND MainOrders.TPSProductionStatusID = 3" +
                " GROUP BY Batch.MegaBatchID, DecorOrders.ProductID" +
                " ORDER BY Batch.MegaBatchID, DecorOrders.ProductID";
            MarkTPSOnProdDecorDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkTPSOnProdDecorDT);
                }
                for (int i = 0; i < MarkTPSOnProdDecorDT.Rows.Count; i++)
                    MarkTPSOnProdDecorDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkTPSOnProdDecorDT.ImportRow(item);
            }

            SelectCommand = @"SELECT Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 1 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
            WHERE (Packages.ProductType = 1) AND (Packages.FactoryID = 1) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID";
            MarkProfilReadyDecorDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkProfilReadyDecorDT);
                }
                for (int i = 0; i < MarkProfilReadyDecorDT.Rows.Count; i++)
                    MarkProfilReadyDecorDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkProfilReadyDecorDT.ImportRow(item);
            }

            SelectCommand = @"SELECT Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID, SUM(PackageDetails.Count) AS AllCount
            FROM Packages INNER JOIN
                      PackageDetails ON PackageDetails.PackageID = Packages.PackageID INNER JOIN
                      DecorOrders ON PackageDetails.OrderID = DecorOrders.DecorOrderID INNER JOIN
                      BatchDetails ON Packages.MainOrderID = BatchDetails.MainOrderID AND BatchDetails.FactoryID = 2 INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
            WHERE (Packages.ProductType = 1) AND (Packages.FactoryID = 2) AND PackageStatusID > 0
            GROUP BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID
            ORDER BY Batch.MegaBatchID, DecorOrders.ProductID, Packages.PackageStatusID";
            MarkTPSReadyDecorDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkTPSReadyDecorDT);
                }
                for (int i = 0; i < MarkTPSReadyDecorDT.Rows.Count; i++)
                    MarkTPSReadyDecorDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkTPSReadyDecorDT.ImportRow(item);
            }

            SelectCommand = @"SELECT Batch.MegaBatchID, DecorOrders.ProductID, DecorOrders.FactoryID AS FFactoryID, BatchDetails.FactoryID AS BFactoryID, SUM(DecorOrders.Count) AS AllCount
            FROM DecorOrders INNER JOIN
                      BatchDetails ON DecorOrders.MainOrderID = BatchDetails.MainOrderID INNER JOIN
                      Batch ON BatchDetails.BatchID = Batch.BatchID INNER JOIN
                      MegaBatch ON Batch.MegaBatchID = MegaBatch.MegaBatchID AND CAST(MegaBatch.CreateDateTime AS Date) >= '" + FirstDate.ToString("yyyy-MM-dd") +
                "' AND CAST(MegaBatch.CreateDateTime AS Date) <= '" + SecondDate.ToString("yyyy-MM-dd") + @"'
            GROUP BY Batch.MegaBatchID, DecorOrders.ProductID, DecorOrders.FactoryID, BatchDetails.FactoryID
            ORDER BY Batch.MegaBatchID, DecorOrders.ProductID, DecorOrders.FactoryID, BatchDetails.FactoryID";
            MarkAllDecorDT.Clear();
            if (Marketing)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    DA.Fill(MarkAllDecorDT);
                }
                for (int i = 0; i < MarkAllDecorDT.Rows.Count; i++)
                    MarkAllDecorDT.Rows[i]["GroupType"] = 1;
            }
            if (ZOV)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    DA.Fill(DT);
                }
                for (int i = 0; i < DT.Rows.Count; i++)
                    DT.Rows[i]["GroupType"] = 0;
                foreach (DataRow item in DT.Rows)
                    MarkAllDecorDT.ImportRow(item);
            }
            DT.Dispose();
        }

        public void SimpleFrontsGeneralSummary()
        {
            for (int i = 0; i < MegaBatchDT.Rows.Count; i++)
            {
                MegaBatchDT.Rows[i]["ProfilOnProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilInProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilReadyPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilPackingDate"] = string.Empty;
                MegaBatchDT.Rows[i]["ProfilReady"] = false;

                MegaBatchDT.Rows[i]["TPSOnProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSInProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["FilenkaPerc"] = 0;
                MegaBatchDT.Rows[i]["TrimmingPerc"] = 0;
                MegaBatchDT.Rows[i]["AssemblyPerc"] = 0;
                MegaBatchDT.Rows[i]["DeyingPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSReadyPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSPackingDate"] = string.Empty;
                MegaBatchDT.Rows[i]["TPSReady"] = false;
            }

            int ProfilOnProductionCount = 0;
            int ProfilInProductionCount = 0;
            int ProfilReadyCount = 0;
            int ProfilAllCount = 0;

            int ProfilOnProductionPerc = 0;
            int ProfilInProductionPerc = 0;
            int ProfilReadyPerc = 0;

            decimal ProfilOnProductionProgressVal = 0;
            decimal ProfilInProductionProgressVal = 0;
            decimal ProfilReadyProgressVal = 0;

            int TPSOnProductionCount = 0;
            int TPSInProductionCount = 0;
            int TPSReadyCount = 0;
            int TPSAllCount = 0;

            int TPSOnProductionPerc = 0;
            int TPSInProductionPerc = 0;
            int TPSReadyPerc = 0;

            decimal TPSOnProductionProgressVal = 0;
            decimal TPSInProductionProgressVal = 0;
            decimal TPSReadyProgressVal = 0;

            decimal d1 = 0;
            decimal d2 = 0;
            decimal d3 = 0;
            decimal d4 = 0;
            decimal d5 = 0;
            decimal d6 = 0;

            decimal Square = 0;

            for (int i = 0; i < MegaBatchDT.Rows.Count; i++)
            {
                int MegaBatchID = Convert.ToInt32(MegaBatchDT.Rows[i]["MegaBatchID"]);
                int GroupType = Convert.ToInt32(MegaBatchDT.Rows[i]["GroupType"]);
                decimal FilenkaPerc = 0;
                decimal TrimmingPerc = 0;
                decimal AssemblyPerc = 0;
                decimal DeyingPerc = 0;

                ProfilReadyCount = MarketProfilFrontsInfo(-1, MegaBatchID, 0, 0, ref Square);
                ProfilAllCount = AllFrontsInfo(-1, MegaBatchID, 0, 0, 1, ref Square);
                ProfilOnProductionCount = ProfilOnProdFrontsInfo(-1, MegaBatchID, 0, 0, ref Square);
                ProfilInProductionCount = ProfilAllCount - ProfilReadyCount - ProfilOnProductionCount;

                TPSReadyCount = MarketTPSFrontsInfo(-1, MegaBatchID, 0, 0, ref Square);
                TPSAllCount = AllFrontsInfo(-1, MegaBatchID, 0, 0, 2, ref Square);
                TPSOnProductionCount = TPSOnProdFrontsInfo(-1, MegaBatchID, 0, 0, ref Square);
                TPSInProductionCount = TPSAllCount - TPSReadyCount - TPSOnProductionCount;

                if (TPSAllCount > 0)
                    SectorsInfo(GroupType, MegaBatchID, ref FilenkaPerc, ref TrimmingPerc, ref AssemblyPerc, ref DeyingPerc);

                ProfilOnProductionProgressVal = 0;
                ProfilInProductionProgressVal = 0;
                ProfilReadyProgressVal = 0;

                TPSOnProductionProgressVal = 0;
                TPSInProductionProgressVal = 0;
                TPSReadyProgressVal = 0;

                if (ProfilAllCount > 0)
                    ProfilOnProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilOnProductionCount) / Convert.ToDecimal(ProfilAllCount));

                if (ProfilAllCount > 0)
                    ProfilInProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilInProductionCount) / Convert.ToDecimal(ProfilAllCount));

                if (ProfilAllCount > 0)
                    ProfilReadyProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilReadyCount) / Convert.ToDecimal(ProfilAllCount));

                if (TPSAllCount > 0)
                    TPSOnProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSOnProductionCount) / Convert.ToDecimal(TPSAllCount));

                if (TPSAllCount > 0)
                    TPSInProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSInProductionCount) / Convert.ToDecimal(TPSAllCount));

                if (TPSAllCount > 0)
                    TPSReadyProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSReadyCount) / Convert.ToDecimal(TPSAllCount));

                d1 = ProfilOnProductionProgressVal * 100;
                d2 = ProfilInProductionProgressVal * 100;
                d3 = ProfilReadyProgressVal * 100;
                d4 = TPSOnProductionProgressVal * 100;
                d5 = TPSInProductionProgressVal * 100;
                d6 = TPSReadyProgressVal * 100;

                if (d1 > 0 && d1 < 0.5M)
                    d1 = 1;
                if (d2 > 0 && d2 < 0.5M)
                    d2 = 1;
                if (d3 > 0 && d3 < 0.5M)
                    d3 = 1;
                if (d4 > 0 && d4 < 0.5M)
                    d4 = 1;
                if (d5 > 0 && d5 < 0.5M)
                    d5 = 1;
                if (d6 > 0 && d6 < 0.5M)
                    d6 = 1;

                if (d1 > 99.5M && d1 < 100)
                    d1 = 99;
                if (d2 > 99.5M && d2 < 100)
                    d2 = 99;
                if (d3 > 99.5M && d3 < 100)
                    d3 = 99;
                if (d4 > 99.5M && d4 < 100)
                    d4 = 99;
                if (d5 > 99.5M && d5 < 100)
                    d5 = 99;
                if (d6 > 99.5M && d6 < 100)
                    d6 = 99;

                ProfilOnProductionPerc = Convert.ToInt32(Math.Round(d1, 1, MidpointRounding.AwayFromZero));
                ProfilInProductionPerc = Convert.ToInt32(Math.Round(d2, 1, MidpointRounding.AwayFromZero));
                ProfilReadyPerc = Convert.ToInt32(Math.Round(d3, 1, MidpointRounding.AwayFromZero));

                if ((ProfilOnProductionPerc + ProfilInProductionPerc + ProfilReadyPerc) > 100)
                {
                    if (ProfilOnProductionPerc > ProfilInProductionPerc)
                        if (ProfilOnProductionPerc > ProfilReadyPerc)
                            ProfilOnProductionPerc--;
                        else
                            ProfilReadyPerc--;
                    else
                        if (ProfilInProductionPerc > ProfilReadyPerc)
                        ProfilInProductionPerc--;
                    else
                        ProfilReadyPerc--;
                }

                TPSOnProductionPerc = Convert.ToInt32(Math.Round(d4, 1, MidpointRounding.AwayFromZero));
                TPSInProductionPerc = Convert.ToInt32(Math.Round(d5, 1, MidpointRounding.AwayFromZero));
                FilenkaPerc = Convert.ToInt32(Math.Round(FilenkaPerc * 100, 1, MidpointRounding.AwayFromZero));
                TrimmingPerc = Convert.ToInt32(Math.Round(TrimmingPerc * 100, 1, MidpointRounding.AwayFromZero));
                AssemblyPerc = Convert.ToInt32(Math.Round(AssemblyPerc * 100, 1, MidpointRounding.AwayFromZero));
                DeyingPerc = Convert.ToInt32(Math.Round(DeyingPerc * 100, 1, MidpointRounding.AwayFromZero));
                TPSReadyPerc = Convert.ToInt32(Math.Round(d6, 1, MidpointRounding.AwayFromZero));

                if ((TPSOnProductionPerc + TPSInProductionPerc + TPSReadyPerc) > 100)
                {
                    if (TPSOnProductionPerc > TPSInProductionPerc)
                        if (TPSOnProductionPerc > TPSReadyPerc)
                            TPSOnProductionPerc--;
                        else
                            TPSReadyPerc--;
                    else
                        if (TPSInProductionPerc > TPSReadyPerc)
                        TPSInProductionPerc--;
                    else
                        TPSReadyPerc--;
                }

                string ProductionDate = EnterInProdDate(GroupType, MegaBatchID, 1);
                if (ProductionDate.Length > 0)
                    MegaBatchDT.Rows[i]["ProfilEntryDateTime"] = ProductionDate;

                ProductionDate = EnterInProdDate(GroupType, MegaBatchID, 2);
                if (ProductionDate.Length > 0)
                    MegaBatchDT.Rows[i]["TPSEntryDateTime"] = ProductionDate;

                if (ProfilOnProductionPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilOnProductionPerc"] = ProfilOnProductionPerc;
                if (ProfilInProductionPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilInProductionPerc"] = ProfilInProductionPerc;
                if (ProfilReadyPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilReadyPerc"] = ProfilReadyPerc;
                if (ProfilReadyPerc == 100)
                {
                    MegaBatchDT.Rows[i]["ProfilReady"] = true;
                    MegaBatchDT.Rows[i]["ProfilPackingDate"] = ReadyDate(GroupType, MegaBatchID, 1);
                }
                else
                    MegaBatchDT.Rows[i]["ProfilReady"] = false;
                //if (ProfilReadyPerc == 0)
                //{
                //    MegaBatchDT.Rows[i]["ProfilReady"] = true;
                //}

                if (TPSOnProductionPerc > 0)
                    MegaBatchDT.Rows[i]["TPSOnProductionPerc"] = TPSOnProductionPerc;
                if (TPSInProductionPerc > 0)
                    MegaBatchDT.Rows[i]["TPSInProductionPerc"] = TPSInProductionPerc;
                if (FilenkaPerc > 0)
                    MegaBatchDT.Rows[i]["FilenkaPerc"] = FilenkaPerc;
                if (TrimmingPerc > 0)
                    MegaBatchDT.Rows[i]["TrimmingPerc"] = TrimmingPerc;
                if (AssemblyPerc > 0)
                    MegaBatchDT.Rows[i]["AssemblyPerc"] = AssemblyPerc;
                if (DeyingPerc > 0)
                    MegaBatchDT.Rows[i]["DeyingPerc"] = DeyingPerc;
                if (TPSReadyPerc > 0)
                    MegaBatchDT.Rows[i]["TPSReadyPerc"] = TPSReadyPerc;
                if (TPSReadyPerc == 100)
                {
                    MegaBatchDT.Rows[i]["TPSReady"] = true;
                    MegaBatchDT.Rows[i]["TPSPackingDate"] = ReadyDate(GroupType, MegaBatchID, 2);
                }
                else
                    MegaBatchDT.Rows[i]["TPSReady"] = false;
                //if (TPSReadyPerc == 0)
                //{
                //    MegaBatchDT.Rows[i]["TPSReady"] = true;
                //}
            }
            MegaBatchBS.MoveFirst();
        }

        public void CurvedFrontsGeneralSummary()
        {
            for (int i = 0; i < MegaBatchDT.Rows.Count; i++)
            {
                MegaBatchDT.Rows[i]["ProfilOnProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilInProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilReadyPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilPackingDate"] = string.Empty;
                MegaBatchDT.Rows[i]["ProfilReady"] = false;

                MegaBatchDT.Rows[i]["TPSOnProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSInProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSReadyPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSPackingDate"] = string.Empty;
                MegaBatchDT.Rows[i]["TPSReady"] = false;
            }

            int ProfilOnProductionCount = 0;
            int ProfilInProductionCount = 0;
            int ProfilReadyCount = 0;
            int ProfilAllCount = 0;

            int ProfilOnProductionPerc = 0;
            int ProfilInProductionPerc = 0;
            int ProfilReadyPerc = 0;

            decimal ProfilOnProductionProgressVal = 0;
            decimal ProfilInProductionProgressVal = 0;
            decimal ProfilReadyProgressVal = 0;

            int TPSOnProductionCount = 0;
            int TPSInProductionCount = 0;
            int TPSReadyCount = 0;
            int TPSAllCount = 0;

            int TPSOnProductionPerc = 0;
            int TPSInProductionPerc = 0;
            int TPSReadyPerc = 0;

            decimal TPSOnProductionProgressVal = 0;
            decimal TPSInProductionProgressVal = 0;
            decimal TPSReadyProgressVal = 0;

            decimal d1 = 0;
            decimal d2 = 0;
            decimal d3 = 0;
            decimal d4 = 0;
            decimal d5 = 0;
            decimal d6 = 0;

            decimal Square = 0;

            for (int i = 0; i < MegaBatchDT.Rows.Count; i++)
            {
                int MegaBatchID = Convert.ToInt32(MegaBatchDT.Rows[i]["MegaBatchID"]);
                int GroupType = Convert.ToInt32(MegaBatchDT.Rows[i]["GroupType"]);

                ProfilReadyCount = MarketProfilFrontsInfo(-1, MegaBatchID, 0, -1, ref Square);
                ProfilAllCount = AllFrontsInfo(-1, MegaBatchID, 0, -1, 1, ref Square);
                ProfilOnProductionCount = ProfilOnProdFrontsInfo(-1, MegaBatchID, 0, -1, ref Square);
                ProfilInProductionCount = ProfilAllCount - ProfilReadyCount - ProfilOnProductionCount;

                TPSReadyCount = MarketTPSFrontsInfo(-1, MegaBatchID, 0, -1, ref Square);
                TPSAllCount = AllFrontsInfo(-1, MegaBatchID, 0, -1, 2, ref Square);
                TPSOnProductionCount = TPSOnProdFrontsInfo(-1, MegaBatchID, 0, -1, ref Square);
                TPSInProductionCount = TPSAllCount - TPSReadyCount - TPSOnProductionCount;

                ProfilOnProductionProgressVal = 0;
                ProfilInProductionProgressVal = 0;
                ProfilReadyProgressVal = 0;

                TPSOnProductionProgressVal = 0;
                TPSInProductionProgressVal = 0;
                TPSReadyProgressVal = 0;

                if (ProfilAllCount > 0)
                    ProfilOnProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilOnProductionCount) / Convert.ToDecimal(ProfilAllCount));

                if (ProfilAllCount > 0)
                    ProfilInProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilInProductionCount) / Convert.ToDecimal(ProfilAllCount));

                if (ProfilAllCount > 0)
                    ProfilReadyProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilReadyCount) / Convert.ToDecimal(ProfilAllCount));

                if (TPSAllCount > 0)
                    TPSOnProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSOnProductionCount) / Convert.ToDecimal(TPSAllCount));

                if (TPSAllCount > 0)
                    TPSInProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSInProductionCount) / Convert.ToDecimal(TPSAllCount));

                if (TPSAllCount > 0)
                    TPSReadyProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSReadyCount) / Convert.ToDecimal(TPSAllCount));

                d1 = ProfilOnProductionProgressVal * 100;
                d2 = ProfilInProductionProgressVal * 100;
                d3 = ProfilReadyProgressVal * 100;
                d4 = TPSOnProductionProgressVal * 100;
                d5 = TPSInProductionProgressVal * 100;
                d6 = TPSReadyProgressVal * 100;

                if (d1 > 0 && d1 < 0.5M)
                    d1 = 1;
                if (d2 > 0 && d2 < 0.5M)
                    d2 = 1;
                if (d3 > 0 && d3 < 0.5M)
                    d3 = 1;
                if (d4 > 0 && d4 < 0.5M)
                    d4 = 1;
                if (d5 > 0 && d5 < 0.5M)
                    d5 = 1;
                if (d6 > 0 && d6 < 0.5M)
                    d6 = 1;

                if (d1 > 99.5M && d1 < 100)
                    d1 = 99;
                if (d2 > 99.5M && d2 < 100)
                    d2 = 99;
                if (d3 > 99.5M && d3 < 100)
                    d3 = 99;
                if (d4 > 99.5M && d4 < 100)
                    d4 = 99;
                if (d5 > 99.5M && d5 < 100)
                    d5 = 99;
                if (d6 > 99.5M && d6 < 100)
                    d6 = 99;

                ProfilOnProductionPerc = Convert.ToInt32(Math.Round(d1, 1, MidpointRounding.AwayFromZero));
                ProfilInProductionPerc = Convert.ToInt32(Math.Round(d2, 1, MidpointRounding.AwayFromZero));
                ProfilReadyPerc = Convert.ToInt32(Math.Round(d3, 1, MidpointRounding.AwayFromZero));

                if ((ProfilOnProductionPerc + ProfilInProductionPerc + ProfilReadyPerc) > 100)
                {
                    if (ProfilOnProductionPerc > ProfilInProductionPerc)
                        if (ProfilOnProductionPerc > ProfilReadyPerc)
                            ProfilOnProductionPerc--;
                        else
                            ProfilReadyPerc--;
                    else
                        if (ProfilInProductionPerc > ProfilReadyPerc)
                        ProfilInProductionPerc--;
                    else
                        ProfilReadyPerc--;
                }

                TPSOnProductionPerc = Convert.ToInt32(Math.Round(d4, 1, MidpointRounding.AwayFromZero));
                TPSInProductionPerc = Convert.ToInt32(Math.Round(d5, 1, MidpointRounding.AwayFromZero));
                TPSReadyPerc = Convert.ToInt32(Math.Round(d6, 1, MidpointRounding.AwayFromZero));

                if ((TPSOnProductionPerc + TPSInProductionPerc + TPSReadyPerc) > 100)
                {
                    if (TPSOnProductionPerc > TPSInProductionPerc)
                        if (TPSOnProductionPerc > TPSReadyPerc)
                            TPSOnProductionPerc--;
                        else
                            TPSReadyPerc--;
                    else
                        if (TPSInProductionPerc > TPSReadyPerc)
                        TPSInProductionPerc--;
                    else
                        TPSReadyPerc--;
                }

                string ProductionDate = EnterInProdDate(GroupType, MegaBatchID, 1);
                if (ProductionDate.Length > 0)
                    MegaBatchDT.Rows[i]["ProfilEntryDateTime"] = ProductionDate;

                ProductionDate = EnterInProdDate(GroupType, MegaBatchID, 2);
                if (ProductionDate.Length > 0)
                    MegaBatchDT.Rows[i]["TPSEntryDateTime"] = ProductionDate;

                if (ProfilOnProductionPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilOnProductionPerc"] = ProfilOnProductionPerc;
                if (ProfilInProductionPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilInProductionPerc"] = ProfilInProductionPerc;
                if (ProfilReadyPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilReadyPerc"] = ProfilReadyPerc;
                if (ProfilReadyPerc == 100)
                {
                    MegaBatchDT.Rows[i]["ProfilReady"] = true;
                    MegaBatchDT.Rows[i]["ProfilPackingDate"] = ReadyDate(GroupType, MegaBatchID, 1);
                }
                else
                    MegaBatchDT.Rows[i]["ProfilReady"] = false;
                //if (ProfilReadyPerc == 0)
                //{
                //    MegaBatchDT.Rows[i]["ProfilReady"] = true;
                //}

                if (TPSOnProductionPerc > 0)
                    MegaBatchDT.Rows[i]["TPSOnProductionPerc"] = TPSOnProductionPerc;
                if (TPSInProductionPerc > 0)
                    MegaBatchDT.Rows[i]["TPSInProductionPerc"] = TPSInProductionPerc;
                if (TPSReadyPerc > 0)
                    MegaBatchDT.Rows[i]["TPSReadyPerc"] = TPSReadyPerc;
                if (TPSReadyPerc == 100)
                {
                    MegaBatchDT.Rows[i]["TPSReady"] = true;
                    MegaBatchDT.Rows[i]["TPSPackingDate"] = ReadyDate(GroupType, MegaBatchID, 2);
                }
                else
                    MegaBatchDT.Rows[i]["TPSReady"] = false;
                //if (TPSReadyPerc == 0)
                //{
                //    MegaBatchDT.Rows[i]["TPSReady"] = true;
                //}
            }
            MegaBatchBS.MoveFirst();
        }

        public void DecorGeneralSummary()
        {
            for (int i = 0; i < MegaBatchDT.Rows.Count; i++)
            {
                MegaBatchDT.Rows[i]["ProfilOnProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilInProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilReadyPerc"] = 0;
                MegaBatchDT.Rows[i]["ProfilPackingDate"] = string.Empty;
                MegaBatchDT.Rows[i]["ProfilReady"] = false;

                MegaBatchDT.Rows[i]["TPSOnProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSInProductionPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSReadyPerc"] = 0;
                MegaBatchDT.Rows[i]["TPSPackingDate"] = string.Empty;
                MegaBatchDT.Rows[i]["TPSReady"] = false;
            }

            int ProfilOnProductionCount = 0;
            int ProfilInProductionCount = 0;
            int ProfilReadyCount = 0;
            int ProfilAllCount = 0;

            int ProfilOnProductionPerc = 0;
            int ProfilInProductionPerc = 0;
            int ProfilReadyPerc = 0;

            decimal ProfilOnProductionProgressVal = 0;
            decimal ProfilInProductionProgressVal = 0;
            decimal ProfilReadyProgressVal = 0;

            int TPSOnProductionCount = 0;
            int TPSInProductionCount = 0;
            int TPSReadyCount = 0;
            int TPSAllCount = 0;

            int TPSOnProductionPerc = 0;
            int TPSInProductionPerc = 0;
            int TPSReadyPerc = 0;

            decimal TPSOnProductionProgressVal = 0;
            decimal TPSInProductionProgressVal = 0;
            decimal TPSReadyProgressVal = 0;

            decimal d1 = 0;
            decimal d2 = 0;
            decimal d3 = 0;
            decimal d4 = 0;
            decimal d5 = 0;
            decimal d6 = 0;

            for (int i = 0; i < MegaBatchDT.Rows.Count; i++)
            {
                int MegaBatchID = Convert.ToInt32(MegaBatchDT.Rows[i]["MegaBatchID"]);
                int GroupType = Convert.ToInt32(MegaBatchDT.Rows[i]["GroupType"]);

                ProfilReadyCount = MarketProfilDecorInfo(-1, MegaBatchID, 0);
                ProfilAllCount = AllDecorInfo(-1, MegaBatchID, 0, 1);
                ProfilOnProductionCount = ProfilOnProdDecorInfo(-1, MegaBatchID, 0);
                ProfilInProductionCount = ProfilAllCount - ProfilReadyCount - ProfilOnProductionCount;

                TPSReadyCount = MarketTPSDecorInfo(-1, MegaBatchID, 0);
                TPSAllCount = AllDecorInfo(-1, MegaBatchID, 0, 2);
                TPSOnProductionCount = TPSOnProdDecorInfo(-1, MegaBatchID, 0);
                TPSInProductionCount = TPSAllCount - TPSReadyCount - TPSOnProductionCount;

                ProfilOnProductionProgressVal = 0;
                ProfilInProductionProgressVal = 0;
                ProfilReadyProgressVal = 0;

                TPSOnProductionProgressVal = 0;
                TPSInProductionProgressVal = 0;
                TPSReadyProgressVal = 0;

                if (ProfilAllCount > 0)
                    ProfilOnProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilOnProductionCount) / Convert.ToDecimal(ProfilAllCount));

                if (ProfilAllCount > 0)
                    ProfilInProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilInProductionCount) / Convert.ToDecimal(ProfilAllCount));

                if (ProfilAllCount > 0)
                    ProfilReadyProgressVal = Convert.ToDecimal(Convert.ToDecimal(ProfilReadyCount) / Convert.ToDecimal(ProfilAllCount));

                if (TPSAllCount > 0)
                    TPSOnProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSOnProductionCount) / Convert.ToDecimal(TPSAllCount));

                if (TPSAllCount > 0)
                    TPSInProductionProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSInProductionCount) / Convert.ToDecimal(TPSAllCount));

                if (TPSAllCount > 0)
                    TPSReadyProgressVal = Convert.ToDecimal(Convert.ToDecimal(TPSReadyCount) / Convert.ToDecimal(TPSAllCount));

                d1 = ProfilOnProductionProgressVal * 100;
                d2 = ProfilInProductionProgressVal * 100;
                d3 = ProfilReadyProgressVal * 100;
                d4 = TPSOnProductionProgressVal * 100;
                d5 = TPSInProductionProgressVal * 100;
                d6 = TPSReadyProgressVal * 100;

                if (d1 > 0 && d1 < 0.5M)
                    d1 = 1;
                if (d2 > 0 && d2 < 0.5M)
                    d2 = 1;
                if (d3 > 0 && d3 < 0.5M)
                    d3 = 1;
                if (d4 > 0 && d4 < 0.5M)
                    d4 = 1;
                if (d5 > 0 && d5 < 0.5M)
                    d5 = 1;
                if (d6 > 0 && d6 < 0.5M)
                    d6 = 1;

                if (d1 > 99.5M && d1 < 100)
                    d1 = 99;
                if (d2 > 99.5M && d2 < 100)
                    d2 = 99;
                if (d3 > 99.5M && d3 < 100)
                    d3 = 99;
                if (d4 > 99.5M && d4 < 100)
                    d4 = 99;
                if (d5 > 99.5M && d5 < 100)
                    d5 = 99;
                if (d6 > 99.5M && d6 < 100)
                    d6 = 99;

                ProfilOnProductionPerc = Convert.ToInt32(Math.Round(d1, 1, MidpointRounding.AwayFromZero));
                ProfilInProductionPerc = Convert.ToInt32(Math.Round(d2, 1, MidpointRounding.AwayFromZero));
                ProfilReadyPerc = Convert.ToInt32(Math.Round(d3, 1, MidpointRounding.AwayFromZero));

                if ((ProfilOnProductionPerc + ProfilInProductionPerc + ProfilReadyPerc) > 100)
                {
                    if (ProfilOnProductionPerc > ProfilInProductionPerc)
                        if (ProfilOnProductionPerc > ProfilReadyPerc)
                            ProfilOnProductionPerc--;
                        else
                            ProfilReadyPerc--;
                    else
                        if (ProfilInProductionPerc > ProfilReadyPerc)
                        ProfilInProductionPerc--;
                    else
                        ProfilReadyPerc--;
                }

                TPSOnProductionPerc = Convert.ToInt32(Math.Round(d4, 1, MidpointRounding.AwayFromZero));
                TPSInProductionPerc = Convert.ToInt32(Math.Round(d5, 1, MidpointRounding.AwayFromZero));
                TPSReadyPerc = Convert.ToInt32(Math.Round(d6, 1, MidpointRounding.AwayFromZero));

                if ((TPSOnProductionPerc + TPSInProductionPerc + TPSReadyPerc) > 100)
                {
                    if (TPSOnProductionPerc > TPSInProductionPerc)
                        if (TPSOnProductionPerc > TPSReadyPerc)
                            TPSOnProductionPerc--;
                        else
                            TPSReadyPerc--;
                    else
                        if (TPSInProductionPerc > TPSReadyPerc)
                        TPSInProductionPerc--;
                    else
                        TPSReadyPerc--;
                }

                string ProductionDate = EnterInProdDate(GroupType, MegaBatchID, 1);
                if (ProductionDate.Length > 0)
                    MegaBatchDT.Rows[i]["ProfilEntryDateTime"] = ProductionDate;

                ProductionDate = EnterInProdDate(GroupType, MegaBatchID, 2);
                if (ProductionDate.Length > 0)
                    MegaBatchDT.Rows[i]["TPSEntryDateTime"] = ProductionDate;

                if (ProfilOnProductionPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilOnProductionPerc"] = ProfilOnProductionPerc;
                if (ProfilInProductionPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilInProductionPerc"] = ProfilInProductionPerc;
                if (ProfilReadyPerc > 0)
                    MegaBatchDT.Rows[i]["ProfilReadyPerc"] = ProfilReadyPerc;
                if (ProfilReadyPerc == 100)
                {
                    MegaBatchDT.Rows[i]["ProfilReady"] = true;
                    MegaBatchDT.Rows[i]["ProfilPackingDate"] = ReadyDate(GroupType, MegaBatchID, 1);
                }
                else
                    MegaBatchDT.Rows[i]["ProfilReady"] = false;
                //if (ProfilReadyPerc == 0)
                //{
                //    MegaBatchDT.Rows[i]["ProfilReady"] = true;
                //}

                if (TPSOnProductionPerc > 0)
                    MegaBatchDT.Rows[i]["TPSOnProductionPerc"] = TPSOnProductionPerc;
                if (TPSInProductionPerc > 0)
                    MegaBatchDT.Rows[i]["TPSInProductionPerc"] = TPSInProductionPerc;
                if (TPSReadyPerc > 0)
                    MegaBatchDT.Rows[i]["TPSReadyPerc"] = TPSReadyPerc;
                if (TPSReadyPerc == 100)
                {
                    MegaBatchDT.Rows[i]["TPSReady"] = true;
                    MegaBatchDT.Rows[i]["TPSPackingDate"] = ReadyDate(GroupType, MegaBatchID, 2);
                }
                else
                    MegaBatchDT.Rows[i]["TPSReady"] = false;
                //if (TPSReadyPerc == 0)
                //{
                //    MegaBatchDT.Rows[i]["TPSReady"] = true;
                //}
            }
            MegaBatchBS.MoveFirst();
        }

        public void FilterSimpleFrontsOrders(int GroupType, int MegaBatchID, int FactoryID)
        {
            string BatchFactoryFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (GroupType == 0)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            if (FactoryID == 1)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = 1";
                FrontsFactoryFilter = " AND FrontsOrders.FactoryID = 1";
            }
            if (FactoryID == 2)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = 2";
                FrontsFactoryFilter = " AND FrontsOrders.FactoryID = 2";
            }
            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " AND FrontsOrders.FactoryID = -1";
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                " WHERE Width<> -1 AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails" +
                " WHERE BatchID IN (SELECT BatchID FROM Batch WHERE MegaBatchID = " + MegaBatchID + ")" + BatchFactoryFilter + ")" + FrontsFactoryFilter,
                ConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }
            GetSimpleFronts();
            SimpleFrontsCount(GroupType, MegaBatchID);
        }

        public void FilterCurvedFrontsOrders(int GroupType, int MegaBatchID, int FactoryID)
        {
            string BatchFactoryFilter = string.Empty;
            string FrontsFactoryFilter = string.Empty;
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (GroupType == 0)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            if (FactoryID == 1)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = 1";
                FrontsFactoryFilter = " AND FrontsOrders.FactoryID = 1";
            }
            if (FactoryID == 2)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = 2";
                FrontsFactoryFilter = " AND FrontsOrders.FactoryID = 2";
            }
            if (FactoryID == -1)
            {
                FrontsFactoryFilter = " AND FrontsOrders.FactoryID = -1";
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM FrontsOrders" +
                " WHERE Width=-1 AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails" +
                " WHERE BatchID IN (SELECT BatchID FROM Batch WHERE MegaBatchID = " + MegaBatchID + ")" + BatchFactoryFilter + ")" + FrontsFactoryFilter,
                ConnectionString))
            {
                FrontsOrdersDT.Clear();
                DA.Fill(FrontsOrdersDT);
            }
            GetCurvedFronts();
            CurvedFrontsCount(GroupType, MegaBatchID);
        }

        public void FilterDecorOrders(int GroupType, int MegaBatchID, int FactoryID)
        {
            string BatchFactoryFilter = string.Empty;
            string DecorFactoryFilter = string.Empty;
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (GroupType == 0)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            if (FactoryID == 1)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = 1";
                DecorFactoryFilter = " AND DecorOrders.FactoryID = 1";
            }
            if (FactoryID == 2)
            {
                BatchFactoryFilter = " AND BatchDetails.FactoryID = 2";
                DecorFactoryFilter = " AND DecorOrders.FactoryID = 2";
            }
            if (FactoryID == -1)
            {
                DecorFactoryFilter = " AND DecorOrders.FactoryID = -1";
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorOrders.ProductID, DecorOrders.DecorID, DecorOrders.ColorID,  DecorOrders.PatinaID, DecorOrders.FactoryID," +
                " DecorOrders.Height, DecorOrders.Length, DecorOrders.Width, DecorOrders.Count, DecorOrders.Cost, DecorOrders.DecorConfigID, " +
                " MeasureID, ClientID FROM DecorOrders" +
                " INNER JOIN MainOrders ON DecorOrders.MainOrderID = MainOrders.MainOrderID" +
                " INNER JOIN MegaOrders ON MainOrders.MegaOrderID = MegaOrders.MegaOrderID" +
                " INNER JOIN infiniu2_catalog.dbo.DecorConfig" +
                " ON DecorOrders.DecorConfigID=infiniu2_catalog.dbo.DecorConfig.DecorConfigID" +
                " WHERE DecorOrders.MainOrderID IN (SELECT MainOrderID FROM BatchDetails" +
                " WHERE BatchID IN (SELECT BatchID FROM Batch WHERE MegaBatchID = " + MegaBatchID + ")" + BatchFactoryFilter + ")" + DecorFactoryFilter,
                ConnectionString))
            {
                DecorOrdersDT.Clear();
                DA.Fill(DecorOrdersDT);
            }
            GetDecorProducts(GroupType, MegaBatchID);
        }

        private void GetCurvedFronts()
        {
            CurvedFrontsSummaryDT.Clear();
            DataTable Table = new DataTable();
            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }
            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width=-1");
                if (Rows.Count() != 0)
                {
                    DataRow NewRow = CurvedFrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Width"] = -1;
                    CurvedFrontsSummaryDT.Rows.Add(NewRow);
                }
            }
            Table.Dispose();
            CurvedFrontsSummaryDT.DefaultView.Sort = "Front";
            CurvedFrontsSummaryBS.MoveFirst();
        }

        private void GetSimpleFronts()
        {
            SimpleFrontsSummaryDT.Clear();
            DataTable Table = new DataTable();
            using (DataView DV = new DataView(FrontsOrdersDT))
            {
                Table = DV.ToTable(true, new string[] { "FrontID" });
            }
            for (int i = 0; i < Table.Rows.Count; i++)
            {
                DataRow[] Rows = FrontsOrdersDT.Select("FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND Width<>-1");
                if (Rows.Count() != 0)
                {
                    DataRow NewRow = SimpleFrontsSummaryDT.NewRow();
                    NewRow["Front"] = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    NewRow["FrontID"] = Convert.ToInt32(Table.Rows[i]["FrontID"]);
                    NewRow["Width"] = 0;
                    SimpleFrontsSummaryDT.Rows.Add(NewRow);
                }
            }
            Table.Dispose();
            SimpleFrontsSummaryDT.DefaultView.Sort = "Front";
            SimpleFrontsSummaryBS.MoveFirst();
        }

        private void GetDecorProducts(int GroupType, int MegaBatchID)
        {
            int AllCount = 0;
            int OnProdCount = 0;
            int InProdCount = 0;
            int ReadyCount = 0;

            decimal DecorProductCost = 0;
            decimal AllDecorProductCount = 0;
            decimal OnProdDecorProductCount = 0;
            decimal InProdDecorProductCount = 0;
            decimal ReadyDecorProductCount = 0;

            int decimals = 2;
            string Measure = string.Empty;
            string SelectCommand = string.Empty;
            DecorProductsSummaryDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(DecorConfigDT))
            {
                Table = DV.ToTable(true, new string[] { "ProductID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                for (int j = 1; j <= 2; j++)
                {
                    SelectCommand = "ProductID=" + Convert.ToInt32(Table.Rows[i]["ProductID"]) +
                        " AND MeasureID=" + Convert.ToInt32(Table.Rows[i]["MeasureID"]) + " AND FactoryID = " + j;

                    DataRow[] Rows = DecorOrdersDT.Select(SelectCommand);
                    if (Rows.Count() == 0)
                        continue;

                    foreach (DataRow row in Rows)
                    {
                        AllDecorProductCount = 0;
                        OnProdDecorProductCount = 0;
                        InProdDecorProductCount = 0;
                        ReadyDecorProductCount = 0;

                        int ProductID = Convert.ToInt32(row["ProductID"]);
                        int FactoryID = Convert.ToInt32(row["FactoryID"]);

                        if (FactoryID == 1)
                        {
                            AllCount = AllDecorInfo(GroupType, MegaBatchID, ProductID, 1);
                            ReadyCount = MarketProfilDecorInfo(GroupType, MegaBatchID, ProductID);
                            OnProdCount = ProfilOnProdDecorInfo(GroupType, MegaBatchID, ProductID);
                            InProdCount = AllCount - ReadyCount - OnProdCount;
                        }
                        else
                        {
                            AllCount = AllDecorInfo(GroupType, MegaBatchID, ProductID, 2);
                            ReadyCount = MarketTPSDecorInfo(GroupType, MegaBatchID, ProductID);
                            OnProdCount = TPSOnProdDecorInfo(GroupType, MegaBatchID, ProductID);
                            InProdCount = AllCount - ReadyCount - OnProdCount;
                        }

                        if (Convert.ToInt32(row["MeasureID"]) == 1)
                        {
                            AllDecorProductCount += AllCount;
                            OnProdDecorProductCount += OnProdCount;
                            ReadyDecorProductCount += ReadyCount;
                            InProdDecorProductCount += (AllCount - ReadyCount - OnProdCount);
                            Measure = "шт.";
                        }

                        if (Convert.ToInt32(row["MeasureID"]) == 3)
                        {
                            AllDecorProductCount += AllCount;
                            OnProdDecorProductCount += OnProdCount;
                            ReadyDecorProductCount += ReadyCount;
                            InProdDecorProductCount += (AllCount - ReadyCount - OnProdCount);
                            Measure = "шт.";
                        }

                        if (Convert.ToInt32(row["MeasureID"]) == 2)
                        {
                            //нет параметра "высота"
                            if (row["Height"].ToString() == "-1")
                            {
                                AllDecorProductCount += Convert.ToDecimal(row["Length"]) * AllCount / 1000;
                                OnProdDecorProductCount += Convert.ToDecimal(row["Length"]) * OnProdCount / 1000;
                                ReadyDecorProductCount += Convert.ToDecimal(row["Length"]) * ReadyCount / 1000;
                                InProdDecorProductCount += (AllCount - ReadyCount - OnProdCount);
                            }
                            else
                            {
                                AllDecorProductCount += Convert.ToDecimal(row["Height"]) * AllCount / 1000;
                                OnProdDecorProductCount += Convert.ToDecimal(row["Height"]) * OnProdCount / 1000;
                                ReadyDecorProductCount += Convert.ToDecimal(row["Height"]) * ReadyCount / 1000;
                                InProdDecorProductCount += (AllCount - ReadyCount - OnProdCount);
                            }

                            DecorProductCost += Convert.ToDecimal(row["Cost"]);
                            Measure = "м.п.";
                        }
                    }

                    InProdDecorProductCount = (AllDecorProductCount - ReadyDecorProductCount - OnProdDecorProductCount);
                    if (InProdDecorProductCount < 0)
                        InProdDecorProductCount = 0;
                    DataRow NewRow = DecorProductsSummaryDT.NewRow();
                    NewRow["ProductID"] = Convert.ToInt32(Table.Rows[i]["ProductID"]);
                    NewRow["MeasureID"] = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                    NewRow["DecorProduct"] = GetProductName(Convert.ToInt32(Table.Rows[i]["ProductID"]));
                    if (AllDecorProductCount < 3)
                        decimals = 1;
                    NewRow["AllCount"] = Decimal.Round(AllDecorProductCount, decimals, MidpointRounding.AwayFromZero);
                    NewRow["OnProdCount"] = Decimal.Round(OnProdDecorProductCount, decimals, MidpointRounding.AwayFromZero);
                    NewRow["InProdCount"] = Decimal.Round(InProdDecorProductCount, decimals, MidpointRounding.AwayFromZero);
                    NewRow["ReadyCount"] = Decimal.Round(ReadyDecorProductCount, decimals, MidpointRounding.AwayFromZero);
                    if (AllDecorProductCount == ReadyDecorProductCount)
                        NewRow["Ready"] = true;
                    else
                        NewRow["Ready"] = false;

                    NewRow["Measure"] = Measure;
                    DecorProductsSummaryDT.Rows.Add(NewRow);

                    Measure = string.Empty;
                    DecorProductCost = 0;
                    AllDecorProductCount = 0;

                }
            }
            DecorProductsSummaryDT.DefaultView.Sort = "DecorProduct";
            DecorProductsSummaryBS.MoveFirst();
        }

        private void SimpleFrontsCount(int GroupType, int MegaBatchID)
        {
            int AllCount = 0;
            int OnProdCount = 0;
            int InProdCount = 0;
            int ReadyCount = 0;

            decimal AllSquare = 0;
            decimal OnProdSquare = 0;
            decimal InProdSquare = 0;
            decimal ReadySquare = 0;

            for (int i = 0; i < SimpleFrontsSummaryDT.Rows.Count; i++)
            {
                int FrontID = Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["FrontID"]);
                AllSquare = 0;
                OnProdSquare = 0;
                InProdSquare = 0;
                ReadySquare = 0;

                AllCount = AllFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]), 1, ref AllSquare);
                if (AllCount > 0)
                {
                    ReadyCount = MarketProfilFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]), ref ReadySquare);
                    OnProdCount = ProfilOnProdFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]), ref OnProdSquare);
                    InProdCount = AllCount - ReadyCount - OnProdCount;
                }
                else
                {
                    AllCount = AllFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]), 2, ref AllSquare);
                    ReadyCount = MarketTPSFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]), ref ReadySquare);
                    OnProdCount = TPSOnProdFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]), ref OnProdSquare);
                    InProdCount = AllCount - ReadyCount - OnProdCount;
                }

                AllSquare = Decimal.Round(AllSquare, 2, MidpointRounding.AwayFromZero);
                OnProdSquare = Decimal.Round(OnProdSquare, 2, MidpointRounding.AwayFromZero);
                ReadySquare = Decimal.Round(ReadySquare, 2, MidpointRounding.AwayFromZero);
                InProdSquare = AllSquare - ReadySquare - OnProdSquare;
                InProdSquare = Decimal.Round(InProdSquare, 2, MidpointRounding.AwayFromZero);
                if (InProdSquare < 0)
                    InProdSquare = 0;

                SimpleFrontsSummaryDT.Rows[i]["AllCount"] = AllCount;
                SimpleFrontsSummaryDT.Rows[i]["OnProdCount"] = OnProdCount;
                SimpleFrontsSummaryDT.Rows[i]["InProdCount"] = InProdCount;
                SimpleFrontsSummaryDT.Rows[i]["ReadyCount"] = ReadyCount;
                if (Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]) != -1)
                {
                    SimpleFrontsSummaryDT.Rows[i]["AllSquare"] = AllSquare;
                    SimpleFrontsSummaryDT.Rows[i]["OnProdSquare"] = OnProdSquare;
                    SimpleFrontsSummaryDT.Rows[i]["InProdSquare"] = InProdSquare;
                    SimpleFrontsSummaryDT.Rows[i]["ReadySquare"] = ReadySquare;
                }

                if (AllCount == ReadyCount)
                    SimpleFrontsSummaryDT.Rows[i]["Ready"] = true;
                else
                    SimpleFrontsSummaryDT.Rows[i]["Ready"] = false;
            }
        }

        private void CurvedFrontsCount(int GroupType, int MegaBatchID)
        {
            int AllCount = 0;
            int OnProdCount = 0;
            int InProdCount = 0;
            int ReadyCount = 0;

            decimal AllSquare = 0;
            decimal OnProdSquare = 0;
            //decimal InProdSquare = 0;
            decimal ReadySquare = 0;

            for (int i = 0; i < CurvedFrontsSummaryDT.Rows.Count; i++)
            {
                AllCount = AllFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Width"]), 1, ref AllSquare);
                if (AllCount > 0)
                {
                    ReadyCount = MarketProfilFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Width"]), ref ReadySquare);
                    OnProdCount = ProfilOnProdFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Width"]), ref OnProdSquare);
                    InProdCount = AllCount - ReadyCount - OnProdCount;
                }
                else
                {
                    AllCount = AllFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Width"]), 2, ref AllSquare);
                    ReadyCount = MarketTPSFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Width"]), ref ReadySquare);
                    OnProdCount = TPSOnProdFrontsInfo(GroupType, MegaBatchID, Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["FrontID"]), Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Width"]), ref OnProdSquare);
                    InProdCount = AllCount - ReadyCount - OnProdCount;
                }

                CurvedFrontsSummaryDT.Rows[i]["AllCount"] = AllCount;
                CurvedFrontsSummaryDT.Rows[i]["OnProdCount"] = OnProdCount;
                CurvedFrontsSummaryDT.Rows[i]["InProdCount"] = InProdCount;
                CurvedFrontsSummaryDT.Rows[i]["ReadyCount"] = ReadyCount;

                if (AllCount == ReadyCount)
                    CurvedFrontsSummaryDT.Rows[i]["Ready"] = true;
                else
                    CurvedFrontsSummaryDT.Rows[i]["Ready"] = false;
            }
        }

        public void GetSimpleFrontsInfo(
            ref decimal AllSquare,
            ref decimal OnProdSquare,
            ref decimal InProdSquare,
            ref decimal ReadySquare,
            ref int AllCount,
            ref int OnProdCount,
            ref int InProdCount,
            ref int ReadyCount)
        {
            for (int i = 0; i < SimpleFrontsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["Width"]) != -1)
                {
                    if (SimpleFrontsSummaryDT.Rows[i]["AllSquare"] != DBNull.Value)
                        AllSquare += Convert.ToDecimal(SimpleFrontsSummaryDT.Rows[i]["AllSquare"]);
                    if (SimpleFrontsSummaryDT.Rows[i]["OnProdSquare"] != DBNull.Value)
                        OnProdSquare += Convert.ToDecimal(SimpleFrontsSummaryDT.Rows[i]["OnProdSquare"]);
                    if (SimpleFrontsSummaryDT.Rows[i]["InProdSquare"] != DBNull.Value)
                        InProdSquare += Convert.ToDecimal(SimpleFrontsSummaryDT.Rows[i]["InProdSquare"]);
                    if (SimpleFrontsSummaryDT.Rows[i]["ReadySquare"] != DBNull.Value)
                        ReadySquare += Convert.ToDecimal(SimpleFrontsSummaryDT.Rows[i]["ReadySquare"]);
                    if (SimpleFrontsSummaryDT.Rows[i]["AllCount"] != DBNull.Value)
                        AllCount += Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["AllCount"]);
                    if (SimpleFrontsSummaryDT.Rows[i]["OnProdCount"] != DBNull.Value)
                        OnProdCount += Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["OnProdCount"]);
                    if (SimpleFrontsSummaryDT.Rows[i]["InProdCount"] != DBNull.Value)
                        InProdCount += Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["InProdCount"]);
                    if (SimpleFrontsSummaryDT.Rows[i]["ReadyCount"] != DBNull.Value)
                        ReadyCount += Convert.ToInt32(SimpleFrontsSummaryDT.Rows[i]["ReadyCount"]);
                }
            }

            AllSquare = Decimal.Round(AllSquare, 2, MidpointRounding.AwayFromZero);
            OnProdSquare = Decimal.Round(OnProdSquare, 2, MidpointRounding.AwayFromZero);
            InProdSquare = Decimal.Round(InProdSquare, 2, MidpointRounding.AwayFromZero);
            ReadySquare = Decimal.Round(ReadySquare, 2, MidpointRounding.AwayFromZero);
        }

        public void GetCurvedFrontsInfo(
            ref int AllCurvedCount,
            ref int OnProdCurvedCount,
            ref int InProdCurvedCount,
            ref int ReadyCurvedCount)
        {
            for (int i = 0; i < CurvedFrontsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["Width"]) == -1)
                {
                    if (CurvedFrontsSummaryDT.Rows[i]["AllCount"] != DBNull.Value)
                        AllCurvedCount += Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["AllCount"]);
                    if (CurvedFrontsSummaryDT.Rows[i]["OnProdCount"] != DBNull.Value)
                        OnProdCurvedCount += Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["OnProdCount"]);
                    if (CurvedFrontsSummaryDT.Rows[i]["InProdCount"] != DBNull.Value)
                        InProdCurvedCount += Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["InProdCount"]);
                    if (CurvedFrontsSummaryDT.Rows[i]["ReadyCount"] != DBNull.Value)
                        ReadyCurvedCount += Convert.ToInt32(CurvedFrontsSummaryDT.Rows[i]["ReadyCount"]);
                }
            }
        }

        public void GetDecorInfo(
            ref decimal AllPogon,
            ref decimal OnProdPogon,
            ref decimal InProdPogon,
            ref decimal ReadyPogon,
            ref int AllCount,
            ref int OnProdCount,
            ref int InProdCount,
            ref int ReadyCount)
        {
            for (int i = 0; i < DecorProductsSummaryDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["MeasureID"]) != 2)
                {
                    AllCount += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["AllCount"]);
                    OnProdCount += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["OnProdCount"]);
                    InProdCount += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["InProdCount"]);
                    ReadyCount += Convert.ToInt32(DecorProductsSummaryDT.Rows[i]["ReadyCount"]);
                }
                else
                {
                    AllPogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["AllCount"]);
                    OnProdPogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["OnProdCount"]);
                    InProdPogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["InProdCount"]);
                    ReadyPogon += Convert.ToDecimal(DecorProductsSummaryDT.Rows[i]["ReadyCount"]);
                }
            }

            AllPogon = Decimal.Round(AllPogon, 2, MidpointRounding.AwayFromZero);
            OnProdPogon = Decimal.Round(OnProdPogon, 2, MidpointRounding.AwayFromZero);
            InProdPogon = Decimal.Round(InProdPogon, 2, MidpointRounding.AwayFromZero);
            ReadyPogon = Decimal.Round(ReadyPogon, 2, MidpointRounding.AwayFromZero);
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDT.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        private string GetProductName(int ProductID)
        {
            string ProductName = string.Empty;
            try
            {
                DataRow[] Rows = DecorProductsDT.Select("ProductID = " + ProductID);
                ProductName = Rows[0]["ProductName"].ToString();
            }
            catch
            {
                return string.Empty;
            }
            return ProductName;
        }

        public void ClearProductTables()
        {
            SimpleFrontsSummaryDT.Clear();
            CurvedFrontsSummaryDT.Clear();
            DecorProductsSummaryDT.Clear();
        }

        #region ОБЩЕЕ КОЛИЧЕСТВО

        private int AllFrontsInfo(int GroupType, int MegaBatchID, int FrontID, int Width, int FactoryID, ref decimal Square)
        {
            Square = 0;
            int AllCount = 0;

            string GroupTypeFilter = string.Empty;
            string FrontFilter = string.Empty;
            string FrontTypeFilter = string.Empty;
            string BatchFactoryFilter = string.Empty;
            string FactoryFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (FrontID != 0)
                FrontFilter = " AND FrontID = " + FrontID;
            if (Width != -1)
                FrontTypeFilter = " AND Width <> -1";
            if (Width == -1)
                FrontTypeFilter = " AND Width = -1";

            if (FactoryID != 0)
            {
                BatchFactoryFilter = " AND BFactoryID = " + FactoryID;
                FactoryFilter = " AND FFactoryID = " + FactoryID;
            }

            DataRow[] Rows = MarkAllFrontsDT.Select("MegaBatchID = " + MegaBatchID + FrontFilter + FrontTypeFilter + FactoryFilter + BatchFactoryFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
                Square += Convert.ToDecimal(Row["AllSquare"]);
            }

            return AllCount;
        }

        private int AllDecorInfo(int GroupType, int MegaBatchID, int ProductID, int FactoryID)
        {
            int AllCount = 0;

            string GroupTypeFilter = string.Empty;
            string ProductFilter = string.Empty;
            string BatchFactoryFilter = string.Empty;
            string FactoryFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (ProductID != 0)
                ProductFilter = " AND ProductID = " + ProductID;
            if (FactoryID != 0)
            {
                BatchFactoryFilter = " AND BFactoryID = " + FactoryID;
                FactoryFilter = " AND FFactoryID = " + FactoryID;
            }

            DataRow[] Rows = MarkAllDecorDT.Select("MegaBatchID = " + MegaBatchID + ProductFilter + FactoryFilter + BatchFactoryFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
            }

            return AllCount;
        }

        #endregion

        #region НА ПРОИЗВОДСТВЕ

        private int ProfilOnProdFrontsInfo(int GroupType, int MegaBatchID, int FrontID, int Width, ref decimal Square)
        {
            Square = 0;
            int AllCount = 0;
            string GroupTypeFilter = string.Empty;
            string FrontFilter = string.Empty;
            string FrontTypeFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (FrontID != 0)
                FrontFilter = " AND FrontID = " + FrontID;
            if (Width != -1)
                FrontTypeFilter = " AND Width <> -1";
            if (Width == -1)
                FrontTypeFilter = " AND Width = -1";

            DataRow[] Rows = MarkProfilOnProdFrontsDT.Select("MegaBatchID = " + MegaBatchID + FrontFilter + FrontTypeFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
                Square += Convert.ToDecimal(Row["AllSquare"]);
            }

            return AllCount;
        }

        private int TPSOnProdFrontsInfo(int GroupType, int MegaBatchID, int FrontID, int Width, ref decimal Square)
        {
            Square = 0;
            int AllCount = 0;
            string GroupTypeFilter = string.Empty;
            string FrontFilter = string.Empty;
            string FrontTypeFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (FrontID != 0)
                FrontFilter = " AND FrontID = " + FrontID;
            if (Width != -1)
                FrontTypeFilter = " AND Width <> -1";
            if (Width == -1)
                FrontTypeFilter = " AND Width = -1";

            DataRow[] Rows = MarkTPSOnProdFrontsDT.Select("MegaBatchID = " + MegaBatchID + FrontFilter + FrontTypeFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
                Square += Convert.ToDecimal(Row["AllSquare"]);
            }

            return AllCount;
        }

        private int ProfilOnProdDecorInfo(int GroupType, int MegaBatchID, int ProductID)
        {
            int AllCount = 0;
            string GroupTypeFilter = string.Empty;
            string ProductFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (ProductID != 0)
                ProductFilter = " AND ProductID = " + ProductID;

            DataRow[] Rows = MarkProfilOnProdDecorDT.Select("MegaBatchID = " + MegaBatchID + ProductFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
            }

            return AllCount;
        }

        private int TPSOnProdDecorInfo(int GroupType, int MegaBatchID, int ProductID)
        {
            int AllCount = 0;
            string GroupTypeFilter = string.Empty;
            string ProductFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (ProductID != 0)
                ProductFilter = " AND ProductID = " + ProductID;

            DataRow[] Rows = MarkTPSOnProdDecorDT.Select("MegaBatchID = " + MegaBatchID + ProductFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
            }

            return AllCount;
        }

        #endregion

        #region ГОТОВО

        private int MarketProfilFrontsInfo(int GroupType, int MegaBatchID, int FrontID, int Width, ref decimal Square)
        {
            Square = 0;
            int AllCount = 0;

            string GroupTypeFilter = string.Empty;
            string FrontFilter = string.Empty;
            string FrontTypeFilter = string.Empty;
            string StatusFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (FrontID != 0)
                FrontFilter = " AND FrontID = " + FrontID;
            if (Width != -1)
                FrontTypeFilter = " AND Width <> -1";
            if (Width == -1)
                FrontTypeFilter = " AND Width = -1";

            //if (Status == ProductionStatus.InProduction)
            //    StatusFilter = " AND PackageStatusID = 0";
            //if (Status == ProductionStatus.Ready)
            //    StatusFilter = " AND (PackageStatusID = 1 OR PackageStatusID = 2 OR PackageStatusID = 3)";

            DataRow[] Rows = MarkProfilReadyFrontsDT.Select("MegaBatchID = " + MegaBatchID + FrontFilter + FrontTypeFilter + StatusFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
                Square += Convert.ToDecimal(Row["AllSquare"]);
            }

            return AllCount;
        }

        private int MarketProfilDecorInfo(int GroupType, int MegaBatchID, int ProductID)
        {
            int AllCount = 0;

            string GroupTypeFilter = string.Empty;
            string ProductFilter = string.Empty;
            string StatusFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (ProductID != 0)
                ProductFilter = " AND ProductID = " + ProductID;

            //if (Status == ProductionStatus.InProduction)
            //    StatusFilter = " AND PackageStatusID = 0";
            //if (Status == ProductionStatus.Ready)
            //    StatusFilter = " AND (PackageStatusID = 1 OR PackageStatusID = 2 OR PackageStatusID = 3)";

            DataRow[] Rows = MarkProfilReadyDecorDT.Select("MegaBatchID = " + MegaBatchID + ProductFilter + StatusFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
            }

            return AllCount;
        }

        private int MarketTPSFrontsInfo(int GroupType, int MegaBatchID, int FrontID, int Width, ref decimal Square)
        {
            Square = 0;
            int AllCount = 0;

            string GroupTypeFilter = string.Empty;
            string FrontFilter = string.Empty;
            string FrontTypeFilter = string.Empty;
            string StatusFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (FrontID != 0)
                FrontFilter = " AND FrontID = " + FrontID;
            if (Width != -1)
                FrontTypeFilter = " AND Width <> -1";
            if (Width == -1)
                FrontTypeFilter = " AND Width = -1";

            DataRow[] Rows = MarkTPSReadyFrontsDT.Select("MegaBatchID = " + MegaBatchID + FrontFilter + FrontTypeFilter + StatusFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
                Square += Convert.ToDecimal(Row["AllSquare"]);
            }

            return AllCount;
        }

        private int MarketTPSDecorInfo(int GroupType, int MegaBatchID, int ProductID)
        {
            int AllCount = 0;

            string GroupTypeFilter = string.Empty;
            string ProductFilter = string.Empty;
            string StatusFilter = string.Empty;

            if (GroupType != -1)
                GroupTypeFilter = " AND GroupType = " + GroupType;
            if (ProductID != 0)
                ProductFilter = " AND ProductID = " + ProductID;

            DataRow[] Rows = MarkTPSReadyDecorDT.Select("MegaBatchID = " + MegaBatchID + ProductFilter + StatusFilter + GroupTypeFilter);
            foreach (DataRow Row in Rows)
            {
                AllCount += Convert.ToInt32(Row["AllCount"]);
            }

            return AllCount;
        }

        #endregion

        #region участки ТПС
        public void SectorsInfo(int GroupType, int MegaBatchID, ref decimal FilenkaPerc, ref decimal TrimmingPerc, ref decimal AssemblyPerc, ref decimal DeyingPerc)
        {
            DataTable DT = new DataTable();
            if (GroupType == 0)
            {
                string SelectCommand = @"SELECT WorkAssignmentID, Square, (SELECT SUM(Square) AS Expr1 FROM infiniu2_marketingorders.dbo.WorkAssignments
                WHERE WorkAssignmentID IN (SELECT TPSWorkAssignmentID FROM infiniu2_zovorders.dbo.Batch
                WHERE MegaBatchID = " + MegaBatchID + @")) AS AllSquare, FilenkaDateTime, TrimmingDateTime, AssemblyDateTime, DeyingDateTime FROM infiniu2_marketingorders.dbo.WorkAssignments
                WHERE WorkAssignmentID IN (SELECT TPSWorkAssignmentID FROM infiniu2_zovorders.dbo.Batch
                WHERE MegaBatchID = " + MegaBatchID + ")";
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.ZOVOrdersConnectionString))
                {
                    if (DA.Fill(DT) > 0)
                    {
                        decimal Square1 = 0;
                        decimal Square2 = 0;
                        decimal Square3 = 0;
                        decimal Square4 = 0;
                        for (int i = 0; i < DT.Rows.Count; i++)
                        {
                            if (DT.Rows[i]["FilenkaDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square1 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                            if (DT.Rows[i]["TrimmingDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square2 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                            if (DT.Rows[i]["AssemblyDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square3 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                            if (DT.Rows[i]["DeyingDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square4 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                        }
                        decimal AllSquare = -1;
                        if (DT.Rows[0]["AllSquare"] != DBNull.Value)
                            AllSquare = Convert.ToDecimal(DT.Rows[0]["AllSquare"]);
                        FilenkaPerc = Square1 / AllSquare;
                        TrimmingPerc = Square2 / AllSquare;
                        AssemblyPerc = Square3 / AllSquare;
                        DeyingPerc = Square4 / AllSquare;
                    }
                }
            }
            if (GroupType == 1)
            {
                string SelectCommand = @"SELECT WorkAssignmentID, Square, (SELECT SUM(Square) AS Expr1 FROM WorkAssignments
                WHERE WorkAssignmentID IN (SELECT TPSWorkAssignmentID FROM Batch
                WHERE MegaBatchID = " + MegaBatchID + @")) AS AllSquare, FilenkaDateTime, TrimmingDateTime, AssemblyDateTime, DeyingDateTime FROM WorkAssignments
                WHERE WorkAssignmentID IN (SELECT TPSWorkAssignmentID FROM Batch
                WHERE MegaBatchID = " + MegaBatchID + ")";
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.MarketingOrdersConnectionString))
                {
                    if (DA.Fill(DT) > 0)
                    {
                        decimal Square1 = 0;
                        decimal Square2 = 0;
                        decimal Square3 = 0;
                        decimal Square4 = 0;
                        for (int i = 0; i < DT.Rows.Count; i++)
                        {
                            if (DT.Rows[i]["FilenkaDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square1 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                            if (DT.Rows[i]["TrimmingDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square2 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                            if (DT.Rows[i]["AssemblyDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square3 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                            if (DT.Rows[i]["DeyingDateTime"] != DBNull.Value && DT.Rows[i]["Square"] != DBNull.Value)
                                Square4 += Convert.ToDecimal(DT.Rows[i]["Square"]);
                        }
                        decimal AllSquare = -1;
                        if (DT.Rows[0]["AllSquare"] != DBNull.Value)
                            AllSquare = Convert.ToDecimal(DT.Rows[0]["AllSquare"]);
                        FilenkaPerc = Square1 / AllSquare;
                        TrimmingPerc = Square2 / AllSquare;
                        AssemblyPerc = Square3 / AllSquare;
                        DeyingPerc = Square4 / AllSquare;
                    }
                }
            }
        }

        #endregion

        private string EnterInProdDate(int GroupType, int MegaBatchID, int FactoryID)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (GroupType == 0)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            string ProductionDate = string.Empty;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MIN(ProfilProductionDate), MIN(TPSProductionDate) FROM MainOrders" +
                " WHERE MainOrderID IN (SELECT MainOrderID FROM BatchDetails" +
                " WHERE BatchID IN (SELECT BatchID FROM Batch" +
                " WHERE MegaBatchID = " + MegaBatchID + "))",
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (FactoryID == 1)
                    {
                        if (DT.Rows.Count > 0 && DT.Rows[0]["Column1"] != DBNull.Value)
                            ProductionDate = Convert.ToDateTime(DT.Rows[0]["Column1"]).ToString("dd.MM.yyyy HH:mm");
                    }
                    if (FactoryID == 2)
                    {
                        if (DT.Rows.Count > 0 && DT.Rows[0]["Column2"] != DBNull.Value)
                            ProductionDate = Convert.ToDateTime(DT.Rows[0]["Column2"]).ToString("dd.MM.yyyy HH:mm");
                    }
                }
            }
            return ProductionDate;
        }
        private string ReadyDate(int GroupType, int MegaBatchID, int FactoryID)
        {
            string ConnectionString = ConnectionStrings.MarketingOrdersConnectionString;
            if (GroupType == 0)
                ConnectionString = ConnectionStrings.ZOVOrdersConnectionString;

            string PackingDate = string.Empty;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MAX(PackingDateTime) AS PackingDate FROM Packages" +
                " WHERE FactoryID = " + FactoryID + " AND MainOrderID IN (SELECT MainOrderID FROM BatchDetails" +
                " WHERE BatchID IN (SELECT BatchID FROM Batch" +
                " WHERE MegaBatchID = " + MegaBatchID + "))",
                ConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0]["PackingDate"] != DBNull.Value)
                    {
                        PackingDate = Convert.ToDateTime(DT.Rows[0]["PackingDate"]).ToString("dd.MM.yyyy HH:mm");
                    }
                }
            }
            return PackingDate;
        }
    }


    public class StatisticsReportByClient : IAllFrontParameterName
    {
        DataTable ClientsDataTable = null;
        DataTable ZOVClientsDataTable = null;

        DataTable FrontsResultDataTable = null;
        DataTable[] DecorResultDataTable = null;

        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;

        Modules.ZOV.DecorCatalogOrder DecorCatalog = null;

        public StatisticsReportByClient(ref Modules.ZOV.DecorCatalogOrder tDecorCatalog)
        {
            DecorCatalog = tDecorCatalog;

            Create();


            ClientsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT Clients.*, infiniu2_catalog.dbo.Countries.Name AS CountryName, ClientsManagers.ShortName FROM Clients INNER JOIN
                         infiniu2_catalog.dbo.Countries ON dbo.Clients.CountryID = infiniu2_catalog.dbo.Countries.CountryID INNER JOIN
                         ClientsManagers ON dbo.Clients.ManagerID = ClientsManagers.ManagerID",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientsDataTable);
            }

            ZOVClientsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT Clients.*, ClientsGroups.ClientGroupName, Managers.Name FROM Clients INNER JOIN
                         dbo.ClientsGroups ON dbo.Clients.ClientGroupID = dbo.ClientsGroups.ClientGroupID INNER JOIN
                         dbo.Managers ON dbo.Clients.ManagerID = dbo.Managers.ManagerID",
                ConnectionStrings.ZOVReferenceConnectionString))
            {
                DA.Fill(ZOVClientsDataTable);
            }

            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            GetColorsDT();
            SelectCommand = @"SELECT * FROM Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            SelectCommand = @"SELECT * FROM InsetTypes";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            SelectCommand = @"SELECT * FROM InsetColors";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
            }
            CreateFrontsDataTable();
            CreateDecorDataTable();
        }

        private void GetColorsDT()
        {
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Create()
        {
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();
            FrontsResultDataTable = new DataTable();
            DecorResultDataTable = new DataTable[DecorCatalog.DecorProductsCount];
        }

        private void CreateFrontsDataTable()
        {
            FrontsResultDataTable = new DataTable();

            //FrontsResultDataTable.Columns.Add(new DataColumn(("FrontID"), System.Type.GetType("System.Int32")));
            //FrontsResultDataTable.Columns.Add(new DataColumn(("FrontTypeID"), System.Type.GetType("System.Int32")));
            //FrontsResultDataTable.Columns.Add(new DataColumn(("ColorID"), System.Type.GetType("System.Int32")));
            //FrontsResultDataTable.Columns.Add(new DataColumn(("InsetTypeID"), System.Type.GetType("System.Int32")));
            //FrontsResultDataTable.Columns.Add(new DataColumn(("InsetColorID"), System.Type.GetType("System.Int32")));
            //FrontsResultDataTable.Columns.Add(new DataColumn(("ClientID"), System.Type.GetType("System.Int32")));

            FrontsResultDataTable.Columns.Add(new DataColumn(("ClientGroupName"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Client"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("DocNumber"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("DispatchDateTime"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("FrameColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("TechnoColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Patina"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("InsetType"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("InsetColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("TechnoInsetType"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("TechnoInsetColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("IsSample"), System.Type.GetType("System.Int32")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("AvgPrice"), System.Type.GetType("System.Decimal")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("SumCost"), System.Type.GetType("System.Decimal")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("ManagerName"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("CountryName"), System.Type.GetType("System.String")));
        }

        private void CreateDecorDataTable()
        {
            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                DecorResultDataTable[i] = new DataTable();

                DecorResultDataTable[i].Columns.Add(new DataColumn(("ClientGroupName"), System.Type.GetType("System.String")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("Client"), System.Type.GetType("System.String")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("DocNumber"), System.Type.GetType("System.String")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("DispatchDateTime"), System.Type.GetType("System.String")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("ZOVClientName"), System.Type.GetType("System.String")));
                DecorResultDataTable[i].Columns.Add("Product", Type.GetType("System.String"));
                DecorResultDataTable[i].Columns.Add("Color", Type.GetType("System.String"));
                DecorResultDataTable[i].Columns.Add("Height", Type.GetType("System.Int32"));
                DecorResultDataTable[i].Columns.Add("Width", Type.GetType("System.Int32"));
                DecorResultDataTable[i].Columns.Add("Count", Type.GetType("System.Int32"));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("IsSample"), System.Type.GetType("System.Int32")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("AvgPrice"), System.Type.GetType("System.Decimal")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("SumCost"), System.Type.GetType("System.Decimal")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("ManagerName"), System.Type.GetType("System.String")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("CountryName"), System.Type.GetType("System.String")));
            }
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            else
                FrontName = string.Empty;
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }

        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["ColorName"].ToString();
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
            if (Rows.Count() > 0)
                PatinaName = Rows[0]["PatinaName"].ToString();
            return PatinaName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
            if (Rows.Count() > 0)
                InsetType = Rows[0]["InsetTypeName"].ToString();
            return InsetType;
        }

        public string GetInsetColorName(int InsetColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + InsetColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["InsetColorName"].ToString();
            return ColorName;
        }

        private string GetClientName(int ClientID)
        {
            DataRow[] Rows = ClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["ClientName"].ToString();
            else
                return string.Empty;
        }

        private string GetCountryName(int ClientID)
        {
            DataRow[] Rows = ClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["CountryName"].ToString();
            else
                return string.Empty;
        }

        private string GetManagerName(int ClientID)
        {
            DataRow[] Rows = ClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["ShortName"].ToString();
            else
                return string.Empty;
        }

        private string GetZOVClientName(int ClientID)
        {
            DataRow[] Rows = ZOVClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["ClientName"].ToString();
            else
                return string.Empty;
        }

        private string GetZOVClientGroupName(int ClientID)
        {
            DataRow[] Rows = ZOVClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["ClientGroupName"].ToString();
            else
                return string.Empty;
        }

        private string GetZOVManagerName(int ClientID)
        {
            DataRow[] Rows = ZOVClientsDataTable.Select("ClientID = " + ClientID);
            if (Rows.Count() > 0)
                return Rows[0]["Name"].ToString();
            else
                return string.Empty;
        }

        public DateTime GetCurrentDate
        {
            get
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.CatalogConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        return Convert.ToDateTime(DT.Rows[0][0]);
                    }
                }
            }
        }

        private void FillFronts(DataTable FrontsOrdersDataTable, bool ZOV)
        {
            FrontsResultDataTable.Clear();

            if (FrontsOrdersDataTable.Rows.Count < 1)
                return;

            if (!ZOV)
                FillMFronts(FrontsOrdersDataTable);
            if (ZOV)
                FillZFronts(FrontsOrdersDataTable);

            DataView DV1 = new DataView(FrontsResultDataTable)
            {
                Sort = "Front, FrameColor, TechnoColor, Patina, InsetType, InsetColor, TechnoInsetType, TechnoInsetColor, Height, Width, Count"
            };
            FrontsResultDataTable = DV1.ToTable();
            DV1.Dispose();
        }

        private void FillMFronts(DataTable FrontsOrdersDataTable)
        {
            if (FrontsOrdersDataTable.Rows.Count < 1)
                return;

            string Front = string.Empty;
            string FrameColor = string.Empty;
            string TechnoColor = string.Empty;
            string Patina = string.Empty;
            string InsetType = string.Empty;
            string InsetColor = string.Empty;
            string TechnoInsetType = string.Empty;
            string TechnoInsetColor = string.Empty;

            string ManagerName = "Менеджер";
            string ClientName = "Клиент";
            string ZOVClientName = string.Empty;
            string CountryName = "Страна";

            string QueryString = string.Empty;

            decimal FrontCost = 0;
            decimal AvgPrice = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            DataTable Table = new DataTable();
            for (int i = 0; i < FrontsOrdersDataTable.Rows.Count; i++)
            {
                if (FrontsOrdersDataTable.Rows[i]["ZOVClientID"] == DBNull.Value)
                    FrontsOrdersDataTable.Rows[i]["ZOVClientID"] = -1;
            }
            //using (DataView DV = new DataView(FrontsOrdersDataTable, string.Empty, string.Empty, DataViewRowState.CurrentRows))
            //{
            //    Table = DV.ToTable(true, new string[] { "FrontID",
            //        "ColorID", "TechnoColorID", "PatinaID","InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width", "ClientID"});
            //}
            //Table.Clear();
            using (DataView DV = new DataView(FrontsOrdersDataTable, string.Empty, string.Empty, DataViewRowState.CurrentRows))
            {
                Table = DV.ToTable(true, new string[] { "FrontID",
                    "ColorID", "TechnoColorID", "PatinaID","InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width", "IsSample", "ClientID", "ZOVClientID"});
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                QueryString = "FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height = '" + Table.Rows[i]["Height"].ToString() + "'" +
                    " AND Width = '" + Table.Rows[i]["Width"].ToString() + "'" +
                    " AND IsSample=" + Convert.ToInt32(Table.Rows[i]["IsSample"]) +
                    " AND ClientID=" + Convert.ToInt32(Table.Rows[i]["ClientID"]) +
                    " AND ZOVClientID=" + Convert.ToInt32(Table.Rows[i]["ZOVClientID"]);

                DataRow[] Rows = FrontsOrdersDataTable.Select(QueryString);
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }
                    if (Convert.ToInt32(Rows[0]["MeasureID"]) == 1)
                    {
                        if (FrontSquare != 0)
                            AvgPrice = FrontCost / FrontSquare;
                    }
                    if (Convert.ToInt32(Rows[0]["MeasureID"]) == 3)
                    {
                        if (FrontCount != 0)
                            AvgPrice = FrontCost / FrontCount;
                    }
                    Front = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    FrameColor = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    TechnoColor = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                    Patina = GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    InsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    InsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    TechnoInsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                    TechnoInsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));

                    ManagerName = GetManagerName(Convert.ToInt32(Table.Rows[i]["ClientID"]));
                    CountryName = GetCountryName(Convert.ToInt32(Table.Rows[i]["ClientID"]));
                    ClientName = GetClientName(Convert.ToInt32(Table.Rows[i]["ClientID"]));

                    ZOVClientName = string.Empty;
                    if (Convert.ToInt32(Table.Rows[i]["ClientID"]) == 145)
                    {
                        if (Convert.ToInt32(Table.Rows[i]["ZOVClientID"]) == -1)
                            ZOVClientName = "Маркетинг.Заказы";
                        else
                            ZOVClientName = GetZOVClientName(Convert.ToInt32(Table.Rows[i]["ZOVClientID"]));
                    }
                    //if (FrontType == "Прямой")
                    //    FrontType = string.Empty;

                    DataRow NewRow = FrontsResultDataTable.NewRow();
                    NewRow["Front"] = Front;
                    NewRow["Patina"] = Patina;
                    NewRow["FrameColor"] = FrameColor;
                    NewRow["TechnoColor"] = TechnoColor;
                    NewRow["InsetType"] = InsetType;
                    NewRow["InsetColor"] = InsetColor;
                    NewRow["TechnoInsetType"] = TechnoInsetType;
                    NewRow["TechnoInsetColor"] = TechnoInsetColor;
                    NewRow["IsSample"] = Convert.ToInt32(Table.Rows[i]["IsSample"]);
                    NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 3, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["ManagerName"] = ManagerName;
                    NewRow["CountryName"] = CountryName;
                    NewRow["Client"] = ClientName;
                    NewRow["ZOVClientName"] = ZOVClientName;
                    NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                    NewRow["SumCost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                    FrontsResultDataTable.Rows.Add(NewRow);

                    ClientName = string.Empty;
                    AvgPrice = 0;
                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
            }
        }

        private void FillZFronts(DataTable FrontsOrdersDataTable)
        {
            if (FrontsOrdersDataTable.Rows.Count < 1)
                return;

            string Front = string.Empty;
            string FrameColor = string.Empty;
            string TechnoColor = string.Empty;
            string Patina = string.Empty;
            string InsetType = string.Empty;
            string InsetColor = string.Empty;
            string TechnoInsetType = string.Empty;
            string TechnoInsetColor = string.Empty;

            string ManagerName = "Менеджер ЗОВ";
            string ClientName = "Клиент ЗОВ";
            string ClientGroupName = "Группа ЗОВ";

            string QueryString = string.Empty;

            decimal FrontCost = 0;
            decimal AvgPrice = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            DataTable Table = new DataTable();

            DataColumnCollection columns = FrontsOrdersDataTable.Columns;
            if (columns.Contains("DispatchDateTime"))
            {
                using (DataView DV = new DataView(FrontsOrdersDataTable, string.Empty, string.Empty, DataViewRowState.CurrentRows))
                {
                    Table = DV.ToTable(true, new string[] { "FrontID",
                    "ColorID", "TechnoColorID", "PatinaID","InsetTypeID", "InsetColorID", "TechnoInsetTypeID",
                        "TechnoInsetColorID", "Height", "Width", "IsSample", "ZOVClientID", "DocNumber", "DispatchDateTime"});
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    QueryString = "FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                        " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                        " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                        " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                        " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                        " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                        " AND DocNumber = '" + Table.Rows[i]["DocNumber"].ToString() + "'" +
                        " AND DispatchDateTime = '" + Table.Rows[i]["DispatchDateTime"].ToString() + "'" +
                        " AND Height = '" + Table.Rows[i]["Height"].ToString() + "'" +
                        " AND Width = '" + Table.Rows[i]["Width"].ToString() + "' AND ZOVClientID=" + Convert.ToInt32(Table.Rows[i]["ZOVClientID"]) +
                        " AND IsSample=" + Convert.ToInt32(Table.Rows[i]["IsSample"]);

                    DataRow[] Rows = FrontsOrdersDataTable.Select(QueryString);
                    if (Rows.Count() != 0)
                    {
                        foreach (DataRow row in Rows)
                        {
                            FrontCost += Convert.ToDecimal(row["Cost"]);
                            FrontSquare += Convert.ToDecimal(row["Square"]);
                            FrontCount += Convert.ToInt32(row["Count"]);
                        }

                        FrontCost = FrontCost * 100 / 120;
                        if (Convert.ToInt32(Rows[0]["MeasureID"]) == 1)
                        {
                            if (FrontSquare != 0)
                                AvgPrice = FrontCost / FrontSquare;
                        }
                        if (Convert.ToInt32(Rows[0]["MeasureID"]) == 3)
                        {
                            if (FrontCount != 0)
                                AvgPrice = FrontCost / FrontCount;
                        }
                        Front = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                        FrameColor = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                        TechnoColor = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                        Patina = GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                        InsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                        InsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                        TechnoInsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                        TechnoInsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));


                        ManagerName = GetZOVManagerName(Convert.ToInt32(Table.Rows[i]["ZOVClientID"]));
                        ClientName = GetZOVClientName(Convert.ToInt32(Table.Rows[i]["ZOVClientID"]));
                        ClientGroupName = GetZOVClientGroupName(Convert.ToInt32(Table.Rows[i]["ZOVClientID"]));
                        //if (FrontType == "Прямой")
                        //    FrontType = string.Empty;

                        DataRow NewRow = FrontsResultDataTable.NewRow();
                        NewRow["Front"] = Front;
                        NewRow["Patina"] = Patina;
                        NewRow["FrameColor"] = FrameColor;
                        NewRow["TechnoColor"] = TechnoColor;
                        NewRow["InsetType"] = InsetType;
                        NewRow["InsetColor"] = InsetColor;
                        NewRow["TechnoInsetType"] = TechnoInsetType;
                        NewRow["TechnoInsetColor"] = TechnoInsetColor;
                        NewRow["IsSample"] = Convert.ToInt32(Table.Rows[i]["IsSample"]);
                        NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                        NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                        NewRow["Square"] = Decimal.Round(FrontSquare, 3, MidpointRounding.AwayFromZero);
                        NewRow["Count"] = FrontCount;
                        NewRow["ManagerName"] = ManagerName;
                        NewRow["Client"] = ClientName;
                        NewRow["ClientGroupName"] = ClientGroupName;
                        NewRow["DocNumber"] = Table.Rows[i]["DocNumber"].ToString();
                        NewRow["DispatchDateTime"] = Table.Rows[i]["DispatchDateTime"].ToString();
                        NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                        NewRow["SumCost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                        FrontsResultDataTable.Rows.Add(NewRow);

                        ClientName = string.Empty;
                        AvgPrice = 0;
                        FrontCost = 0;
                        FrontSquare = 0;
                        FrontCount = 0;
                    }
                }
            }
            else
            {
                using (DataView DV = new DataView(FrontsOrdersDataTable, string.Empty, string.Empty, DataViewRowState.CurrentRows))
                {
                    Table = DV.ToTable(true, new string[] { "FrontID",
                    "ColorID", "TechnoColorID", "PatinaID","InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width", "ZOVClientID", "DocNumber"});
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    QueryString = "FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                        " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                        " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                        " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                        " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                        " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                        " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                        " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                        " AND DocNumber = '" + Table.Rows[i]["DocNumber"].ToString() + "'" +
                        " AND Height = '" + Table.Rows[i]["Height"].ToString() + "'" +
                        " AND Width = '" + Table.Rows[i]["Width"].ToString() + "' AND ZOVClientID=" + Convert.ToInt32(Table.Rows[i]["ZOVClientID"]);

                    DataRow[] Rows = FrontsOrdersDataTable.Select(QueryString);
                    if (Rows.Count() != 0)
                    {
                        foreach (DataRow row in Rows)
                        {
                            FrontCost += Convert.ToDecimal(row["Cost"]);
                            FrontSquare += Convert.ToDecimal(row["Square"]);
                            FrontCount += Convert.ToInt32(row["Count"]);
                        }

                        FrontCost = FrontCost * 100 / 120;
                        if (Convert.ToInt32(Rows[0]["MeasureID"]) == 1)
                        {
                            if (FrontSquare != 0)
                                AvgPrice = FrontCost / FrontSquare;
                        }
                        if (Convert.ToInt32(Rows[0]["MeasureID"]) == 3)
                        {
                            if (FrontCount != 0)
                                AvgPrice = FrontCost / FrontCount;
                        }
                        Front = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                        FrameColor = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                        TechnoColor = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                        Patina = GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                        InsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                        InsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                        TechnoInsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                        TechnoInsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));


                        ManagerName = GetZOVManagerName(Convert.ToInt32(Table.Rows[i]["ZOVClientID"]));
                        ClientName = GetZOVClientName(Convert.ToInt32(Table.Rows[i]["ZOVClientID"]));
                        ClientGroupName = GetZOVClientGroupName(Convert.ToInt32(Table.Rows[i]["ZOVClientID"]));
                        //if (FrontType == "Прямой")
                        //    FrontType = string.Empty;

                        DataRow NewRow = FrontsResultDataTable.NewRow();
                        NewRow["Front"] = Front;
                        NewRow["Patina"] = Patina;
                        NewRow["FrameColor"] = FrameColor;
                        NewRow["TechnoColor"] = TechnoColor;
                        NewRow["InsetType"] = InsetType;
                        NewRow["InsetColor"] = InsetColor;
                        NewRow["TechnoInsetType"] = TechnoInsetType;
                        NewRow["TechnoInsetColor"] = TechnoInsetColor;
                        NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                        NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                        NewRow["Square"] = Decimal.Round(FrontSquare, 3, MidpointRounding.AwayFromZero);
                        NewRow["Count"] = FrontCount;
                        NewRow["ManagerName"] = ManagerName;
                        NewRow["Client"] = ClientName;
                        NewRow["ClientGroupName"] = ClientGroupName;
                        NewRow["DocNumber"] = Table.Rows[i]["DocNumber"].ToString();
                        NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                        NewRow["SumCost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                        FrontsResultDataTable.Rows.Add(NewRow);

                        ClientName = string.Empty;
                        AvgPrice = 0;
                        FrontCost = 0;
                        FrontSquare = 0;
                        FrontCount = 0;
                    }
                }
            }
        }

        private void FillDecor(DataTable DecorOrdersDataTable, bool ZOV)
        {
            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                DecorResultDataTable[i].Clear();
                DecorResultDataTable[i].AcceptChanges();
            }

            if (DecorOrdersDataTable.Rows.Count < 1)
                return;

            if (!ZOV)
                FillMDecor(DecorOrdersDataTable);
            if (ZOV)
                FillZDecor(DecorOrdersDataTable);

            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                DataView DV1 = new DataView(DecorResultDataTable[i])
                {
                    Sort = "Product, Color, Height, Width, Client, Count"
                };
                DecorResultDataTable[i] = DV1.ToTable();
                DV1.Dispose();
            }
        }

        private void FillMDecor(DataTable DecorOrdersDataTable)
        {
            if (DecorOrdersDataTable.Rows.Count < 1)
                return;

            string QueryString = string.Empty;
            string Product = string.Empty;
            string Decor = string.Empty;
            string Color = string.Empty;

            int Height = 0;
            int Width = 0;
            int Count = 0;

            string ManagerName = "Менеджер";
            string ClientName = "Клиент";
            string CountryName = "Страна";
            string ZOVClientName = string.Empty;

            decimal DecorCost = 0;
            decimal SumCost = 0;
            decimal SumCount = 0;
            decimal AvgPrice = 0;

            DataTable TempDecorProductsDT = new DataTable();
            DataTable Table = new DataTable();

            DataView DV3 = new DataView(DecorCatalog.DecorProductsDataTable)
            {
                Sort = "ProductName"
            };
            TempDecorProductsDT = DV3.ToTable();
            DV3.Dispose();

            for (int i = 0; i < DecorOrdersDataTable.Rows.Count; i++)
            {
                if (DecorOrdersDataTable.Rows[i]["ZOVClientID"] == DBNull.Value)
                    DecorOrdersDataTable.Rows[i]["ZOVClientID"] = -1;
            }

            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                using (DataView DV = new DataView(DecorOrdersDataTable,
                    "ProductID = " + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]),
                    string.Empty, DataViewRowState.CurrentRows))
                {
                    Table = DV.ToTable(true, new string[] { "DecorID", "ColorID", "MeasureID", "Length", "Height", "Width", "IsSample", "ClientID", "ZOVClientID" });
                }

                for (int j = 0; j < Table.Rows.Count; j++)
                {
                    QueryString = "ProductID=" + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]) +
                        " AND DecorID=" + Convert.ToInt32(Table.Rows[j]["DecorID"]) +
                        " AND ColorID=" + Convert.ToInt32(Table.Rows[j]["ColorID"]) +
                        " AND MeasureID=" + Convert.ToInt32(Table.Rows[j]["MeasureID"]) +
                        " AND Length=" + Convert.ToInt32(Table.Rows[j]["Length"]) +
                        " AND Height=" + Convert.ToInt32(Table.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(Table.Rows[j]["Width"]) +
                        " AND IsSample=" + Convert.ToInt32(Table.Rows[j]["IsSample"]) +
                        " AND ClientID=" + Convert.ToInt32(Table.Rows[j]["ClientID"]) +
                        " AND ZOVClientID = " + Convert.ToInt32(Table.Rows[j]["ZOVClientID"]);

                    DataRow[] Rows = DecorOrdersDataTable.Select(QueryString);

                    if (Rows.Count() == 0)
                        continue;

                    foreach (DataRow Row in Rows)
                    {
                        SumCount = 0;
                        SumCost = 0;

                        foreach (DataRow row in Rows)
                        {
                            if (Convert.ToInt32(row["MeasureID"]) == 1)
                            {
                                SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Width"]) * Convert.ToInt32(row["Count"]) / 1000000;
                            }

                            if (Convert.ToInt32(row["MeasureID"]) == 3)
                            {
                                SumCount += Convert.ToInt32(row["Count"]);
                            }

                            if (Convert.ToInt32(row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (row["Height"].ToString() == "-1")
                                    SumCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                                else
                                    SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                            }
                            SumCost += Convert.ToDecimal(row["Cost"]);
                        }

                        Product = TempDecorProductsDT.Rows[i]["ProductName"].ToString() + " " +
                            DecorCatalog.GetItemName(Convert.ToInt32(Row["DecorID"]));
                        Count = Convert.ToInt32(Row["Count"]);
                        DecorCost = Convert.ToDecimal(Row["Cost"]);

                        if (SumCount != 0)
                            AvgPrice = SumCost / SumCount;

                        QueryString = "Product = '" + Product + "'";

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                        {
                            Color = GetColorName(Convert.ToInt32(Row["ColorID"]));
                            if (Convert.ToInt32(Row["PatinaID"]) != -1)
                                Color += " " + GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                            QueryString += " AND Color = '" + Color.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                        {
                            Height = Convert.ToInt32(Row["Height"]);
                            QueryString += " AND Height = '" + Height.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                        {
                            Height = Convert.ToInt32(Row["Length"]);
                            QueryString += " AND Height = '" + Height.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                        {
                            Width = Convert.ToInt32(Row["Width"]);
                            QueryString += " AND Width = '" + Width.ToString() + "'";
                        }

                        ManagerName = GetManagerName(Convert.ToInt32(Row["ClientID"]));
                        CountryName = GetCountryName(Convert.ToInt32(Row["ClientID"]));
                        ClientName = GetClientName(Convert.ToInt32(Row["ClientID"]));

                        ZOVClientName = string.Empty;
                        if (Convert.ToInt32(Row["ClientID"]) == 145)
                        {
                            if (Convert.ToInt32(Row["ZOVClientID"]) == -1)
                                ZOVClientName = "Маркетинг.Заказы";
                            else
                                ZOVClientName = GetZOVClientName(Convert.ToInt32(Row["ZOVClientID"]));
                        }

                        QueryString += " AND Client = '" + ClientName + "'";
                        DataRow[] dRow = DecorResultDataTable[i].Select(QueryString);

                        if (dRow.Count() == 0)
                        {
                            DataRow NewRow = DecorResultDataTable[i].NewRow();

                            NewRow["Product"] = Product;
                            NewRow["ManagerName"] = ManagerName;
                            NewRow["CountryName"] = CountryName;
                            NewRow["Client"] = ClientName;
                            NewRow["ZOVClientName"] = ZOVClientName;

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                            {
                                if (Convert.ToInt32(Row["Height"]) != -1)
                                    NewRow["Height"] = Row["Height"];
                                if (Convert.ToInt32(Row["Length"]) != -1)
                                    NewRow["Height"] = Row["Length"];
                            }
                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                            {
                                if (Convert.ToInt32(Row["Length"]) != -1)
                                    NewRow["Height"] = Row["Length"];
                                if (Convert.ToInt32(Row["Height"]) != -1)
                                    NewRow["Height"] = Row["Height"];
                            }
                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                                NewRow["Width"] = Row["Width"];

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                                NewRow["Color"] = Color;

                            NewRow["Count"] = Row["Count"];
                            NewRow["IsSample"] = Row["IsSample"];
                            NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                            NewRow["SumCost"] = Row["Cost"];

                            DecorResultDataTable[i].Rows.Add(NewRow);
                        }
                        else
                        {
                            dRow[0]["Count"] = Convert.ToDecimal(dRow[0]["Count"]) + Count;
                            dRow[0]["SumCost"] = Decimal.Round(Convert.ToDecimal(dRow[0]["SumCost"]) + DecorCost, 3, MidpointRounding.AwayFromZero);
                        }
                    }
                }
            }

            TempDecorProductsDT.Dispose();
        }

        private void FillZDecor(DataTable DecorOrdersDataTable)
        {
            if (DecorOrdersDataTable.Rows.Count < 1)
                return;

            string QueryString = string.Empty;
            string Product = string.Empty;
            string Decor = string.Empty;
            string Color = string.Empty;

            int Height = 0;
            int Width = 0;
            int Count = 0;

            string ManagerName = "Менеджер ЗОВ";
            string ClientName = "Клиент ЗОВ";
            string ClientGroupName = "Группа ЗОВ";

            decimal DecorCost = 0;
            decimal SumCost = 0;
            decimal SumCount = 0;
            decimal AvgPrice = 0;

            DataTable TempDecorProductsDT = new DataTable();
            DataTable Table = new DataTable();

            DataView DV3 = new DataView(DecorCatalog.DecorProductsDataTable)
            {
                Sort = "ProductName"
            };
            TempDecorProductsDT = DV3.ToTable();
            DV3.Dispose();

            DataColumnCollection columns = DecorOrdersDataTable.Columns;
            if (columns.Contains("DispatchDateTime"))
            {
                for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
                {
                    using (DataView DV = new DataView(DecorOrdersDataTable,
                        "ProductID = " + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]),
                        string.Empty, DataViewRowState.CurrentRows))
                    {
                        Table = DV.ToTable(true, new string[] { "DecorID", "ColorID", "MeasureID", "Length", "Height", "Width", "IsSample", "ZOVClientID", "DocNumber", "DispatchDateTime" });
                    }

                    for (int j = 0; j < Table.Rows.Count; j++)
                    {
                        QueryString = "ProductID=" + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]) +
                            " AND DecorID=" + Convert.ToInt32(Table.Rows[j]["DecorID"]) +
                            " AND ColorID=" + Convert.ToInt32(Table.Rows[j]["ColorID"]) +
                            " AND MeasureID=" + Convert.ToInt32(Table.Rows[j]["MeasureID"]) +
                            " AND Length=" + Convert.ToInt32(Table.Rows[j]["Length"]) +
                            " AND Height=" + Convert.ToInt32(Table.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(Table.Rows[j]["Width"]) +
                            " AND IsSample=" + Convert.ToInt32(Table.Rows[j]["IsSample"]) +
                            " AND DocNumber = '" + Table.Rows[j]["DocNumber"].ToString() + "'" +
                            " AND DispatchDateTime = '" + Table.Rows[j]["DispatchDateTime"].ToString() + "'" +
                            " AND ZOVClientID=" + Convert.ToInt32(Table.Rows[j]["ZOVClientID"]);

                        DataRow[] Rows = DecorOrdersDataTable.Select(QueryString);

                        if (Rows.Count() == 0)
                            continue;

                        foreach (DataRow Row in Rows)
                        {
                            SumCount = 0;
                            SumCost = 0;

                            foreach (DataRow row in Rows)
                            {
                                if (Convert.ToInt32(row["MeasureID"]) == 1)
                                {
                                    SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Width"]) * Convert.ToInt32(row["Count"]) / 1000000;
                                }

                                if (Convert.ToInt32(row["MeasureID"]) == 3)
                                {
                                    SumCount += Convert.ToInt32(row["Count"]);
                                }

                                if (Convert.ToInt32(row["MeasureID"]) == 2)
                                {
                                    //нет параметра "высота"
                                    if (row["Height"].ToString() == "-1")
                                        SumCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                                    else
                                        SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                                }
                                SumCost += Convert.ToDecimal(row["Cost"]);
                            }

                            Product = TempDecorProductsDT.Rows[i]["ProductName"].ToString() + " " +
                                DecorCatalog.GetItemName(Convert.ToInt32(Row["DecorID"]));
                            Count = Convert.ToInt32(Row["Count"]);
                            DecorCost = Convert.ToDecimal(Row["Cost"]);

                            DecorCost = DecorCost * 100 / 120;

                            if (SumCount != 0)
                                AvgPrice = SumCost / SumCount;

                            ManagerName = GetZOVManagerName(Convert.ToInt32(Row["ZOVClientID"]));
                            ClientName = GetZOVClientName(Convert.ToInt32(Row["ZOVClientID"]));
                            ClientGroupName = GetZOVClientGroupName(Convert.ToInt32(Row["ZOVClientID"]));

                            QueryString = "Product = '" + Product + "'";

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                            {
                                Color = GetColorName(Convert.ToInt32(Row["ColorID"]));
                                if (Convert.ToInt32(Row["PatinaID"]) != -1)
                                    Color += " " + GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                                QueryString += " AND Color = '" + Color.ToString() + "'";
                            }

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                            {
                                Height = Convert.ToInt32(Row["Height"]);
                                QueryString += " AND Height = '" + Height.ToString() + "'";
                            }

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                            {
                                Height = Convert.ToInt32(Row["Length"]);
                                QueryString += " AND Height = '" + Height.ToString() + "'";
                            }

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                            {
                                Width = Convert.ToInt32(Row["Width"]);
                                QueryString += " AND Width = '" + Width.ToString() + "'";
                            }

                            DataRow[] dRow = DecorResultDataTable[i].Select(QueryString);

                            if (dRow.Count() == 0)
                            {
                                DataRow NewRow = DecorResultDataTable[i].NewRow();

                                NewRow["Product"] = Product;
                                NewRow["ManagerName"] = ManagerName;
                                NewRow["Client"] = ClientName;
                                NewRow["ClientGroupName"] = ClientGroupName;
                                NewRow["DocNumber"] = Row["DocNumber"].ToString();
                                NewRow["DispatchDateTime"] = Row["DispatchDateTime"].ToString();

                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                                {
                                    if (Convert.ToInt32(Row["Height"]) != -1)
                                        NewRow["Height"] = Row["Height"];
                                    if (Convert.ToInt32(Row["Length"]) != -1)
                                        NewRow["Height"] = Row["Length"];
                                }
                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                                {
                                    if (Convert.ToInt32(Row["Length"]) != -1)
                                        NewRow["Height"] = Row["Length"];
                                    if (Convert.ToInt32(Row["Height"]) != -1)
                                        NewRow["Height"] = Row["Height"];
                                }
                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                                    NewRow["Width"] = Row["Width"];

                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                                    NewRow["Color"] = Color;

                                NewRow["Count"] = Row["Count"];
                                NewRow["IsSample"] = Row["IsSample"];
                                NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                                NewRow["SumCost"] = Decimal.Round(Convert.ToDecimal(Row["Cost"]), 3, MidpointRounding.AwayFromZero);

                                DecorResultDataTable[i].Rows.Add(NewRow);
                            }
                            else
                            {
                                dRow[0]["Count"] = Convert.ToDecimal(dRow[0]["Count"]) + Count;
                                dRow[0]["SumCost"] = Decimal.Round(Convert.ToDecimal(dRow[0]["SumCost"]) + DecorCost, 3, MidpointRounding.AwayFromZero);
                            }
                        }
                    }
                }
            }
            else
            {
                for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
                {
                    using (DataView DV = new DataView(DecorOrdersDataTable,
                        "ProductID = " + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]),
                        string.Empty, DataViewRowState.CurrentRows))
                    {
                        Table = DV.ToTable(true, new string[] { "DecorID", "ColorID", "MeasureID", "Length", "Height", "Width", "ZOVClientID", "DocNumber" });
                    }

                    for (int j = 0; j < Table.Rows.Count; j++)
                    {
                        QueryString = "ProductID=" + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]) +
                            " AND DecorID=" + Convert.ToInt32(Table.Rows[j]["DecorID"]) +
                            " AND ColorID=" + Convert.ToInt32(Table.Rows[j]["ColorID"]) +
                            " AND MeasureID=" + Convert.ToInt32(Table.Rows[j]["MeasureID"]) +
                            " AND Length=" + Convert.ToInt32(Table.Rows[j]["Length"]) +
                            " AND Height=" + Convert.ToInt32(Table.Rows[j]["Height"]) +
                            " AND Width=" + Convert.ToInt32(Table.Rows[j]["Width"]) +
                            " AND DocNumber = '" + Table.Rows[j]["DocNumber"].ToString() + "'" +
                            " AND ZOVClientID=" + Convert.ToInt32(Table.Rows[j]["ZOVClientID"]);

                        DataRow[] Rows = DecorOrdersDataTable.Select(QueryString);

                        if (Rows.Count() == 0)
                            continue;

                        foreach (DataRow Row in Rows)
                        {
                            SumCount = 0;
                            SumCost = 0;

                            foreach (DataRow row in Rows)
                            {
                                if (Convert.ToInt32(row["MeasureID"]) == 1)
                                {
                                    SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Width"]) * Convert.ToInt32(row["Count"]) / 1000000;
                                }

                                if (Convert.ToInt32(row["MeasureID"]) == 3)
                                {
                                    SumCount += Convert.ToInt32(row["Count"]);
                                }

                                if (Convert.ToInt32(row["MeasureID"]) == 2)
                                {
                                    //нет параметра "высота"
                                    if (row["Height"].ToString() == "-1")
                                        SumCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                                    else
                                        SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                                }
                                SumCost += Convert.ToDecimal(row["Cost"]);
                            }

                            Product = TempDecorProductsDT.Rows[i]["ProductName"].ToString() + " " +
                                DecorCatalog.GetItemName(Convert.ToInt32(Row["DecorID"]));
                            Count = Convert.ToInt32(Row["Count"]);
                            DecorCost = Convert.ToDecimal(Row["Cost"]);

                            DecorCost = DecorCost * 100 / 120;

                            if (SumCount != 0)
                                AvgPrice = SumCost / SumCount;

                            ManagerName = GetZOVManagerName(Convert.ToInt32(Row["ZOVClientID"]));
                            ClientName = GetZOVClientName(Convert.ToInt32(Row["ZOVClientID"]));
                            ClientGroupName = GetZOVClientGroupName(Convert.ToInt32(Row["ZOVClientID"]));

                            QueryString = "Product = '" + Product + "'";

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                            {
                                Color = GetColorName(Convert.ToInt32(Row["ColorID"]));
                                if (Convert.ToInt32(Row["PatinaID"]) != -1)
                                    Color += " " + GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                                QueryString += " AND Color = '" + Color.ToString() + "'";
                            }

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                            {
                                Height = Convert.ToInt32(Row["Height"]);
                                QueryString += " AND Height = '" + Height.ToString() + "'";
                            }

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                            {
                                Height = Convert.ToInt32(Row["Length"]);
                                QueryString += " AND Height = '" + Height.ToString() + "'";
                            }

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                            {
                                Width = Convert.ToInt32(Row["Width"]);
                                QueryString += " AND Width = '" + Width.ToString() + "'";
                            }

                            DataRow[] dRow = DecorResultDataTable[i].Select(QueryString);

                            if (dRow.Count() == 0)
                            {
                                DataRow NewRow = DecorResultDataTable[i].NewRow();

                                NewRow["Product"] = Product;
                                NewRow["ManagerName"] = ManagerName;
                                NewRow["Client"] = ClientName;
                                NewRow["ClientGroupName"] = ClientGroupName;
                                NewRow["DocNumber"] = Row["DocNumber"].ToString();

                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                                {
                                    if (Convert.ToInt32(Row["Height"]) != -1)
                                        NewRow["Height"] = Row["Height"];
                                    if (Convert.ToInt32(Row["Length"]) != -1)
                                        NewRow["Height"] = Row["Length"];
                                }
                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                                {
                                    if (Convert.ToInt32(Row["Length"]) != -1)
                                        NewRow["Height"] = Row["Length"];
                                    if (Convert.ToInt32(Row["Height"]) != -1)
                                        NewRow["Height"] = Row["Height"];
                                }
                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                                    NewRow["Width"] = Row["Width"];

                                if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                                    NewRow["Color"] = Color;

                                NewRow["Count"] = Row["Count"];
                                NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                                NewRow["SumCost"] = Decimal.Round(Convert.ToDecimal(Row["Cost"]), 3, MidpointRounding.AwayFromZero); ;

                                DecorResultDataTable[i].Rows.Add(NewRow);
                            }
                            else
                            {
                                dRow[0]["Count"] = Convert.ToDecimal(dRow[0]["Count"]) + Count;
                                dRow[0]["SumCost"] = Decimal.Round(Convert.ToDecimal(dRow[0]["SumCost"]) + DecorCost, 3, MidpointRounding.AwayFromZero);
                            }
                        }
                    }
                }
            }

            TempDecorProductsDT.Dispose();
        }

        private int GetCount(DataTable DT, bool Curved)
        {
            int S = 0;

            foreach (DataRow Row in DT.Rows)
            {
                if (Curved)
                {
                    if (Convert.ToInt32(Row["Width"]) == -1)
                        S += Convert.ToInt32(Row["Count"]);
                }
                else
                    S += Convert.ToInt32(Row["Count"]);
            }

            return S;
        }

        private decimal GetSquare(DataTable DT)
        {
            decimal S = 0;

            foreach (DataRow Row in DT.Rows)
            {
                if (Row["Square"] != DBNull.Value)
                    S += Convert.ToDecimal(Row["Square"]);
            }

            return S;
        }

        public void CreateReport(DateTime DateFrom, DateTime DateTo, int FactoryID,
            DataTable FrontsOrdersDataTable, DataTable DecorOrdersDataTable, string FileName, bool ZOV)
        {
            if (FrontsOrdersDataTable.Rows.Count < 1 && DecorOrdersDataTable.Rows.Count < 1)
                return;

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont ClientNameFont = hssfworkbook.CreateFont();
            ClientNameFont.FontHeightInPoints = 14;
            ClientNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            ClientNameFont.FontName = "Calibri";

            HSSFFont MainFont = hssfworkbook.CreateFont();
            MainFont.FontHeightInPoints = 12;
            MainFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            MainFont.FontName = "Calibri";

            HSSFCellStyle ClientNameStyle = hssfworkbook.CreateCellStyle();
            ClientNameStyle.SetFont(ClientNameFont);

            HSSFCellStyle MainStyle = hssfworkbook.CreateCellStyle();
            MainStyle.SetFont(MainFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 12;
            HeaderFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont PackNumberFont = hssfworkbook.CreateFont();
            PackNumberFont.Boldweight = 11 * 256;
            PackNumberFont.FontName = "Calibri";

            HSSFCellStyle PackNumberStyle = hssfworkbook.CreateCellStyle();
            PackNumberStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.BottomBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.LeftBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.RightBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.TopBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            PackNumberStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            PackNumberStyle.SetFont(PackNumberFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 11;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
            cellStyle.SetFont(SimpleFont);

            HSSFCellStyle GreyCellStyle = hssfworkbook.CreateCellStyle();
            GreyCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyCellStyle.SetFont(SimpleFont);

            HSSFFont TotalFont = hssfworkbook.CreateFont();
            TotalFont.FontHeightInPoints = 11;
            TotalFont.FontName = "Calibri";

            HSSFCellStyle TotalStyle = hssfworkbook.CreateCellStyle();
            TotalStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            TotalStyle.TopBorderColor = HSSFColor.BLACK.index;
            TotalStyle.SetFont(TotalFont);

            HSSFCellStyle TempStyle = hssfworkbook.CreateCellStyle();
            TempStyle.SetFont(TotalFont);

            #endregion

            #region границы между упаковками

            HSSFCellStyle BottomMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            BottomMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            BottomMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            BottomMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            BottomMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle BottomMediumLeftBorderCellStyle = hssfworkbook.CreateCellStyle();
            BottomMediumLeftBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumLeftBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumLeftBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            BottomMediumLeftBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            BottomMediumLeftBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            BottomMediumLeftBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            BottomMediumLeftBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle BottomMediumRightBorderCellStyle = hssfworkbook.CreateCellStyle();
            BottomMediumRightBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumRightBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            BottomMediumRightBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumRightBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            BottomMediumRightBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle LeftMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            LeftMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            LeftMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            LeftMediumBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            LeftMediumBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle RightMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            RightMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.SetFont(SimpleFont);


            HSSFCellStyle GreyBottomMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyBottomMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyBottomMediumBorderCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyBottomMediumBorderCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyBottomMediumBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle GreyBottomMediumLeftBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyBottomMediumLeftBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumLeftBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumLeftBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumLeftBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumLeftBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            GreyBottomMediumLeftBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            GreyBottomMediumLeftBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle GreyBottomMediumRightBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyBottomMediumRightBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumRightBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumRightBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumRightBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumRightBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyBottomMediumRightBorderCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyBottomMediumRightBorderCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyBottomMediumRightBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle GreyLeftMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyLeftMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyLeftMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            GreyLeftMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyLeftMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyLeftMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            GreyLeftMediumBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            GreyLeftMediumBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle GreyRightMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyRightMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            GreyRightMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyRightMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            GreyRightMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyRightMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyRightMediumBorderCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyRightMediumBorderCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyRightMediumBorderCellStyle.SetFont(SimpleFont);
            #endregion

            //HSSFCell ConfirmCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, s);
            //ConfirmCell.CellStyle = TempStyle;

            if (FrontsOrdersDataTable.Rows.Count > 0)
                FrontsReport(hssfworkbook, HeaderStyle, PackNumberFont, SimpleFont, SimpleCellStyle, cellStyle, FrontsOrdersDataTable, ZOV);

            if (DecorOrdersDataTable.Rows.Count > 0)
                DecorReport(hssfworkbook, HeaderStyle, SimpleFont, SimpleCellStyle, cellStyle, DecorOrdersDataTable, ZOV);

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        private int FrontsReport(HSSFWorkbook hssfworkbook, HSSFCellStyle HeaderStyle, HSSFFont PackNumberFont,
            HSSFFont SimpleFont, HSSFCellStyle SimpleCellStyle, HSSFCellStyle cellStyle,
            DataTable FrontsOrdersDataTable, bool ZOV)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            int DisplayIndex = 0;

            if (ZOV)
            {
                sheet1.SetColumnWidth(DisplayIndex++, 25 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            }
            else
            {
                sheet1.SetColumnWidth(DisplayIndex++, 35 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            }

            sheet1.SetColumnWidth(DisplayIndex++, 32 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 28 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 18 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 17 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 18 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 6 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 6 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 8 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 8 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 10 * 256);

            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);

            decimal Square = 0;
            int FrontsCount = 0;
            int CurvedCount = 0;

            FillFronts(FrontsOrdersDataTable, ZOV);

            if (FrontsResultDataTable.Rows.Count != 0)
            {
                DisplayIndex = 0;

                HSSFCell cell4;
                if (ZOV)
                {
                    cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Группа");
                    cell4.CellStyle = HeaderStyle;
                    cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Клиент");
                    cell4.CellStyle = HeaderStyle;
                    cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "№ заказа");
                    cell4.CellStyle = HeaderStyle;
                    cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Дата отгр");
                    cell4.CellStyle = HeaderStyle;
                }
                else
                {
                    cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Клиент");
                    cell4.CellStyle = HeaderStyle;
                    cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Клиент ЗОВ");
                    cell4.CellStyle = HeaderStyle;
                }
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Фасад");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет профиля");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет профиля-2");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Патина");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Тип наполнителя");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет наполнителя");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Тип наполнителя-2");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет наполнителя-2");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Выс.");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Шир.");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Площ.");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Кол.");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Образец");
                cell4.CellStyle = HeaderStyle;
                if (Security.PriceAccess)
                {
                    HSSFCell cell15 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Ср.цена, евро");
                    cell15.CellStyle = HeaderStyle;
                    HSSFCell cell16 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Сумма, евро");
                    cell16.CellStyle = HeaderStyle;
                }
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Менеджер");
                cell4.CellStyle = HeaderStyle;
                if (!ZOV)
                {
                    cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Страна");
                    cell4.CellStyle = HeaderStyle;
                }

                RowIndex++;

                Square = GetSquare(FrontsResultDataTable);
                FrontsCount = GetCount(FrontsResultDataTable, false);
                CurvedCount = GetCount(FrontsResultDataTable, true);

                DataTable dt = FrontsResultDataTable.Copy();
                if (ZOV)
                {
                    dt.Columns.Remove("CountryName");
                    dt.Columns.Remove("ZOVClientName");
                }
                else
                {
                    dt.Columns.Remove("ClientGroupName");
                    dt.Columns.Remove("DocNumber");
                    dt.Columns.Remove("DispatchDateTime");
                }

                int ColumnCount = dt.Columns.Count;

                if (!Security.PriceAccess)
                {
                    ColumnCount = dt.Columns.Count - 2;
                }

                //вывод заказов фасадов
                for (int x = 0; x < dt.Rows.Count; x++)
                {
                    if (dt.Rows.Count == 0)
                        break;

                    for (int y = 0; y < ColumnCount; y++)
                    {
                        //if (ZOV && FrontsResultDataTable.Columns[y].ColumnName == "CountryName")
                        //    continue;

                        //if (!ZOV && FrontsResultDataTable.Columns[y].ColumnName == "ClientGroupName")
                        //    continue;

                        Type t = dt.Rows[x][y].GetType();

                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(Convert.ToDouble(dt.Rows[x][y]));

                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(Convert.ToInt32(dt.Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(dt.Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }

                RowIndex++;

                HSSFCellStyle cellStyle1 = hssfworkbook.CreateCellStyle();
                cellStyle1.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
                cellStyle1.SetFont(SimpleFont);

                HSSFCell cell17 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Итого: ");
                cell17.CellStyle = cellStyle1;
                HSSFCell cell18 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "всего фасадов: " + FrontsCount + " шт.");
                cell18.CellStyle = cellStyle1;
                HSSFCell cell19 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "в том числе гнутых: " + CurvedCount + " шт.");
                cell19.CellStyle = cellStyle1;

                if (Square > 0)
                {
                    HSSFCell cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1,
                        "площадь: " + Decimal.Round(Square, 3, MidpointRounding.AwayFromZero) + " м.кв.");

                    cell20.CellStyle = cellStyle1;
                }

                RowIndex++;
            }
            return RowIndex;
        }

        private int DecorReport(HSSFWorkbook hssfworkbook, HSSFCellStyle HeaderStyle,
            HSSFFont SimpleFont, HSSFCellStyle SimpleCellStyle, HSSFCellStyle cellStyle,
            DataTable DecorOrdersDataTable, bool ZOV)
        {
            int RowIndex = 0;

            int DisplayIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);


            if (ZOV)
            {
                sheet1.SetColumnWidth(DisplayIndex++, 25 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            }
            else
            {
                sheet1.SetColumnWidth(DisplayIndex++, 35 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            }
            sheet1.SetColumnWidth(DisplayIndex++, 30 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 10 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 10 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 10 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 10 * 256);
            if (Security.PriceAccess)
            {
                sheet1.SetColumnWidth(DisplayIndex++, 17 * 256);
                sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            }
            sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            //декор

            FillDecor(DecorOrdersDataTable, ZOV);

            for (int c = 0; c < DecorCatalog.DecorProductsCount; c++)
            {
                if (DecorResultDataTable[c].Rows.Count == 0)
                    continue;
                DisplayIndex = 0;

                HSSFCell cell15;
                HSSFCell cell20;
                if (ZOV)
                {
                    cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Группа");
                    cell20.CellStyle = HeaderStyle;
                    cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Клиент");
                    cell20.CellStyle = HeaderStyle;
                    cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "№ заказа");
                    cell20.CellStyle = HeaderStyle;
                    cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Дата отгр");
                    cell20.CellStyle = HeaderStyle;
                }
                else
                {
                    cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Клиент");
                    cell20.CellStyle = HeaderStyle;
                    cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Клиент ЗОВ");
                    cell20.CellStyle = HeaderStyle;
                }
                cell15 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Название");
                cell15.CellStyle = HeaderStyle;
                HSSFCell cell17 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет");
                cell17.CellStyle = HeaderStyle;
                HSSFCell cell18 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Длин\\Выс.");
                cell18.CellStyle = HeaderStyle;
                HSSFCell cell19 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Шир.");
                cell19.CellStyle = HeaderStyle;
                cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Кол.");
                cell20.CellStyle = HeaderStyle;
                cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Образец");
                cell20.CellStyle = HeaderStyle;
                if (Security.PriceAccess)
                {
                    HSSFCell cell22 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Ср.цена, евро");
                    cell22.CellStyle = HeaderStyle;
                    HSSFCell cell23 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Сумма, евро");
                    cell23.CellStyle = HeaderStyle;
                }
                cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Менеджер");
                cell20.CellStyle = HeaderStyle;
                if (!ZOV)
                {
                    cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Страна");
                    cell20.CellStyle = HeaderStyle;
                }

                RowIndex++;

                DataTable dt = DecorResultDataTable[c].Copy();
                if (ZOV)
                {
                    dt.Columns.Remove("CountryName");
                    dt.Columns.Remove("ZOVClientName");
                }
                else
                {
                    dt.Columns.Remove("ClientGroupName");
                    dt.Columns.Remove("DocNumber");
                    dt.Columns.Remove("DispatchDateTime");
                }

                int ColumnCount = dt.Columns.Count;

                if (!Security.PriceAccess)
                {
                    ColumnCount = dt.Columns.Count - 2;
                }

                //вывод заказов декора в excel
                for (int x = 0; x < dt.Rows.Count; x++)
                {
                    for (int y = 0; y < ColumnCount; y++)
                    {
                        //if (ZOV && DecorResultDataTable[c].Columns[y].ColumnName == "CountryName")
                        //    continue;

                        //if (!ZOV && DecorResultDataTable[c].Columns[y].ColumnName == "ClientGroupName")
                        //    continue;

                        //int ColumnIndex = y;

                        //if (y == 0)
                        //{
                        //    ColumnIndex = y;
                        //}
                        //else
                        //{
                        //    ColumnIndex = y + 1;
                        //}

                        Type t = dt.Rows[x][y].GetType();

                        //sheet1.CreateRow(RowIndex).CreateCell(1).CellStyle = SimpleCellStyle;

                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(Convert.ToDouble(dt.Rows[x][y]));

                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(Convert.ToInt32(dt.Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(dt.Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                    }

                    RowIndex++;
                }
                RowIndex++;
            }
            return RowIndex;
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}
    }


    public class StatisticsReportByProduction : IAllFrontParameterName
    {
        DataTable ClientsDataTable = null;

        DataTable FrontsResultDataTable = null;
        DataTable[] DecorResultDataTable = null;

        public DataTable FrontsDataTable = null;
        public DataTable FrameColorsDataTable = null;
        public DataTable PatinaDataTable = null;
        DataTable PatinaRALDataTable = null;
        public DataTable InsetTypesDataTable = null;
        public DataTable InsetColorsDataTable = null;

        Modules.ZOV.DecorCatalogOrder DecorCatalog = null;

        private void GetColorsDT()
        {
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            FrameColorsDataTable.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = FrameColorsDataTable.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        FrameColorsDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        public StatisticsReportByProduction(ref Modules.ZOV.DecorCatalogOrder tDecorCatalog)
        {
            DecorCatalog = tDecorCatalog;

            Create();


            ClientsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Clients",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                DA.Fill(ClientsDataTable);
            }

            string SelectCommand = @"SELECT TechStoreID AS FrontID, TechStoreName AS FrontName FROM TechStore 
                WHERE TechStoreID IN (SELECT FrontID FROM FrontsConfig WHERE Enabled = 1)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FrontsDataTable);
            }
            GetColorsDT();
            SelectCommand = @"SELECT * FROM Patina";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }
            SelectCommand = @"SELECT * FROM InsetTypes";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetTypesDataTable);
            }
            SelectCommand = @"SELECT * FROM InsetColors";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
            }

            CreateFrontsDataTable();
            CreateDecorDataTable();
        }

        private void Create()
        {
            FrontsDataTable = new DataTable();
            FrameColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            InsetTypesDataTable = new DataTable();
            InsetColorsDataTable = new DataTable();
            FrontsResultDataTable = new DataTable();
            DecorResultDataTable = new DataTable[DecorCatalog.DecorProductsCount];
        }

        private void CreateFrontsDataTable()
        {
            FrontsResultDataTable = new DataTable();

            FrontsResultDataTable.Columns.Add(new DataColumn(("Front"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("FrameColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("TechnoColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Patina"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("InsetType"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("InsetColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("TechnoInsetType"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("TechnoInsetColor"), System.Type.GetType("System.String")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Height"), System.Type.GetType("System.Int32")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Width"), System.Type.GetType("System.Int32")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Square"), System.Type.GetType("System.Decimal")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("Count"), System.Type.GetType("System.Int32")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("AvgPrice"), System.Type.GetType("System.Decimal")));
            FrontsResultDataTable.Columns.Add(new DataColumn(("SumCost"), System.Type.GetType("System.Decimal")));
        }

        private void CreateDecorDataTable()
        {
            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                DecorResultDataTable[i] = new DataTable();

                DecorResultDataTable[i].Columns.Add("Product", Type.GetType("System.String"));
                DecorResultDataTable[i].Columns.Add("Color", Type.GetType("System.String"));
                DecorResultDataTable[i].Columns.Add("Height", Type.GetType("System.Int32"));
                DecorResultDataTable[i].Columns.Add("Width", Type.GetType("System.Int32"));
                DecorResultDataTable[i].Columns.Add("Count", Type.GetType("System.Int32"));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("AvgPrice"), System.Type.GetType("System.Decimal")));
                DecorResultDataTable[i].Columns.Add(new DataColumn(("SumCost"), System.Type.GetType("System.Decimal")));
            }
        }

        public string GetFrontName(int FrontID)
        {
            string FrontName = string.Empty;
            DataRow[] Rows = FrontsDataTable.Select("FrontID = " + FrontID);
            if (Rows.Count() > 0)
                FrontName = Rows[0]["FrontName"].ToString();
            return FrontName;
        }

        public string GetFront2Name(int TechnoProfileID)
        {
            string FrontName = "";
            try
            {
                DataRow[] Rows = FrontsDataTable.Select("FrontID = " + TechnoProfileID);
                FrontName = Rows[0]["FrontName"].ToString();
            }
            catch
            {
                return "";
            }
            return FrontName;
        }
        public string GetColorName(int ColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = FrameColorsDataTable.Select("ColorID = " + ColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["ColorName"].ToString();
            return ColorName;
        }

        public string GetPatinaName(int PatinaID)
        {
            string PatinaName = string.Empty;
            DataRow[] Rows = PatinaDataTable.Select("PatinaID = " + PatinaID);
            if (Rows.Count() > 0)
                PatinaName = Rows[0]["PatinaName"].ToString();
            return PatinaName;
        }

        public string GetInsetTypeName(int InsetTypeID)
        {
            string InsetType = string.Empty;
            DataRow[] Rows = InsetTypesDataTable.Select("InsetTypeID = " + InsetTypeID);
            if (Rows.Count() > 0)
                InsetType = Rows[0]["InsetTypeName"].ToString();
            return InsetType;
        }

        public string GetInsetColorName(int InsetColorID)
        {
            string ColorName = string.Empty;
            DataRow[] Rows = InsetColorsDataTable.Select("InsetColorID = " + InsetColorID);
            if (Rows.Count() > 0)
                ColorName = Rows[0]["InsetColorName"].ToString();
            return ColorName;
        }

        private string GetClientName(int ClientID)
        {
            DataRow[] Rows = ClientsDataTable.Select("ClientID = " + ClientID);
            return Rows[0]["ClientName"].ToString();
        }

        public DateTime GetCurrentDate
        {
            get
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT GETDATE()", ConnectionStrings.CatalogConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        return Convert.ToDateTime(DT.Rows[0][0]);
                    }
                }
            }
        }

        private void FillFronts(DataTable FrontsOrdersDataTable)
        {
            FrontsResultDataTable.Clear();

            if (FrontsOrdersDataTable.Rows.Count < 1)
                return;

            FillMFronts(FrontsOrdersDataTable);
            //FillZFronts(FrontsOrdersDataTable);

            DataView DV1 = new DataView(FrontsResultDataTable)
            {
                Sort = "Front, FrameColor, TechnoColor, Patina, InsetType, InsetColor, TechnoInsetType, TechnoInsetColor, Height, Width, Count"
            };
            FrontsResultDataTable = DV1.ToTable();
            DV1.Dispose();
        }

        private void FillMFronts(DataTable FrontsOrdersDataTable)
        {
            if (FrontsOrdersDataTable.Rows.Count < 1)
                return;

            string Front = string.Empty;
            string FrameColor = string.Empty;
            string TechnoColor = string.Empty;
            string Patina = string.Empty;
            string InsetType = string.Empty;
            string InsetColor = string.Empty;
            string TechnoInsetType = string.Empty;
            string TechnoInsetColor = string.Empty;

            string QueryString = string.Empty;

            decimal FrontCost = 0;
            decimal AvgPrice = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable))
            {
                Table = DV.ToTable(true, new string[] { "FrontID",
                    "ColorID", "TechnoColorID", "PatinaID","InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width"});
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                QueryString = "FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height = '" + Table.Rows[i]["Height"].ToString() + "'" +
                    " AND Width = '" + Table.Rows[i]["Width"].ToString() + "'";

                DataRow[] Rows = FrontsOrdersDataTable.Select(QueryString);
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }
                    if (Convert.ToInt32(Rows[0]["MeasureID"]) == 1)
                    {
                        if (FrontSquare != 0)
                            AvgPrice = FrontCost / FrontSquare;
                    }
                    if (Convert.ToInt32(Rows[0]["MeasureID"]) == 3)
                    {
                        if (FrontCount != 0)
                            AvgPrice = FrontCost / FrontCount;
                    }

                    Front = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    FrameColor = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    TechnoColor = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                    Patina = GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    InsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    InsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    TechnoInsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                    TechnoInsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));

                    //if (FrontType == "Прямой")
                    //    FrontType = string.Empty;

                    DataRow NewRow = FrontsResultDataTable.NewRow();
                    NewRow["Front"] = Front;
                    NewRow["Patina"] = Patina;
                    NewRow["FrameColor"] = FrameColor;
                    NewRow["TechnoColor"] = TechnoColor;
                    NewRow["InsetType"] = InsetType;
                    NewRow["InsetColor"] = InsetColor;
                    NewRow["TechnoInsetType"] = TechnoInsetType;
                    NewRow["TechnoInsetColor"] = TechnoInsetColor;
                    NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 3, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                    NewRow["SumCost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                    FrontsResultDataTable.Rows.Add(NewRow);

                    AvgPrice = 0;
                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
            }
        }

        private void FillZFronts(DataTable FrontsOrdersDataTable)
        {
            if (FrontsOrdersDataTable.Rows.Count < 1)
                return;

            string Front = string.Empty;
            string FrameColor = string.Empty;
            string TechnoColor = string.Empty;
            string Patina = string.Empty;
            string InsetType = string.Empty;
            string InsetColor = string.Empty;
            string TechnoInsetType = string.Empty;
            string TechnoInsetColor = string.Empty;

            string QueryString = string.Empty;

            decimal FrontCost = 0;
            decimal AvgPrice = 0;
            decimal FrontSquare = 0;
            int FrontCount = 0;

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(FrontsOrdersDataTable, string.Empty, string.Empty, DataViewRowState.CurrentRows))
            {
                Table = DV.ToTable(true, new string[] { "FrontID",
                    "ColorID", "TechnoColorID", "PatinaID","InsetTypeID", "InsetColorID", "TechnoInsetTypeID", "TechnoInsetColorID", "Height", "Width"});
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                QueryString = "FrontID=" + Convert.ToInt32(Table.Rows[i]["FrontID"]) +
                    " AND ColorID=" + Convert.ToInt32(Table.Rows[i]["ColorID"]) +
                    " AND TechnoColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoColorID"]) +
                    " AND PatinaID=" + Convert.ToInt32(Table.Rows[i]["PatinaID"]) +
                    " AND InsetTypeID=" + Convert.ToInt32(Table.Rows[i]["InsetTypeID"]) +
                    " AND InsetColorID=" + Convert.ToInt32(Table.Rows[i]["InsetColorID"]) +
                    " AND TechnoInsetTypeID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]) +
                    " AND TechnoInsetColorID=" + Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]) +
                    " AND Height = '" + Table.Rows[i]["Height"].ToString() + "'" +
                    " AND Width = '" + Table.Rows[i]["Width"].ToString() + "'";

                DataRow[] Rows = FrontsOrdersDataTable.Select(QueryString);
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        FrontCost += Convert.ToDecimal(row["Cost"]);
                        FrontSquare += Convert.ToDecimal(row["Square"]);
                        FrontCount += Convert.ToInt32(row["Count"]);
                    }

                    FrontCost = FrontCost * 100 / 120;
                    if (Convert.ToInt32(Rows[0]["MeasureID"]) == 1)
                    {
                        if (FrontSquare != 0)
                            AvgPrice = FrontCost / FrontSquare;
                    }
                    if (Convert.ToInt32(Rows[0]["MeasureID"]) == 3)
                    {
                        if (FrontCount != 0)
                            AvgPrice = FrontCost / FrontCount;
                    }
                    Front = GetFrontName(Convert.ToInt32(Table.Rows[i]["FrontID"]));
                    FrameColor = GetColorName(Convert.ToInt32(Table.Rows[i]["ColorID"]));
                    TechnoColor = GetColorName(Convert.ToInt32(Table.Rows[i]["TechnoColorID"]));
                    Patina = GetPatinaName(Convert.ToInt32(Table.Rows[i]["PatinaID"]));
                    InsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["InsetTypeID"]));
                    InsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["InsetColorID"]));
                    TechnoInsetType = GetInsetTypeName(Convert.ToInt32(Table.Rows[i]["TechnoInsetTypeID"]));
                    TechnoInsetColor = GetInsetColorName(Convert.ToInt32(Table.Rows[i]["TechnoInsetColorID"]));

                    //if (FrontType == "Прямой")
                    //    FrontType = string.Empty;

                    DataRow NewRow = FrontsResultDataTable.NewRow();
                    NewRow["Front"] = Front;
                    NewRow["Patina"] = Patina;
                    NewRow["FrameColor"] = FrameColor;
                    NewRow["TechnoColor"] = TechnoColor;
                    NewRow["InsetType"] = InsetType;
                    NewRow["InsetColor"] = InsetColor;
                    NewRow["TechnoInsetType"] = TechnoInsetType;
                    NewRow["TechnoInsetColor"] = TechnoInsetColor;
                    NewRow["Height"] = Convert.ToInt32(Table.Rows[i]["Height"]);
                    NewRow["Width"] = Convert.ToInt32(Table.Rows[i]["Width"]);
                    NewRow["Square"] = Decimal.Round(FrontSquare, 3, MidpointRounding.AwayFromZero);
                    NewRow["Count"] = FrontCount;
                    NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                    NewRow["SumCost"] = Decimal.Round(FrontCost, 3, MidpointRounding.AwayFromZero);
                    FrontsResultDataTable.Rows.Add(NewRow);

                    AvgPrice = 0;
                    FrontCost = 0;
                    FrontSquare = 0;
                    FrontCount = 0;
                }
            }
        }

        private void FillDecor(DataTable DecorOrdersDataTable)
        {
            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                DecorResultDataTable[i].Clear();
                DecorResultDataTable[i].AcceptChanges();
            }

            if (DecorOrdersDataTable.Rows.Count < 1)
                return;

            FillMDecor(DecorOrdersDataTable);
            FillZDecor(DecorOrdersDataTable);

            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                DataView DV1 = new DataView(DecorResultDataTable[i])
                {
                    Sort = "Product, Color, Height, Width, Count"
                };
                DecorResultDataTable[i] = DV1.ToTable();
                DV1.Dispose();
            }
        }

        private void FillMDecor(DataTable DecorOrdersDataTable)
        {
            if (DecorOrdersDataTable.Rows.Count < 1)
                return;

            string QueryString = string.Empty;
            string Product = string.Empty;
            string Decor = string.Empty;
            string Color = string.Empty;

            int Height = 0;
            int Width = 0;
            int Count = 0;

            decimal DecorCost = 0;
            decimal SumCost = 0;
            decimal SumCount = 0;
            decimal AvgPrice = 0;

            DataTable TempDecorProductsDT = new DataTable();
            DataTable Table = new DataTable();

            DataView DV3 = new DataView(DecorCatalog.DecorProductsDataTable)
            {
                Sort = "ProductName"
            };
            TempDecorProductsDT = DV3.ToTable();
            DV3.Dispose();

            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                using (DataView DV = new DataView(DecorOrdersDataTable,
                    "ProductID = " + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]),
                    string.Empty, DataViewRowState.CurrentRows))
                {
                    Table = DV.ToTable(true, new string[] { "DecorID", "ColorID", "MeasureID", "Length", "Height", "Width" });
                }

                for (int j = 0; j < Table.Rows.Count; j++)
                {
                    QueryString = "ProductID=" + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]) +
                        " AND DecorID=" + Convert.ToInt32(Table.Rows[j]["DecorID"]) +
                        " AND ColorID=" + Convert.ToInt32(Table.Rows[j]["ColorID"]) +
                        " AND MeasureID=" + Convert.ToInt32(Table.Rows[j]["MeasureID"]) +
                        " AND Length=" + Convert.ToInt32(Table.Rows[j]["Length"]) +
                        " AND Height=" + Convert.ToInt32(Table.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(Table.Rows[j]["Width"]);

                    DataRow[] Rows = DecorOrdersDataTable.Select(QueryString);

                    if (Rows.Count() == 0)
                        continue;

                    foreach (DataRow Row in Rows)
                    {
                        SumCount = 0;
                        SumCost = 0;

                        foreach (DataRow row in Rows)
                        {
                            if (Convert.ToInt32(row["MeasureID"]) == 1)
                            {
                                SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Width"]) * Convert.ToInt32(row["Count"]) / 1000000;
                            }

                            if (Convert.ToInt32(row["MeasureID"]) == 3)
                            {
                                SumCount += Convert.ToInt32(row["Count"]);
                            }

                            if (Convert.ToInt32(row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (row["Height"].ToString() == "-1")
                                    SumCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                                else
                                    SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                            }
                            SumCost += Convert.ToDecimal(row["Cost"]);
                        }

                        Product = TempDecorProductsDT.Rows[i]["ProductName"].ToString() + " " +
                            DecorCatalog.GetItemName(Convert.ToInt32(Row["DecorID"]));
                        Count = Convert.ToInt32(Row["Count"]);
                        DecorCost = Convert.ToDecimal(Row["Cost"]);

                        if (SumCount != 0)
                            AvgPrice = SumCost / SumCount;

                        QueryString = "Product = '" + Product + "'";

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                        {
                            Color = GetColorName(Convert.ToInt32(Row["ColorID"]));
                            if (Convert.ToInt32(Row["PatinaID"]) != -1)
                                Color += " " + GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                            QueryString += " AND Color = '" + Color.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                        {
                            Height = Convert.ToInt32(Row["Height"]);
                            QueryString += " AND Height = '" + Height.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                        {
                            Height = Convert.ToInt32(Row["Length"]);
                            QueryString += " AND Height = '" + Height.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                        {
                            Width = Convert.ToInt32(Row["Width"]);
                            QueryString += " AND Width = '" + Width.ToString() + "'";
                        }

                        DataRow[] dRow = DecorResultDataTable[i].Select(QueryString);

                        if (dRow.Count() == 0)
                        {
                            DataRow NewRow = DecorResultDataTable[i].NewRow();

                            NewRow["Product"] = Product;

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                            {
                                if (Convert.ToInt32(Row["Height"]) != -1)
                                    NewRow["Height"] = Row["Height"];
                                if (Convert.ToInt32(Row["Length"]) != -1)
                                    NewRow["Height"] = Row["Length"];
                            }
                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                            {
                                if (Convert.ToInt32(Row["Length"]) != -1)
                                    NewRow["Height"] = Row["Length"];
                                if (Convert.ToInt32(Row["Height"]) != -1)
                                    NewRow["Height"] = Row["Height"];
                            }
                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                                NewRow["Width"] = Row["Width"];

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                                NewRow["Color"] = Color;

                            NewRow["Count"] = Row["Count"];
                            NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                            NewRow["SumCost"] = Decimal.Round(Convert.ToDecimal(Row["Cost"]), 3, MidpointRounding.AwayFromZero);

                            DecorResultDataTable[i].Rows.Add(NewRow);
                        }
                        else
                        {
                            dRow[0]["Count"] = Convert.ToDecimal(dRow[0]["Count"]) + Count;
                            dRow[0]["SumCost"] = Convert.ToDecimal(dRow[0]["SumCost"]) + DecorCost;
                        }
                    }
                }
            }

            TempDecorProductsDT.Dispose();
        }

        private void FillZDecor(DataTable DecorOrdersDataTable)
        {
            if (DecorOrdersDataTable.Rows.Count < 1)
                return;

            string QueryString = string.Empty;
            string Product = string.Empty;
            string Decor = string.Empty;
            string Color = string.Empty;

            int Height = 0;
            int Width = 0;
            int Count = 0;

            decimal DecorCost = 0;
            decimal SumCost = 0;
            decimal SumCount = 0;
            decimal AvgPrice = 0;

            DataTable TempDecorProductsDT = new DataTable();
            DataTable Table = new DataTable();

            DataView DV3 = new DataView(DecorCatalog.DecorProductsDataTable)
            {
                Sort = "ProductName"
            };
            TempDecorProductsDT = DV3.ToTable();
            DV3.Dispose();

            for (int i = 0; i < DecorCatalog.DecorProductsCount; i++)
            {
                using (DataView DV = new DataView(DecorOrdersDataTable,
                    "ProductID = " + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]),
                    string.Empty, DataViewRowState.CurrentRows))
                {
                    Table = DV.ToTable(true, new string[] { "DecorID", "ColorID", "MeasureID", "Length", "Height", "Width" });
                }

                for (int j = 0; j < Table.Rows.Count; j++)
                {
                    QueryString = "ProductID=" + Convert.ToInt32(TempDecorProductsDT.Rows[i]["ProductID"]) +
                        " AND DecorID=" + Convert.ToInt32(Table.Rows[j]["DecorID"]) +
                        " AND ColorID=" + Convert.ToInt32(Table.Rows[j]["ColorID"]) +
                        " AND MeasureID=" + Convert.ToInt32(Table.Rows[j]["MeasureID"]) +
                        " AND Length=" + Convert.ToInt32(Table.Rows[j]["Length"]) +
                        " AND Height=" + Convert.ToInt32(Table.Rows[j]["Height"]) +
                        " AND Width=" + Convert.ToInt32(Table.Rows[j]["Width"]);

                    DataRow[] Rows = DecorOrdersDataTable.Select(QueryString);

                    if (Rows.Count() == 0)
                        continue;

                    foreach (DataRow Row in Rows)
                    {
                        SumCount = 0;
                        SumCost = 0;

                        foreach (DataRow row in Rows)
                        {
                            if (Convert.ToInt32(row["MeasureID"]) == 1)
                            {
                                SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Width"]) * Convert.ToInt32(row["Count"]) / 1000000;
                            }

                            if (Convert.ToInt32(row["MeasureID"]) == 3)
                            {
                                SumCount += Convert.ToInt32(row["Count"]);
                            }

                            if (Convert.ToInt32(row["MeasureID"]) == 2)
                            {
                                //нет параметра "высота"
                                if (row["Height"].ToString() == "-1")
                                    SumCount += Convert.ToDecimal(row["Length"]) * Convert.ToDecimal(row["Count"]) / 1000;
                                else
                                    SumCount += Convert.ToDecimal(row["Height"]) * Convert.ToDecimal(row["Count"]) / 1000;
                            }
                            SumCost += Convert.ToDecimal(row["Cost"]);
                        }

                        Product = TempDecorProductsDT.Rows[i]["ProductName"].ToString() + " " +
                            DecorCatalog.GetItemName(Convert.ToInt32(Row["DecorID"]));
                        Count = Convert.ToInt32(Row["Count"]);
                        DecorCost = Convert.ToDecimal(Row["Cost"]);

                        DecorCost = DecorCost * 100 / 120;

                        if (SumCount != 0)
                            AvgPrice = SumCost / SumCount;

                        QueryString = "Product = '" + Product + "'";

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                        {
                            Color = GetColorName(Convert.ToInt32(Row["ColorID"]));
                            if (Convert.ToInt32(Row["PatinaID"]) != -1)
                                Color += " " + GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                            QueryString += " AND Color = '" + Color.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                        {
                            Height = Convert.ToInt32(Row["Height"]);
                            QueryString += " AND Height = '" + Height.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                        {
                            Height = Convert.ToInt32(Row["Length"]);
                            QueryString += " AND Height = '" + Height.ToString() + "'";
                        }

                        if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                        {
                            Width = Convert.ToInt32(Row["Width"]);
                            QueryString += " AND Width = '" + Width.ToString() + "'";
                        }

                        DataRow[] dRow = DecorResultDataTable[i].Select(QueryString);

                        if (dRow.Count() == 0)
                        {
                            DataRow NewRow = DecorResultDataTable[i].NewRow();

                            NewRow["Product"] = Product;

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Height"))
                            {
                                if (Convert.ToInt32(Row["Height"]) != -1)
                                    NewRow["Height"] = Row["Height"];
                                if (Convert.ToInt32(Row["Length"]) != -1)
                                    NewRow["Height"] = Row["Length"];
                            }
                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Length"))
                            {
                                if (Convert.ToInt32(Row["Length"]) != -1)
                                    NewRow["Height"] = Row["Length"];
                                if (Convert.ToInt32(Row["Height"]) != -1)
                                    NewRow["Height"] = Row["Height"];
                            }
                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "Width"))
                                NewRow["Width"] = Row["Width"];

                            if (DecorCatalog.HasParameter(Convert.ToInt32(Row["ProductID"]), "ColorID"))
                                NewRow["Color"] = Color;

                            NewRow["Count"] = Row["Count"];
                            NewRow["AvgPrice"] = Decimal.Round(AvgPrice, 2, MidpointRounding.AwayFromZero);
                            NewRow["SumCost"] = Row["Cost"];

                            DecorResultDataTable[i].Rows.Add(NewRow);
                        }
                        else
                        {
                            dRow[0]["Count"] = Convert.ToDecimal(dRow[0]["Count"]) + Count;
                            dRow[0]["SumCost"] = Convert.ToDecimal(dRow[0]["SumCost"]) + DecorCost;
                        }
                    }
                }
            }

            TempDecorProductsDT.Dispose();
        }

        private int GetCount(DataTable DT, bool Curved)
        {
            int S = 0;

            foreach (DataRow Row in DT.Rows)
            {
                if (Curved)
                {
                    if (Convert.ToInt32(Row["Width"]) == -1)
                        S += Convert.ToInt32(Row["Count"]);
                }
                else
                    S += Convert.ToInt32(Row["Count"]);
            }

            return S;
        }

        private decimal GetSquare(DataTable DT)
        {
            decimal S = 0;

            foreach (DataRow Row in DT.Rows)
            {
                if (Row["Square"] != DBNull.Value)
                    S += Convert.ToDecimal(Row["Square"]);
            }

            return S;
        }

        public void CreateReport(DateTime DateFrom, DateTime DateTo, int FactoryID,
            DataTable FrontsOrdersDataTable, DataTable DecorOrdersDataTable, string FileName)
        {
            if (FrontsOrdersDataTable.Rows.Count < 1 && DecorOrdersDataTable.Rows.Count < 1)
                return;

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            #region Create fonts and styles

            HSSFFont ClientNameFont = hssfworkbook.CreateFont();
            ClientNameFont.FontHeightInPoints = 14;
            ClientNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            ClientNameFont.FontName = "Calibri";

            HSSFFont MainFont = hssfworkbook.CreateFont();
            MainFont.FontHeightInPoints = 13;
            MainFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            MainFont.FontName = "Calibri";

            HSSFCellStyle ClientNameStyle = hssfworkbook.CreateCellStyle();
            ClientNameStyle.SetFont(ClientNameFont);

            HSSFCellStyle MainStyle = hssfworkbook.CreateCellStyle();
            MainStyle.SetFont(MainFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 13;
            HeaderFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont PackNumberFont = hssfworkbook.CreateFont();
            PackNumberFont.Boldweight = 12 * 256;
            PackNumberFont.FontName = "Calibri";

            HSSFCellStyle PackNumberStyle = hssfworkbook.CreateCellStyle();
            PackNumberStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.BottomBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.LeftBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.RightBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            PackNumberStyle.TopBorderColor = HSSFColor.BLACK.index;
            PackNumberStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            PackNumberStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            PackNumberStyle.SetFont(PackNumberFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 12;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
            cellStyle.SetFont(SimpleFont);

            HSSFCellStyle GreyCellStyle = hssfworkbook.CreateCellStyle();
            GreyCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyCellStyle.SetFont(SimpleFont);

            HSSFFont TotalFont = hssfworkbook.CreateFont();
            TotalFont.FontHeightInPoints = 12;
            TotalFont.FontName = "Calibri";

            HSSFCellStyle TotalStyle = hssfworkbook.CreateCellStyle();
            TotalStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            TotalStyle.TopBorderColor = HSSFColor.BLACK.index;
            TotalStyle.SetFont(TotalFont);

            HSSFCellStyle TempStyle = hssfworkbook.CreateCellStyle();
            TempStyle.SetFont(TotalFont);

            #endregion

            #region границы между упаковками

            HSSFCellStyle BottomMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            BottomMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            BottomMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            BottomMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            BottomMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            BottomMediumBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle BottomMediumLeftBorderCellStyle = hssfworkbook.CreateCellStyle();
            BottomMediumLeftBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumLeftBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumLeftBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            BottomMediumLeftBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            BottomMediumLeftBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            BottomMediumLeftBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            BottomMediumLeftBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            BottomMediumLeftBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle BottomMediumRightBorderCellStyle = hssfworkbook.CreateCellStyle();
            BottomMediumRightBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumRightBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            BottomMediumRightBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            BottomMediumRightBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            BottomMediumRightBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            BottomMediumRightBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle LeftMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            LeftMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            LeftMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftMediumBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            LeftMediumBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            LeftMediumBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle RightMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            RightMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightMediumBorderCellStyle.SetFont(SimpleFont);


            HSSFCellStyle GreyBottomMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyBottomMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumBorderCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyBottomMediumBorderCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyBottomMediumBorderCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyBottomMediumBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle GreyBottomMediumLeftBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyBottomMediumLeftBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumLeftBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumLeftBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumLeftBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumLeftBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumLeftBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            GreyBottomMediumLeftBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            GreyBottomMediumLeftBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle GreyBottomMediumRightBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyBottomMediumRightBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumRightBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumRightBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            GreyBottomMediumRightBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyBottomMediumRightBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyBottomMediumRightBorderCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyBottomMediumRightBorderCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyBottomMediumRightBorderCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyBottomMediumRightBorderCellStyle.SetFont(SimpleFont);

            HSSFCellStyle GreyLeftMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyLeftMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            GreyLeftMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            GreyLeftMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            GreyLeftMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyLeftMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyLeftMediumBorderCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            GreyLeftMediumBorderCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            GreyLeftMediumBorderCellStyle.SetFont(PackNumberFont);

            HSSFCellStyle GreyRightMediumBorderCellStyle = hssfworkbook.CreateCellStyle();
            GreyRightMediumBorderCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            GreyRightMediumBorderCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            GreyRightMediumBorderCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            GreyRightMediumBorderCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            GreyRightMediumBorderCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            GreyRightMediumBorderCellStyle.FillForegroundColor = NPOI.HSSF.Util.HSSFColor.GREY_25_PERCENT.index;
            GreyRightMediumBorderCellStyle.FillPattern = HSSFCellStyle.SOLID_FOREGROUND;
            GreyRightMediumBorderCellStyle.FillBackgroundColor = NPOI.HSSF.Util.HSSFColor.YELLOW.index;
            GreyRightMediumBorderCellStyle.SetFont(SimpleFont);
            #endregion

            //HSSFCell ConfirmCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, s);
            //ConfirmCell.CellStyle = TempStyle;

            if (FrontsOrdersDataTable.Rows.Count > 0)
                FrontsReport(hssfworkbook, HeaderStyle, PackNumberFont, SimpleFont, SimpleCellStyle, cellStyle, FrontsOrdersDataTable);

            if (DecorOrdersDataTable.Rows.Count > 0)
                DecorReport(hssfworkbook, HeaderStyle, SimpleFont, SimpleCellStyle, cellStyle, DecorOrdersDataTable);

            string ReportFilePath = string.Empty;

            //ReportFilePath = Application.StartupPath + @"\" + "Отчеты";

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //ReportFilePath = Application.StartupPath + @"\Отчеты\" + @"Статистика\";

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //ReportFilePath = ReadReportFilePath("StatisticsReportPath.config");
            //FileInfo file = new FileInfo(ReportFilePath + FileName + ".xls");

            //int j = 1;
            //while (file.Exists == true)
            //{
            //    file = new FileInfo(ReportFilePath + FileName + "(" + j++ + ").xls");
            //}

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        private int FrontsReport(HSSFWorkbook hssfworkbook, HSSFCellStyle HeaderStyle, HSSFFont PackNumberFont,
            HSSFFont SimpleFont, HSSFCellStyle SimpleCellStyle, HSSFCellStyle cellStyle,
            DataTable FrontsOrdersDataTable)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Фасады");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            int DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 32 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 28 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 18 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 17 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 18 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 6 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 6 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 8 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 6 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 14 * 256);

            decimal Square = 0;
            int FrontsCount = 0;
            int CurvedCount = 0;

            FillFronts(FrontsOrdersDataTable);

            if (FrontsResultDataTable.Rows.Count != 0)
            {
                DisplayIndex = 0;
                HSSFCell cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Фасад");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет профиля");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет профиля-2");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Патина");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Тип наполнителя");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет наполнителя");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Тип наполнителя-2");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Цвет наполнителя-2");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Выс.");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Шир.");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Площ.");
                cell4.CellStyle = HeaderStyle;
                cell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Кол.");
                cell4.CellStyle = HeaderStyle;
                if (Security.PriceAccess)
                {
                    HSSFCell cell15 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Ср.цена, евро");
                    cell15.CellStyle = HeaderStyle;
                    HSSFCell cell16 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Сумма, евро");
                    cell16.CellStyle = HeaderStyle;
                }

                RowIndex++;

                Square = GetSquare(FrontsResultDataTable);
                FrontsCount = GetCount(FrontsResultDataTable, false);
                CurvedCount = GetCount(FrontsResultDataTable, true);

                int ColumnCount = FrontsResultDataTable.Columns.Count;
                if (!Security.PriceAccess)
                {
                    ColumnCount = FrontsResultDataTable.Columns.Count - 2;
                }

                //вывод заказов фасадов
                for (int x = 0; x < FrontsResultDataTable.Rows.Count; x++)
                {
                    if (FrontsResultDataTable.Rows.Count == 0)
                        break;

                    for (int y = 0; y < ColumnCount; y++)
                    {
                        Type t = FrontsResultDataTable.Rows[x][y].GetType();

                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(Convert.ToDouble(FrontsResultDataTable.Rows[x][y]));

                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(Convert.ToInt32(FrontsResultDataTable.Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(y);
                            cell.SetCellValue(FrontsResultDataTable.Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }

                RowIndex++;

                HSSFCellStyle cellStyle1 = hssfworkbook.CreateCellStyle();
                cellStyle1.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.000");
                cellStyle1.SetFont(SimpleFont);

                HSSFCell cell17 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Итого: ");
                cell17.CellStyle = cellStyle1;
                HSSFCell cell18 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "всего фасадов: " + FrontsCount + " шт.");
                cell18.CellStyle = cellStyle1;
                HSSFCell cell19 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 1, "в том числе гнутых: " + CurvedCount + " шт.");
                cell19.CellStyle = cellStyle1;

                if (Square > 0)
                {
                    HSSFCell cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1,
                        "площадь: " + Decimal.Round(Square, 3, MidpointRounding.AwayFromZero) + " м.кв.");

                    cell20.CellStyle = cellStyle1;
                }

                RowIndex++;
            }
            return RowIndex;
        }

        private int DecorReport(HSSFWorkbook hssfworkbook, HSSFCellStyle HeaderStyle,
            HSSFFont SimpleFont, HSSFCellStyle SimpleCellStyle, HSSFCellStyle cellStyle,
            DataTable DecorOrdersDataTable)
        {
            int RowIndex = 0;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Декор");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            sheet1.SetColumnWidth(0, 20 * 256);
            sheet1.SetColumnWidth(1, 10 * 256);
            sheet1.SetColumnWidth(2, 26 * 256);
            sheet1.SetColumnWidth(3, 15 * 256);
            sheet1.SetColumnWidth(4, 15 * 256);
            sheet1.SetColumnWidth(5, 9 * 256);
            if (Security.PriceAccess)
            {
                sheet1.SetColumnWidth(6, 17 * 256);
                sheet1.SetColumnWidth(7, 15 * 256);
            }
            //декор

            FillDecor(DecorOrdersDataTable);

            for (int c = 0; c < DecorCatalog.DecorProductsCount; c++)
            {
                if (DecorResultDataTable[c].Rows.Count == 0)
                    continue;
                HSSFCell cell15 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Название");
                cell15.CellStyle = HeaderStyle;
                HSSFCell cell16 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "");
                cell16.CellStyle = HeaderStyle;
                HSSFCell cell17 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цвет");
                cell17.CellStyle = HeaderStyle;
                HSSFCell cell18 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Длин\\Выс.");
                cell18.CellStyle = HeaderStyle;
                HSSFCell cell19 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, "Шир.");
                cell19.CellStyle = HeaderStyle;
                HSSFCell cell20 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Кол.");
                cell20.CellStyle = HeaderStyle;
                if (Security.PriceAccess)
                {
                    HSSFCell cell22 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, "Ср.цена, евро");
                    cell22.CellStyle = HeaderStyle;
                    HSSFCell cell23 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Сумма, евро");
                    cell23.CellStyle = HeaderStyle;
                }

                RowIndex++;

                int ColumnCount = DecorResultDataTable[c].Columns.Count;
                if (!Security.PriceAccess)
                {
                    ColumnCount = DecorResultDataTable[c].Columns.Count - 2;
                }

                //вывод заказов декора в excel
                for (int x = 0; x < DecorResultDataTable[c].Rows.Count; x++)
                {
                    for (int y = 0; y < ColumnCount; y++)
                    {
                        int ColumnIndex = y;

                        if (y == 0)
                        {
                            ColumnIndex = y;
                        }
                        else
                        {
                            ColumnIndex = y + 1;
                        }

                        Type t = DecorResultDataTable[c].Rows[x][y].GetType();

                        sheet1.CreateRow(RowIndex).CreateCell(1).CellStyle = SimpleCellStyle;

                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(DecorResultDataTable[c].Rows[x][y]));

                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(DecorResultDataTable[c].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            cell.SetCellValue(DecorResultDataTable[c].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                    }

                    RowIndex++;
                }
                RowIndex++;
            }
            return RowIndex;
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}
    }
}