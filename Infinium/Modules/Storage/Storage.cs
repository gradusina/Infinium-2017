using NPOI.HPSF;
using NPOI.HSSF.UserModel;
using NPOI.HSSF.UserModel.Contrib;
using NPOI.HSSF.Util;

using System;
using System.Collections;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Printing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Windows.Forms;
using System.Xml;

namespace Infinium.Store
{
    public class StoreInvoiceManager
    {
        DataTable GroupsDataTable;
        DataTable SubGroupsDataTable;
        public DataTable MeasuresDataTable;
        public DataTable ColorsDT;
        public DataTable CoversDataTable;
        public DataTable PatinaDataTable;
        private DataTable PatinaRALDataTable = null;
        public DataTable CurrencyTypesDataTable;
        public DataTable StoreDataTable;
        public DataTable StoreItemsDataTable;
        public DataTable ParamsDataTable;
        public DataTable SellersDataTable;
        public DataTable FactoryDataTable;
        DataTable InsetColorsDataTable = null;
        DataTable dtInsetTypes = null;

        SqlDataAdapter StoreDA;
        SqlCommandBuilder StoreCB;

        BindingSource ManufacturersBS;
        BindingSource StoreBS;
        BindingSource StoreItemsBS;
        BindingSource GroupsBS;
        BindingSource SubGroupsBS;

        PercentageDataGrid GroupsDataGrid;
        PercentageDataGrid SubGroupsDataGrid;
        PercentageDataGrid StoreDataGrid;

        public StoreInvoiceManager(ref PercentageDataGrid tGroupsDataGrid,
            ref PercentageDataGrid tSubGroupsDataGrid, ref PercentageDataGrid tStoreDataGrid)
        {
            StoreDataGrid = tStoreDataGrid;
            SubGroupsDataGrid = tSubGroupsDataGrid;
            GroupsDataGrid = tGroupsDataGrid;

            CreateAndFill();
            Binding();
        }

        public void AddSize()
        {
            if (StoreBS.Count == 0)
                return;

            int PurchaseInvoiceID = -1;
            int StoreItemID = -1;
            int Capacity = -1;
            int Weight = -1;
            decimal InvoiceCount = -1;
            decimal CurrentCount = -1;
            int PriceEUR = -1;
            int CurrencyTypeID = -1;

            if (((DataRowView)StoreBS.Current).Row["PurchaseInvoiceID"] != DBNull.Value)
                PurchaseInvoiceID = Convert.ToInt32(((DataRowView)StoreBS.Current).Row["PurchaseInvoiceID"]);
            if (((DataRowView)StoreBS.Current).Row["StoreItemID"] != DBNull.Value)
                StoreItemID = Convert.ToInt32(((DataRowView)StoreBS.Current).Row["StoreItemID"]);
            if (((DataRowView)StoreBS.Current).Row["Capacity"] != DBNull.Value)
                Capacity = Convert.ToInt32(((DataRowView)StoreBS.Current).Row["Capacity"]);
            if (((DataRowView)StoreBS.Current).Row["Weight"] != DBNull.Value)
                Weight = Convert.ToInt32(((DataRowView)StoreBS.Current).Row["Weight"]);
            if (((DataRowView)StoreBS.Current).Row["InvoiceCount"] != DBNull.Value)
                InvoiceCount = Convert.ToDecimal(((DataRowView)StoreBS.Current).Row["InvoiceCount"]);
            if (((DataRowView)StoreBS.Current).Row["CurrentCount"] != DBNull.Value)
                CurrentCount = Convert.ToDecimal(((DataRowView)StoreBS.Current).Row["CurrentCount"]);
            if (((DataRowView)StoreBS.Current).Row["PriceEUR"] != DBNull.Value)
                PriceEUR = Convert.ToInt32(((DataRowView)StoreBS.Current).Row["PriceEUR"]);
            if (((DataRowView)StoreBS.Current).Row["CurrencyTypeID"] != DBNull.Value)
                CurrencyTypeID = Convert.ToInt32(((DataRowView)StoreBS.Current).Row["CurrencyTypeID"]);

            //create new blank row
            {
                DataRow NewRow = StoreDataTable.NewRow();
                if (PurchaseInvoiceID > -1)
                    NewRow["PurchaseInvoiceID"] = PurchaseInvoiceID;
                if (StoreItemID > -1)
                    NewRow["StoreItemID"] = StoreItemID;
                if (Capacity > -1)
                    NewRow["Capacity"] = Capacity;
                if (Weight > -1)
                    NewRow["Weight"] = Weight;
                if (InvoiceCount > -1)
                    NewRow["InvoiceCount"] = InvoiceCount;
                if (CurrentCount > -1)
                    NewRow["CurrentCount"] = CurrentCount;
                if (PriceEUR > -1)
                    NewRow["PriceEUR"] = PriceEUR;
                if (CurrencyTypeID > -1)
                    NewRow["CurrencyTypeID"] = CurrencyTypeID;

                StoreDataTable.Rows.Add(NewRow);
            }

        }

        public int FilterColors(int TechStoreID)
        {
            DataRow[] Rows = dtInsetTypes.Select("InsetTypeID = " + TechStoreID);
            if (Rows.Count() == 0)
            {
                return -1;
            }
            else
            {
                return Convert.ToInt32(Rows[0]["GroupID"]);
            }
        }

        public int FilterCovers(int TechStoreID)
        {
            DataRow[] Rows = dtInsetTypes.Select("InsetTypeID = " + TechStoreID);
            if (Rows.Count() == 0)
            {
                return -1;
            }
            else
            {
                return Convert.ToInt32(Rows[0]["GroupID"]);
            }
        }

        public string GetSellerCode(int id)
        {
            DataRow[] rows = ColorsDT.Select("ColorID = " + id);
            if (rows.Count() > 0)
            {
                return rows[0]["SellerCode"].ToString();
            }
            return string.Empty;
        }


        public void GetColorName(int TechStoreID, ref string ColorName, ref string SellerCode)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName, SellerCode FROM TechStore WHERE TechStoreID=" + TechStoreID, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    try
                    {
                        DataRow[] Rows = DT.Select("TechStoreID = " + TechStoreID);
                        if (Rows.Any())
                        {
                            ColorName = Rows[0]["TechStoreName"].ToString();
                            SellerCode = Rows[0]["SellerCode"].ToString();
                        }
                    }
                    catch
                    {
                        return;
                    }
                }
            }
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("GroupID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            ColorsDT.Columns.Add(new DataColumn("SellerCode", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName, SellerCode FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["GroupID"] = 1;
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        NewRow["SellerCode"] = DT.Rows[i]["SellerCode"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID<>-1", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        string ColorName = string.Empty;
                        string SellerCode = string.Empty;
                        GetColorName(Convert.ToInt32(DT.Rows[i]["InsetColorID"]), ref ColorName, ref SellerCode);
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                        NewRow["GroupID"] = Convert.ToInt64(DT.Rows[i]["GroupID"]);
                        NewRow["ColorName"] = ColorName;
                        NewRow["SellerCode"] = SellerCode;
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            {
                DataRow NewRow = ColorsDT.NewRow();
                NewRow["ColorID"] = 0;
                NewRow["GroupID"] = -1;
                NewRow["ColorName"] = "на выбор";
                ColorsDT.Rows.Add(NewRow);
            }
            {
                DataRow NewRow = ColorsDT.NewRow();
                NewRow["ColorID"] = -1;
                NewRow["GroupID"] = -1;
                NewRow["ColorName"] = "-";
                ColorsDT.Rows.Add(NewRow);
            }
            DataTable Table = new DataTable();
            using (DataView DV = new DataView(ColorsDT))
            {
                DV.Sort = "GroupID, ColorName";
                Table = DV.ToTable();
            }
            ColorsDT.Clear();
            ColorsDT = Table.Copy();
        }

        private void GetInsetColorsDT()
        {
            InsetColorsDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InsetColors.InsetColorID, InsetColors.GroupID, infiniu2_catalog.dbo.TechStore.TechStoreName AS InsetColorName FROM InsetColors" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON InsetColors.InsetColorID = infiniu2_catalog.dbo.TechStore.TechStoreID ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InsetColorsDataTable);
            }

        }

        private void CreateAndFill()
        {
            dtInsetTypes = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetTypes",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(dtInsetTypes);
            }

            GetInsetColorsDT();

            GroupsDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(GroupsDataTable);
            }

            SubGroupsDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(SubGroupsDataTable);
            }

            MeasuresDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDataTable);
            }

            DataTable DT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DT);
            }
            GetColorsDT();
            //ColorsDataTable = new DataTable();

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDataTable);
            //    {
            //        for (int i = 0; i < DT.Rows.Count; i++)
            //        {
            //            DataRow NewRow = ColorsDataTable.NewRow();
            //            NewRow["ColorsGroupID"] = 0;
            //            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
            //            NewRow["TechStoreName"] = DT.Rows[i]["TechStoreName"].ToString();
            //            ColorsDataTable.Rows.Add(NewRow);
            //        }
            //        DataRow EmptyRow1 = ColorsDataTable.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDataTable.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDataTable.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDataTable.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            PatinaDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }

            CurrencyTypesDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDataTable);
            }

            StoreItemsDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDataTable);
            }

            StoreDataTable = new DataTable();

            StoreDA = new SqlDataAdapter("SELECT TOP 0 Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID", ConnectionStrings.StorageConnectionString);
            StoreDA.Fill(StoreDataTable);
            StoreCB = new SqlCommandBuilder(StoreDA);

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM Store", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(StoreDataTable);
            //}

            SellersDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Sellers ORDER BY SellerName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDataTable);
            }

            FactoryDataTable = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Factory WHERE FactoryID > 0", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FactoryDataTable);
            }

            ParamsDataTable = new DataTable();
            ParamsDataTable.Columns.Add(new DataColumn("Param", Type.GetType("System.String")));

            CreateCoversDT();
        }

        public void UpdateStoreItems(int TechStoreSubGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore WHERE TechStoreSubGroupID=" + TechStoreSubGroupID + " ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                StoreItemsDataTable.Clear();
                DA.Fill(StoreItemsDataTable);
            }
            StoreItemsBS.MoveFirst();
        }

        private void CreateCoversDT()
        {
            CoversDataTable = new DataTable();
            CoversDataTable.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDataTable.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDataTable.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDataTable.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDataTable.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDataTable.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDataTable.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Binding()
        {
            GroupsBS = new BindingSource()
            {
                DataSource = GroupsDataTable
            };
            GroupsDataGrid.DataSource = GroupsBS;

            SubGroupsBS = new BindingSource()
            {
                DataSource = SubGroupsDataTable
            };
            SubGroupsDataGrid.DataSource = SubGroupsBS;

            StoreBS = new BindingSource()
            {
                DataSource = StoreDataTable
            };
            StoreDataGrid.DataSource = StoreBS;

            StoreItemsBS = new BindingSource()
            {
                DataSource = StoreItemsDataTable
            };
            ManufacturersBS = new BindingSource()
            {
                DataSource = new DataView(SellersDataTable)
            };
        }

        public BindingSource GroupsList
        {
            get { return GroupsBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public BindingSource StoreBSList
        {
            get { return StoreBS; }
        }

        public BindingSource StoreItemsList
        {
            get { return StoreItemsBS; }
        }

        public BindingSource ManufacturersList
        {
            get { return ManufacturersBS; }
        }

        public DataGridViewComboBoxColumn ManufacturerColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ManufacturerColumn",
                    HeaderText = "Изготовитель",
                    DataPropertyName = "ManufacturerID",
                    DataSource = new DataView(SellersDataTable),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 60
                };
                return Column;
            }
        }

        public void FilterSubGroups(int TechStoreGroupID)
        {
            SubGroupsBS.Filter = "TechStoreGroupID = " + TechStoreGroupID;
            SubGroupsBS.MoveFirst();
        }

        public void FilterItems(int StoreSubGroupID)
        {
            ArrayList array = new ArrayList();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID FROM TechStore" +
                " WHERE TechStoreSubGroupID = " + StoreSubGroupID,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        array.Add(Convert.ToInt32(DT.Rows[i]["TechStoreID"]));
                    }
                }
            }

            if (array.Count > 0)
                StoreItemsBS.Filter = "TechStoreID IN (" + string.Join(",", array.OfType<int>().ToArray()) + ")";
            else
                StoreItemsBS.Filter = "TechStoreID = -1";

            StoreItemsBS.MoveFirst();
        }

        public DataTable FilterParams(int StoreItemID)
        {
            ParamsDataTable.Clear();

            if (StoreItemsBS.Count == 0)
                return ParamsDataTable;

            if (StoreItemsBS.Current == null)
                return ParamsDataTable;

            DataRow[] SIR = StoreItemsDataTable.Select("TechStoreID = " + StoreItemID);


            foreach (DataColumn Col in StoreItemsDataTable.Columns)
            {
                string str = Col.ColumnName;
                if (SIR[0][Col.ColumnName] == DBNull.Value)
                    continue;

                try
                {
                    if (Convert.ToDecimal(SIR[0][Col.ColumnName]) == 0)
                    {
                        DataRow NewRow = ParamsDataTable.NewRow();
                        NewRow["Param"] = Col.ColumnName;
                        ParamsDataTable.Rows.Add(NewRow);
                    }
                }
                catch
                {
                    continue;
                }
            }

            {
                DataRow NewRow = ParamsDataTable.NewRow();
                NewRow["Param"] = "Count";
                ParamsDataTable.Rows.Add(NewRow);
            }

            return ParamsDataTable;
        }

        public void AddItem(int StoreItemID, decimal Length, decimal Width, decimal Height, decimal Thickness,
            decimal Diameter, decimal Admission, decimal Capacity, decimal Weight,
            int ColorID, int PatinaID, int CoverID, decimal Price, decimal Count, int CurrencyTypeID, int FactoryID,
            bool bProduced, bool bBestBefore, DateTime ProducedDate, DateTime BestBeforeDate, int ManufacturerID, string BatchNumber, string Notes,
            string TechStoreName, DateTime IncomeDate)
        {
            DataRow NewRow = StoreDataTable.NewRow();

            if (StoreDataTable.Columns.Contains("CreateDateTime"))
                NewRow["CreateDateTime"] = IncomeDate;
            NewRow["StoreItemID"] = StoreItemID;
            NewRow["TechStoreName"] = TechStoreName;
            if (Length > -1)
                NewRow["Length"] = Length;
            if (Width > -1)
                NewRow["Width"] = Width;
            if (Height > -1)
                NewRow["Height"] = Height;
            if (Thickness > -1)
                NewRow["Thickness"] = Thickness;
            if (Diameter > -1)
                NewRow["Diameter"] = Diameter;
            if (Admission > -1)
                NewRow["Admission"] = Admission;
            if (Capacity > -1)
                NewRow["Capacity"] = Capacity;
            if (Weight > -1)
                NewRow["Weight"] = Weight;
            if (ColorID > -1)
                NewRow["ColorID"] = ColorID;
            if (CoverID > -1)
                NewRow["CoverID"] = CoverID;
            if (PatinaID > -1)
                NewRow["PatinaID"] = PatinaID;
            if (BatchNumber.Length > 0)
                NewRow["BatchNumber"] = BatchNumber;
            if (bProduced)
                NewRow["Produced"] = ProducedDate;
            if (bBestBefore)
                NewRow["BestBefore"] = BestBeforeDate;
            if (Notes.Length > 0)
                NewRow["Notes"] = Notes;

            NewRow["InvoiceCount"] = Count;
            NewRow["CurrentCount"] = Count;

            decimal Cost = 0;
            decimal VAT = 0;
            decimal VATCost = 0;

            if (Price > -1)
            {
                Cost = GetCost(StoreItemID, Thickness, Length, Width, Height, Diameter, Capacity, Weight, Price, Count);
                VAT = Cost * 20 / 100;
                VATCost = Cost + VAT;

                NewRow["Price"] = Price;
                NewRow["CurrencyTypeID"] = CurrencyTypeID;

                NewRow["Cost"] = Cost;
                NewRow["VAT"] = VAT;
                NewRow["VATCost"] = VATCost;
            }

            NewRow["FactoryID"] = FactoryID;
            NewRow["ManufacturerID"] = ManufacturerID;

            StoreDataTable.Rows.Add(NewRow);
        }

        private void Recalculation()
        {
            int CurrencyTypeID = 0;
            int StoreItemID = 0;
            decimal Count = 0;

            decimal Cost = 0;
            decimal VAT = 0;
            decimal VATCost = 0;
            decimal Price = 0;

            decimal Thickness = -1;
            decimal Length = -1;
            decimal Width = -1;
            decimal Height = -1;
            decimal Diameter = -1;
            decimal Capacity = -1;
            decimal Weight = -1;

            foreach (DataRow Row in StoreDataTable.Rows)
            {
                if (Row.RowState == DataRowState.Deleted)
                    continue;

                if (Row["Price"] != DBNull.Value)
                    Price = Convert.ToDecimal(Row["Price"]);

                if (Price > -1)
                {
                    Length = -1;
                    Width = -1;
                    Height = -1;
                    Capacity = -1;
                    Weight = -1;

                    if (Row["StoreItemID"] != DBNull.Value)
                        StoreItemID = Convert.ToInt32(Row["StoreItemID"]);

                    if (Row["CurrencyTypeID"] != DBNull.Value)
                        CurrencyTypeID = Convert.ToInt32(Row["CurrencyTypeID"]);

                    if (Row["Thickness"] != DBNull.Value)
                        Thickness = Convert.ToDecimal(Row["Thickness"]);

                    if (Row["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(Row["Length"]);

                    if (Row["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(Row["Width"]);

                    if (Row["Height"] != DBNull.Value)
                        Height = Convert.ToDecimal(Row["Height"]);

                    if (Row["Diameter"] != DBNull.Value)
                        Diameter = Convert.ToDecimal(Row["Diameter"]);

                    if (Row["Capacity"] != DBNull.Value)
                        Capacity = Convert.ToDecimal(Row["Capacity"]);

                    if (Row["Weight"] != DBNull.Value)
                        Weight = Convert.ToDecimal(Row["Weight"]);

                    if (Row["InvoiceCount"] != DBNull.Value)
                        Count = Convert.ToDecimal(Row["InvoiceCount"]);

                    Cost = GetCost(StoreItemID, Thickness, Length, Width, Height, Diameter, Capacity, Weight, Price, Count);
                    VAT = Cost * 20 / 100;
                    VATCost = Cost + VAT;

                    Row["Price"] = Price;
                    Row["CurrencyTypeID"] = CurrencyTypeID;

                    Row["Cost"] = Cost;
                    Row["VAT"] = VAT;
                    Row["VATCost"] = VATCost;
                }
            }
        }

        private bool GetNbrbBankData(DateTime date, ref decimal BYRRate, ref decimal USDRate, ref decimal RUBRate)
        {
            string EuroXML = "";
            string USDXML = "";
            string RUBXML = "";
            string url = "http://www.nbrb.by/Services/XmlExRates.aspx?ondate=" + date.ToString("MM/dd/yyyy");

            HttpWebRequest myHttpWebRequest;
            HttpWebResponse myHttpWebResponse;

            try
            {
                ServicePointManager.SecurityProtocol = (SecurityProtocolType)3072;
                myHttpWebRequest = (HttpWebRequest)HttpWebRequest.Create(url);
                myHttpWebRequest.KeepAlive = false;
                myHttpWebRequest.AllowAutoRedirect = true;
                CookieContainer cookieContainer = new CookieContainer();
                myHttpWebRequest.CookieContainer = cookieContainer;
                myHttpWebResponse = (HttpWebResponse)myHttpWebRequest.GetResponse();
            }
            catch
            {
                return false;
            }

            XmlTextReader reader = new XmlTextReader(myHttpWebResponse.GetResponseStream());
            //XmlTextReader reader = new XmlTextReader("http://www.nbrb.by/Services/XmlExRates.aspx?ondate=" + date.ToString("MM/dd/yyyy"));
            try
            {
                while (reader.Read())
                {
                    switch (reader.NodeType)
                    {
                        case XmlNodeType.Element:
                            if (reader.Name == "Currency")
                            {
                                if (reader.HasAttributes)
                                {
                                    while (reader.MoveToNextAttribute())
                                    {
                                        if (reader.Name == "Id")
                                        {
                                            if (reader.Value == "292")
                                            {
                                                reader.MoveToElement();
                                                EuroXML = reader.ReadOuterXml();
                                            }
                                        }
                                        if (reader.Name == "Id")
                                        {
                                            if (reader.Value == "145")
                                            {
                                                reader.MoveToElement();
                                                USDXML = reader.ReadOuterXml();
                                            }
                                        }
                                        if (reader.Name == "Id")
                                        {
                                            if (reader.Value == "298")
                                            {
                                                reader.MoveToElement();
                                                RUBXML = reader.ReadOuterXml();
                                            }
                                        }
                                        if (reader.Name == "Id")
                                        {
                                            if (reader.Value == "19")
                                            {
                                                reader.MoveToElement();
                                                EuroXML = reader.ReadOuterXml();
                                            }
                                        }
                                    }
                                }
                            }

                            break;
                    }
                }
                {
                    XmlDocument euroXmlDocument = new XmlDocument();
                    euroXmlDocument.LoadXml(EuroXML);
                    XmlNode xmlNode = euroXmlDocument.SelectSingleNode("Currency/Rate");
                    bool b = decimal.TryParse(xmlNode.InnerText, out BYRRate);
                    if (!b)
                        BYRRate = Convert.ToDecimal(xmlNode.InnerText = xmlNode.InnerText.Replace('.', ','));
                    else
                        BYRRate = Convert.ToDecimal(xmlNode.InnerText);
                }
                {
                    XmlDocument euroXmlDocument = new XmlDocument();
                    euroXmlDocument.LoadXml(USDXML);
                    XmlNode xmlNode = euroXmlDocument.SelectSingleNode("Currency/Rate");
                    bool b = decimal.TryParse(xmlNode.InnerText, out USDRate);
                    if (!b)
                        USDRate = Convert.ToDecimal(xmlNode.InnerText = xmlNode.InnerText.Replace('.', ','));
                    else
                        USDRate = Convert.ToDecimal(xmlNode.InnerText);
                }
                {
                    XmlDocument euroXmlDocument = new XmlDocument();
                    euroXmlDocument.LoadXml(RUBXML);
                    XmlNode xmlNode = euroXmlDocument.SelectSingleNode("Currency/Rate");
                    bool b = decimal.TryParse(xmlNode.InnerText, out RUBRate);
                    if (!b)
                        RUBRate = Convert.ToDecimal(xmlNode.InnerText = xmlNode.InnerText.Replace('.', ','));
                    else
                        RUBRate = Convert.ToDecimal(xmlNode.InnerText);
                }
            }
            catch (WebException ex)
            {
                MessageBox.Show(ex.Message + " . КУРСЫ МОЖНО БУДЕТ ВВЕСТИ ВРУЧНУЮ");
                return false;
            }
            return true;
        }

        private decimal GetRURBYRCurrency(string NbrbBankData)
        {
            string currency = string.Empty;
            decimal Currency;

            try
            {
                int start = NbrbBankData.IndexOf("RUB");


                for (int i = start + 56; i < NbrbBankData.Length; i++)
                {
                    if (NbrbBankData[i] != '<')
                        currency += NbrbBankData[i].ToString();
                    else
                        break;
                }
            }
            catch
            {
                return 0;
            }

            try
            {
                currency = currency.Replace('.', ',');

                Currency = Convert.ToDecimal(currency);
            }
            catch
            {
                return 0;
            }

            return Convert.ToDecimal(currency);
        }

        private decimal GetUSDBYRCurrency(string NbrbBankData)
        {
            string currency = string.Empty;
            decimal Currency;

            try
            {
                int start = NbrbBankData.IndexOf("USD");


                for (int i = start + 50; i < NbrbBankData.Length; i++)
                {
                    if (NbrbBankData[i] != '<')
                        currency += NbrbBankData[i].ToString();
                    else
                        break;
                }
            }
            catch
            {
                return 0;
            }

            try
            {
                currency = currency.Replace('.', ',');

                Currency = Convert.ToDecimal(currency);
            }
            catch
            {
                return 0;
            }

            return Convert.ToDecimal(currency);
        }

        private decimal GetEURBYRCurrency(string NbrbBankData)
        {
            string currency = string.Empty;
            decimal Currency;

            try
            {
                int start = NbrbBankData.IndexOf("EUR");


                for (int i = start + 44; i < NbrbBankData.Length; i++)
                {
                    if (NbrbBankData[i] != '<')
                        currency += NbrbBankData[i].ToString();
                    else
                        break;
                }
            }
            catch
            {
                return 0;
            }

            try
            {
                currency = currency.Replace('.', ',');

                Currency = Convert.ToDecimal(currency);
            }
            catch
            {
                return 0;
            }

            return Convert.ToDecimal(currency);
        }

        public void GetDateRates(DateTime DateTime, ref bool RateExist, ref decimal USD, ref decimal RUB, ref decimal BYN)
        {
            using (DataTable DT = new DataTable())
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT * FROM DateRates WHERE CAST(Date AS Date) = 
                    '" + DateTime.ToString("yyyy-MM-dd") + "'",
                    ConnectionStrings.MarketingReferenceConnectionString))
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                    {
                        RateExist = true;
                        USD = Convert.ToDecimal(DT.Rows[0]["USD"]);
                        RUB = Convert.ToDecimal(DT.Rows[0]["RUB"]);
                        BYN = Convert.ToDecimal(DT.Rows[0]["BYN"]);
                    }
                    else
                        RateExist = false;
                }
            }
            return;
        }

        public void SaveInvoice(DateTime IncomeDate, int SellerID, string DocNumber, int FactoryID, int CurrencyTypeID, string Reason, string Notes)
        {
            try
            {
                decimal EURRUBCurrency = 1000000;
                decimal EURUSDCurrency = 1000000;
                decimal EURBYRCurrency = 1000000;

                bool RateExist = false;

                GetDateRates(IncomeDate, ref RateExist, ref EURUSDCurrency, ref EURRUBCurrency, ref EURBYRCurrency);
                if (!RateExist)
                    GetNbrbBankData(IncomeDate, ref EURBYRCurrency, ref EURUSDCurrency, ref EURRUBCurrency);

                decimal Rate = 0;
                decimal Price = 0;
                decimal PriceEUR = 1;

                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM PurchaseInvoices", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);

                            if (CurrencyTypeID == 2)
                            {
                                Rate = EURUSDCurrency;
                            }
                            if (CurrencyTypeID == 3)
                            {
                                Rate = EURRUBCurrency;
                            }
                            if (CurrencyTypeID == 5)
                            {
                                Rate = EURBYRCurrency;
                            }

                            DataRow NewRow = DT.NewRow();
                            NewRow["IncomeDate"] = IncomeDate;
                            NewRow["SellerID"] = SellerID;
                            NewRow["DocNumber"] = DocNumber;
                            NewRow["Reason"] = Reason;
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["CurrencyTypeID"] = CurrencyTypeID;
                            NewRow["Rate"] = Rate;
                            NewRow["Notes"] = Notes;
                            DT.Rows.Add(NewRow);

                            DA.Update(DT);
                        }
                    }
                }

                int PurchaseInvoiceID = -1;

                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM PurchaseInvoices ORDER BY PurchaseInvoiceID DESC",
                   ConnectionStrings.StorageConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        if (DT.Rows.Count > 0)
                        {
                            PurchaseInvoiceID = Convert.ToInt32(DT.Rows[0]["PurchaseInvoiceID"]);
                        }
                    }
                }

                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM Store", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);

                            foreach (DataRow Row in StoreDataTable.Rows)
                            {
                                Row["PurchaseInvoiceID"] = PurchaseInvoiceID;
                                Row["FactoryID"] = FactoryID;

                                if (Row["Price"] != DBNull.Value)
                                    Price = Convert.ToDecimal(Row["Price"]);

                                if (Convert.ToInt32(Row["CurrencyTypeID"]) == 2)
                                {
                                    PriceEUR = Price * EURUSDCurrency / EURBYRCurrency;
                                    PriceEUR = Decimal.Round(PriceEUR, 4, MidpointRounding.AwayFromZero);
                                }

                                if (Convert.ToInt32(Row["CurrencyTypeID"]) == 3)
                                {
                                    PriceEUR = Price * EURRUBCurrency / EURBYRCurrency;
                                    PriceEUR = Decimal.Round(PriceEUR, 4, MidpointRounding.AwayFromZero);
                                }

                                if (Convert.ToInt32(Row["CurrencyTypeID"]) == 5)
                                {
                                    PriceEUR = Price * 1 / EURBYRCurrency;
                                    PriceEUR = Decimal.Round(PriceEUR, 4, MidpointRounding.AwayFromZero);
                                }

                                Row["PriceEUR"] = PriceEUR;

                                DT.ImportRow(Row);
                            }

                            DA.Update(DT);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInvoice НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInvoice КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public bool HasStore
        {
            get { return StoreDataTable.Rows.Count > 0; }
        }

        public void SaveInvoice(int PurchaseInvoiceID, DateTime IncomeDate, int SellerID, string DocNumber, int FactoryID, int CurrencyTypeID, string Reason, string Notes)
        {
            try
            {
                decimal USDRate = 1;
                decimal RURRate = 1;
                decimal BYRRate = 1;
                GetNbrbBankData(IncomeDate, ref BYRRate, ref USDRate, ref RURRate);

                decimal Rate = 0;
                decimal Price = 0;
                decimal PriceEUR = 1;

                if (BYRRate == 0)
                    BYRRate = 1;

                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PurchaseInvoices WHERE PurchaseInvoiceID = " + PurchaseInvoiceID,
                    ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);

                            if (CurrencyTypeID == 2)
                            {
                                Rate = USDRate;
                            }
                            if (CurrencyTypeID == 3)
                            {
                                Rate = RURRate;
                            }
                            if (CurrencyTypeID == 5)
                            {
                                Rate = BYRRate;
                            }

                            DT.Rows[0]["IncomeDate"] = IncomeDate;
                            DT.Rows[0]["SellerID"] = SellerID;
                            DT.Rows[0]["DocNumber"] = DocNumber;
                            DT.Rows[0]["Reason"] = Reason;
                            DT.Rows[0]["FactoryID"] = FactoryID;
                            DT.Rows[0]["CurrencyTypeID"] = CurrencyTypeID;
                            DT.Rows[0]["Rate"] = Rate;
                            DT.Rows[0]["Notes"] = Notes;

                            DA.Update(DT);
                        }
                    }
                }

                foreach (DataRow Row in StoreDataTable.Rows)
                {
                    if (Row.RowState == DataRowState.Deleted)
                        continue;
                    Row["PurchaseInvoiceID"] = PurchaseInvoiceID;
                    Row["FactoryID"] = FactoryID;

                    if (Row["Price"] != DBNull.Value)
                        Price = Convert.ToDecimal(Row["Price"]);

                    if (Convert.ToInt32(Row["CurrencyTypeID"]) == 1)
                    {
                        PriceEUR = Price;
                        PriceEUR = Decimal.Round(PriceEUR, 4, MidpointRounding.AwayFromZero);
                    }

                    if (Convert.ToInt32(Row["CurrencyTypeID"]) == 2)
                    {
                        PriceEUR = Price * USDRate / BYRRate;
                        PriceEUR = Decimal.Round(PriceEUR, 4, MidpointRounding.AwayFromZero);
                    }

                    if (Convert.ToInt32(Row["CurrencyTypeID"]) == 3)
                    {
                        PriceEUR = Price * RURRate / BYRRate;
                        PriceEUR = Decimal.Round(PriceEUR, 4, MidpointRounding.AwayFromZero);
                    }

                    if (Convert.ToInt32(Row["CurrencyTypeID"]) == 5)
                    {
                        PriceEUR = Price * 1 / BYRRate;
                        PriceEUR = Decimal.Round(PriceEUR, 4, MidpointRounding.AwayFromZero);
                    }

                    Row["PriceEUR"] = PriceEUR;
                }

                Recalculation();

                DataTable dt = StoreDataTable.Copy();
                dt.Columns.Remove("TechStoreName");
                string SelectCommand = @"SELECT TOP 0 * FROM Store";
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(dt);
                    }
                }
                dt.Dispose();
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInvoice НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInvoice КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void RemoveItem()
        {
            if (StoreBS.Count == 0)
                return;

            int Pos = StoreBS.Position;

            StoreBS.RemoveCurrent();

            //остается на позиции удаленного
            if (StoreBS.Count > 0)
                if (Pos >= StoreBS.Count)
                {
                    StoreBS.MoveLast();
                    StoreDataGrid.Rows[StoreDataGrid.Rows.Count - 1].Selected = true;
                }
                else
                    StoreBS.Position = Pos;
            //StoreDA.Update(StoreDataTable);
        }

        public void EditInvoice(int PurchaseInvoiceID)
        {
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
                StoreDataTable.Clear();
            }

            StoreDA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" + " WHERE PurchaseInvoiceID = " + PurchaseInvoiceID, ConnectionStrings.StorageConnectionString);

            //StoreDA = new SqlDataAdapter("SELECT * FROM Store WHERE StoreID = 3582", ConnectionStrings.StorageConnectionString);
            //3582	314	0	3148	NULL	NULL	NULL	NULL	50,000	1000,000	NULL	1000,000	NULL	NULL	NULL	1,000	1,000	False	593118,000	44,361	4	29655,900	5931,180	35587,080	1	NULL	NULL	NULL
            StoreDA.Fill(StoreDataTable);
            StoreCB = new SqlCommandBuilder(StoreDA);
        }

        public void GetInvoiceParams(int PurchaseInvoiceID, ref string DocNumber, ref int SellerID, ref int FactoryID,
            ref string Reason, ref DateTime IncomeDate, ref string Notes)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PurchaseInvoices WHERE PurchaseInvoiceID = " + PurchaseInvoiceID,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DocNumber = DT.Rows[0]["DocNumber"].ToString();
                    Reason = DT.Rows[0]["Reason"].ToString();
                    SellerID = Convert.ToInt32(DT.Rows[0]["SellerID"]);
                    FactoryID = Convert.ToInt32(DT.Rows[0]["FactoryID"]);
                    IncomeDate = Convert.ToDateTime(DT.Rows[0]["IncomeDate"]);
                    Notes = DT.Rows[0]["Notes"].ToString();
                }
            }
        }

        private static bool IsCoatingRoller(int StoreItemID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreSubGroups.TechStoreGroupID, TechStore.TechStoreSubGroupID, TechStore.TechStoreID FROM TechStore" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID AND TechStoreSubGroups.TechStoreGroupID = 11" +
                " WHERE (TechStore.TechStoreID = " + StoreItemID + ")",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        return true;

                }
            }
            return false;
        }

        public decimal GetCost(int StoreItemID, decimal Thickness,
            decimal Length, decimal Width, decimal Height,
            decimal Diameter, decimal Capacity, decimal Weight,
            decimal Price, decimal Count)
        {
            int MeasureID = 0;
            decimal Sum = 0;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Thickness, Length, Width, Height," +
                " Diameter, Capacity, Weight, MeasureID FROM TechStore WHERE TechStoreID = " + StoreItemID,
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                    {
                        MeasureID = Convert.ToInt32(DT.Rows[0]["MeasureID"]);

                        //м.кв.
                        if (MeasureID == 1)
                        {
                            ///ВСТАВИТЬ АЛГОРИТМ ДЛЯ "ОБЛИЦОВКА РОЛИКИ"

                            if (IsCoatingRoller(StoreItemID))
                            {
                                if (Thickness < 0 && DT.Rows[0]["Thickness"] != DBNull.Value)
                                    Thickness = Convert.ToDecimal(DT.Rows[0]["Thickness"]);
                                if (Diameter < 0 && DT.Rows[0]["Diameter"] != DBNull.Value)
                                    Diameter = Convert.ToDecimal(DT.Rows[0]["Diameter"]);

                                decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);
                                Sum = Square * Count * Price / 1000000;
                            }
                            else
                            {
                                if (Length < 0 && DT.Rows[0]["Length"] != DBNull.Value)
                                    Length = Convert.ToDecimal(DT.Rows[0]["Length"]);
                                if (Width < 0 && DT.Rows[0]["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(DT.Rows[0]["Width"]);
                                if (Height < 0 && DT.Rows[0]["Height"] != DBNull.Value)
                                    Height = Convert.ToDecimal(DT.Rows[0]["Height"]);
                                if (Length > 0)
                                {
                                    if (Width > 0)
                                    { }
                                    else
                                    {
                                        if (Height > 0)
                                            Width = Height;
                                    }
                                }
                                else
                                {
                                    if (Height > 0)
                                        Length = Height;
                                }
                                Sum = Length * Width * Count * Price / 1000000;
                            }
                        }

                        //м.п.
                        if (MeasureID == 2)
                        {
                            Sum = Length * Count * Price / 1000;
                        }

                        //шт.
                        if (MeasureID == 3)
                        {
                            Sum = Count * Price;
                        }

                        //кг.
                        if (MeasureID == 4)
                        {
                            if (Weight < 0)
                            {
                                Weight = Convert.ToDecimal(DT.Rows[0]["Weight"]);
                            }
                            Sum = Weight * Count * Price;
                        }

                        //л.
                        if (MeasureID == 5)
                        {
                            if (Capacity < 0)
                            {
                                Capacity = Convert.ToDecimal(DT.Rows[0]["Capacity"]);
                            }
                            Sum = Capacity * Count * Price;
                        }

                        //м.куб.
                        if (MeasureID == 6)
                        {
                            if (Length < 0 && DT.Rows[0]["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(DT.Rows[0]["Length"]);
                            if (Width < 0 && DT.Rows[0]["Width"] != DBNull.Value)
                                Width = Convert.ToDecimal(DT.Rows[0]["Width"]);
                            if (Thickness < 0 && DT.Rows[0]["Thickness"] != DBNull.Value)
                                Thickness = Convert.ToDecimal(DT.Rows[0]["Thickness"]);
                            if (Height < 0 && DT.Rows[0]["Height"] != DBNull.Value)
                                Height = Convert.ToDecimal(DT.Rows[0]["Height"]);
                            if (Thickness < 0)
                            {
                                Sum = Length * Width * Height * Count * Price / 1000000000;
                            }
                            if (Height < 0)
                            {
                                Sum = Length * Width * Thickness * Count * Price / 1000000000;
                            }
                        }

                        //тыс.шт.
                        if (MeasureID == 7)
                        {
                            Sum = Count * Price;
                        }


                        Decimal.Round(Sum, 2, MidpointRounding.AwayFromZero);
                    }
                }
            }

            return Sum;
        }

        public int GetLastPurchaseInvoiceID()
        {
            int PurchaseInvoiceID = -1;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM PurchaseInvoices ORDER BY PurchaseInvoiceID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        PurchaseInvoiceID = Convert.ToInt32(DT.Rows[0]["PurchaseInvoiceID"]);
                }
            }

            return PurchaseInvoiceID;
        }

        public int GetLastMovementInvoiceID()
        {
            int MovementInvoiceID = -1;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM MovementInvoices ORDER BY MovementInvoiceID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        MovementInvoiceID = Convert.ToInt32(DT.Rows[0]["MovementInvoiceID"]);
                }
            }

            return MovementInvoiceID;
        }

        public void SaveMovementInvoices(DateTime DateTime,
            int SellerStoreAllocID, int RecipientStoreAllocID, int RecipientSectorID,
            int PersonID, string PersonName, int StoreKeeperID,
            int ClientID, int SellerID,
            string ClientName, string Notes)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM MovementInvoices", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);
                            DataRow NewRow = DT.NewRow();
                            NewRow["DateTime"] = DateTime;
                            NewRow["SellerStoreAllocID"] = SellerStoreAllocID;
                            NewRow["RecipientStoreAllocID"] = RecipientStoreAllocID;
                            NewRow["RecipientSectorID"] = RecipientSectorID;
                            NewRow["PersonID"] = PersonID;
                            NewRow["PersonName"] = PersonName;
                            NewRow["StoreKeeperID"] = StoreKeeperID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ClientID"] = ClientID;
                            NewRow["SellerID"] = SellerID;
                            NewRow["Notes"] = Notes;
                            NewRow["CreateUserID"] = Security.CurrentUserID;
                            NewRow["CreateDateTime"] = Security.GetCurrentDate();
                            DT.Rows.Add(NewRow);
                            DA.Update(DT);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveMovementInvoices НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveMovementInvoices КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void MoveToPersonalStore(int MovementInvoiceID, int PurchaseInvoiceID)
        {
            try
            {
                DataTable MovementInvoiceDetailsDT = new DataTable();
                DataTable PersonalStoreDT = new DataTable();
                DataTable StoreDT = new DataTable();

                SqlDataAdapter da1 = new SqlDataAdapter("SELECT TOP 0 * FROM MovementInvoiceDetails",
                                 ConnectionStrings.StorageConnectionString);
                SqlDataAdapter da2 = new SqlDataAdapter("SELECT TOP 0 * FROM PersonalStore",
                                 ConnectionStrings.StorageConnectionString);
                SqlDataAdapter da3 = new SqlDataAdapter("SELECT * FROM Store WHERE PurchaseInvoiceID = " + PurchaseInvoiceID,
                        ConnectionStrings.StorageConnectionString);

                SqlCommandBuilder cb1 = new SqlCommandBuilder(da1);
                SqlCommandBuilder cb2 = new SqlCommandBuilder(da2);
                SqlCommandBuilder cb3 = new SqlCommandBuilder(da3);

                da1.Fill(MovementInvoiceDetailsDT);
                da2.Fill(PersonalStoreDT);
                da3.Fill(StoreDT);

                for (int i = 0; i < StoreDT.Rows.Count; i++)
                {
                    DataRow NewRow = PersonalStoreDT.NewRow();
                    NewRow["MovementInvoiceID"] = MovementInvoiceID;
                    NewRow["StoreItemID"] = StoreDT.Rows[i]["StoreItemID"];
                    NewRow["Length"] = StoreDT.Rows[i]["Length"];
                    NewRow["Width"] = StoreDT.Rows[i]["Width"];
                    NewRow["Height"] = StoreDT.Rows[i]["Height"];
                    NewRow["Thickness"] = StoreDT.Rows[i]["Thickness"];
                    NewRow["Diameter"] = StoreDT.Rows[i]["Diameter"];
                    NewRow["Admission"] = StoreDT.Rows[i]["Admission"];
                    NewRow["Capacity"] = StoreDT.Rows[i]["Capacity"];
                    NewRow["Weight"] = StoreDT.Rows[i]["Weight"];
                    NewRow["ColorID"] = StoreDT.Rows[i]["ColorID"];
                    NewRow["CoverID"] = StoreDT.Rows[i]["CoverID"];
                    NewRow["PatinaID"] = StoreDT.Rows[i]["PatinaID"];
                    NewRow["InvoiceCount"] = StoreDT.Rows[i]["InvoiceCount"];
                    NewRow["CurrentCount"] = StoreDT.Rows[i]["InvoiceCount"];
                    NewRow["FactoryID"] = StoreDT.Rows[i]["FactoryID"];
                    NewRow["Notes"] = StoreDT.Rows[i]["Notes"];
                    NewRow["Price"] = StoreDT.Rows[i]["Price"];
                    NewRow["PriceEUR"] = StoreDT.Rows[i]["PriceEUR"];
                    NewRow["CurrencyTypeID"] = StoreDT.Rows[i]["CurrencyTypeID"];
                    NewRow["Cost"] = StoreDT.Rows[i]["Cost"];
                    NewRow["VAT"] = StoreDT.Rows[i]["VAT"];
                    NewRow["VATCost"] = StoreDT.Rows[i]["VATCost"];
                    PersonalStoreDT.Rows.Add(NewRow);
                    StoreDT.Rows[i]["CurrentCount"] = 0;
                }

                da2.Update(PersonalStoreDT);
                da3.Update(StoreDT);
                da2.Dispose();
                PersonalStoreDT.Clear();
                da2 = new SqlDataAdapter("SELECT PersonalStoreID FROM PersonalStore WHERE MovementInvoiceID = " + MovementInvoiceID,
                    ConnectionStrings.StorageConnectionString);
                da2.Fill(PersonalStoreDT);
                for (int i = 0; i < PersonalStoreDT.Rows.Count; i++)
                {
                    DataRow NewRow1 = MovementInvoiceDetailsDT.NewRow();
                    NewRow1["MovementInvoiceID"] = MovementInvoiceID;
                    NewRow1["StoreIDFrom"] = StoreDT.Rows[i]["StoreID"];
                    NewRow1["StoreIDTo"] = PersonalStoreDT.Rows[i]["PersonalStoreID"];
                    NewRow1["Count"] = StoreDT.Rows[i]["InvoiceCount"];
                    MovementInvoiceDetailsDT.Rows.Add(NewRow1);
                }
                da1.Update(MovementInvoiceDetailsDT);

                MovementInvoiceDetailsDT.Dispose();
                PersonalStoreDT.Dispose();
                StoreDT.Dispose();
                da1.Dispose();
                da2.Dispose();
                da3.Dispose();
                cb1.Dispose();
                cb2.Dispose();
                cb3.Dispose();
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nКАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        private static string convertDefaultToDos(string src)
        {
            byte[] buffer;
            buffer = Encoding.Default.GetBytes(src);
            Encoding.Convert(Encoding.Default, Encoding.GetEncoding("windows-1251"), buffer);
            return Encoding.Default.GetString(buffer);
        }

        public static bool GetPurchaseInvoiceData(int PurchaseInvoiceID)
        {
            DataTable DT = new DataTable();
            string SelectCommand = @"SELECT infiniu2_storage.dbo.PurchaseInvoices.IncomeDate, infiniu2_storage.dbo.PurchaseInvoices.DocNumber, infiniu2_storage.dbo.PurchaseInvoices.SellerID, infiniu2_storage.dbo.Sellers.UNN, infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupName, infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupName, infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.Measures.Measure, infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_storage.dbo.Store.*, infiniu2_catalog.dbo.TechStore.TechStoreID
                FROM infiniu2_storage.dbo.Store 
                INNER JOIN infiniu2_storage.dbo.PurchaseInvoices ON infiniu2_storage.dbo.Store.PurchaseInvoiceID = infiniu2_storage.dbo.PurchaseInvoices.PurchaseInvoiceID 
                INNER JOIN infiniu2_storage.dbo.Sellers ON infiniu2_storage.dbo.PurchaseInvoices.SellerID = infiniu2_storage.dbo.Sellers.SellerID 
                INNER JOIN infiniu2_catalog.dbo.TechStore ON infiniu2_storage.dbo.Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID 
                INNER JOIN infiniu2_catalog.dbo.Measures ON infiniu2_catalog.dbo.TechStore.MeasureID = infiniu2_catalog.dbo.Measures.MeasureID 
                INNER JOIN infiniu2_catalog.dbo.TechStoreSubGroups ON infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID = infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID 
                INNER JOIN infiniu2_catalog.dbo.TechStoreGroups ON infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreGroupID = infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupID
                WHERE infiniu2_storage.dbo.Store.PurchaseInvoiceID=" + PurchaseInvoiceID + " ORDER BY infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupName, infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupName, infiniu2_catalog.dbo.TechStore.TechStoreName, infiniu2_catalog.dbo.Measures.Measure";

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count == 0)
                return false;
            DT.Columns.Add(new DataColumn(("Amount"), System.Type.GetType("System.Decimal")));
            DT.Columns.Add(new DataColumn(("Factory"), System.Type.GetType("System.String")));
            DT.TableName = "ImportedTable";

            for (int i = 0; i < DT.Rows.Count; i++)
            {
                if (Convert.ToInt32(DT.Rows[i]["FactoryID"]) == 1)
                    DT.Rows[i]["Factory"] = "ЗОВ-Профиль";
                if (Convert.ToInt32(DT.Rows[i]["FactoryID"]) == 2)
                    DT.Rows[i]["Factory"] = "ЗОВ-ТПС";
                DT.Rows[i]["TechStoreGroupName"] = convertDefaultToDos(DT.Rows[i]["TechStoreGroupName"].ToString());
                DT.Rows[i]["TechStoreSubGroupName"] = convertDefaultToDos(DT.Rows[i]["TechStoreSubGroupName"].ToString());
                DT.Rows[i]["TechStoreName"] = convertDefaultToDos(DT.Rows[i]["TechStoreName"].ToString());
                DT.Rows[i]["Measure"] = convertDefaultToDos(DT.Rows[i]["Measure"].ToString());
                DT.Rows[i]["Factory"] = convertDefaultToDos(DT.Rows[i]["Factory"].ToString());

                int MeasureID = Convert.ToInt32(DT.Rows[i]["MeasureID"]);
                int StoreItemID = Convert.ToInt32(DT.Rows[i]["MeasureID"]);
                decimal Thickness = 0;
                decimal Length = 0;
                decimal Width = 0;
                decimal Height = 0;
                decimal Diameter = 0;
                decimal Capacity = 0;
                decimal Weight = 0;
                int Count = Convert.ToInt32(DT.Rows[i]["InvoiceCount"]);

                decimal Amount = 0;
                if (DT.Rows[i]["Thickness"] != DBNull.Value)
                    Thickness = Convert.ToDecimal(DT.Rows[i]["Thickness"]);
                if (DT.Rows[i]["Length"] != DBNull.Value)
                    Length = Convert.ToDecimal(DT.Rows[i]["Length"]);
                if (DT.Rows[i]["Width"] != DBNull.Value)
                    Width = Convert.ToDecimal(DT.Rows[i]["Width"]);
                if (DT.Rows[i]["Height"] != DBNull.Value)
                    Height = Convert.ToDecimal(DT.Rows[i]["Height"]);
                if (DT.Rows[i]["Diameter"] != DBNull.Value)
                    Diameter = Convert.ToDecimal(DT.Rows[i]["Diameter"]);
                if (DT.Rows[i]["Capacity"] != DBNull.Value)
                    Capacity = Convert.ToDecimal(DT.Rows[i]["Capacity"]);
                if (DT.Rows[i]["Weight"] != DBNull.Value)
                    Weight = Convert.ToDecimal(DT.Rows[i]["Weight"]);
                //м.кв.
                if (MeasureID == 1)
                {
                    ///ВСТАВИТЬ АЛГОРИТМ ДЛЯ "ОБЛИЦОВКА РОЛИКИ"

                    if (IsCoatingRoller(StoreItemID))
                    {
                        if (Thickness < 0 && DT.Rows[i]["Thickness"] != DBNull.Value)
                            Thickness = Convert.ToDecimal(DT.Rows[i]["Thickness"]);
                        if (Diameter < 0 && DT.Rows[i]["Diameter"] != DBNull.Value)
                            Diameter = Convert.ToDecimal(DT.Rows[i]["Diameter"]);

                        decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);
                        Amount = Square * Count / 1000000;
                    }
                    else
                    {
                        if (Length < 0 && DT.Rows[i]["Length"] != DBNull.Value)
                            Length = Convert.ToDecimal(DT.Rows[i]["Length"]);
                        if (Width < 0 && DT.Rows[i]["Width"] != DBNull.Value)
                            Width = Convert.ToDecimal(DT.Rows[i]["Width"]);
                        Amount = Length * Width * Count / 1000000;
                    }
                }

                //м.п.
                if (MeasureID == 2)
                {
                    Amount = Length * Count / 1000;
                }

                //шт.
                if (MeasureID == 3)
                {
                    Amount = Count;
                }

                //кг.
                if (MeasureID == 4)
                {
                    if (Weight < 0)
                    {
                        Weight = Convert.ToDecimal(DT.Rows[i]["Weight"]);
                    }
                    Amount = Weight * Count;
                }

                //л.
                if (MeasureID == 5)
                {
                    if (Capacity < 0)
                    {
                        Capacity = Convert.ToDecimal(DT.Rows[i]["Capacity"]);
                    }
                    Amount = Capacity * Count;
                }

                //м.куб.
                if (MeasureID == 6)
                {
                    if (Thickness < 0)
                        Amount = Length * Width * Height * Count / 1000000000;
                    if (Height < 0)
                        Amount = Length * Width * Thickness * Count / 1000000000;
                }

                //тыс.шт.
                if (MeasureID == 7)
                {
                    Amount = Count;
                }
                DT.Rows[i]["Amount"] = Amount;
            }
            string IncomeDate = Convert.ToDateTime(DT.Rows[0]["IncomeDate"]).ToString("yyyy-MM-dd");
            string DocNumber = DT.Rows[0]["DocNumber"].ToString();
            string fileName = "PurchaseInvoice " + IncomeDate;
            string filePath = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "/Infinium";
            FileInfo f = new FileInfo(filePath + @"\" + fileName + ".dbf");
            int x = 1;
            while (f.Exists == true)
                f = new FileInfo(filePath + @"\" + fileName + "(" + x++ + ").dbf");
            string DBFName = f.FullName;

            DataSetIntoDBF(DT, filePath, @"PurchaseInvoice");
            var sourcePath = Path.Combine(filePath, "PurchaseInvoice.dbf");
            var destinationPath = DBFName;
            File.Move(sourcePath, destinationPath);

            return true;
        }

        public static bool GetPurchaseInvoiceData1(int PurchaseInvoiceID)
        {
            DataTable DT = new DataTable();
            string SelectCommand = @"SELECT infiniu2_storage.dbo.PurchaseInvoices.IncomeDate, infiniu2_storage.dbo.PurchaseInvoices.SellerID, infiniu2_storage.dbo.Sellers.UNN, infiniu2_catalog.dbo.TechStore.InvNumber1S, infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_storage.dbo.Store.*, infiniu2_catalog.dbo.TechStore.TechStoreID, infiniu2_catalog.dbo.CurrencyTypes.ProfilCurrencyCode, infiniu2_catalog.dbo.CurrencyTypes.TPSCurrencyCode
                FROM infiniu2_storage.dbo.Store 
                INNER JOIN infiniu2_storage.dbo.PurchaseInvoices ON infiniu2_storage.dbo.Store.PurchaseInvoiceID = infiniu2_storage.dbo.PurchaseInvoices.PurchaseInvoiceID 
                INNER JOIN infiniu2_storage.dbo.Sellers ON infiniu2_storage.dbo.PurchaseInvoices.SellerID = infiniu2_storage.dbo.Sellers.SellerID 
                INNER JOIN infiniu2_catalog.dbo.TechStore ON infiniu2_storage.dbo.Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID 
                INNER JOIN infiniu2_catalog.dbo.CurrencyTypes ON infiniu2_storage.dbo.Store.CurrencyTypeID = infiniu2_catalog.dbo.CurrencyTypes.CurrencyTypeID 
                WHERE infiniu2_storage.dbo.Store.PurchaseInvoiceID=" + PurchaseInvoiceID;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(DT);
            }
            if (DT.Rows.Count == 0)
                return false;
            DT.Columns.Add(new DataColumn(("Amount"), System.Type.GetType("System.Decimal")));
            DT.Columns.Add(new DataColumn(("CurrencyCode"), System.Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn(("NDS"), System.Type.GetType("System.String")));
            DT.Columns.Add(new DataColumn(("UNNP"), System.Type.GetType("System.String")));
            DT.TableName = "ImportedTable";

            for (int i = 0; i < DT.Rows.Count; i++)
            {
                int MeasureID = Convert.ToInt32(DT.Rows[i]["MeasureID"]);
                int StoreItemID = Convert.ToInt32(DT.Rows[i]["MeasureID"]);
                int FactoryID = Convert.ToInt32(DT.Rows[i]["FactoryID"]);

                string NDS = "0 %";
                string UNNP = "800014979";

                if (FactoryID == 1)
                    DT.Rows[i]["CurrencyCode"] = DT.Rows[i]["ProfilCurrencyCode"].ToString();
                else
                {
                    DT.Rows[i]["CurrencyCode"] = DT.Rows[i]["TPSCurrencyCode"].ToString();
                    UNNP = "590618616";
                }

                if (Convert.ToInt32(DT.Rows[i]["CurrencyCode"]) == 933)
                    NDS = "20 %";

                DT.Rows[i]["UNNP"] = UNNP;
                DT.Rows[i]["NDS"] = NDS;

                decimal Thickness = 0;
                decimal Length = 0;
                decimal Width = 0;
                decimal Height = 0;
                decimal Diameter = 0;
                decimal Capacity = 0;
                decimal Weight = 0;
                int Count = Convert.ToInt32(DT.Rows[i]["InvoiceCount"]);

                decimal Amount = 0;
                if (DT.Rows[i]["Thickness"] != DBNull.Value)
                    Thickness = Convert.ToDecimal(DT.Rows[i]["Thickness"]);
                if (DT.Rows[i]["Length"] != DBNull.Value)
                    Length = Convert.ToDecimal(DT.Rows[i]["Length"]);
                if (DT.Rows[i]["Width"] != DBNull.Value)
                    Width = Convert.ToDecimal(DT.Rows[i]["Width"]);
                if (DT.Rows[i]["Height"] != DBNull.Value)
                    Height = Convert.ToDecimal(DT.Rows[i]["Height"]);
                if (DT.Rows[i]["Diameter"] != DBNull.Value)
                    Diameter = Convert.ToDecimal(DT.Rows[i]["Diameter"]);
                if (DT.Rows[i]["Capacity"] != DBNull.Value)
                    Capacity = Convert.ToDecimal(DT.Rows[i]["Capacity"]);
                if (DT.Rows[i]["Weight"] != DBNull.Value)
                    Weight = Convert.ToDecimal(DT.Rows[i]["Weight"]);
                //м.кв.
                if (MeasureID == 1)
                {
                    ///ВСТАВИТЬ АЛГОРИТМ ДЛЯ "ОБЛИЦОВКА РОЛИКИ"

                    if (IsCoatingRoller(StoreItemID))
                    {
                        if (Thickness < 0 && DT.Rows[i]["Thickness"] != DBNull.Value)
                            Thickness = Convert.ToDecimal(DT.Rows[i]["Thickness"]);
                        if (Diameter < 0 && DT.Rows[i]["Diameter"] != DBNull.Value)
                            Diameter = Convert.ToDecimal(DT.Rows[i]["Diameter"]);

                        decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);
                        Amount = Square * Count / 1000000;
                    }
                    else
                    {
                        if (Length < 0 && DT.Rows[i]["Length"] != DBNull.Value)
                            Length = Convert.ToDecimal(DT.Rows[i]["Length"]);
                        if (Width < 0 && DT.Rows[i]["Width"] != DBNull.Value)
                            Width = Convert.ToDecimal(DT.Rows[i]["Width"]);
                        Amount = Length * Width * Count / 1000000;
                    }
                }

                //м.п.
                if (MeasureID == 2)
                {
                    Amount = Length * Count / 1000;
                }

                //шт.
                if (MeasureID == 3)
                {
                    Amount = Count;
                }

                //кг.
                if (MeasureID == 4)
                {
                    if (Weight < 0)
                    {
                        Weight = Convert.ToDecimal(DT.Rows[i]["Weight"]);
                    }
                    Amount = Weight * Count;
                }

                //л.
                if (MeasureID == 5)
                {
                    if (Capacity < 0)
                    {
                        Capacity = Convert.ToDecimal(DT.Rows[i]["Capacity"]);
                    }
                    Amount = Capacity * Count;
                }

                //м.куб.
                if (MeasureID == 6)
                {
                    if (Thickness < 0)
                        Amount = Length * Width * Height * Count / 1000000000;
                    if (Height < 0)
                        Amount = Length * Width * Thickness * Count / 1000000000;
                }

                //тыс.шт.
                if (MeasureID == 7)
                {
                    Amount = Count;
                }
                DT.Rows[i]["Amount"] = Amount;
            }
            string CurrentMonthName = DateTime.Now.ToString("dd-MM-yyyy");
            string IncomeDate = Convert.ToDateTime(DT.Rows[0]["IncomeDate"]).ToString("yyyy-MM-dd");
            string fileName = "PurchaseInvoice " + IncomeDate;
            string filePath = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "/Infinium/PurchaseInvoices/" + CurrentMonthName;
            if (Directory.Exists(filePath) == false)//not exists
            {
                Directory.CreateDirectory(filePath);
            }

            FileInfo f = new FileInfo(filePath + @"\" + fileName + ".dbf");
            int x = 1;
            while (f.Exists == true)
                f = new FileInfo(filePath + @"\" + fileName + "(" + x++ + ").dbf");
            string DBFName = f.FullName;

            DataSetIntoDBF(filePath, @"Purchase", DT);
            var sourcePath = Path.Combine(filePath, "Purchase.dbf");
            var destinationPath = DBFName;
            File.Move(sourcePath, destinationPath);

            return true;
        }

        public static void DataSetIntoDBF(DataTable table, string filePath, string fileName)
        {
            if (File.Exists(filePath + fileName + ".dbf"))
            {
                File.Delete(filePath + fileName + ".dbf");
            }

            string createSql = "create table " + fileName +
                @" ([UNN] varchar(20), [Factory] varchar(30), [GroupName] varchar(50), [SubGroupName] varchar(50), [Name] varchar(100), [Measure] varchar(15),
                [Diameter] Double, [Thickness] Double, [Length] Double, [Height] Double, [Width] Double, [Admission] Double, [Capacity] Double, [Weight] Double, [InvoiceCount] Integer, [Amount] Double, 
                [Price] Double, [Cost] Double, [VAT] Double, [VATCost] Double, [ID] Integer)";

            OleDbConnection con = new OleDbConnection(GetConnection(filePath));

            OleDbCommand cmd = new OleDbCommand()
            {
                Connection = con
            };
            con.Open();

            cmd.CommandText = createSql;

            cmd.ExecuteNonQuery();

            foreach (DataRow row in table.Rows)
            {
                string insertSql = "insert into " + fileName +
                    " (UNN, Factory, GroupName, SubGroupName, Name, Measure, Diameter, Thickness, Length, Height, Width, Admission, Capacity, Weight, InvoiceCount, Amount, Price, Cost, VAT, VATCost, ID)" +
                    " values(UNN, Factory, TechStoreGroupName, TechStoreSubGroupName, TechStoreName, Measure, Diameter, Thickness, Length, Height, Width, Admission, Capacity, Weight, InvoiceCount, Amount, Price, Cost, VAT, VATCost, TechStoreID)";

                string TechStoreGroupName = row["TechStoreGroupName"].ToString();
                string TechStoreSubGroupName = row["TechStoreSubGroupName"].ToString();
                string TechStoreName = row["TechStoreName"].ToString();
                string Measure = row["Measure"].ToString();
                string UNN = row["UNN"].ToString();
                string Factory = row["Factory"].ToString();

                int InvoiceCount = Convert.ToInt32(row["InvoiceCount"]);
                int TechStoreID = Convert.ToInt32(row["TechStoreID"]);

                double Diameter = 0;
                double Thickness = 0;
                double Length = 0;
                double Height = 0;
                double Width = 0;
                double Admission = 0;
                double Capacity = 0;
                double Weight = 0;
                double Amount = 0;
                double Price = 0;
                double Cost = 0;
                double VAT = 0;
                double VATCost = 0;

                if (row["Diameter"] != DBNull.Value)
                    Diameter = Convert.ToDouble(row["Diameter"]);
                if (row["Thickness"] != DBNull.Value)
                    Thickness = Convert.ToDouble(row["Thickness"]);
                if (row["Length"] != DBNull.Value)
                    Length = Convert.ToDouble(row["Length"]);
                if (row["Height"] != DBNull.Value)
                    Height = Convert.ToDouble(row["Height"]);
                if (row["Width"] != DBNull.Value)
                    Width = Convert.ToDouble(row["Width"]);
                if (row["Admission"] != DBNull.Value)
                    Admission = Convert.ToDouble(row["Admission"]);
                if (row["Capacity"] != DBNull.Value)
                    Capacity = Convert.ToDouble(row["Capacity"]);
                if (row["Weight"] != DBNull.Value)
                    Weight = Convert.ToDouble(row["Weight"]);
                if (row["Price"] != DBNull.Value)
                    Price = Convert.ToDouble(row["Price"]);
                if (row["Amount"] != DBNull.Value)
                    Amount = Convert.ToDouble(row["Amount"]);
                if (row["Cost"] != DBNull.Value)
                    Cost = Convert.ToDouble(row["Cost"]);
                if (row["VAT"] != DBNull.Value)
                    VAT = Convert.ToDouble(row["VAT"]);
                if (row["VATCost"] != DBNull.Value)
                    VATCost = Convert.ToDouble(row["VATCost"]);
                if (row["TechStoreID"] != DBNull.Value)
                    TechStoreID = Convert.ToInt32(row["TechStoreID"]);

                cmd.CommandText = insertSql;
                cmd.Parameters.Clear();

                cmd.Parameters.Add("UNN", OleDbType.VarChar).Value = UNN;
                cmd.Parameters.Add("Factory", OleDbType.VarChar).Value = Factory;
                cmd.Parameters.Add("GroupName", OleDbType.VarChar).Value = TechStoreGroupName;
                cmd.Parameters.Add("SubGroupName", OleDbType.VarChar).Value = TechStoreSubGroupName;
                cmd.Parameters.Add("Name", OleDbType.VarChar).Value = TechStoreName;
                cmd.Parameters.Add("Measure", OleDbType.VarChar).Value = Measure;

                cmd.Parameters.Add("Diameter", OleDbType.Double).Value = Diameter;
                cmd.Parameters.Add("Thickness", OleDbType.Double).Value = Thickness;
                cmd.Parameters.Add("Length", OleDbType.Double).Value = Length;
                cmd.Parameters.Add("Height", OleDbType.Double).Value = Height;
                cmd.Parameters.Add("Width", OleDbType.Double).Value = Width;
                cmd.Parameters.Add("Admission", OleDbType.Double).Value = Admission;
                cmd.Parameters.Add("Capacity", OleDbType.Double).Value = Capacity;
                cmd.Parameters.Add("Weight", OleDbType.Double).Value = Weight;
                cmd.Parameters.Add("InvoiceCount", OleDbType.Integer).Value = InvoiceCount;
                cmd.Parameters.Add("Amount", OleDbType.Double).Value = Amount;

                cmd.Parameters.Add("Price", OleDbType.Double).Value = Price;
                cmd.Parameters.Add("Cost", OleDbType.Double).Value = Cost;
                cmd.Parameters.Add("VAT", OleDbType.Double).Value = VAT;
                cmd.Parameters.Add("VATCost", OleDbType.Double).Value = VATCost;
                cmd.Parameters.Add("ID", OleDbType.Integer).Value = TechStoreID;

                cmd.ExecuteNonQuery();
            }

            con.Close();
        }

        public static void DataSetIntoDBF(string path, string fileName, DataTable DT1)
        {
            if (File.Exists(path + fileName + ".dbf"))
            {
                File.Delete(path + fileName + ".dbf");
            }

            string createSql = "create table " + fileName + " ([UNNP] varchar(20), [UNN] varchar(20), [CurrencyCode] varchar(20), [InvNumber] varchar(20), [Amount] Double, [Price] Double, [NDS] varchar(10))";

            OleDbConnection con = new OleDbConnection(GetConnection(path));

            OleDbCommand cmd = new OleDbCommand()
            {
                Connection = con
            };
            con.Open();

            cmd.CommandText = createSql;

            cmd.ExecuteNonQuery();

            foreach (DataRow row in DT1.Rows)
            {
                string insertSql = "insert into " + fileName +
                    " (UNNP, UNN, CurrencyCode, InvNumber, Amount, Price, NDS) values(UNNP, UNN, CurrencyCode, InvNumber1S, Amount, Price, NDS)";

                double Amount = Convert.ToDouble(row["Amount"]);
                double Price = Convert.ToDouble(row["Price"]);

                string InvNumber = row["InvNumber1S"].ToString();
                string CurrencyCode = row["CurrencyCode"].ToString();
                string UNN = row["UNN"].ToString();
                string NDS = row["NDS"].ToString();
                string UNNP = row["UNNP"].ToString();

                cmd.CommandText = insertSql;
                cmd.Parameters.Clear();

                cmd.Parameters.Add("UNNP", OleDbType.VarChar).Value = UNNP;
                cmd.Parameters.Add("UNN", OleDbType.VarChar).Value = UNN;
                cmd.Parameters.Add("CurrencyCode", OleDbType.VarChar).Value = CurrencyCode;
                cmd.Parameters.Add("InvNumber", OleDbType.VarChar).Value = InvNumber;
                cmd.Parameters.Add("Amount", OleDbType.Double).Value = Amount;
                cmd.Parameters.Add("Price", OleDbType.Double).Value = Price;
                cmd.Parameters.Add("NDS", OleDbType.VarChar).Value = NDS;
                cmd.ExecuteNonQuery();
            }

            con.Close();
        }

        private static string GetConnection(string path)
        {
            return "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + path + ";Extended Properties=dBASE IV;";
        }

        public static DataTable GetYourData()
        {
            DataTable YourResultSet = new DataTable();

            OleDbConnection yourConnectionHandler = new OleDbConnection(
                @"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=c:\Users\Андрей\Documents\Infinium\;Extended Properties=dBASE IV;");

            // if including the full dbc (database container) reference, just tack that on
            //      OleDbConnection yourConnectionHandler = new OleDbConnection(
            //          "Provider=VFPOLEDB.1;Data Source=C:\\SomePath\\NameOfYour.dbc;" );


            // Open the connection, and if open successfully, you can try to query it
            yourConnectionHandler.Open();

            if (yourConnectionHandler.State == ConnectionState.Open)
            {
                string mySQL = "select * from KONT";  // dbf table name

                OleDbCommand MyQuery = new OleDbCommand(mySQL, yourConnectionHandler);
                OleDbDataAdapter DA = new OleDbDataAdapter(MyQuery);

                DA.Fill(YourResultSet);

                yourConnectionHandler.Close();
            }

            return YourResultSet;
        }
    }







    public class MainStoreManager
    {
        int CurrentStoreSubGroupID = -1;
        int CurrentInventoryID = -1;

        DataTable allItemsTable;

        DataTable TechStoreNamesDT;
        DataTable GroupsDT;
        DataTable SubGroupsDT;
        DataTable InvoicesDT;
        DataTable InvoiceItemsDT;
        DataTable MovementInvoicesDT;
        DataTable MovementInvoiceItemsDT;
        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreDT;
        DataTable CurrencyTypesDT;
        DataTable SellersDT;
        DataTable FilterSellersDT;
        DataTable FilterMovSellersDT;
        DataTable StoreAllocDT;

        DataTable ArrivalCountDT;
        DataTable ArrivelFromStoreCountDT;
        DataTable ExpenseCountDT;
        DataTable SellingCountDT;
        DataTable StartRemainsDT;
        DataTable EndRemainsDT;

        DataTable SectorsDataTable;
        DataTable StoreAllocDataTable;
        DataTable UsersDataTable;
        DataTable ClientsDT;

        BindingSource GroupsBS;
        BindingSource SubGroupsBS;
        BindingSource InvoicesBS;
        BindingSource InvoiceItemsBS;
        BindingSource MovementInvoicesBS;
        BindingSource MovementInvoiceItemsBS;
        BindingSource StoreBS;
        BindingSource SectorsBS;
        BindingSource StoreAllocFromBS;
        BindingSource StoreAllocToBS;
        BindingSource UsersBS;
        BindingSource ClientsBS;

        public MainStoreManager()
        {
            CreateTables();
            FillTables();
            Binding();
        }

        private void CreateTables()
        {
            allItemsTable = new DataTable();
            TechStoreNamesDT = new DataTable();
            GroupsDT = new DataTable();
            SubGroupsDT = new DataTable();
            InvoicesDT = new DataTable();
            MovementInvoicesDT = new DataTable();
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            CurrencyTypesDT = new DataTable();
            StoreDT = new DataTable();
            InvoiceItemsDT = new DataTable();
            MovementInvoiceItemsDT = new DataTable();
            SellersDT = new DataTable();
            FilterSellersDT = new DataTable();
            FilterMovSellersDT = new DataTable();
            StoreAllocDT = new DataTable();

            ArrivalCountDT = new DataTable();
            ArrivelFromStoreCountDT = new DataTable();
            ExpenseCountDT = new DataTable();
            SellingCountDT = new DataTable();
            StartRemainsDT = new DataTable();
            EndRemainsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void FillTables()
        {
            SectorsDataTable = new DataTable();
            StoreAllocDataTable = new DataTable();
            UsersDataTable = new DataTable();
            ClientsDT = new DataTable();
            SellersDT = new DataTable();

            ClientsDT.Columns.Add(new DataColumn("From", Type.GetType("System.String")));
            ClientsDT.Columns.Add(new DataColumn("ClientID", Type.GetType("System.Int64")));
            ClientsDT.Columns.Add(new DataColumn("ClientName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Storage";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["SellerID"]);
                        NewRow["ClientName"] = DT.Rows[i]["SellerName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientID, ClientName FROM Clients",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Marketing";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["ClientID"]);
                        NewRow["ClientName"] = DT.Rows[i]["ClientName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM Sectors ORDER BY Sector",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SectorsDataTable);
            }

            string StoreAllocFilter = string.Empty;

            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM StoreAlloc" + StoreAllocFilter + " ORDER BY StoreAlloc",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT UserID, Name, ShortName FROM Users  WHERE Fired <> 1 ORDER BY Name",
                ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(UsersDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreSubGroups.TechStoreGroupID, TechStore.TechStoreSubGroupID, TechStoreName, TechStoreSubGroupName, TechStoreGroupName," +
                " Length, Height, Width, Weight, Thickness FROM TechStore" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(TechStoreNamesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT DISTINCT FactoryID, infiniu2_storage.dbo.Store.StoreItemID, infiniu2_storage.dbo.Store.FactoryID, G.TechStoreGroupID, SG.TechStoreSubGroupID, G.TechStoreGroupName, SG.TechStoreSubGroupName
FROM infiniu2_storage.dbo.Store INNER JOIN
dbo.TechStore AS S ON infiniu2_storage.dbo.Store.StoreItemID = S.TechStoreID INNER JOIN
dbo.TechStoreSubGroups AS SG ON S.TechStoreSubGroupID = SG.TechStoreSubGroupID INNER JOIN
dbo.TechStoreGroups AS G ON SG.TechStoreGroupID = G.TechStoreGroupID ORDER BY TechStoreGroupName, TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(allItemsTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store" +
                " WHERE CurrentCount > 0 AND FactoryID = 1)))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDT.Clear();
                DA.Fill(GroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store" +
                " WHERE CurrentCount > 0 AND FactoryID = 1))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDT.Clear();
                DA.Fill(SubGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM PurchaseInvoices", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InvoicesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " LEFT JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " LEFT JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " LEFT JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " LEFT JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoicesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}
            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())", ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        CurrentInventoryID = Convert.ToInt32(DT.Rows[0]["InventoryID"]);
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn, infiniu2_catalog.dbo.TechStore.SellerCode, PurchaseInvoices.IncomeDate FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " LEFT JOIN PurchaseInvoices ON (Store.PurchaseInvoiceID = PurchaseInvoices.PurchaseInvoiceID)" +
                " WHERE Store.FactoryID=1 AND Store.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
                StoreDT.Columns.Add(new DataColumn("StartMonthCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("EndMonthCount", Type.GetType("System.Decimal")));
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn, infiniu2_catalog.dbo.TechStore.SellerCode FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE Store.FactoryID=1 AND Store.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InvoiceItemsDT);
                DA.Fill(MovementInvoiceItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Sellers", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDT);
            }

            CreateCoversDT();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers" +
                " ORDER BY SellerName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(FilterSellersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT UserID, Name FROM Users WHERE Fired <> 1 " +
                " ORDER BY Name", ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(FilterMovSellersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreAllocID, StoreAlloc FROM StoreAlloc", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDT);
            }
        }

        public string StoreName(int TechStoreID)
        {
            DataRow[] rows = TechStoreNamesDT.Select("TechStoreID = " + TechStoreID);
            if (rows.Count() > 0)
            {
                return rows[0]["TechStoreGroupName"].ToString() + "; " + rows[0]["TechStoreSubGroupName"].ToString();
            }
            return string.Empty;
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Binding()
        {
            GroupsBS = new BindingSource()
            {
                DataSource = GroupsDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = SubGroupsDT
            };
            InvoicesBS = new BindingSource()
            {
                DataSource = InvoicesDT
            };
            MovementInvoicesBS = new BindingSource()
            {
                DataSource = MovementInvoicesDT
            };
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            InvoiceItemsBS = new BindingSource()
            {
                DataSource = InvoiceItemsDT
            };
            MovementInvoiceItemsBS = new BindingSource()
            {
                DataSource = MovementInvoiceItemsDT
            };
            SectorsBS = new BindingSource();
            StoreAllocFromBS = new BindingSource();
            StoreAllocToBS = new BindingSource();
            UsersBS = new BindingSource();
            ClientsBS = new BindingSource();

            SectorsBS.DataSource = SectorsDataTable;
            StoreAllocFromBS.DataSource = new DataView(StoreAllocDataTable);
            StoreAllocToBS.DataSource = new DataView(StoreAllocDataTable);
            UsersBS.DataSource = UsersDataTable;
            ClientsBS.DataSource = ClientsDT;
            ClientsBS.Sort = "From, ClientName";
        }

        public BindingSource SectorsList
        {
            get { return SectorsBS; }
        }

        public BindingSource StoreAllocFromList
        {
            get { return StoreAllocFromBS; }
        }

        public BindingSource StoreAllocToList
        {
            get { return StoreAllocToBS; }
        }

        public BindingSource UsersList
        {
            get { return UsersBS; }
        }

        public BindingSource ClientsList
        {
            get { return ClientsBS; }
        }

        public void FilterSectors(int FactoryID)
        {
            SectorsBS.Filter = "FactoryID = " + FactoryID;
        }

        public DataGridViewComboBoxColumn ManufacturerColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ManufacturerColumn",
                    HeaderText = "Изготовитель",
                    DataPropertyName = "ManufacturerID",
                    DataSource = new DataView(SellersDT),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 60
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PurchInvoiceSellersColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "SellersColumn",
                    HeaderText = "Поставщик",
                    DataPropertyName = "SellerID",
                    DataSource = new DataView(SellersDT),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PurchInvoiceColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PurchInvoiceCoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PurchInvoicePatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PurchInvoiceCurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceSellersColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "SellersColumn",
                    HeaderText = "Поставщик",
                    DataPropertyName = "SellerID",
                    DataSource = new DataView(SellersDT),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoicePatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        #region Filter fuctions

        public bool FilterGroups(int FactoryID)
        {
            GroupsDT.Clear();
            using (DataView DV = new DataView(allItemsTable))
            {
                DV.RowFilter = "FactoryID=" + FactoryID;
                GroupsDT = DV.ToTable(true, new string[] { "TechStoreGroupName", "TechStoreGroupID" });
            }
            GroupsBS.DataSource = GroupsDT;
            GroupsBS.MoveFirst();
            return GroupsDT.Rows.Count > 0;
        }

        public void FilterSubGroups(int FactoryID, int StoreGroupID)
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
            //    " WHERE TechStoreSubGroupID IN" +
            //    " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store" +
            //    " WHERE FactoryID = " + FactoryID + ")) AND TechStoreGroupID = " + StoreGroupID +
            //    " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            //{
            //    SubGroupsDT.Clear();
            //    DA.Fill(SubGroupsDT);
            //}

            SubGroupsDT.Clear();
            using (DataView DV = new DataView(allItemsTable))
            {
                DV.RowFilter = "TechStoreGroupID=" + StoreGroupID + " AND FactoryID = " + FactoryID;
                SubGroupsDT = DV.ToTable(true, new string[] { "TechStoreSubGroupName", "TechStoreGroupID", "TechStoreSubGroupID" });
            }

            for (int i = SubGroupsDT.Rows.Count - 1; i >= 0; i--)
            {
                int TechStoreSubGroupID = Convert.ToInt32(SubGroupsDT.Rows[i]["TechStoreSubGroupID"]);
                DataRow[] rows = StoreDT.Select("(StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0) AND TechStoreSubGroupID=" + TechStoreSubGroupID);
                if (rows.Count() == 0)
                    SubGroupsDT.Rows[i].Delete();
            }
            SubGroupsBS.DataSource = SubGroupsDT;
            SubGroupsBS.MoveFirst();
        }

        public void FilterStore(int StoreSubGroupID)
        {
            //StoreBS.Sort = "StoreItemColumn, Diameter, Capacity, Thickness, Length, Height, Width, Admission, CoverID, PatinaID, ColorID";
            CurrentStoreSubGroupID = StoreSubGroupID;
            //StoreBS.RemoveFilter();
            StoreBS.Filter = "(StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0) AND TechStoreSubGroupID=" + StoreSubGroupID;
            StoreBS.MoveFirst();
        }

        public void UpdateStore(int FactoryID, DateTime FilterDate, int TechStoreGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn, infiniu2_catalog.dbo.TechStore.SellerCode, infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN infiniu2_catalog.dbo.TechStoreSubGroups ON infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID = infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID AND TechStoreGroupID=" + TechStoreGroupID +
                " WHERE FactoryID = " + FactoryID + " AND PurchaseInvoiceID NOT IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE CAST(IncomeDate AS DATE) >= '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00') ORDER BY TechStoreName",
                ConnectionStrings.StorageConnectionString))
            {
                StoreDT.Clear();
                DA.Fill(StoreDT);
            }
        }

        public void FilterByInvoice(int PurchaseInvoiceID, int FactoryID)
        {
            string FactoryFilter = string.Empty;
            if (FactoryID > 0)
                FactoryFilter = " AND FactoryID = " + FactoryID;
            if (FactoryID == -1)
                FactoryFilter = " AND FactoryID = -1";

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn, infiniu2_catalog.dbo.TechStore.SellerCode FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE PurchaseInvoiceID = " + PurchaseInvoiceID + FactoryFilter +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                InvoiceItemsDT.Clear();
                DA.Fill(InvoiceItemsDT);
            }

            InvoiceItemsBS.MoveFirst();
        }

        public void FilterByMovementInvoice(int MovementInvoiceID, int FactoryID, int StoreType)
        {
            string StoreName = "Store";
            switch (StoreType)
            {
                case 1:
                    StoreName = "Store";
                    break;
                case 2:
                    StoreName = "ManufactureStore";
                    break;
                case 3:
                    StoreName = "WriteOffStore";
                    break;
                case 4:
                    StoreName = "PersonalStore";
                    break;
                case 5:
                    StoreName = "ReadyStore";
                    break;
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT " + StoreName + ".*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM " + StoreName +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON " + StoreName + ".StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE MovementInvoiceID = " + MovementInvoiceID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                MovementInvoiceItemsDT.Clear();
                DA.Fill(MovementInvoiceItemsDT);
            }
            MovementInvoiceItemsBS.MoveFirst();
        }

        public void FilterInvoices(bool ByIncomeDate, bool BySeller,
            DateTime DateFrom, DateTime DateTo,
            int SellerID, int FactoryID)
        {
            string Filter = string.Empty;
            if (ByIncomeDate)
            {
                Filter += " AND (IncomeDate >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    " 00:00' AND IncomeDate <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59')";
            }

            if (BySeller)
            {
                Filter += " AND (SellerID = " + SellerID + ")";
            }

            if (Filter == string.Empty)
                Filter = " AND IncomeDate >= '" + DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd") + "'";
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PurchaseInvoices" +
                " WHERE (FactoryID = " + FactoryID + ")" + Filter, ConnectionStrings.StorageConnectionString))
            {
                InvoicesDT.Clear();
                DA.Fill(InvoicesDT);
            }
            InvoicesBS.MoveFirst();
        }

        public void FilterMovementInvoices(bool ByDateTime, bool ByPerson, bool BySellerStoreAlloc, bool ByRecipientStoreAlloc,
            DateTime DateFrom, DateTime DateTo, int PersonID, int SellerStoreAllocID, int RecipientStoreAllocID, int FactoryID)
        {
            string Filter = @" WHERE TypeCreation=0 ";

            if (ByDateTime)
            {
                Filter += " AND ((DateTime >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    " 00:00' AND DateTime <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'))";
            }
            if (BySellerStoreAlloc)
            {
                Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            }
            if (ByRecipientStoreAlloc)
            {
                Filter += " AND (RecipientStoreAllocID = " + RecipientStoreAllocID + ")";
            }
            if (ByPerson)
            {
                Filter += " AND (PersonID = " + PersonID + ")";
            }

            if (Filter.Length == 0)
            {
                if (FactoryID == 1)
                    Filter = " WHERE (SellerStoreAllocID = 1 OR RecipientStoreAllocID = 1)";
                if (FactoryID == 2)
                    Filter = " WHERE (SellerStoreAllocID = 2 OR RecipientStoreAllocID = 2)";
            }

            if (Filter == @" WHERE TypeCreation=0 ")
                Filter = " WHERE DateTime >= '" + DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd") + "'";

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " INNER JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " INNER JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " INNER JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " INNER JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID" + Filter,
                ConnectionStrings.StorageConnectionString))
            {
                MovementInvoicesDT.Clear();
                DA.Fill(MovementInvoicesDT);
            }
            MovementInvoicesBS.MoveFirst();
        }

        #endregion

        #region Properties

        public DataView InvoiceSellersList
        {
            get { return new DataView(FilterSellersDT); }
        }

        public DataView MovInvoiceSellersList
        {
            get { return new DataView(FilterMovSellersDT); }
        }

        public DataView SellerStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public DataView RecipientsStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public BindingSource GroupsList
        {
            get { return GroupsBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource InvoicesList
        {
            get { return InvoicesBS; }
        }

        public BindingSource MovementInvoicesList
        {
            get { return MovementInvoicesBS; }
        }

        public BindingSource InvoiceItemsList
        {
            get { return InvoiceItemsBS; }
        }

        public BindingSource MovementInvoiceItemsList
        {
            get { return MovementInvoiceItemsBS; }
        }

        #endregion

        public void ShowNoEmptyStoreItems()
        {
            StoreBS.RemoveFilter();
            StoreBS.Filter = "StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0";
            StoreBS.MoveFirst();
        }

        public bool InventoryExist(DateTime FilterDate)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void GetStoreCount(DateTime FilterDate)
        {
            CurrentStoreSubGroupID = -1;

            ArrivalCountDT.Clear();
            ArrivelFromStoreCountDT.Clear();
            ExpenseCountDT.Clear();
            SellingCountDT.Clear();
            StartRemainsDT.Clear();
            EndRemainsDT.Clear();

            if (InventoryExist(FilterDate))
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, StartMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE CAST(IncomeDate AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(IncomeDate AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivalCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivelFromStoreCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID NOT IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ExpenseCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellingCountDT);
            }
        }

        public void FillStoreCount(DateTime FilterDate)
        {
            decimal ArrivalCount = 0;
            decimal EndMonthCount = 0;
            decimal ExpenseCount = 0;
            decimal SellingCount = 0;
            decimal StartMonthCount = 0;
            int MovementInvoiceID = -1;
            int PurchaseInvoiceID = -1;
            int StoreID = -1;

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                ArrivalCount = 0;
                EndMonthCount = 0;
                ExpenseCount = 0;
                SellingCount = 0;
                StartMonthCount = 0;
                MovementInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["MovementInvoiceID"]);
                PurchaseInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["PurchaseInvoiceID"]);
                StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);

                //ОСТн
                DataRow[] StartRemainsRows = StartRemainsDT.Select("StoreID = " + StoreID);
                if (StartRemainsRows.Count() > 0)
                {
                    StartMonthCount = Convert.ToDecimal(StartRemainsRows[0]["Count"]);
                }
                //ОСТк
                DataRow[] EndRemainsRows = EndRemainsDT.Select("StoreID = " + StoreID);
                if (EndRemainsRows.Count() > 0)
                {
                    EndMonthCount = Convert.ToDecimal(EndRemainsRows[0]["Count"]);
                }
                //Приход
                DataRow[] ArrivalRows = ArrivalCountDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
                if (ArrivalRows.Count() > 0)
                {
                    ArrivalCount += Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }
                DataRow[] ArrivelFromStoreRows = ArrivelFromStoreCountDT.Select("MovementInvoiceID = " + MovementInvoiceID);
                if (ArrivelFromStoreRows.Count() > 0)
                {
                    ArrivalCount += Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }
                //Реализация
                DataRow[] SellingRows = SellingCountDT.Select("StoreIDFrom = " + StoreID);
                if (SellingRows.Count() > 0)
                {
                    foreach (DataRow item in SellingRows)
                        SellingCount += Convert.ToDecimal(item["Count"]);
                }
                //Расход
                DataRow[] ExpenseRows = ExpenseCountDT.Select("StoreIDFrom = " + StoreID);
                if (ExpenseRows.Count() > 0)
                {
                    foreach (DataRow item in ExpenseRows)
                        ExpenseCount += Convert.ToDecimal(item["Count"]);
                }

                if (Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]) != 0 && StoreDT.Rows[i]["CreateDateTime"] != DBNull.Value)
                {
                    //DateTime dt = Convert.ToDateTime(StoreDT.Rows[i]["CreateDateTime"]);
                    //if (dt.Year == FilterDate.Year && dt.Month == FilterDate.Month)
                    //    ArrivalCount += Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }

                StoreDT.Rows[i]["MonthInvoiceCount"] = ArrivalCount;
                StoreDT.Rows[i]["ExpenseCount"] = ExpenseCount;
                StoreDT.Rows[i]["EndMonthCount"] = EndMonthCount;
                StoreDT.Rows[i]["SellingCount"] = SellingCount;
                StoreDT.Rows[i]["StartMonthCount"] = StartMonthCount;
            }
        }

        public void MoveToPersonalStore()
        {
            try
            {
                int MovementInvoiceID = 121;
                int PurchaseInvoiceID = 346;
                DataTable MovementInvoiceDetailsDT = new DataTable();
                DataTable PersonalStoreDT = new DataTable();
                DataTable StoreDT = new DataTable();

                SqlDataAdapter da1 = new SqlDataAdapter("SELECT TOP 0 * FROM MovementInvoiceDetails",
                                 ConnectionStrings.StorageConnectionString);
                SqlDataAdapter da2 = new SqlDataAdapter("SELECT TOP 0 * FROM PersonalStore",
                                 ConnectionStrings.StorageConnectionString);
                SqlDataAdapter da3 = new SqlDataAdapter("SELECT * FROM Store WHERE PurchaseInvoiceID = " + PurchaseInvoiceID,
                        ConnectionStrings.StorageConnectionString);

                SqlCommandBuilder cb1 = new SqlCommandBuilder(da1);
                SqlCommandBuilder cb2 = new SqlCommandBuilder(da2);
                SqlCommandBuilder cb3 = new SqlCommandBuilder(da3);

                da1.Fill(MovementInvoiceDetailsDT);
                da2.Fill(PersonalStoreDT);
                da3.Fill(StoreDT);

                for (int i = 0; i < StoreDT.Rows.Count; i++)
                {
                    DataRow NewRow = PersonalStoreDT.NewRow();
                    NewRow["MovementInvoiceID"] = MovementInvoiceID;
                    NewRow["StoreItemID"] = StoreDT.Rows[i]["StoreItemID"];
                    NewRow["Length"] = StoreDT.Rows[i]["Length"];
                    NewRow["Width"] = StoreDT.Rows[i]["Width"];
                    NewRow["Height"] = StoreDT.Rows[i]["Height"];
                    NewRow["Thickness"] = StoreDT.Rows[i]["Thickness"];
                    NewRow["Diameter"] = StoreDT.Rows[i]["Diameter"];
                    NewRow["Admission"] = StoreDT.Rows[i]["Admission"];
                    NewRow["Capacity"] = StoreDT.Rows[i]["Capacity"];
                    NewRow["Weight"] = StoreDT.Rows[i]["Weight"];
                    NewRow["ColorID"] = StoreDT.Rows[i]["ColorID"];
                    NewRow["CoverID"] = StoreDT.Rows[i]["CoverID"];
                    NewRow["PatinaID"] = StoreDT.Rows[i]["PatinaID"];
                    NewRow["InvoiceCount"] = StoreDT.Rows[i]["InvoiceCount"];
                    NewRow["CurrentCount"] = StoreDT.Rows[i]["InvoiceCount"];
                    NewRow["FactoryID"] = StoreDT.Rows[i]["FactoryID"];
                    NewRow["Notes"] = StoreDT.Rows[i]["Notes"];
                    NewRow["Price"] = StoreDT.Rows[i]["Price"];
                    NewRow["PriceEUR"] = StoreDT.Rows[i]["PriceEUR"];
                    NewRow["CurrencyTypeID"] = StoreDT.Rows[i]["CurrencyTypeID"];
                    NewRow["Cost"] = StoreDT.Rows[i]["Cost"];
                    NewRow["VAT"] = StoreDT.Rows[i]["VAT"];
                    NewRow["VATCost"] = StoreDT.Rows[i]["VATCost"];
                    PersonalStoreDT.Rows.Add(NewRow);
                    StoreDT.Rows[i]["CurrentCount"] = 0;

                }
                da2.Update(PersonalStoreDT);
                da3.Update(StoreDT);
                da2.Dispose();
                PersonalStoreDT.Clear();
                da2 = new SqlDataAdapter("SELECT PersonalStoreID FROM PersonalStore WHERE MovementInvoiceID = " + MovementInvoiceID,
                    ConnectionStrings.StorageConnectionString);
                da2.Fill(PersonalStoreDT);
                for (int i = 0; i < PersonalStoreDT.Rows.Count; i++)
                {
                    DataRow NewRow1 = MovementInvoiceDetailsDT.NewRow();
                    NewRow1["MovementInvoiceID"] = MovementInvoiceID;
                    NewRow1["StoreIDFrom"] = StoreDT.Rows[i]["StoreID"];
                    NewRow1["StoreIDTo"] = PersonalStoreDT.Rows[i]["PersonalStoreID"];
                    NewRow1["Count"] = StoreDT.Rows[i]["InvoiceCount"];
                    MovementInvoiceDetailsDT.Rows.Add(NewRow1);
                }
                da1.Update(MovementInvoiceDetailsDT);

                MovementInvoiceDetailsDT.Dispose();
                PersonalStoreDT.Dispose();
                StoreDT.Dispose();
                da1.Dispose();
                da2.Dispose();
                da3.Dispose();
                cb1.Dispose();
                cb2.Dispose();
                cb3.Dispose();
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nКАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void MoveToInvoice(int PurchaseInvoiceID)
        {
            InvoicesBS.Position = InvoicesBS.Find("PurchaseInvoiceID", PurchaseInvoiceID);
        }

        public void MoveToMovementInvoice(int MovementInvoiceID)
        {
            MovementInvoicesBS.Position = MovementInvoicesBS.Find("MovementInvoiceID", MovementInvoiceID);
        }

        public void MoveToTechStoreGroup(int TechStoreGroupID)
        {
            GroupsBS.Position = GroupsBS.Find("TechStoreGroupID", TechStoreGroupID);
        }

        public void MoveToLastInvoice()
        {
            InvoicesBS.MoveLast();
        }

        public void MoveToLastMovementInvoice()
        {
            MovementInvoicesBS.MoveLast();
        }

        public int ExistStoreGenetics(int StoreID)
        {
            int StoreGeneticsID = -1;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreGeneticsID, StoreID FROM StoreGenetics" +
                " WHERE StoreID = " + StoreID, ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        StoreGeneticsID = Convert.ToInt32(DT.Rows[0]["StoreGeneticsID"]);
                }
            }
            return StoreGeneticsID;
        }

        private int GetStoreSerialNumber(int TechStoreID)
        {
            int SerialNumber = 0;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Count(StoreID) AS SerialNumber FROM Store WHERE StoreItemID = " + TechStoreID, ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                    {
                        SerialNumber = Convert.ToInt32(DT.Rows[0]["SerialNumber"]);
                    }
                }
            }
            return SerialNumber;
        }

        public void AddStoreGenetics(int StoreID, int TechStoreID, int FactoryID)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM StoreGenetics", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);
                            DataRow NewRow = DT.NewRow();
                            NewRow["Created"] = Security.GetCurrentDate();
                            NewRow["StoreID"] = StoreID;
                            NewRow["FactoryID"] = FactoryID;
                            NewRow["SerialNumber"] = GetStoreSerialNumber(TechStoreID) + 1;
                            DT.Rows.Add(NewRow);
                            DA.Update(DT);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nAddStoreGenetics КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void PrintStoreGenetics(int[] StoreID)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreGeneticsID, PrintDateTime FROM StoreGenetics" +
                    " WHERE StoreID IN (" + string.Join(",", StoreID) + ")", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);
                            if (DT.Rows.Count > 0)
                            {
                                DT.Rows[0]["PrintDateTime"] = Security.GetCurrentDate();
                                DA.Update(DT);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nPrintStoreGenetics КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public int FindPurchaseInvoiceID(int MovementInvoiceID)
        {
            string SelectCommand = @"SELECT * FROM MovementInvoiceDetails WHERE MovementInvoiceID = 
                (SELECT MovementInvoiceID FROM MovementInvoices WHERE SellerStoreAllocID IN (1,2) AND MovementInvoiceID=" + MovementInvoiceID + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    int PurchaseInvoiceID = 0;
                    int StoreIDFrom = 0;
                    if (DA.Fill(DT) > 0)
                    {
                        StoreIDFrom = Convert.ToInt32(DT.Rows[0]["StoreIDFrom"]);
                        SelectCommand = @"SELECT PurchaseInvoiceID FROM Store WHERE StoreID =" + StoreIDFrom;
                        using (SqlDataAdapter sDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                        {
                            using (DataTable sDT = new DataTable())
                            {
                                if (sDA.Fill(sDT) > 0)
                                {
                                    PurchaseInvoiceID = Convert.ToInt32(sDT.Rows[0]["PurchaseInvoiceID"]);
                                }
                            }
                        }
                    }
                    return PurchaseInvoiceID;
                }
            }
        }
    }





    public class ManufactureStoreManager
    {
        int CurrentStoreSubGroupID = -1;
        int CurrentInventoryID = -1;

        private DataTable PatinaRALDataTable = null;
        DataTable GroupsDT;
        DataTable SubGroupsDT;
        DataTable MovementInvoicesDT;
        DataTable MovementInvoiceItemsDT;
        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        DataTable StoreDT;
        DataTable CurrencyTypesDT;
        DataTable SellersDT;
        DataTable FilterSellersDT;
        DataTable FilterMovSellersDT;
        DataTable StoreAllocDT;

        DataTable ArrivalCountDT;
        DataTable ArrivelFromStoreCountDT;
        DataTable ExpenseCountDT;
        DataTable SellingCountDT;
        DataTable StartRemainsDT;
        DataTable EndRemainsDT;

        DataTable SectorsDataTable;
        DataTable StoreAllocDataTable;
        DataTable UsersDataTable;
        DataTable ClientsDT;

        BindingSource GroupsBS;
        BindingSource SubGroupsBS;
        BindingSource MovementInvoicesBS;
        BindingSource MovementInvoiceItemsBS;
        BindingSource StoreBS;
        BindingSource SectorsBS;
        BindingSource StoreAllocFromBS;
        BindingSource StoreAllocToBS;
        BindingSource UsersBS;
        BindingSource ClientsBS;

        public ManufactureStoreManager()
        {
            CreateTables();
            FillTables();
            Binding();
        }

        private void CreateTables()
        {
            GroupsDT = new DataTable();
            SubGroupsDT = new DataTable();
            MovementInvoicesDT = new DataTable();
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            CurrencyTypesDT = new DataTable();
            StoreDT = new DataTable();
            MovementInvoiceItemsDT = new DataTable();
            SellersDT = new DataTable();
            FilterSellersDT = new DataTable();
            FilterMovSellersDT = new DataTable();
            StoreAllocDT = new DataTable();

            ArrivalCountDT = new DataTable();
            ArrivelFromStoreCountDT = new DataTable();
            ExpenseCountDT = new DataTable();
            SellingCountDT = new DataTable();
            StartRemainsDT = new DataTable();
            EndRemainsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void FillTables()
        {
            ArrayList time = new ArrayList();

            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Restart();
            SectorsDataTable = new DataTable();
            StoreAllocDataTable = new DataTable();
            UsersDataTable = new DataTable();
            ClientsDT = new DataTable();
            SellersDT = new DataTable();

            ClientsDT.Columns.Add(new DataColumn("From", Type.GetType("System.String")));
            ClientsDT.Columns.Add(new DataColumn("ClientID", Type.GetType("System.Int64")));
            ClientsDT.Columns.Add(new DataColumn("ClientName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Storage";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["SellerID"]);
                        NewRow["ClientName"] = DT.Rows[i]["SellerName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientID, ClientName FROM Clients",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Marketing";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["ClientID"]);
                        NewRow["ClientName"] = DT.Rows[i]["ClientName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM Sectors ORDER BY Sector",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SectorsDataTable);
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();

            string StoreAllocFilter = string.Empty;

            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM StoreAlloc" + StoreAllocFilter + " ORDER BY StoreAlloc",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDataTable);
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT UserID, Name, ShortName FROM Users  WHERE Fired <> 1 ORDER BY Name",
                ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(UsersDataTable);
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1)))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDT.Clear();
                DA.Fill(GroupsDT);
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDT.Clear();
                DA.Fill(SubGroupsDT);
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " LEFT JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " LEFT JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " LEFT JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " LEFT JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoicesDT);
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}
            sw.Stop();
            time.Add(sw.Elapsed.Milliseconds);
            sw.Restart();
            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }
            sw.Stop();
            time.Add("PatinaDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDT);
            }
            sw.Stop();
            time.Add("CurrencyTypesDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())", ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        CurrentInventoryID = Convert.ToInt32(DT.Rows[0]["InventoryID"]);
                }
            }
            sw.Stop();
            time.Add("DT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM ManufactureStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE ManufactureStore.FactoryID=1 AND ManufactureStore.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
                StoreDT.Columns.Add(new DataColumn("StartMonthCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("EndMonthCount", Type.GetType("System.Decimal")));
            }
            sw.Stop();
            time.Add("StoreDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM ManufactureStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE ManufactureStore.FactoryID=1 AND ManufactureStore.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceItemsDT);
            }
            sw.Stop();
            time.Add("MovementInvoiceItemsDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Sellers", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDT);
            }
            sw.Stop();
            time.Add("SellersDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            CreateCoversDT();
            sw.Stop();
            time.Add("CreateCoversDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers" +
                " ORDER BY SellerName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(FilterSellersDT);
            }
            sw.Stop();
            time.Add("FilterSellersDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT UserID, Name FROM Users WHERE Fired <> 1 " +
                " ORDER BY Name", ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(FilterMovSellersDT);
            }
            sw.Stop();
            time.Add("FilterMovSellersDT " + sw.Elapsed.Milliseconds);
            sw.Restart();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreAllocID, StoreAlloc FROM StoreAlloc", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDT);
            }
            sw.Stop();
            time.Add("StoreAllocDT " + sw.Elapsed.Milliseconds);
            sw.Restart();
        }

        //public string StoreName(int TechStoreID)
        //{
        //    DataRow[] rows = TechStoreNamesDT.Select("TechStoreID = " + TechStoreID);
        //    if (rows.Count() > 0)
        //    {
        //        return rows[0]["TechStoreGroupName"].ToString() + "; " + rows[0]["TechStoreSubGroupName"].ToString();
        //    }
        //    return string.Empty;
        //}

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Binding()
        {
            GroupsBS = new BindingSource()
            {
                DataSource = GroupsDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = SubGroupsDT
            };
            MovementInvoicesBS = new BindingSource()
            {
                DataSource = MovementInvoicesDT
            };
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            MovementInvoiceItemsBS = new BindingSource()
            {
                DataSource = MovementInvoiceItemsDT
            };
            SectorsBS = new BindingSource();
            StoreAllocFromBS = new BindingSource();
            StoreAllocToBS = new BindingSource();
            UsersBS = new BindingSource();
            ClientsBS = new BindingSource();

            SectorsBS.DataSource = SectorsDataTable;
            StoreAllocFromBS.DataSource = new DataView(StoreAllocDataTable);
            StoreAllocToBS.DataSource = new DataView(StoreAllocDataTable);
            UsersBS.DataSource = UsersDataTable;
            ClientsBS.DataSource = ClientsDT;
            ClientsBS.Sort = "From, ClientName";
        }

        public BindingSource SectorsList
        {
            get { return SectorsBS; }
        }

        public BindingSource StoreAllocFromList
        {
            get { return StoreAllocFromBS; }
        }

        public BindingSource StoreAllocToList
        {
            get { return StoreAllocToBS; }
        }

        public BindingSource UsersList
        {
            get { return UsersBS; }
        }

        public BindingSource ClientsList
        {
            get { return ClientsBS; }
        }

        public void FilterSectors(int FactoryID)
        {
            SectorsBS.Filter = "FactoryID = " + FactoryID;
        }

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceSellersColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "SellersColumn",
                    HeaderText = "Поставщик",
                    DataPropertyName = "SellerID",
                    DataSource = new DataView(SellersDT),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoicePatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        #region Filter fuctions

        public bool FilterGroups(int FactoryID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore" +
                " WHERE FactoryID = " + FactoryID + ")))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDT.Clear();
                DA.Fill(GroupsDT);
            }

            return GroupsDT.Rows.Count > 0;
        }

        public void FilterSubGroups(int FactoryID, int StoreGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore" +
                " WHERE FactoryID = " + FactoryID + ")) AND TechStoreGroupID = " + StoreGroupID +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDT.Clear();
                DA.Fill(SubGroupsDT);
            }
            SubGroupsBS.MoveFirst();
        }

        public void FilterStore(int FactoryID, int StoreSubGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM ManufactureStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE FactoryID = " + FactoryID + " AND ManufactureStore.StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore" +
                " WHERE TechStoreSubGroupID = " + StoreSubGroupID +
                ") ORDER BY TechStoreName",
                ConnectionStrings.StorageConnectionString))
            {
                StoreDT.Clear();
                DA.Fill(StoreDT);
            }
            StoreBS.Sort = "StoreItemColumn, Diameter, Capacity, Thickness, Length, Height, Width, Admission, CoverID, PatinaID, ColorID";
            CurrentStoreSubGroupID = StoreSubGroupID;
        }

        public void FilterStore(int StoreSubGroupID)
        {
            //StoreBS.Sort = "StoreItemColumn, Diameter, Capacity, Thickness, Length, Height, Width, Admission, CoverID, PatinaID, ColorID";
            CurrentStoreSubGroupID = StoreSubGroupID;
            //StoreBS.RemoveFilter();
            StoreBS.Filter = "(StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0)";
            StoreBS.MoveFirst();
        }

        public bool FilterByMovementInvoice(int MovementInvoiceID, int FactoryID, int StoreType)
        {
            string StoreName = "Store";
            switch (StoreType)
            {
                case 1:
                    StoreName = "Store";
                    break;
                case 2:
                    StoreName = "ManufactureStore";
                    break;
                case 3:
                    StoreName = "WriteOffStore";
                    break;
                case 4:
                    StoreName = "PersonalStore";
                    break;
                case 5:
                    StoreName = "ReadyStore";
                    break;
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT " + StoreName + ".*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn, infiniu2_catalog.dbo.TechStore.SellerCode FROM " + StoreName +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON " + StoreName + ".StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE MovementInvoiceID = " + MovementInvoiceID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                MovementInvoiceItemsDT.Clear();
                DA.Fill(MovementInvoiceItemsDT);
            }
            MovementInvoiceItemsBS.MoveFirst();
            return MovementInvoiceItemsDT.Rows.Count > 0;
        }

        public void FilterMovementInvoices(bool ByDateTime, bool ByPerson, bool BySellerStoreAlloc, bool ByRecipientStoreAlloc,
            DateTime DateFrom, DateTime DateTo, int PersonID, int SellerStoreAllocID, int RecipientStoreAllocID, int FactoryID)
        {
            string Filter = @" WHERE MovementInvoiceID<>-1 ";

            if (ByDateTime)
            {
                Filter += " AND ((DateTime >= '" + DateFrom.ToString("yyyy-MM-dd") +
                    " 00:00' AND DateTime <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'))";
            }
            if (BySellerStoreAlloc)
            {
                Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            }
            if (ByRecipientStoreAlloc)
            {
                Filter += " AND (RecipientStoreAllocID = " + RecipientStoreAllocID + ")";
            }
            if (ByPerson)
            {
                Filter += " AND (PersonID = " + PersonID + ")";
            }

            if (Filter.Length == 0)
            {
                if (FactoryID == 1)
                    Filter = " WHERE (SellerStoreAllocID = 3 OR RecipientStoreAllocID = 3)";
                if (FactoryID == 2)
                    Filter = " WHERE (SellerStoreAllocID = 4 OR RecipientStoreAllocID = 4)";
            }

            if (Filter == " WHERE MovementInvoiceID<>-1 ")
                Filter = " WHERE DateTime >= '" + DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd") + "'";
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " INNER JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " INNER JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " INNER JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " INNER JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID" + Filter,
                ConnectionStrings.StorageConnectionString))
            {
                MovementInvoicesDT.Clear();
                DA.Fill(MovementInvoicesDT);
            }
            for (int i = MovementInvoicesDT.Rows.Count - 1; i >= 0; i--)
            {
                int MovementInvoiceID = Convert.ToInt32(MovementInvoicesDT.Rows[i]["MovementInvoiceID"]);

                //bool b = FilterByMovementInvoice(MovementInvoiceID, FactoryID, 2);
                //if (!b)
                //    MovementInvoicesDT.Rows[i].Delete();
            }
            MovementInvoicesDT.AcceptChanges();
            MovementInvoicesBS.MoveFirst();
        }

        //public void FilterMovementInvoices(int FactoryID)
        //{
        //    string Filter = string.Empty;

        //    //if (ByDateTime)
        //    //{
        //    //    Filter += " AND ((DateTime >= '" + DateFrom.ToString("yyyy-MM-dd") +
        //    //        " 00:00' AND DateTime <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'))";
        //    //}
        //    //if (BySellerStoreAlloc)
        //    //{
        //    //    Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
        //    //}
        //    //if (ByRecipientStoreAlloc)
        //    //{
        //    //Filter += " AND (RecipientStoreAllocID = 8)";
        //    //}
        //    //if (ByPerson)
        //    //{
        //    //    Filter += " AND (PersonID = " + PersonID + ")";
        //    //}

        //    if (Filter.Length == 0)
        //    {
        //        if (FactoryID == 1)
        //            Filter = " WHERE (SellerStoreAllocID = 3 OR RecipientStoreAllocID = 3) AND TypeCreation=0";
        //        if (FactoryID == 2)
        //            Filter = " WHERE (SellerStoreAllocID = 4 OR RecipientStoreAllocID = 4) AND TypeCreation=0";
        //    }

        //    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoices.*," +
        //        " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
        //        " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
        //        " FROM MovementInvoices" +
        //        " INNER JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
        //        " INNER JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
        //        " INNER JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
        //        " INNER JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID" + Filter,
        //        ConnectionStrings.StorageConnectionString))
        //    {
        //        MovementInvoicesDT.Clear();
        //        DA.Fill(MovementInvoicesDT);
        //    }
        //    MovementInvoicesBS.MoveFirst();
        //}

        #endregion

        #region Properties

        public DataView InvoiceSellersList
        {
            get { return new DataView(FilterSellersDT); }
        }

        public DataView MovInvoiceSellersList
        {
            get { return new DataView(FilterMovSellersDT); }
        }

        public DataView SellerStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public DataView RecipientsStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public BindingSource GroupsList
        {
            get { return GroupsBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource MovementInvoicesList
        {
            get { return MovementInvoicesBS; }
        }

        public BindingSource MovementInvoiceItemsList
        {
            get { return MovementInvoiceItemsBS; }
        }

        #endregion

        public void ShowNoEmptyStoreItems()
        {
            StoreBS.RemoveFilter();
            StoreBS.Filter = "StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0";
            StoreBS.MoveFirst();
        }

        public bool InventoryExist(DateTime FilterDate)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void GetStoreCount(DateTime FilterDate)
        {
            CurrentStoreSubGroupID = -1;

            ArrivalCountDT.Clear();
            ArrivelFromStoreCountDT.Clear();
            ExpenseCountDT.Clear();
            SellingCountDT.Clear();
            StartRemainsDT.Clear();
            EndRemainsDT.Clear();

            if (InventoryExist(FilterDate))
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, StartMonthCount AS Count  FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
            //    " WHERE CAST(IncomeDate AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
            //    " AND CAST(IncomeDate AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ArrivalCountDT);
            //}
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>2 AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivalCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND SellerStoreAllocID IN (3, 4) AND RecipientStoreAllocID NOT IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ExpenseCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND RecipientStoreAllocID IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellingCountDT);
            }
        }

        public void FillStoreCount(DateTime FilterDate)
        {
            decimal ArrivalCount = 0;
            decimal EndMonthCount = 0;
            decimal ExpenseCount = 0;
            decimal SellingCount = 0;
            decimal StartMonthCount = 0;
            int MovementInvoiceID = -1;
            int StoreID = -1;

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                ArrivalCount = 0;
                EndMonthCount = 0;
                ExpenseCount = 0;
                SellingCount = 0;
                StartMonthCount = 0;
                MovementInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["MovementInvoiceID"]);
                StoreID = Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]);

                //ОСТн
                DataRow[] StartRemainsRows = StartRemainsDT.Select("StoreID = " + StoreID);
                if (StartRemainsRows.Count() > 0)
                {
                    StartMonthCount = Convert.ToDecimal(StartRemainsRows[0]["Count"]);
                }
                //ОСТк
                DataRow[] EndRemainsRows = EndRemainsDT.Select("StoreID = " + StoreID);
                if (EndRemainsRows.Count() > 0)
                {
                    EndMonthCount = Convert.ToDecimal(EndRemainsRows[0]["Count"]);
                }
                //Приход
                DataRow[] ArrivalRows = ArrivalCountDT.Select("MovementInvoiceID = " + MovementInvoiceID);
                if (ArrivalRows.Count() > 0)
                {
                    ArrivalCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }
                //Реализация
                DataRow[] SellingRows = SellingCountDT.Select("StoreIDFrom = " + StoreID);
                if (SellingRows.Count() > 0)
                {
                    foreach (DataRow item in SellingRows)
                        SellingCount += Convert.ToDecimal(item["Count"]);
                }
                //Расход
                DataRow[] ExpenseRows = ExpenseCountDT.Select("StoreIDFrom = " + StoreID);
                if (ExpenseRows.Count() > 0)
                {
                    foreach (DataRow item in ExpenseRows)
                        ExpenseCount += Convert.ToDecimal(item["Count"]);
                }

                StoreDT.Rows[i]["MonthInvoiceCount"] = ArrivalCount;
                StoreDT.Rows[i]["ExpenseCount"] = ExpenseCount;
                StoreDT.Rows[i]["EndMonthCount"] = EndMonthCount;
                StoreDT.Rows[i]["SellingCount"] = SellingCount;
                StoreDT.Rows[i]["StartMonthCount"] = StartMonthCount;
            }
        }

        public void MoveToMovementInvoice(int MovementInvoiceID)
        {
            MovementInvoicesBS.Position = MovementInvoicesBS.Find("MovementInvoiceID", MovementInvoiceID);
        }

        public void MoveToTechStoreGroup(int TechStoreGroupID)
        {
            GroupsBS.Position = GroupsBS.Find("TechStoreGroupID", TechStoreGroupID);
        }

        public void MoveToLastMovementInvoice()
        {
            MovementInvoicesBS.MoveLast();
        }

    }




    public class ReadyStoreManager
    {
        int CurrentStoreSubGroupID = -1;
        int CurrentInventoryID = -1;

        DataTable GroupsDT;
        DataTable SubGroupsDT;
        DataTable MovementInvoicesDT;
        DataTable MovementInvoiceItemsDT;
        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreDT;
        DataTable CurrencyTypesDT;
        DataTable SellersDT;
        DataTable FilterSellersDT;
        DataTable FilterMovSellersDT;
        DataTable StoreAllocDT;

        DataTable ArrivalCountDT;
        DataTable ArrivelFromStoreCountDT;
        DataTable ExpenseCountDT;
        DataTable SellingCountDT;
        DataTable StartRemainsDT;
        DataTable EndRemainsDT;

        DataTable SectorsDataTable;
        DataTable StoreAllocDataTable;
        DataTable UsersDataTable;
        DataTable ClientsDT;

        BindingSource GroupsBS;
        BindingSource SubGroupsBS;
        BindingSource MovementInvoicesBS;
        BindingSource MovementInvoiceItemsBS;
        BindingSource StoreBS;
        BindingSource SectorsBS;
        BindingSource StoreAllocFromBS;
        BindingSource StoreAllocToBS;
        BindingSource UsersBS;
        BindingSource ClientsBS;

        public ReadyStoreManager()
        {
            CreateTables();
            FillTables();
            Binding();
        }

        private void CreateTables()
        {
            GroupsDT = new DataTable();
            SubGroupsDT = new DataTable();
            MovementInvoicesDT = new DataTable();
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            CurrencyTypesDT = new DataTable();
            StoreDT = new DataTable();
            MovementInvoiceItemsDT = new DataTable();
            SellersDT = new DataTable();
            FilterSellersDT = new DataTable();
            FilterMovSellersDT = new DataTable();
            StoreAllocDT = new DataTable();

            ArrivalCountDT = new DataTable();
            ArrivelFromStoreCountDT = new DataTable();
            ExpenseCountDT = new DataTable();
            SellingCountDT = new DataTable();
            StartRemainsDT = new DataTable();
            EndRemainsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void FillTables()
        {
            SectorsDataTable = new DataTable();
            StoreAllocDataTable = new DataTable();
            UsersDataTable = new DataTable();
            ClientsDT = new DataTable();
            SellersDT = new DataTable();

            ClientsDT.Columns.Add(new DataColumn("From", Type.GetType("System.String")));
            ClientsDT.Columns.Add(new DataColumn("ClientID", Type.GetType("System.Int64")));
            ClientsDT.Columns.Add(new DataColumn("ClientName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Storage";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["SellerID"]);
                        NewRow["ClientName"] = DT.Rows[i]["SellerName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientID, ClientName FROM Clients",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Marketing";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["ClientID"]);
                        NewRow["ClientName"] = DT.Rows[i]["ClientName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM Sectors ORDER BY Sector",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SectorsDataTable);
            }

            string StoreAllocFilter = string.Empty;

            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM StoreAlloc" + StoreAllocFilter + " ORDER BY StoreAlloc",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT UserID, Name, ShortName FROM Users  WHERE Fired <> 1 ORDER BY Name",
                ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(UsersDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ReadyStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1)))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDT.Clear();
                DA.Fill(GroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ReadyStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDT.Clear();
                DA.Fill(SubGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " LEFT JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " LEFT JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " LEFT JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " LEFT JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoicesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())", ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        CurrentInventoryID = Convert.ToInt32(DT.Rows[0]["InventoryID"]);
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM ReadyStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE ReadyStore.FactoryID=1 AND ReadyStore.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
                StoreDT.Columns.Add(new DataColumn("StartMonthCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("EndMonthCount", Type.GetType("System.Decimal")));
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM ReadyStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE ReadyStore.FactoryID=1 AND ReadyStore.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Sellers", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDT);
            }

            CreateCoversDT();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers" +
                " ORDER BY SellerName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(FilterSellersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT UserID, Name FROM Users WHERE Fired <> 1" +
                " ORDER BY Name", ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(FilterMovSellersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreAllocID, StoreAlloc FROM StoreAlloc", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDT);
            }
        }

        //public string StoreName(int TechStoreID)
        //{
        //    DataRow[] rows = TechStoreNamesDT.Select("TechStoreID = " + TechStoreID);
        //    if (rows.Count() > 0)
        //    {
        //        return rows[0]["TechStoreGroupName"].ToString() + "; " + rows[0]["TechStoreSubGroupName"].ToString();
        //    }
        //    return string.Empty;
        //}

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Binding()
        {
            GroupsBS = new BindingSource()
            {
                DataSource = GroupsDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = SubGroupsDT
            };
            MovementInvoicesBS = new BindingSource()
            {
                DataSource = MovementInvoicesDT
            };
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            MovementInvoiceItemsBS = new BindingSource()
            {
                DataSource = MovementInvoiceItemsDT
            };
            SectorsBS = new BindingSource();
            StoreAllocFromBS = new BindingSource();
            StoreAllocToBS = new BindingSource();
            UsersBS = new BindingSource();
            ClientsBS = new BindingSource();

            SectorsBS.DataSource = SectorsDataTable;
            StoreAllocFromBS.DataSource = new DataView(StoreAllocDataTable);
            StoreAllocToBS.DataSource = new DataView(StoreAllocDataTable);
            UsersBS.DataSource = UsersDataTable;
            ClientsBS.DataSource = ClientsDT;
            ClientsBS.Sort = "From, ClientName";
        }

        public BindingSource SectorsList
        {
            get { return SectorsBS; }
        }

        public BindingSource StoreAllocFromList
        {
            get { return StoreAllocFromBS; }
        }

        public BindingSource StoreAllocToList
        {
            get { return StoreAllocToBS; }
        }

        public BindingSource UsersList
        {
            get { return UsersBS; }
        }

        public BindingSource ClientsList
        {
            get { return ClientsBS; }
        }

        public void FilterSectors(int FactoryID)
        {
            SectorsBS.Filter = "FactoryID = " + FactoryID;
        }

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceSellersColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "SellersColumn",
                    HeaderText = "Поставщик",
                    DataPropertyName = "SellerID",
                    DataSource = new DataView(SellersDT),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoicePatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        #region Filter fuctions

        public bool FilterGroups(int FactoryID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ReadyStore" +
                " WHERE FactoryID = " + FactoryID + ")))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDT.Clear();
                DA.Fill(GroupsDT);
            }

            return GroupsDT.Rows.Count > 0;
        }

        public void FilterSubGroups(int FactoryID, int StoreGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ReadyStore" +
                " WHERE FactoryID = " + FactoryID + ")) AND TechStoreGroupID = " + StoreGroupID +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDT.Clear();
                DA.Fill(SubGroupsDT);
            }
            SubGroupsBS.MoveFirst();
        }

        public void FilterStore(int FactoryID, int StoreSubGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM ReadyStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE FactoryID = " + FactoryID + " AND ReadyStore.StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore" +
                " WHERE TechStoreSubGroupID = " + StoreSubGroupID +
                ") ORDER BY TechStoreName",
                ConnectionStrings.StorageConnectionString))
            {
                StoreDT.Clear();
                DA.Fill(StoreDT);
            }
            StoreBS.Sort = "StoreItemColumn, Diameter, Capacity, Thickness, Length, Height, Width, Admission, CoverID, PatinaID, ColorID";
            CurrentStoreSubGroupID = StoreSubGroupID;
        }

        public void FilterByMovementInvoice(int MovementInvoiceID, int FactoryID, int StoreType)
        {
            string StoreName = "Store";
            switch (StoreType)
            {
                case 1:
                    StoreName = "Store";
                    break;
                case 2:
                    StoreName = "ManufactureStore";
                    break;
                case 3:
                    StoreName = "WriteOffStore";
                    break;
                case 4:
                    StoreName = "PersonalStore";
                    break;
                case 5:
                    StoreName = "ReadyStore";
                    break;
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT " + StoreName + ".*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM " + StoreName +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON " + StoreName + ".StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE MovementInvoiceID = " + MovementInvoiceID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                MovementInvoiceItemsDT.Clear();
                DA.Fill(MovementInvoiceItemsDT);
            }
            MovementInvoiceItemsBS.MoveFirst();
        }

        public void FilterMovementInvoices(int FactoryID)
        {
            string Filter = @" WHERE MovementInvoiceID<>-1 ";

            //if (ByDateTime)
            //{
            //    Filter += " AND ((DateTime >= '" + DateFrom.ToString("yyyy-MM-dd") +
            //        " 00:00' AND DateTime <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'))";
            //}
            //if (BySellerStoreAlloc)
            //{
            //    Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            //}
            //if (ByRecipientStoreAlloc)
            //{
            //Filter += " AND (RecipientStoreAllocID = 8)";
            //}
            //if (ByPerson)
            //{
            //    Filter += " AND (PersonID = " + PersonID + ")";
            //}

            if (Filter.Length == 0)
            {
                if (FactoryID == 1)
                    Filter = " WHERE (SellerStoreAllocID = 10 OR RecipientStoreAllocID = 10)";
                if (FactoryID == 2)
                    Filter = " WHERE (SellerStoreAllocID = 11 OR RecipientStoreAllocID = 11)";
            }

            if (Filter == " WHERE MovementInvoiceID<>-1 ")
                Filter = " WHERE DateTime >= '" + DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd") + "'";
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " INNER JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " INNER JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " INNER JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " INNER JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID" + Filter,
                ConnectionStrings.StorageConnectionString))
            {
                MovementInvoicesDT.Clear();
                DA.Fill(MovementInvoicesDT);
            }
            MovementInvoicesBS.MoveFirst();
        }

        #endregion

        #region Properties

        public DataView InvoiceSellersList
        {
            get { return new DataView(FilterSellersDT); }
        }

        public DataView MovInvoiceSellersList
        {
            get { return new DataView(FilterMovSellersDT); }
        }

        public DataView SellerStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public DataView RecipientsStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public BindingSource GroupsList
        {
            get { return GroupsBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource MovementInvoicesList
        {
            get { return MovementInvoicesBS; }
        }

        public BindingSource MovementInvoiceItemsList
        {
            get { return MovementInvoiceItemsBS; }
        }

        #endregion

        public void ShowNoEmptyStoreItems()
        {
            StoreBS.RemoveFilter();
            StoreBS.Filter = "StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0";
            StoreBS.MoveFirst();
        }

        public bool InventoryExist(DateTime FilterDate)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void GetStoreCount(DateTime FilterDate)
        {
            CurrentStoreSubGroupID = -1;

            ArrivalCountDT.Clear();
            ArrivelFromStoreCountDT.Clear();
            ExpenseCountDT.Clear();
            SellingCountDT.Clear();
            StartRemainsDT.Clear();
            EndRemainsDT.Clear();

            if (InventoryExist(FilterDate))
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, StartMonthCount AS Count  FROM ReadyInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM ReadyInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM ReadyInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM ReadyInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
            //    " WHERE CAST(IncomeDate AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
            //    " AND CAST(IncomeDate AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ArrivalCountDT);
            //}
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivalCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (10, 11) AND RecipientStoreAllocID NOT IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ExpenseCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE RecipientStoreAllocID IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellingCountDT);
            }
        }

        public void FillStoreCount(DateTime FilterDate)
        {
            decimal ArrivalCount = 0;
            decimal EndMonthCount = 0;
            decimal ExpenseCount = 0;
            decimal SellingCount = 0;
            decimal StartMonthCount = 0;
            int MovementInvoiceID = -1;
            int StoreID = -1;

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                ArrivalCount = 0;
                EndMonthCount = 0;
                ExpenseCount = 0;
                SellingCount = 0;
                StartMonthCount = 0;
                MovementInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["MovementInvoiceID"]);
                StoreID = Convert.ToInt32(StoreDT.Rows[i]["ReadyStoreID"]);

                //ОСТн
                DataRow[] StartRemainsRows = StartRemainsDT.Select("StoreID = " + StoreID);
                if (StartRemainsRows.Count() > 0)
                {
                    StartMonthCount = Convert.ToDecimal(StartRemainsRows[0]["Count"]);
                }
                //ОСТк
                DataRow[] EndRemainsRows = EndRemainsDT.Select("StoreID = " + StoreID);
                if (EndRemainsRows.Count() > 0)
                {
                    EndMonthCount = Convert.ToDecimal(EndRemainsRows[0]["Count"]);
                }
                //Приход
                DataRow[] ArrivalRows = ArrivalCountDT.Select("MovementInvoiceID = " + MovementInvoiceID);
                if (ArrivalRows.Count() > 0)
                {
                    ArrivalCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }
                //Реализация
                DataRow[] SellingRows = SellingCountDT.Select("StoreIDFrom = " + StoreID);
                if (SellingRows.Count() > 0)
                {
                    foreach (DataRow item in SellingRows)
                        SellingCount += Convert.ToDecimal(item["Count"]);
                }
                //Расход
                DataRow[] ExpenseRows = ExpenseCountDT.Select("StoreIDFrom = " + StoreID);
                if (ExpenseRows.Count() > 0)
                {
                    foreach (DataRow item in ExpenseRows)
                        ExpenseCount += Convert.ToDecimal(item["Count"]);
                }

                StoreDT.Rows[i]["MonthInvoiceCount"] = ArrivalCount;
                StoreDT.Rows[i]["ExpenseCount"] = ExpenseCount;
                StoreDT.Rows[i]["EndMonthCount"] = EndMonthCount;
                StoreDT.Rows[i]["SellingCount"] = SellingCount;
                StoreDT.Rows[i]["StartMonthCount"] = StartMonthCount;
            }
        }

        public void MoveToMovementInvoice(int MovementInvoiceID)
        {
            MovementInvoicesBS.Position = MovementInvoicesBS.Find("MovementInvoiceID", MovementInvoiceID);
        }

        public void MoveToTechStoreGroup(int TechStoreGroupID)
        {
            GroupsBS.Position = GroupsBS.Find("TechStoreGroupID", TechStoreGroupID);
        }

        public void MoveToLastMovementInvoice()
        {
            MovementInvoicesBS.MoveLast();
        }

    }



    public class WriteOffStoreManager
    {
        int CurrentStoreSubGroupID = -1;
        int CurrentInventoryID = -1;

        DataTable GroupsDT;
        DataTable SubGroupsDT;
        DataTable MovementInvoicesDT;
        DataTable MovementInvoiceItemsDT;
        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        private DataTable PatinaRALDataTable = null;
        DataTable PatinaDT;
        DataTable StoreDT;
        DataTable CurrencyTypesDT;
        DataTable SellersDT;
        DataTable FilterSellersDT;
        DataTable FilterMovSellersDT;
        DataTable StoreAllocDT;

        DataTable ArrivalCountDT;
        DataTable ArrivelFromStoreCountDT;
        DataTable ExpenseCountDT;
        DataTable SellingCountDT;
        DataTable StartRemainsDT;
        DataTable EndRemainsDT;

        DataTable SectorsDataTable;
        DataTable StoreAllocDataTable;
        DataTable UsersDataTable;
        DataTable ClientsDT;

        BindingSource GroupsBS;
        BindingSource SubGroupsBS;
        BindingSource MovementInvoicesBS;
        BindingSource MovementInvoiceItemsBS;
        BindingSource StoreBS;
        BindingSource SectorsBS;
        BindingSource StoreAllocFromBS;
        BindingSource StoreAllocToBS;
        BindingSource UsersBS;
        BindingSource ClientsBS;

        public WriteOffStoreManager()
        {
            CreateTables();
            FillTables();
            Binding();
        }

        private void CreateTables()
        {
            GroupsDT = new DataTable();
            SubGroupsDT = new DataTable();
            MovementInvoicesDT = new DataTable();
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            CurrencyTypesDT = new DataTable();
            StoreDT = new DataTable();
            MovementInvoiceItemsDT = new DataTable();
            SellersDT = new DataTable();
            FilterSellersDT = new DataTable();
            FilterMovSellersDT = new DataTable();
            StoreAllocDT = new DataTable();

            ArrivalCountDT = new DataTable();
            ArrivelFromStoreCountDT = new DataTable();
            ExpenseCountDT = new DataTable();
            SellingCountDT = new DataTable();
            StartRemainsDT = new DataTable();
            EndRemainsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void FillTables()
        {
            SectorsDataTable = new DataTable();
            StoreAllocDataTable = new DataTable();
            UsersDataTable = new DataTable();
            ClientsDT = new DataTable();
            SellersDT = new DataTable();

            ClientsDT.Columns.Add(new DataColumn("From", Type.GetType("System.String")));
            ClientsDT.Columns.Add(new DataColumn("ClientID", Type.GetType("System.Int64")));
            ClientsDT.Columns.Add(new DataColumn("ClientName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Storage";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["SellerID"]);
                        NewRow["ClientName"] = DT.Rows[i]["SellerName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ClientID, ClientName FROM Clients",
                ConnectionStrings.MarketingReferenceConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ClientsDT.NewRow();
                        NewRow["From"] = "Marketing";
                        NewRow["ClientID"] = Convert.ToInt64(DT.Rows[i]["ClientID"]);
                        NewRow["ClientName"] = DT.Rows[i]["ClientName"].ToString();
                        ClientsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM Sectors ORDER BY Sector",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SectorsDataTable);
            }

            string StoreAllocFilter = string.Empty;

            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT * FROM StoreAlloc" + StoreAllocFilter + " ORDER BY StoreAlloc",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(
                "SELECT UserID, Name, ShortName FROM Users  WHERE Fired <> 1 ORDER BY Name",
                ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(UsersDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.WriteOffStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1)))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDT.Clear();
                DA.Fill(GroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.WriteOffStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDT.Clear();
                DA.Fill(SubGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " LEFT JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " LEFT JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " LEFT JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " LEFT JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoicesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())", ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        CurrentInventoryID = Convert.ToInt32(DT.Rows[0]["InventoryID"]);
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 WriteOffStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM WriteOffStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON WriteOffStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE WriteOffStore.FactoryID=1 AND WriteOffStore.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
                StoreDT.Columns.Add(new DataColumn("StartMonthCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));
                StoreDT.Columns.Add(new DataColumn("EndMonthCount", Type.GetType("System.Decimal")));
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 WriteOffStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM WriteOffStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON WriteOffStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE WriteOffStore.FactoryID=1 AND WriteOffStore.CurrentCount > 0" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Sellers", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDT);
            }

            CreateCoversDT();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers" +
                " ORDER BY SellerName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(FilterSellersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT UserID, Name FROM Users WHERE Fired <> 1" +
                " ORDER BY Name", ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(FilterMovSellersDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreAllocID, StoreAlloc FROM StoreAlloc", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDT);
            }
        }

        //public string StoreName(int TechStoreID)
        //{
        //    DataRow[] rows = TechStoreNamesDT.Select("TechStoreID = " + TechStoreID);
        //    if (rows.Count() > 0)
        //    {
        //        return rows[0]["TechStoreGroupName"].ToString() + "; " + rows[0]["TechStoreSubGroupName"].ToString();
        //    }
        //    return string.Empty;
        //}

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Binding()
        {
            GroupsBS = new BindingSource()
            {
                DataSource = GroupsDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = SubGroupsDT
            };
            MovementInvoicesBS = new BindingSource()
            {
                DataSource = MovementInvoicesDT
            };
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            MovementInvoiceItemsBS = new BindingSource()
            {
                DataSource = MovementInvoiceItemsDT
            };
            SectorsBS = new BindingSource();
            StoreAllocFromBS = new BindingSource();
            StoreAllocToBS = new BindingSource();
            UsersBS = new BindingSource();
            ClientsBS = new BindingSource();

            SectorsBS.DataSource = SectorsDataTable;
            StoreAllocFromBS.DataSource = new DataView(StoreAllocDataTable);
            StoreAllocToBS.DataSource = new DataView(StoreAllocDataTable);
            UsersBS.DataSource = UsersDataTable;
            ClientsBS.DataSource = ClientsDT;
            ClientsBS.Sort = "From, ClientName";
        }

        public BindingSource SectorsList
        {
            get { return SectorsBS; }
        }

        public BindingSource StoreAllocFromList
        {
            get { return StoreAllocFromBS; }
        }

        public BindingSource StoreAllocToList
        {
            get { return StoreAllocToBS; }
        }

        public BindingSource UsersList
        {
            get { return UsersBS; }
        }

        public BindingSource ClientsList
        {
            get { return ClientsBS; }
        }

        public void FilterSectors(int FactoryID)
        {
            SectorsBS.Filter = "FactoryID = " + FactoryID;
        }

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceSellersColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "SellersColumn",
                    HeaderText = "Поставщик",
                    DataPropertyName = "SellerID",
                    DataSource = new DataView(SellersDT),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = ColorsDT,
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoicePatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = PatinaDT,
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn MovInvoiceCurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = CurrencyTypesDT,
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
                };
                return Column;
            }
        }

        #region Filter fuctions

        public bool FilterGroups(int FactoryID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.WriteOffStore" +
                " WHERE FactoryID = " + FactoryID + ")))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDT.Clear();
                DA.Fill(GroupsDT);
            }

            return GroupsDT.Rows.Count > 0;
        }

        public void FilterSubGroups(int FactoryID, int StoreGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.WriteOffStore" +
                " WHERE FactoryID = " + FactoryID + ")) AND TechStoreGroupID = " + StoreGroupID +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDT.Clear();
                DA.Fill(SubGroupsDT);
            }
            SubGroupsBS.MoveFirst();
        }

        public void FilterStore(int FactoryID, int StoreSubGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT WriteOffStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM WriteOffStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON WriteOffStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE FactoryID = " + FactoryID + " AND WriteOffStore.StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore" +
                " WHERE TechStoreSubGroupID = " + StoreSubGroupID +
                ") ORDER BY TechStoreName",
                ConnectionStrings.StorageConnectionString))
            {
                StoreDT.Clear();
                DA.Fill(StoreDT);
            }
            StoreBS.Sort = "StoreItemColumn, Diameter, Capacity, Thickness, Length, Height, Width, Admission, CoverID, PatinaID, ColorID";
            CurrentStoreSubGroupID = StoreSubGroupID;
        }

        public void FilterByMovementInvoice(int MovementInvoiceID, int FactoryID, int StoreType)
        {
            string StoreName = "Store";
            switch (StoreType)
            {
                case 1:
                    StoreName = "Store";
                    break;
                case 2:
                    StoreName = "ManufactureStore";
                    break;
                case 3:
                    StoreName = "WriteOffStore";
                    break;
                case 4:
                    StoreName = "PersonalStore";
                    break;
                case 5:
                    StoreName = "ReadyStore";
                    break;
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT " + StoreName + ".*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM " + StoreName +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON " + StoreName + ".StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE MovementInvoiceID = " + MovementInvoiceID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                MovementInvoiceItemsDT.Clear();
                DA.Fill(MovementInvoiceItemsDT);
            }
            MovementInvoiceItemsBS.MoveFirst();
        }

        public void FilterMovementInvoices(int FactoryID)
        {
            string Filter = string.Empty;

            //if (ByDateTime)
            //{
            //    Filter += " AND ((DateTime >= '" + DateFrom.ToString("yyyy-MM-dd") +
            //        " 00:00' AND DateTime <= '" + DateTo.ToString("yyyy-MM-dd") + " 23:59'))";
            //}
            //if (BySellerStoreAlloc)
            //{
            //    Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            //}
            //if (ByRecipientStoreAlloc)
            //{
            if (Filter.Length == 0)
            {
                if (FactoryID == 1)
                    Filter = " WHERE (SellerStoreAllocID = 12 OR RecipientStoreAllocID = 12)";
                if (FactoryID == 2)
                    Filter = " WHERE (SellerStoreAllocID = 13 OR RecipientStoreAllocID = 13)";
            }
            //}
            //if (ByPerson)
            //{
            //    Filter += " AND (PersonID = " + PersonID + ")";
            //}

            //if (Filter.Length == 0)
            //{
            //    if (FactoryID == 1)
            //        Filter = " WHERE (SellerStoreAllocID = 1 OR RecipientStoreAllocID = 1)";
            //    if (FactoryID == 2)
            //        Filter = " WHERE (SellerStoreAllocID = 2 OR RecipientStoreAllocID = 2)";
            //}

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " INNER JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " INNER JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " INNER JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " INNER JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID" + Filter,
                ConnectionStrings.StorageConnectionString))
            {
                MovementInvoicesDT.Clear();
                DA.Fill(MovementInvoicesDT);
            }
            MovementInvoicesBS.MoveFirst();
        }

        #endregion

        #region Properties

        public DataView InvoiceSellersList
        {
            get { return new DataView(FilterSellersDT); }
        }

        public DataView MovInvoiceSellersList
        {
            get { return new DataView(FilterMovSellersDT); }
        }

        public DataView SellerStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public DataView RecipientsStoreAllocList
        {
            get { return new DataView(StoreAllocDT); }
        }

        public BindingSource GroupsList
        {
            get { return GroupsBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource MovementInvoicesList
        {
            get { return MovementInvoicesBS; }
        }

        public BindingSource MovementInvoiceItemsList
        {
            get { return MovementInvoiceItemsBS; }
        }

        #endregion

        public void ShowNoEmptyStoreItems()
        {
            StoreBS.RemoveFilter();
            StoreBS.Filter = "StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0";
            StoreBS.MoveFirst();
        }

        public bool InventoryExist(DateTime FilterDate)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void GetStoreCount(DateTime FilterDate)
        {
            CurrentStoreSubGroupID = -1;

            ArrivalCountDT.Clear();
            ArrivelFromStoreCountDT.Clear();
            ExpenseCountDT.Clear();
            SellingCountDT.Clear();
            StartRemainsDT.Clear();
            EndRemainsDT.Clear();

            if (InventoryExist(FilterDate))
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, StartMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE CAST(IncomeDate AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(IncomeDate AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivalCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivelFromStoreCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID NOT IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ExpenseCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE RecipientStoreAllocID IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellingCountDT);
            }
        }

        public void FillStoreCount()
        {
            decimal ArrivalCount = 0;
            decimal EndMonthCount = 0;
            decimal ExpenseCount = 0;
            decimal SellingCount = 0;
            decimal StartMonthCount = 0;
            int MovementInvoiceID = -1;
            int StoreID = -1;

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                ArrivalCount = 0;
                EndMonthCount = 0;
                ExpenseCount = 0;
                SellingCount = 0;
                StartMonthCount = 0;
                MovementInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["MovementInvoiceID"]);
                //PurchaseInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["PurchaseInvoiceID"]);
                StoreID = Convert.ToInt32(StoreDT.Rows[i]["WriteOffStoreID"]);

                //ОСТн
                DataRow[] StartRemainsRows = StartRemainsDT.Select("StoreID = " + StoreID);
                if (StartRemainsRows.Count() > 0)
                {
                    StartMonthCount = Convert.ToDecimal(StartRemainsRows[0]["Count"]);
                }
                //ОСТк
                DataRow[] EndRemainsRows = EndRemainsDT.Select("StoreID = " + StoreID);
                if (EndRemainsRows.Count() > 0)
                {
                    EndMonthCount = Convert.ToDecimal(EndRemainsRows[0]["Count"]);
                }
                //Приход
                //DataRow[] ArrivalRows = ArrivalCountDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
                //if (ArrivalRows.Count() > 0)
                //{
                //    ArrivalCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                //}
                DataRow[] ArrivelFromStoreRows = ArrivelFromStoreCountDT.Select("MovementInvoiceID = " + MovementInvoiceID);
                if (ArrivelFromStoreRows.Count() > 0)
                {
                    ArrivalCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }
                //Реализация
                DataRow[] SellingRows = SellingCountDT.Select("StoreIDFrom = " + StoreID);
                if (SellingRows.Count() > 0)
                {
                    foreach (DataRow item in SellingRows)
                        SellingCount += Convert.ToDecimal(item["Count"]);
                }
                //Расход
                DataRow[] ExpenseRows = ExpenseCountDT.Select("StoreIDFrom = " + StoreID);
                if (ExpenseRows.Count() > 0)
                {
                    foreach (DataRow item in ExpenseRows)
                        ExpenseCount += Convert.ToDecimal(item["Count"]);
                }

                StoreDT.Rows[i]["MonthInvoiceCount"] = ArrivalCount;
                StoreDT.Rows[i]["ExpenseCount"] = ExpenseCount;
                StoreDT.Rows[i]["EndMonthCount"] = EndMonthCount;
                StoreDT.Rows[i]["SellingCount"] = SellingCount;
                StoreDT.Rows[i]["StartMonthCount"] = StartMonthCount;
            }
        }

        public void MoveToMovementInvoice(int MovementInvoiceID)
        {
            MovementInvoicesBS.Position = MovementInvoicesBS.Find("MovementInvoiceID", MovementInvoiceID);
        }

        public void MoveToTechStoreGroup(int TechStoreGroupID)
        {
            GroupsBS.Position = GroupsBS.Find("TechStoreGroupID", TechStoreGroupID);
        }

        public void MoveToLastMovementInvoice()
        {
            MovementInvoicesBS.MoveLast();
        }

    }








    public class PersonalStorageManager
    {
        int CurrentStoreGroupID = -1;
        int CurrentStoreSubGroupID = -1;

        DataTable ArrivalCountDT;
        DataTable ExpenseCountDT;
        DataTable SellingCountDT;
        DataTable StartRemainsDT;
        DataTable EndRemainsDT;

        private DataTable PatinaRALDataTable = null;
        DataTable GroupsDataTable;
        DataTable SubGroupsDataTable;
        DataTable InvoiceItemsDataTable;
        DataTable MeasuresDataTable;
        DataTable ColorsDataTable;
        DataTable CoversDataTable;
        DataTable PatinaDataTable;
        DataTable StoreDataTable;
        DataTable CurrencyTypesDataTable;
        DataTable SellersDataTable;
        DataTable FactoryDataTable;
        DataTable InvoicesDataTable;
        DataTable FilterPersonsDataTable;
        DataTable FilterOtherPersonsDataTable;
        DataTable StoreAllocDataTable;

        public BindingSource GroupsBindingSource;
        public BindingSource SubGroupsBindingSource;
        public BindingSource InvoicesBindingSource;
        public BindingSource InvoiceItemsBindingSource;
        public BindingSource StoreBindingSource;
        BindingSource FilterPersonsBindingSource;
        BindingSource FilterOtherPersonsBindingSource;

        public DataGridViewComboBoxColumn ColorsColumn;
        public DataGridViewComboBoxColumn CoversColumn;
        public DataGridViewComboBoxColumn PatinaColumn;
        public DataGridViewComboBoxColumn FactoryColumn;
        public DataGridViewComboBoxColumn CurrencyColumn;

        public DataGridViewComboBoxColumn ColorsColumnCopy;
        public DataGridViewComboBoxColumn CoversColumnCopy;
        public DataGridViewComboBoxColumn PatinaColumnCopy;
        public DataGridViewComboBoxColumn FactoryColumnCopy;
        public DataGridViewComboBoxColumn CurrencyColumnCopy;

        public DataGridViewComboBoxColumn InvoiceSellersColumn;
        public DataGridViewComboBoxColumn InvoiceColorsColumn;
        public DataGridViewComboBoxColumn InvoiceCoversColumn;
        public DataGridViewComboBoxColumn InvoicePatinaColumn;
        public DataGridViewComboBoxColumn InvoiceFactoryColumn;
        public DataGridViewComboBoxColumn InvoiceCurrencyColumn;

        public PersonalStorageManager()
        {
            CreateAndFill();
            Binding();
            CreateGridColumns();
        }

        public void CreateAndFill()
        {
            GroupsDataTable = new DataTable();
            SubGroupsDataTable = new DataTable();
            MeasuresDataTable = new DataTable();
            ColorsDataTable = new DataTable();
            PatinaDataTable = new DataTable();
            CurrencyTypesDataTable = new DataTable();
            StoreDataTable = new DataTable();
            InvoiceItemsDataTable = new DataTable();
            SellersDataTable = new DataTable();
            FactoryDataTable = new DataTable();
            InvoicesDataTable = new DataTable();
            FilterPersonsDataTable = new DataTable();
            FilterOtherPersonsDataTable = new DataTable();
            StoreAllocDataTable = new DataTable();

            ArrivalCountDT = new DataTable();
            ExpenseCountDT = new DataTable();
            SellingCountDT = new DataTable();
            StartRemainsDT = new DataTable();
            EndRemainsDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1)))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDataTable.Clear();
                DA.Fill(GroupsDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE CurrentCount > 0 AND FactoryID = 1))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDataTable.Clear();
                DA.Fill(SubGroupsDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDataTable);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDataTable);
            //    {
            //        DataRow EmptyRow1 = ColorsDataTable.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDataTable.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDataTable.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDataTable.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDataTable);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDataTable.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDataTable.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Sellers", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Factory WHERE FactoryID > 0", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(FactoryDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " LEFT JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " LEFT JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " LEFT JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " LEFT JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID",
                ConnectionStrings.StorageConnectionString))
            {
                InvoicesDataTable.Clear();
                DA.Fill(InvoicesDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM PersonalStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE CurrentCount > 0 AND FactoryID = -1 AND PersonalStore.StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore" +
                " WHERE TechStoreSubGroupID = -1) ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                StoreDataTable.Clear();
                DA.Fill(InvoiceItemsDataTable);
                DA.Fill(StoreDataTable);
                StoreDataTable.Columns.Add(new DataColumn("StartMonthCount", Type.GetType("System.Decimal")));
                StoreDataTable.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
                StoreDataTable.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
                StoreDataTable.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));
                StoreDataTable.Columns.Add(new DataColumn("EndMonthCount", Type.GetType("System.Decimal")));
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreAllocID, StoreAlloc FROM StoreAlloc", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreAllocDataTable);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT UserID, Name FROM Users WHERE Fired <> 1" +
                " ORDER BY Name", ConnectionStrings.UsersConnectionString))
            {
                DA.Fill(FilterPersonsDataTable);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DISTINCT PersonName FROM MovementInvoices WHERE PersonID=0 ORDER BY PersonName",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(FilterOtherPersonsDataTable);
            }
            CreateCoversDT();
        }

        private void CreateCoversDT()
        {
            CoversDataTable = new DataTable();
            CoversDataTable.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDataTable.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDataTable.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDataTable.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDataTable.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDataTable.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDataTable.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDataTable.Rows.Add(NewRow);
                    }
                }
            }
        }

        public void Binding()
        {
            GroupsBindingSource = new BindingSource()
            {
                DataSource = GroupsDataTable
            };
            SubGroupsBindingSource = new BindingSource()
            {
                DataSource = SubGroupsDataTable
            };
            InvoicesBindingSource = new BindingSource()
            {
                DataSource = InvoicesDataTable
            };
            StoreBindingSource = new BindingSource()
            {
                DataSource = StoreDataTable
            };
            InvoiceItemsBindingSource = new BindingSource()
            {
                DataSource = InvoiceItemsDataTable
            };
            FilterPersonsBindingSource = new BindingSource()
            {
                DataSource = FilterPersonsDataTable
            };
            FilterOtherPersonsBindingSource = new BindingSource()
            {
                DataSource = FilterOtherPersonsDataTable
            };
        }

        private void CreateGridColumns()
        {
            ColorsColumn = new DataGridViewComboBoxColumn()
            {
                Name = "ColorsColumn",
                HeaderText = "Цвет",
                DataPropertyName = "ColorID",
                DataSource = ColorsDataTable,
                ValueMember = "ColorID",
                DisplayMember = "TechStoreName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            PatinaColumn = new DataGridViewComboBoxColumn()
            {
                Name = "PatinaColumn",
                HeaderText = "Патина",
                DataPropertyName = "PatinaID",
                DataSource = PatinaDataTable,
                ValueMember = "PatinaID",
                DisplayMember = "PatinaName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            CoversColumn = new DataGridViewComboBoxColumn()
            {
                Name = "CoversColumn",
                HeaderText = "Облицовка",
                DataPropertyName = "CoverID",
                DataSource = CoversDataTable,
                ValueMember = "CoverID",
                DisplayMember = "CoverName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            CurrencyColumn = new DataGridViewComboBoxColumn()
            {
                Name = "CurrencyColumn",
                HeaderText = "Валюта",
                DataPropertyName = "CurrencyTypeID",
                DataSource = CurrencyTypesDataTable,
                ValueMember = "CurrencyTypeID",
                DisplayMember = "CurrencyType",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            ColorsColumnCopy = new DataGridViewComboBoxColumn()
            {
                Name = "ColorsColumn",
                HeaderText = "Цвет",
                DataPropertyName = "ColorID",
                DataSource = ColorsDataTable,
                ValueMember = "ColorID",
                DisplayMember = "TechStoreName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            PatinaColumnCopy = new DataGridViewComboBoxColumn()
            {
                Name = "PatinaColumn",
                HeaderText = "Патина",
                DataPropertyName = "PatinaID",
                DataSource = PatinaDataTable,
                ValueMember = "PatinaID",
                DisplayMember = "PatinaName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            CoversColumnCopy = new DataGridViewComboBoxColumn()
            {
                Name = "CoversColumn",
                HeaderText = "Облицовка",
                DataPropertyName = "CoverID",
                DataSource = CoversDataTable,
                ValueMember = "CoverID",
                DisplayMember = "CoverName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            CurrencyColumnCopy = new DataGridViewComboBoxColumn()
            {
                Name = "CurrencyColumn",
                HeaderText = "Валюта",
                DataPropertyName = "CurrencyTypeID",
                DataSource = CurrencyTypesDataTable,
                ValueMember = "CurrencyTypeID",
                DisplayMember = "CurrencyType",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            FactoryColumn = new DataGridViewComboBoxColumn()
            {
                Name = "FactoryColumn",
                HeaderText = "Получатель",
                DataPropertyName = "FactoryID",
                DataSource = FactoryDataTable,
                ValueMember = "FactoryID",
                DisplayMember = "FactoryName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            InvoiceSellersColumn = new DataGridViewComboBoxColumn()
            {
                Name = "SellersColumn",
                HeaderText = "Поставщик",
                DataPropertyName = "SellerID",
                DataSource = new DataView(SellersDataTable),
                ValueMember = "SellerID",
                DisplayMember = "SellerName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            InvoiceColorsColumn = new DataGridViewComboBoxColumn()
            {
                Name = "ColorsColumn",
                HeaderText = "Цвет",
                DataPropertyName = "ColorID",
                DataSource = ColorsDataTable,
                ValueMember = "ColorID",
                DisplayMember = "TechStoreName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            InvoicePatinaColumn = new DataGridViewComboBoxColumn()
            {
                Name = "PatinaColumn",
                HeaderText = "Патина",
                DataPropertyName = "PatinaID",
                DataSource = PatinaDataTable,
                ValueMember = "PatinaID",
                DisplayMember = "PatinaName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            InvoiceCoversColumn = new DataGridViewComboBoxColumn()
            {
                Name = "CoversColumn",
                HeaderText = "Облицовка",
                DataPropertyName = "CoverID",
                DataSource = CoversDataTable,
                ValueMember = "CoverID",
                DisplayMember = "CoverName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            InvoiceFactoryColumn = new DataGridViewComboBoxColumn()
            {
                Name = "FactoryColumn",
                HeaderText = "Получатель",
                DataPropertyName = "FactoryID",
                DataSource = FactoryDataTable,
                ValueMember = "FactoryID",
                DisplayMember = "FactoryName",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            InvoiceCurrencyColumn = new DataGridViewComboBoxColumn()
            {
                Name = "CurrencyColumn",
                HeaderText = "Валюта",
                DataPropertyName = "CurrencyTypeID",
                DataSource = CurrencyTypesDataTable,
                ValueMember = "CurrencyTypeID",
                DisplayMember = "CurrencyType",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
        }

        public bool IsMovementInvoiceEmpty(int MovementInvoice)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DISTINCT MovementInvoiceID" +
                " FROM ManufactureStore" +
                " WHERE MovementInvoiceID = " + MovementInvoice +
                " UNION ALL" +
                " SELECT DISTINCT MovementInvoiceID" +
                " FROM Store" +
                " WHERE MovementInvoiceID = " + MovementInvoice +
                " UNION ALL" +
                " SELECT DISTINCT MovementInvoiceID" +
                " FROM WriteOffStore" +
                " WHERE MovementInvoiceID = " + MovementInvoice +
                " UNION ALL" +
                " SELECT DISTINCT MovementInvoiceID" +
                " FROM PersonalStore" +
                " WHERE MovementInvoiceID = " + MovementInvoice,
                ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        return DT.Rows.Count > 0;
                    }
                }
            }
        }

        public void RemoveMovementInvoice()
        {
            if (InvoicesBindingSource.Count == 0)
                return;

            int Pos = InvoicesBindingSource.Position;

            InvoicesBindingSource.RemoveCurrent();

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM MovementInvoices", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InvoicesDataTable);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveMovementInvoice КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        #region Filter fuctions

        public void ShowNoEmptyStoreItems()
        {
            StoreBindingSource.RemoveFilter();
            StoreBindingSource.Filter = "StartMonthCount<>0 OR MonthInvoiceCount<>0 OR ExpenseCount<>0 OR SellingCount<>0 OR EndMonthCount<>0 OR CurrentCount<>0";
            StoreBindingSource.MoveFirst();
        }

        public bool FilterGroups(int FactoryID,
            bool ByDateTime, bool ByPerson, bool ByOtherPerson, bool BySellerStoreAlloc,
            DateTime DateFrom, int PersonID, string PersonName, int SellerStoreAllocID)
        {
            string Filter = string.Empty;

            Filter = " WHERE (RecipientStoreAllocID = 9)";
            if (ByDateTime)
            {
                Filter += " AND (DateTime <'" + DateFrom.AddMonths(1).ToString("yyyy-MM-dd") + "')";
            }
            if (BySellerStoreAlloc)
            {
                Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            }
            if (ByPerson)
            {
                Filter += " AND (PersonID = " + PersonID + ")";
            }
            if (ByOtherPerson)
            {
                Filter += " AND (PersonName = '" + PersonName + "')";
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE FactoryID = " + FactoryID + " AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM infiniu2_storage.dbo.MovementInvoices" + Filter + "))))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                GroupsDataTable.Clear();
                DA.Fill(GroupsDataTable);
            }
            GroupsBindingSource.MoveFirst();
            return GroupsDataTable.Rows.Count > 0;
        }

        public void FilterSubGroups(int FactoryID, int StoreGroupID,
            bool ByDateTime, bool ByPerson, bool ByOtherPerson, bool BySellerStoreAlloc,
            DateTime DateFrom, int PersonID, string PersonName, int SellerStoreAllocID)
        {
            string Filter = string.Empty;

            Filter = " WHERE (RecipientStoreAllocID = 9)";
            if (ByDateTime)
            {
                Filter += " AND (DateTime <'" + DateFrom.AddMonths(1).ToString("yyyy-MM-dd") + "')";
            }
            if (BySellerStoreAlloc)
            {
                Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            }
            if (ByPerson)
            {
                Filter += " AND (PersonID = " + PersonID + ")";
            }
            if (ByOtherPerson)
            {
                Filter += " AND (PersonName = '" + PersonName + "')";
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE FactoryID = " + FactoryID + " AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM infiniu2_storage.dbo.MovementInvoices" + Filter + "))) AND TechStoreGroupID = " + StoreGroupID +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                SubGroupsDataTable.Clear();
                DA.Fill(SubGroupsDataTable);
            }
            CurrentStoreGroupID = StoreGroupID;
            SubGroupsBindingSource.MoveFirst();
        }

        public void FilterStore(int FactoryID, int StoreSubGroupID,
            bool ByDateTime, bool ByPerson, bool ByOtherPerson, bool BySellerStoreAlloc,
            DateTime DateFrom, int PersonID, string PersonName, int SellerStoreAllocID)
        {
            //if (CurrentStoreSubGroupID == StoreSubGroupID)
            //    return;

            string Filter = string.Empty;

            Filter = " WHERE (RecipientStoreAllocID = 9)";
            if (ByDateTime)
            {
                Filter += " AND (DateTime <'" + DateFrom.AddMonths(1).ToString("yyyy-MM-dd") + "')";
            }
            if (BySellerStoreAlloc)
            {
                Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            }
            if (ByPerson)
            {
                Filter += " AND (PersonID = " + PersonID + ")";
            }
            if (ByOtherPerson)
            {
                Filter += " AND (PersonName = '" + PersonName + "')";
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM PersonalStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE FactoryID = " + FactoryID + " AND PersonalStore.StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore" +
                " WHERE TechStoreSubGroupID = " + StoreSubGroupID +
                ") AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" + Filter + ") ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                StoreDataTable.Clear();
                DA.Fill(StoreDataTable);
            }

            CurrentStoreSubGroupID = StoreSubGroupID;
            StoreBindingSource.MoveFirst();
        }

        public void FilterByInvoice(int MovementInvoiceID, int FactoryID, int StoreType)
        {
            string StoreName = "Store";
            switch (StoreType)
            {
                case 1:
                    StoreName = "Store";
                    break;
                case 2:
                    StoreName = "ManufactureStore";
                    break;
                case 3:
                    StoreName = "WriteOffStore";
                    break;
                case 4:
                    StoreName = "PersonalStore";
                    break;
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT " + StoreName + ".*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode FROM " + StoreName +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON " + StoreName + ".StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " WHERE MovementInvoiceID = " + MovementInvoiceID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            {
                InvoiceItemsDataTable.Clear();
                DA.Fill(InvoiceItemsDataTable);
            }
            InvoiceItemsBindingSource.MoveFirst();
        }

        public void FilterInvoices(bool ByDateTime, bool ByPerson, bool ByOtherPerson, bool BySellerStoreAlloc,
            DateTime DateFrom, int PersonID, string PersonName, int SellerStoreAllocID, int FactoryID)
        {
            string Filter = " WHERE (SellerStoreAllocID = 9 OR RecipientStoreAllocID = 9)";

            if (ByDateTime)
            {
                Filter += " AND (DateTime >'" + DateFrom.ToString("yyyy-MM-dd") + "')";
            }
            if (BySellerStoreAlloc)
            {
                Filter += " AND (SellerStoreAllocID = " + SellerStoreAllocID + ")";
            }
            if (ByPerson)
            {
                Filter += " AND (PersonID = " + PersonID + ")";
            }
            if (ByOtherPerson)
            {
                Filter += " AND (PersonName = '" + PersonName + "')";
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoices.*," +
                " SellerStoreAlloc.StoreAlloc AS SellerStoreAlloc, RecipientStoreAlloc.StoreAlloc AS RecipientStoreAlloc," +
                " Sectors.Sector, infiniu2_users.dbo.Users.Name AS StoreKeeper" +
                " FROM MovementInvoices" +
                " INNER JOIN StoreAlloc AS SellerStoreAlloc ON MovementInvoices.SellerStoreAllocID = SellerStoreAlloc.StoreAllocID" +
                " INNER JOIN StoreAlloc AS RecipientStoreAlloc ON MovementInvoices.RecipientStoreAllocID = RecipientStoreAlloc.StoreAllocID" +
                " INNER JOIN Sectors ON MovementInvoices.RecipientSectorID = Sectors.SectorID" +
                " INNER JOIN infiniu2_users.dbo.Users ON MovementInvoices.StoreKeeperID = infiniu2_users.dbo.Users.UserID" + Filter,
                ConnectionStrings.StorageConnectionString))
            {
                InvoicesDataTable.Clear();
                DA.Fill(InvoicesDataTable);
            }
            InvoicesBindingSource.MoveFirst();
        }
        #endregion

        public void ClearItems()
        {
            InvoiceItemsDataTable.Clear();
        }

        #region Get fuctions

        public string GetStoreAlloc(int StoreAllocID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreAlloc FROM StoreAlloc WHERE StoreAllocID = " + StoreAllocID,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0][0] != DBNull.Value)
                        return DT.Rows[0][0].ToString();

                    return string.Empty;
                }
            }
        }

        public string GetStoreKeeperName(int UserID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ShortName FROM Users WHERE UserID = " + UserID,
                ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0 && DT.Rows[0][0] != DBNull.Value)
                        return DT.Rows[0][0].ToString();

                    return string.Empty;
                }
            }
        }
        #endregion

        #region Properties
        public bool HasGroups
        {
            get
            {
                return GroupsBindingSource.Count > 0;
            }
        }

        public bool HasStore
        {
            get
            {
                return StoreBindingSource.Count > 0;
            }
        }

        public bool HasInvoices
        {
            get
            {
                return InvoicesBindingSource.Count > 0;
            }
        }

        public int CurrentSellerStoreAlloc
        {
            get
            {
                if (InvoicesBindingSource.Count == 0 || ((DataRowView)InvoicesBindingSource.Current).Row["SellerStoreAllocID"] == DBNull.Value)
                    return -1;
                else
                    return Convert.ToInt32(((DataRowView)InvoicesBindingSource.Current).Row["SellerStoreAllocID"]);
            }
        }

        public int CurrentRecipientStoreAlloc
        {
            get
            {
                if (InvoicesBindingSource.Count == 0 || ((DataRowView)InvoicesBindingSource.Current).Row["RecipientStoreAllocID"] == DBNull.Value)
                    return -1;
                else
                    return Convert.ToInt32(((DataRowView)InvoicesBindingSource.Current).Row["RecipientStoreAllocID"]);
            }
        }

        public int CurrentMovementInvoice
        {
            get
            {
                if (InvoicesBindingSource.Count == 0 || ((DataRowView)InvoicesBindingSource.Current).Row["MovementInvoiceID"] == DBNull.Value)
                    return -1;
                else
                    return Convert.ToInt32(((DataRowView)InvoicesBindingSource.Current).Row["MovementInvoiceID"]);
            }
        }

        public int CurrentGroup
        {
            get
            {
                if (GroupsBindingSource.Count == 0 || ((DataRowView)GroupsBindingSource.Current).Row["TechStoreGroupID"] == DBNull.Value)
                    return -1;
                else
                    return Convert.ToInt32(((DataRowView)GroupsBindingSource.Current).Row["TechStoreGroupID"]);
            }
        }

        public int CurrentSubGroup
        {
            get
            {
                if (SubGroupsBindingSource.Count == 0 || ((DataRowView)SubGroupsBindingSource.Current).Row["TechStoreSubGroupID"] == DBNull.Value)
                    return -1;
                else
                    return Convert.ToInt32(((DataRowView)SubGroupsBindingSource.Current).Row["TechStoreSubGroupID"]);
            }
        }

        public string CurrentMoveDate
        {
            get
            {
                if (InvoicesBindingSource.Count == 0 || ((DataRowView)InvoicesBindingSource.Current).Row["DateTime"] == DBNull.Value)
                    return string.Empty;
                else
                    return ((DataRowView)InvoicesBindingSource.Current).Row["DateTime"].ToString();
            }
        }

        public string CurrentNotes
        {
            get
            {
                if (InvoicesBindingSource.Count == 0 || ((DataRowView)InvoicesBindingSource.Current).Row["Notes"] == DBNull.Value)
                    return string.Empty;
                else
                    return ((DataRowView)InvoicesBindingSource.Current).Row["Notes"].ToString();
            }
        }

        public string CurrentPersonName
        {
            get
            {
                if (InvoicesBindingSource.Count == 0 || ((DataRowView)InvoicesBindingSource.Current).Row["PersonName"] == DBNull.Value)
                    return string.Empty;
                else
                    return ((DataRowView)InvoicesBindingSource.Current).Row["PersonName"].ToString();
            }
        }

        public int CurrentCurrentStoreKeeper
        {
            get
            {
                if (InvoicesBindingSource.Count == 0 || ((DataRowView)InvoicesBindingSource.Current).Row["StoreKeeperID"] == DBNull.Value)
                    return -1;
                else
                    return Convert.ToInt32(((DataRowView)InvoicesBindingSource.Current).Row["StoreKeeperID"]);
            }
        }

        public DataView SellersStoreAllocList
        {
            get { return new DataView(StoreAllocDataTable); }
        }

        public BindingSource FilterPersonsList
        {
            get { return FilterPersonsBindingSource; }
        }

        public BindingSource FilterOtherPersonsList
        {
            get { return FilterOtherPersonsBindingSource; }
        }

        public BindingSource GroupsList
        {
            get { return GroupsBindingSource; }
        }
        public BindingSource SubGroupsList
        {
            get { return SubGroupsBindingSource; }
        }
        public BindingSource StoreList
        {
            get { return StoreBindingSource; }
        }
        public BindingSource InvoicesList
        {
            get { return InvoicesBindingSource; }
        }
        public BindingSource InvoiceItemsList
        {
            get { return InvoiceItemsBindingSource; }
        }
        #endregion

        public void MoveToInvoice()
        {
            if (((DataRowView)StoreBindingSource.Current == null))
                return;

            InvoicesBindingSource.Position = InvoicesBindingSource.Find("MovementInvoiceID",
                Convert.ToInt32(((DataRowView)StoreBindingSource.Current).Row["MovementInvoiceID"]));
        }

        public BindingSource CopyDataSource()
        {
            DataTable CopyDT = StoreDataTable.Copy();
            DataColumn CheckCol = CopyDT.Columns.Add("Check", System.Type.GetType("System.Boolean"));
            for (int i = 0; i < CopyDT.Rows.Count; i++)
            {
                CopyDT.Rows[i]["Check"] = false;
            }
            CheckCol.SetOrdinal(0);
            BindingSource CopyBS = new BindingSource()
            {
                DataSource = CopyDT
            };
            return CopyBS;
        }

        public int GetLastMovementInvoiceID()
        {
            int MovementInvoiceID = -1;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM MovementInvoices ORDER BY MovementInvoiceID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        MovementInvoiceID = Convert.ToInt32(DT.Rows[0]["MovementInvoiceID"]);
                }
            }

            return MovementInvoiceID;
        }

        public void SaveMovementInvoices(DateTime DateTime,
            int SellerStoreAllocID, int RecipientStoreAllocID, int RecipientSectorID,
            int PersonID, string PersonName, int StoreKeeperID,
            int ClientID, int SellerID,
            string ClientName, string Notes)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM MovementInvoices", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);
                            DataRow NewRow = DT.NewRow();
                            NewRow["DateTime"] = DateTime;
                            NewRow["SellerStoreAllocID"] = SellerStoreAllocID;
                            NewRow["RecipientStoreAllocID"] = RecipientStoreAllocID;
                            NewRow["RecipientSectorID"] = RecipientSectorID;
                            NewRow["PersonID"] = PersonID;
                            NewRow["PersonName"] = PersonName;
                            NewRow["StoreKeeperID"] = StoreKeeperID;
                            NewRow["ClientName"] = ClientName;
                            NewRow["ClientID"] = ClientID;
                            NewRow["SellerID"] = SellerID;
                            NewRow["Notes"] = Notes;
                            DT.Rows.Add(NewRow);
                            DA.Update(DT);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveMovementInvoices КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void MoveToPersonalStore(int MovementInvoiceID, int[] PersonalStoreID)
        {
            try
            {
                DataTable MovementInvoiceDetailsDT = new DataTable();
                DataTable PersonalStoreDT = new DataTable();
                DataTable StoreDT = new DataTable();

                SqlDataAdapter da1 = new SqlDataAdapter("SELECT TOP 0 * FROM MovementInvoiceDetails",
                    ConnectionStrings.StorageConnectionString);
                SqlDataAdapter da2 = new SqlDataAdapter("SELECT TOP 0 * FROM PersonalStore",
                    ConnectionStrings.StorageConnectionString);
                SqlDataAdapter da3 = new SqlDataAdapter("SELECT * FROM PersonalStore WHERE PersonalStoreID IN (" + string.Join(",", PersonalStoreID) + ")",
                    ConnectionStrings.StorageConnectionString);

                SqlCommandBuilder cb1 = new SqlCommandBuilder(da1);
                SqlCommandBuilder cb2 = new SqlCommandBuilder(da2);
                SqlCommandBuilder cb3 = new SqlCommandBuilder(da3);

                da1.Fill(MovementInvoiceDetailsDT);
                da2.Fill(PersonalStoreDT);
                da3.Fill(StoreDT);

                for (int i = 0; i < StoreDT.Rows.Count; i++)
                {
                    decimal CurrentCount = 0;
                    DataRow[] Rows = StoreDataTable.Select("PersonalStoreID = " + StoreDT.Rows[i]["PersonalStoreID"]);
                    if (Rows.Count() > 0)
                    {
                        CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                    }

                    DataRow NewRow = PersonalStoreDT.NewRow();
                    NewRow["MovementInvoiceID"] = MovementInvoiceID;
                    NewRow["StoreItemID"] = StoreDT.Rows[i]["StoreItemID"];
                    NewRow["Length"] = StoreDT.Rows[i]["Length"];
                    NewRow["Width"] = StoreDT.Rows[i]["Width"];
                    NewRow["Height"] = StoreDT.Rows[i]["Height"];
                    NewRow["Thickness"] = StoreDT.Rows[i]["Thickness"];
                    NewRow["Diameter"] = StoreDT.Rows[i]["Diameter"];
                    NewRow["Admission"] = StoreDT.Rows[i]["Admission"];
                    NewRow["Capacity"] = StoreDT.Rows[i]["Capacity"];
                    NewRow["Weight"] = StoreDT.Rows[i]["Weight"];
                    NewRow["ColorID"] = StoreDT.Rows[i]["ColorID"];
                    NewRow["CoverID"] = StoreDT.Rows[i]["CoverID"];
                    NewRow["PatinaID"] = StoreDT.Rows[i]["PatinaID"];
                    NewRow["FactoryID"] = StoreDT.Rows[i]["FactoryID"];
                    NewRow["Notes"] = StoreDT.Rows[i]["Notes"];
                    NewRow["Price"] = StoreDT.Rows[i]["Price"];
                    NewRow["PriceEUR"] = StoreDT.Rows[i]["PriceEUR"];
                    NewRow["CurrencyTypeID"] = StoreDT.Rows[i]["CurrencyTypeID"];

                    decimal Price = Convert.ToDecimal(StoreDT.Rows[i]["Price"]);
                    decimal Cost = 0;
                    decimal VAT = 0;
                    decimal VATCost = 0;

                    if (Price > -1)
                    {
                        Cost = CurrentCount * Price;
                        VAT = Cost * 20 / 100;
                        VATCost = Cost + VAT;

                        NewRow["Cost"] = Cost;
                        NewRow["VAT"] = VAT;
                        NewRow["VATCost"] = VATCost;
                    }

                    NewRow["InvoiceCount"] = CurrentCount;
                    NewRow["CurrentCount"] = CurrentCount;
                    StoreDT.Rows[i]["CurrentCount"] = Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]) - CurrentCount;

                    PersonalStoreDT.Rows.Add(NewRow);
                }

                da2.Update(PersonalStoreDT);
                da3.Update(StoreDT);
                da2.Dispose();
                PersonalStoreDT.Clear();
                da2 = new SqlDataAdapter("SELECT PersonalStoreID FROM PersonalStore WHERE MovementInvoiceID = " + MovementInvoiceID,
                    ConnectionStrings.StorageConnectionString);
                da2.Fill(PersonalStoreDT);
                for (int i = 0; i < PersonalStoreDT.Rows.Count; i++)
                {
                    decimal CurrentCount = 0;
                    DataRow[] Rows = StoreDataTable.Select("PersonalStoreID = " + StoreDT.Rows[i]["PersonalStoreID"]);
                    if (Rows.Count() > 0)
                    {
                        CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                    }
                    DataRow NewRow1 = MovementInvoiceDetailsDT.NewRow();
                    NewRow1["MovementInvoiceID"] = MovementInvoiceID;
                    NewRow1["StoreIDFrom"] = StoreDT.Rows[i]["PersonalStoreID"];
                    NewRow1["StoreIDTo"] = PersonalStoreDT.Rows[i]["PersonalStoreID"];
                    NewRow1["Count"] = CurrentCount;
                    MovementInvoiceDetailsDT.Rows.Add(NewRow1);
                }
                da1.Update(MovementInvoiceDetailsDT);

                MovementInvoiceDetailsDT.Dispose();
                PersonalStoreDT.Dispose();
                StoreDT.Dispose();
                da1.Dispose();
                da2.Dispose();
                da3.Dispose();
                cb1.Dispose();
                cb2.Dispose();
                cb3.Dispose();
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nКАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public bool InventoryExist(DateTime FilterDate)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void GetStoreCount(DateTime FilterDate)
        {
            CurrentStoreSubGroupID = -1;

            ArrivalCountDT.Clear();
            ExpenseCountDT.Clear();
            SellingCountDT.Clear();
            StartRemainsDT.Clear();
            EndRemainsDT.Clear();

            if (InventoryExist(FilterDate))
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, StartMonthCount AS Count  FROM PersonalInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM PersonalInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM PersonalInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartRemainsDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, EndMonthCount AS Count  FROM PersonalInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") +
                    "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + FilterDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndRemainsDT);
                }
            }


            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivalCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (9) AND RecipientStoreAllocID IN (3, 4)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ExpenseCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (9) AND RecipientStoreAllocID IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + FilterDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + FilterDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellingCountDT);
            }
        }

        public void FillStoreCount()
        {
            decimal ArrivalCount = 0;
            decimal EndMonthCount = 0;
            decimal ExpenseCount = 0;
            decimal SellingCount = 0;
            decimal StartMonthCount = 0;
            int MovementInvoiceID = -1;
            int StoreID = -1;

            for (int i = 0; i < StoreDataTable.Rows.Count; i++)
            {
                ArrivalCount = 0;
                EndMonthCount = 0;
                ExpenseCount = 0;
                SellingCount = 0;
                StartMonthCount = 0;
                MovementInvoiceID = Convert.ToInt32(StoreDataTable.Rows[i]["MovementInvoiceID"]);
                StoreID = Convert.ToInt32(StoreDataTable.Rows[i]["PersonalStoreID"]);

                //ОСТн
                DataRow[] StartRemainsRows = StartRemainsDT.Select("StoreID = " + StoreID);
                if (StartRemainsRows.Count() > 0)
                {
                    StartMonthCount = Convert.ToDecimal(StartRemainsRows[0]["Count"]);
                }
                //ОСТк
                DataRow[] EndRemainsRows = EndRemainsDT.Select("StoreID = " + StoreID);
                if (EndRemainsRows.Count() > 0)
                {
                    EndMonthCount = Convert.ToDecimal(EndRemainsRows[0]["Count"]);
                }
                //Приход
                DataRow[] ArrivalRows = ArrivalCountDT.Select("MovementInvoiceID = " + MovementInvoiceID);
                if (ArrivalRows.Count() > 0)
                {
                    ArrivalCount = Convert.ToDecimal(StoreDataTable.Rows[i]["InvoiceCount"]);
                }
                //Реализация
                DataRow[] SellingRows = SellingCountDT.Select("StoreIDFrom = " + StoreID);
                if (SellingRows.Count() > 0)
                {
                    foreach (DataRow item in SellingRows)
                        SellingCount += Convert.ToDecimal(item["Count"]);
                }
                //Расход
                DataRow[] ExpenseRows = ExpenseCountDT.Select("StoreIDFrom = " + StoreID);
                if (ExpenseRows.Count() > 0)
                {
                    foreach (DataRow item in ExpenseRows)
                        ExpenseCount += Convert.ToDecimal(item["Count"]);
                }

                StoreDataTable.Rows[i]["MonthInvoiceCount"] = ArrivalCount;
                StoreDataTable.Rows[i]["ExpenseCount"] = ExpenseCount;
                StoreDataTable.Rows[i]["EndMonthCount"] = EndMonthCount;
                StoreDataTable.Rows[i]["SellingCount"] = SellingCount;
                StoreDataTable.Rows[i]["StartMonthCount"] = StartMonthCount;
            }
        }
    }









    public class StoreMovementManager
    {
        bool bNewInvoice = false;
        int iFactoryID = -1;
        int iMovementInvoiceID = 0;

        string sStoreName = "Store";

        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;
        DataTable StoreItemsDT;
        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        DataTable CurrencyTypesDT;
        DataTable ManufactureStoreDT;
        //DataTable TempManufactureStoreDT;
        DataTable MainStoreDT;
        //DataTable TempMainStoreDT;
        DataTable ReadyStoreDT;
        //DataTable TempReadyStoreDT;
        DataTable WriteOffStoreDT;
        //DataTable TempWriteOffStoreDT;
        DataTable PersonalStoreDT;
        //DataTable TempPersonalStoreDT;
        DataTable SellersDT;

        SqlDataAdapter ManufactureStoreDA;
        SqlCommandBuilder ManufactureStoreCB;
        SqlDataAdapter MainStoreDA;
        SqlCommandBuilder MainStoreCB;
        SqlDataAdapter ReadyStoreDA;
        SqlCommandBuilder ReadyStoreCB;
        SqlDataAdapter WriteOffStoreDA;
        SqlCommandBuilder WriteOffStoreCB;
        SqlDataAdapter PersonalStoreDA;
        SqlCommandBuilder PersonalStoreCB;

        BindingSource StoreItemsBS;
        BindingSource ManufactureStoreBS;
        BindingSource MainStoreBS;
        BindingSource ReadyStoreBS;
        BindingSource WriteOffStoreBS;
        BindingSource PersonalStoreBS;
        BindingSource GroupsBS;
        BindingSource SubGroupsBS;
        BindingSource CurrencyTypesBS;
        private DataTable PatinaRALDataTable = null;

        public StoreMovementManager()
        {
        }

        public bool NewInvoice
        {
            get { return bNewInvoice; }
            set { bNewInvoice = value; }
        }

        public int CurrentMovementInvoiceID
        {
            get { return iMovementInvoiceID; }
            set { iMovementInvoiceID = value; }
        }

        public int CurrentFactoryID
        {
            get { return iFactoryID; }
            set { iFactoryID = value; }
        }

        public string CurrentStoreName
        {
            get { return sStoreName; }
            set { sStoreName = value; }
        }

        public void Initialize()
        {
            CreateAndFill();
            Binding();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void CreateAndFill()
        {
            //TempManufactureStoreDT = new DataTable();
            //TempMainStoreDT = new DataTable();
            //TempReadyStoreDT = new DataTable();
            //TempWriteOffStoreDT = new DataTable();
            //TempPersonalStoreDT = new DataTable();
            StoreGroupsDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
            PatinaDT = new DataTable();
            CurrencyTypesDT = new DataTable();
            StoreItemsDT = new DataTable();
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            SellersDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreGroups ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreSubGroups ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }

            if (sStoreName == "PersonalStore")
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID, infiniu2_catalog.dbo.TechStore.TechStoreName FROM PersonalStore" +
                    " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                    " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StoreItemsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 " + sStoreName + ".*, infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID, infiniu2_catalog.dbo.TechStore.TechStoreName FROM " + sStoreName +
                    " INNER JOIN infiniu2_catalog.dbo.TechStore ON " + sStoreName + ".StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                    " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StoreItemsDT);
                }
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID, infiniu2_catalog.dbo.TechStore.TechStoreName FROM PersonalStore" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(StoreItemsDT);
            //}
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(CurrencyTypesDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Sellers ORDER BY SellerName", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            string SelectCommand = @"SELECT TOP 0 ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM ManufactureStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE FactoryID = " + iFactoryID + " ORDER BY TechStoreName";
            ManufactureStoreDT = new DataTable();
            ManufactureStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            ManufactureStoreCB = new SqlCommandBuilder(ManufactureStoreDA);
            ManufactureStoreDA.Fill(ManufactureStoreDT);
            ManufactureStoreDT.Columns.Add(new DataColumn("Name", Type.GetType("System.Int32")));

            SelectCommand = @"SELECT TOP 0 Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM Store
                INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE FactoryID = " + iFactoryID + " ORDER BY TechStoreName";
            MainStoreDT = new DataTable();
            MainStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            MainStoreCB = new SqlCommandBuilder(MainStoreDA);
            MainStoreDA.Fill(MainStoreDT);
            MainStoreDT.Columns.Add(new DataColumn("Name", Type.GetType("System.Int32")));

            SelectCommand = @"SELECT TOP 0 ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM ReadyStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE FactoryID = " + iFactoryID + " ORDER BY TechStoreName";
            ReadyStoreDT = new DataTable();
            ReadyStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            ReadyStoreCB = new SqlCommandBuilder(ReadyStoreDA);
            ReadyStoreDA.Fill(ReadyStoreDT);
            ReadyStoreDT.Columns.Add(new DataColumn("Name", Type.GetType("System.Int32")));

            SelectCommand = @"SELECT TOP 0 WriteOffStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM WriteOffStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON WriteOffStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE FactoryID = " + iFactoryID + " ORDER BY TechStoreName";
            WriteOffStoreDT = new DataTable();
            WriteOffStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            WriteOffStoreCB = new SqlCommandBuilder(WriteOffStoreDA);
            WriteOffStoreDA.Fill(WriteOffStoreDT);
            WriteOffStoreDT.Columns.Add(new DataColumn("Name", Type.GetType("System.Int32")));

            SelectCommand = @"SELECT TOP 0 PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM PersonalStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE FactoryID = " + iFactoryID + " ORDER BY TechStoreName";
            PersonalStoreDT = new DataTable();
            PersonalStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            PersonalStoreCB = new SqlCommandBuilder(PersonalStoreDA);
            PersonalStoreDA.Fill(PersonalStoreDT);
            PersonalStoreDT.Columns.Add(new DataColumn("Name", Type.GetType("System.Int32")));

            CreateCoversDT();
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void Binding()
        {
            GroupsBS = new BindingSource()
            {
                DataSource = StoreGroupsDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = StoreSubGroupsDT
            };
            ManufactureStoreBS = new BindingSource()
            {
                DataSource = ManufactureStoreDT
            };
            MainStoreBS = new BindingSource()
            {
                DataSource = MainStoreDT
            };
            ReadyStoreBS = new BindingSource()
            {
                DataSource = ReadyStoreDT
            };
            WriteOffStoreBS = new BindingSource()
            {
                DataSource = WriteOffStoreDT
            };
            PersonalStoreBS = new BindingSource()
            {
                DataSource = PersonalStoreDT
            };
            StoreItemsBS = new BindingSource()
            {
                DataSource = StoreItemsDT
            };
            CurrencyTypesBS = new BindingSource()
            {
                DataSource = new DataView(CurrencyTypesDT)
            };
        }

        public BindingSource CurrencyTypesList
        {
            get { return CurrencyTypesBS; }
        }

        public BindingSource StoreGroupsList
        {
            get { return GroupsBS; }
        }

        public BindingSource StoreSubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public BindingSource StoreItemsList
        {
            get { return StoreItemsBS; }
        }

        public BindingSource StoreList
        {
            get { return MainStoreBS; }
        }

        public BindingSource ReadyStoreList
        {
            get { return ReadyStoreBS; }
        }

        public BindingSource ManufactureStoreList
        {
            get { return ManufactureStoreBS; }
        }

        public BindingSource WriteOffStoreList
        {
            get { return WriteOffStoreBS; }
        }

        public BindingSource PersonalStoreList
        {
            get { return PersonalStoreBS; }
        }

        public DataGridViewComboBoxColumn ManufacturerColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ManufacturerColumn",
                    HeaderText = "Изготовитель",
                    DataPropertyName = "ManufacturerID",
                    DataSource = new DataView(SellersDT),
                    ValueMember = "SellerID",
                    DisplayMember = "SellerName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic,
                    AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells,
                    MinimumWidth = 60
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = new DataView(ColorsDT),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CurrencyColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CurrencyColumn",
                    HeaderText = "Валюта",
                    DataPropertyName = "CurrencyTypeID",
                    DataSource = new DataView(CurrencyTypesDT),
                    ValueMember = "CurrencyTypeID",
                    DisplayMember = "CurrencyType",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = new DataView(PatinaDT),
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public void MoveToStoreGroup(int TechStoreGroupID)
        {
            GroupsBS.Position = GroupsBS.Find("TechStoreGroupID", TechStoreGroupID);
        }

        public void MoveToStoreSubGroup(int TechStoreSubGroupID)
        {
            SubGroupsBS.Position = SubGroupsBS.Find("TechStoreSubGroupID", TechStoreSubGroupID);
        }

        public void FilterStoreSubGroups(int StoreGroupID)
        {
            SubGroupsBS.Filter = "TechStoreGroupID = " + StoreGroupID;
        }

        public void FilterItems(int StoreSubGroupID, int FactoryID)
        {
            StoreItemsBS.Filter = "TechStoreSubGroupID = " + StoreSubGroupID + " AND FactoryID=" + FactoryID;
        }


        public void RemoveManufactureStoreItem(int ManufactureStoreID)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ManufactureStore WHERE ManufactureStoreID = " + ManufactureStoreID,
                    ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            if (DA.Fill(DT) > 0)
                            {
                                DT.Rows[0].Delete();
                                DA.Update(DT);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveManufactureStoreItem НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveManufactureStoreItem КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void RemoveStoreItem(int StoreID)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Store WHERE StoreID = " + StoreID,
                    ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            if (DA.Fill(DT) > 0)
                            {
                                DT.Rows[0].Delete();
                                DA.Update(DT);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveStoreItem НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveStoreItem КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void RemoveReadyStoreItem(int ReadyStoreID)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ReadyStore WHERE ReadyStoreID = " + ReadyStoreID,
                    ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            if (DA.Fill(DT) > 0)
                            {
                                DT.Rows[0].Delete();
                                DA.Update(DT);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveReadyStoreItem НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveReadyStoreItem КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void RemoveWriteOffStoreItem(int WriteOffStoreID)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM WriteOffStore WHERE WriteOffStoreID = " + WriteOffStoreID,
                    ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            if (DA.Fill(DT) > 0)
                            {
                                DT.Rows[0].Delete();
                                DA.Update(DT);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveWriteOffStoreItem НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemoveWriteOffStoreItem КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void RemovePersonalStoreItem(int PersonalStoreID)
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PersonalStore WHERE PersonalStoreID = " + PersonalStoreID,
                    ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            if (DA.Fill(DT) > 0)
                            {
                                DT.Rows[0].Delete();
                                DA.Update(DT);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemovePersonalStoreItem НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nRemovePersonalStoreItem КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }


        public void UpdateStore()
        {
            DataTable MovementDetailsDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID = " + iMovementInvoiceID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementDetailsDT);
            }

            if (MainStoreDA != null)
            {
                MainStoreDA.Dispose();
                MainStoreCB.Dispose();
            }

            string SelectCommand = @"SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM Store
                INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE MovementInvoiceID = " + iMovementInvoiceID + " ORDER BY TechStoreName";
            MainStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            MainStoreCB = new SqlCommandBuilder(MainStoreDA);
            MainStoreDT.Clear();
            MainStoreDA.Fill(MainStoreDT);
            foreach (DataRow Row in MainStoreDT.Rows)
            {
                DataRow[] Rows = MovementDetailsDT.Select("StoreIDTo = " + Row["StoreID"]);
                if (Rows.Count() > 0)
                {
                    Row["Name"] = Rows[0]["StoreIDFrom"];
                }
            }

            //TempMainStoreDT = MainStoreDT.Copy();
        }

        public void UpdateReadyStore()
        {
            DataTable MovementDetailsDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID = " + iMovementInvoiceID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementDetailsDT);
            }

            if (ReadyStoreDA != null)
            {
                ReadyStoreDA.Dispose();
                ReadyStoreCB.Dispose();
            }

            string SelectCommand = @"SELECT ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM ReadyStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE MovementInvoiceID = " + iMovementInvoiceID + " ORDER BY TechStoreName";
            ReadyStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            ReadyStoreCB = new SqlCommandBuilder(ReadyStoreDA);
            ReadyStoreDT.Clear();
            ReadyStoreDA.Fill(ReadyStoreDT);
            foreach (DataRow Row in ReadyStoreDT.Rows)
            {
                DataRow[] Rows = MovementDetailsDT.Select("StoreIDTo = " + Row["ReadyStoreID"]);
                if (Rows.Count() > 0)
                {
                    Row["Name"] = Rows[0]["StoreIDFrom"];
                }
            }

            //TempReadyStoreDT = ReadyStoreDT.Copy();
        }

        public void UpdateManufactureStore()
        {
            DataTable MovementDetailsDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID = " + iMovementInvoiceID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementDetailsDT);
            }

            if (ManufactureStoreDA != null)
            {
                ManufactureStoreDA.Dispose();
                ManufactureStoreCB.Dispose();
            }

            string SelectCommand = @"SELECT ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM ManufactureStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE MovementInvoiceID = " + iMovementInvoiceID + " ORDER BY TechStoreName";
            ManufactureStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            ManufactureStoreCB = new SqlCommandBuilder(ManufactureStoreDA);
            ManufactureStoreDT.Clear();
            ManufactureStoreDA.Fill(ManufactureStoreDT);
            foreach (DataRow Row in ManufactureStoreDT.Rows)
            {
                DataRow[] Rows = MovementDetailsDT.Select("StoreIDTo = " + Row["ManufactureStoreID"]);
                if (Rows.Count() > 0)
                {
                    Row["Name"] = Rows[0]["StoreIDFrom"];
                }
            }
            //TempManufactureStoreDT = ManufactureStoreDT.Copy();
        }

        public void UpdateWriteOffStore()
        {
            DataTable MovementDetailsDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID = " + iMovementInvoiceID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementDetailsDT);
            }

            if (WriteOffStoreDA != null)
            {
                WriteOffStoreDA.Dispose();
                WriteOffStoreCB.Dispose();
            }

            string SelectCommand = @"SELECT WriteOffStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM WriteOffStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON WriteOffStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE MovementInvoiceID = " + iMovementInvoiceID + " ORDER BY TechStoreName";
            WriteOffStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            WriteOffStoreCB = new SqlCommandBuilder(WriteOffStoreDA);
            WriteOffStoreDT.Clear();
            WriteOffStoreDA.Fill(WriteOffStoreDT);
            foreach (DataRow Row in WriteOffStoreDT.Rows)
            {
                DataRow[] Rows = MovementDetailsDT.Select("StoreIDTo = " + Row["WriteOffStoreID"]);
                if (Rows.Count() > 0)
                {
                    Row["Name"] = Rows[0]["StoreIDFrom"];
                }
            }

            //TempWriteOffStoreDT = WriteOffStoreDT.Copy();
        }

        public void UpdatePersonalStore()
        {
            DataTable MovementDetailsDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID = " + iMovementInvoiceID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementDetailsDT);
            }

            if (PersonalStoreDA != null)
            {
                PersonalStoreDA.Dispose();
                PersonalStoreCB.Dispose();
            }

            string SelectCommand = @"SELECT PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName FROM PersonalStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID
                WHERE MovementInvoiceID = " + iMovementInvoiceID + " ORDER BY TechStoreName";
            PersonalStoreDA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString);
            PersonalStoreCB = new SqlCommandBuilder(PersonalStoreDA);
            PersonalStoreDT.Clear();
            PersonalStoreDA.Fill(PersonalStoreDT);
            foreach (DataRow Row in PersonalStoreDT.Rows)
            {
                DataRow[] Rows = MovementDetailsDT.Select("StoreIDTo = " + Row["PersonalStoreID"]);
                if (Rows.Count() > 0)
                {
                    Row["Name"] = Rows[0]["StoreIDFrom"];
                }
            }

            //TempPersonalStoreDT = PersonalStoreDT.Copy();
        }


        public void GetInvoiceParams(
            ref int SellerStoreAllocID, ref int RecipientStoreAllocID,
            ref int RecipientSectorID, ref int PersonID,
            ref string PersonName, ref int StoreKeeperID,
            ref string ClientName, ref string Notes)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoices WHERE MovementInvoiceID = " + iMovementInvoiceID,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                    {
                        PersonName = DT.Rows[0]["PersonName"].ToString();
                        SellerStoreAllocID = Convert.ToInt32(DT.Rows[0]["SellerStoreAllocID"]);
                        RecipientStoreAllocID = Convert.ToInt32(DT.Rows[0]["RecipientStoreAllocID"]);
                        RecipientSectorID = Convert.ToInt32(DT.Rows[0]["RecipientSectorID"]);
                        PersonID = Convert.ToInt32(DT.Rows[0]["PersonID"]);
                        StoreKeeperID = Convert.ToInt32(DT.Rows[0]["StoreKeeperID"]);
                        ClientName = DT.Rows[0]["ClientName"].ToString();
                        Notes = DT.Rows[0]["Notes"].ToString();
                    }
                }
            }
        }

        public ArrayList GetStoreItems(int StoreSubGroupID)
        {
            ArrayList array = new ArrayList();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID FROM TechStore" +
                " WHERE TechStoreSubGroupID = " + StoreSubGroupID,
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        array.Add(Convert.ToInt32(DT.Rows[i]["TechStoreID"]));
                    }
                }
            }
            return array;
        }

        public decimal GetCost(int StoreItemID, decimal Thickness,
            decimal Length, decimal Width, decimal Height,
            decimal Capacity, decimal Weight,
            decimal Price, decimal Count)
        {
            int MeasureID = 0;
            decimal Sum = 0;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Length, Width, Height," +
                " Capacity, Weight, MeasureID FROM TechStore WHERE TechStoreID = " + StoreItemID,
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                    {
                        MeasureID = Convert.ToInt32(DT.Rows[0]["MeasureID"]);

                        //м.кв.
                        if (MeasureID == 1)
                        {
                            if (Length < 0 && DT.Rows[0]["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(DT.Rows[0]["Length"]);
                            if (Width < 0 && DT.Rows[0]["Width"] != DBNull.Value)
                                Width = Convert.ToDecimal(DT.Rows[0]["Width"]);
                            if (Height < 0 && DT.Rows[0]["Height"] != DBNull.Value)
                                Height = Convert.ToDecimal(DT.Rows[0]["Height"]);
                            if (Length > 0)
                            {
                                if (Width > 0)
                                { }
                                else
                                {
                                    if (Height > 0)
                                        Width = Height;
                                }
                            }
                            else
                            {
                                if (Height > 0)
                                    Length = Height;
                            }
                            Sum = Length * Width * Count * Price / 1000000;
                        }

                        //м.п.
                        if (MeasureID == 2)
                        {
                            Sum = Length * Count * Price / 1000;
                        }

                        //шт.
                        if (MeasureID == 3)
                        {
                            Sum = Count * Price;
                        }

                        //кг.
                        if (MeasureID == 4)
                        {
                            Sum = Weight * Count * Price;
                        }

                        //л.
                        if (MeasureID == 5)
                        {
                            Sum = Capacity * Count * Price;
                        }

                        //м.куб.
                        if (MeasureID == 6)
                        {
                            if (Length < 0 && DT.Rows[0]["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(DT.Rows[0]["Length"]);
                            if (Width < 0 && DT.Rows[0]["Width"] != DBNull.Value)
                                Width = Convert.ToDecimal(DT.Rows[0]["Width"]);
                            if (Thickness < 0 && DT.Rows[0]["Thickness"] != DBNull.Value)
                                Thickness = Convert.ToDecimal(DT.Rows[0]["Thickness"]);
                            if (Height < 0 && DT.Rows[0]["Height"] != DBNull.Value)
                                Height = Convert.ToDecimal(DT.Rows[0]["Height"]);
                            if (Thickness < 0)
                            {
                                Sum = Length * Width * Height * Count * Price / 1000000000;
                            }
                            if (Height < 0)
                            {
                                Sum = Length * Width * Thickness * Count * Price / 1000000000;
                            }
                        }

                        //тыс.шт.
                        if (MeasureID == 7)
                        {
                            Sum = Count * Price;
                        }

                        Decimal.Round(Sum, 2, MidpointRounding.AwayFromZero);
                    }
                }
            }

            return Sum;
        }


        public bool MoveBetweenPersonalStore(bool bSummary, int PersonalStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("PersonalStoreID = " + PersonalStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);

                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = PersonalStoreDT.Select("Name = " + PersonalStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["PersonalStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM PersonalStore WHERE PersonalStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            int StoreItemID = 0;
                            decimal Length = 0;
                            decimal Width = 0;
                            decimal Height = 0;
                            decimal Capacity = 0;
                            decimal Weight = 0;
                            decimal Thickness = 0;

                            WriteOffFromPersonalStore(PersonalStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                if (Rows[0]["StoreItemID"] != DBNull.Value)
                                    StoreItemID = Convert.ToInt32(Rows[0]["StoreItemID"]);
                                if (Rows[0]["Length"] != DBNull.Value)
                                    Length = Convert.ToDecimal(Rows[0]["Length"]);
                                if (Rows[0]["Thickness"] != DBNull.Value)
                                    Thickness = Convert.ToDecimal(Rows[0]["Thickness"]);
                                if (Rows[0]["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(Rows[0]["Width"]);
                                if (Rows[0]["Height"] != DBNull.Value)
                                    Height = Convert.ToDecimal(Rows[0]["Height"]);
                                if (Rows[0]["Capacity"] != DBNull.Value)
                                    Capacity = Convert.ToDecimal(Rows[0]["Capacity"]);
                                if (Rows[0]["Weight"] != DBNull.Value)
                                    Weight = Convert.ToDecimal(Rows[0]["Weight"]);

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                if (Rows[0]["Price"] != DBNull.Value)
                                {
                                    decimal Price = Convert.ToDecimal(Rows[0]["Price"]);
                                    decimal Cost = GetCost(StoreItemID, Thickness, Length, Width, Height, Capacity, Weight, Price, Count);
                                    decimal VAT = Cost * 20 / 100;
                                    decimal VATCost = Cost + VAT;
                                    Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);

                                    NewRow["CurrencyTypeID"] = Rows[0]["CurrencyTypeID"];
                                    NewRow["Price"] = Price;
                                    NewRow["Cost"] = Cost;
                                    NewRow["VAT"] = VAT;
                                    NewRow["VATCost"] = VATCost;
                                }

                                dt.Rows.Add(NewRow);
                            }

                            DA.Update(dt);
                            //PersonalStoreDT.Clear();
                            //PersonalStoreDA.Fill(PersonalStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenPersonalStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenPersonalStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromPersonalToStore(bool bSummary, int PersonalStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("PersonalStoreID = " + PersonalStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);

                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = MainStoreDT.Select("Name = " + PersonalStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["StoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM Store WHERE StoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);
                            WriteOffFromPersonalStore(PersonalStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                int CurrencyTypeID = Convert.ToInt32(Rows[0]["CurrencyTypeID"]);
                                decimal Price = Convert.ToDecimal(Rows[0]["Price"]);
                                decimal Cost = 0;
                                decimal VAT = 0;
                                decimal VATCost = 0;

                                if (Price > -1)
                                {
                                    Cost = Count * Price;
                                    VAT = Cost * 20 / 100;
                                    VATCost = Cost + VAT;

                                    NewRow["Price"] = Price;
                                    NewRow["CurrencyTypeID"] = CurrencyTypeID;

                                    NewRow["Cost"] = Cost;
                                    NewRow["VAT"] = VAT;
                                    NewRow["VATCost"] = VATCost;
                                }

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //MainStoreDT.Clear();
                            //MainStoreDA.Fill(MainStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }

            }
            return false;
        }

        public bool MoveFromPersonalToReadyStore(bool bSummary, int PersonalStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("PersonalStoreID = " + PersonalStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);

                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = ReadyStoreDT.Select("Name = " + PersonalStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ReadyStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ReadyStore WHERE ReadyStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromPersonalStore(PersonalStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (ReadyStoreDT.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }

                            DA.Update(dt);
                            //ReadyStoreDT.Clear();
                            //ReadyStoreDA.Fill(ReadyStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToReadyStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToReadyStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromPersonalToManufacture(bool bSummary, int PersonalStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("PersonalStoreID = " + PersonalStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);

                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = ManufactureStoreDT.Select("Name = " + PersonalStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ManufactureStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ManufactureStore WHERE ManufactureStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromPersonalStore(PersonalStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }

                            DA.Update(dt);
                            //ManufactureStoreDT.Clear();
                            //ManufactureStoreDA.Fill(ManufactureStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToManufacture НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToManufacture КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromPersonalToWriteOffStore(bool bSummary, int PersonalStoreID, decimal Price, int CurrencyTypeID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("PersonalStoreID = " + PersonalStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);

                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = WriteOffStoreDT.Select("Name = " + PersonalStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["WriteOffStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM WriteOffStore WHERE WriteOffStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            int StoreItemID = 0;
                            decimal Length = 0;
                            decimal Width = 0;
                            decimal Height = 0;
                            decimal Capacity = 0;
                            decimal Weight = 0;

                            WriteOffFromPersonalStore(PersonalStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                if (Rows[0]["StoreItemID"] != DBNull.Value)
                                    StoreItemID = Convert.ToInt32(Rows[0]["StoreItemID"]);
                                if (Rows[0]["Length"] != DBNull.Value)
                                    Length = Convert.ToDecimal(Rows[0]["Length"]);
                                if (Rows[0]["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(Rows[0]["Width"]);
                                if (Rows[0]["Height"] != DBNull.Value)
                                    Height = Convert.ToDecimal(Rows[0]["Height"]);
                                if (Rows[0]["Capacity"] != DBNull.Value)
                                    Capacity = Convert.ToDecimal(Rows[0]["Capacity"]);
                                if (Rows[0]["Weight"] != DBNull.Value)
                                    Weight = Convert.ToDecimal(Rows[0]["Weight"]);

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = iFactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                decimal Cost = 0;
                                decimal VAT = 0;
                                decimal VATCost = 0;

                                if (Price > -1)
                                {
                                    Cost = Count * Price;
                                    VAT = Cost * 20 / 100;
                                    VATCost = Cost + VAT;

                                    NewRow["Price"] = Price;
                                    NewRow["CurrencyTypeID"] = CurrencyTypeID;

                                    NewRow["Cost"] = Cost;
                                    NewRow["VAT"] = VAT;
                                    NewRow["VATCost"] = VATCost;
                                }

                                dt.Rows.Add(NewRow);
                            }

                            DA.Update(dt);
                            //WriteOffStoreDT.Clear();
                            //WriteOffStoreDA.Fill(WriteOffStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToWriteOffStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromPersonalToWriteOffStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public void WriteOffFromPersonalStore(int ID, decimal CurrentCount, decimal Count)
        {
            string SelectCommand = @"SELECT * FROM PersonalStore WHERE PersonalStoreID = " + ID;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            DT.Rows[0]["CurrentCount"] = CurrentCount - Count;
                            DA.Update(DT);
                        }
                    }
                }
            }
        }


        public bool MoveBetweenStore(bool bSummary, int StoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = MainStoreDT.Select("Name = " + StoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["StoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM Store WHERE StoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            int StoreItemID = 0;
                            decimal Length = 0;
                            decimal Width = 0;
                            decimal Height = 0;
                            decimal Capacity = 0;
                            decimal Weight = 0;
                            decimal Thickness = 0;

                            WriteOffFromStore(StoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                if (Rows[0]["StoreItemID"] != DBNull.Value)
                                    StoreItemID = Convert.ToInt32(Rows[0]["StoreItemID"]);
                                if (Rows[0]["Length"] != DBNull.Value)
                                    Length = Convert.ToDecimal(Rows[0]["Length"]);
                                if (Rows[0]["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(Rows[0]["Width"]);
                                if (Rows[0]["Thickness"] != DBNull.Value)
                                    Thickness = Convert.ToDecimal(Rows[0]["Thickness"]);
                                if (Rows[0]["Height"] != DBNull.Value)
                                    Height = Convert.ToDecimal(Rows[0]["Height"]);
                                if (Rows[0]["Capacity"] != DBNull.Value)
                                    Capacity = Convert.ToDecimal(Rows[0]["Capacity"]);
                                if (Rows[0]["Weight"] != DBNull.Value)
                                    Weight = Convert.ToDecimal(Rows[0]["Weight"]);

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["Produced"] = Rows[0]["Produced"];
                                NewRow["BestBefore"] = Rows[0]["BestBefore"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                if (Rows[0]["Price"] != DBNull.Value)
                                {
                                    decimal Price = Convert.ToDecimal(Rows[0]["Price"]);
                                    decimal Cost = GetCost(StoreItemID, Thickness, Length, Width, Height, Capacity, Weight, Price, Count);
                                    decimal VAT = Cost * 20 / 100;
                                    decimal VATCost = Cost + VAT;
                                    Cost = Decimal.Round(Cost, 2, MidpointRounding.AwayFromZero);

                                    NewRow["CurrencyTypeID"] = Rows[0]["CurrencyTypeID"];
                                    NewRow["Price"] = Price;
                                    NewRow["Cost"] = Cost;
                                    NewRow["VAT"] = VAT;
                                    NewRow["VATCost"] = VATCost;
                                }
                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //MainStoreDT.Clear();
                            //MainStoreDA.Fill(MainStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }

            return false;
        }

        public bool MoveFromStoreToManufacture(bool bSummary, int StoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = ManufactureStoreDT.Select("Name = " + StoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ManufactureStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ManufactureStore WHERE ManufactureStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromStore(StoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["Produced"] = Rows[0]["Produced"];
                                NewRow["BestBefore"] = Rows[0]["BestBefore"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //MainStoreDT.Clear();
                            //MainStoreDA.Fill(MainStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToManufacture НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToManufacture КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromStoreToPersonal(bool bSummary, int StoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = PersonalStoreDT.Select("Name = " + StoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["PersonalStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM PersonalStore WHERE PersonalStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromStore(StoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                int CurrencyTypeID = Convert.ToInt32(Rows[0]["CurrencyTypeID"]);
                                decimal Price = Convert.ToDecimal(Rows[0]["Price"]);
                                decimal Cost = 0;
                                decimal VAT = 0;
                                decimal VATCost = 0;

                                if (Price > -1)
                                {
                                    Cost = Count * Price;
                                    VAT = Cost * 20 / 100;
                                    VATCost = Cost + VAT;

                                    NewRow["Price"] = Price;
                                    NewRow["CurrencyTypeID"] = CurrencyTypeID;

                                    NewRow["Cost"] = Cost;
                                    NewRow["VAT"] = VAT;
                                    NewRow["VATCost"] = VATCost;
                                }

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //MainStoreDT.Clear();
                            //MainStoreDA.Fill(MainStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToPersonal НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToPersonal КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromStoreToWriteOffStore(bool bSummary, int StoreID, decimal Price, int CurrencyTypeID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = WriteOffStoreDT.Select("Name = " + StoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["WriteOffStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM WriteOffStore WHERE WriteOffStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromStore(StoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = iFactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                decimal Cost = 0;
                                decimal VAT = 0;
                                decimal VATCost = 0;

                                if (Price > -1)
                                {
                                    Cost = Count * Price;
                                    VAT = Cost * 20 / 100;
                                    VATCost = Cost + VAT;

                                    NewRow["Price"] = Price;
                                    NewRow["CurrencyTypeID"] = CurrencyTypeID;

                                    NewRow["Cost"] = Cost;
                                    NewRow["VAT"] = VAT;
                                    NewRow["VATCost"] = VATCost;
                                }

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //WriteOffStoreDT.Clear();
                            //WriteOffStoreDA.Fill(WriteOffStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToWriteOffStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToWriteOffStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromStoreToReadyStore(bool bSummary, int StoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;

                int ID = -1;
                DataRow[] MRows = ReadyStoreDT.Select("Name = " + StoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ReadyStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ReadyStore WHERE ReadyStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromStore(StoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //ReadyStoreDT.Clear();
                            //ReadyStoreDA.Fill(ReadyStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToReadyStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromStoreToReadyStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }

            return false;
        }

        public void WriteOffFromStore(int ID, decimal CurrentCount, decimal Count)
        {
            string SelectCommand = @"SELECT * FROM Store WHERE StoreID = " + ID;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            DT.Rows[0]["CurrentCount"] = CurrentCount - Count;
                            DA.Update(DT);
                        }
                    }
                }
            }
        }


        public bool MoveBetweenManufactureStore(bool bSummary, int ManufactureStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ManufactureStoreID = " + ManufactureStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = ManufactureStoreDT.Select("Name = " + ManufactureStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ManufactureStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ManufactureStore WHERE ManufactureStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromManufactureStore(ManufactureStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //ManufactureStoreDT.Clear();
                            //ManufactureStoreDA.Fill(ManufactureStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenManufactureStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenManufactureStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromManufactureToStore(bool bSummary, int ManufactureStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ManufactureStoreID = " + ManufactureStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = MainStoreDT.Select("Name = " + ManufactureStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["StoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM Store WHERE StoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromManufactureStore(ManufactureStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //ReadyStoreDT.Clear();
                            //ReadyStoreDA.Fill(ReadyStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromManufactureToPersonal(bool bSummary, int ManufactureStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ManufactureStoreID = " + ManufactureStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = PersonalStoreDT.Select("Name = " + ManufactureStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["PersonalStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM PersonalStore WHERE PersonalStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromManufactureStore(ManufactureStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //PersonalStoreDT.Clear();
                            //PersonalStoreDA.Fill(PersonalStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToPersonal НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToPersonal КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromManufactureToWriteOffStore(bool bSummary, int ManufactureStoreID, decimal Price, int CurrencyTypeID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ManufactureStoreID = " + ManufactureStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = WriteOffStoreDT.Select("Name = " + ManufactureStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["WriteOffStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM WriteOffStore WHERE WriteOffStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromManufactureStore(ManufactureStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = iFactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                decimal Cost = 0;
                                decimal VAT = 0;
                                decimal VATCost = 0;

                                if (Price > -1)
                                {
                                    Cost = Count * Price;
                                    VAT = Cost * 20 / 100;
                                    VATCost = Cost + VAT;

                                    NewRow["Price"] = Price;
                                    NewRow["CurrencyTypeID"] = CurrencyTypeID;

                                    NewRow["Cost"] = Cost;
                                    NewRow["VAT"] = VAT;
                                    NewRow["VATCost"] = VATCost;
                                }

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //WriteOffStoreDT.Clear();
                            //WriteOffStoreDA.Fill(WriteOffStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToWriteOffStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToWriteOffStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromManufactureToReadyStore(bool bSummary, int ManufactureStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ManufactureStoreID = " + ManufactureStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = ReadyStoreDT.Select("Name = " + ManufactureStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ReadyStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ReadyStore WHERE ReadyStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);

                            WriteOffFromManufactureStore(ManufactureStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;

                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //ReadyStoreDT.Clear();
                            //ReadyStoreDA.Fill(ReadyStoreDT);
                            dt.Dispose();
                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToReadyStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromManufactureToReadyStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public void WriteOffFromManufactureStore(int ID, decimal CurrentCount, decimal Count)
        {
            string SelectCommand = @"SELECT * FROM ManufactureStore WHERE ManufactureStoreID = " + ID;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            DT.Rows[0]["CurrentCount"] = CurrentCount - Count;
                            DA.Update(DT);
                        }
                    }
                }
            }
        }


        public bool MoveFromReadyStoreToStore(bool bSummary, int ReadyStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ReadyStoreID = " + ReadyStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = MainStoreDT.Select("Name = " + ReadyStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["StoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM Store WHERE StoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);
                            WriteOffFromReadyStore(ReadyStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;
                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //MainStoreDT.Clear();
                            //MainStoreDA.Fill(MainStoreDT);
                            dt.Dispose();

                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromReadyStoreToStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromReadyStoreToStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromReadyStoreToManufacture(bool bSummary, int ReadyStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ReadyStoreID = " + ReadyStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = ManufactureStoreDT.Select("Name = " + ReadyStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ManufactureStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ManufactureStore WHERE ManufactureStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);
                            WriteOffFromReadyStore(ReadyStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;
                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //ManufactureStoreDT.Clear();
                            //ManufactureStoreDA.Fill(ManufactureStoreDT);
                            dt.Dispose();

                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenReadyStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenReadyStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromReadyStoreToPersonal(bool bSummary, int ReadyStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ReadyStoreID = " + ReadyStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = PersonalStoreDT.Select("Name = " + ReadyStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["PersonalStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM PersonalStore WHERE PersonalStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);
                            WriteOffFromReadyStore(ReadyStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;
                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //PersonalStoreDT.Clear();
                            //PersonalStoreDA.Fill(PersonalStoreDT);
                            dt.Dispose();

                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromReadyStoreToPersonal НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromReadyStoreToPersonal КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveFromReadyStoreToWriteOffStore(bool bSummary, int ReadyStoreID, decimal Price, int CurrencyTypeID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ReadyStoreID = " + ReadyStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = WriteOffStoreDT.Select("Name = " + ReadyStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["WriteOffStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM WriteOffStore WHERE WriteOffStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);
                            WriteOffFromReadyStore(ReadyStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;
                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = iFactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //WriteOffStoreDT.Clear();
                            //WriteOffStoreDA.Fill(WriteOffStoreDT);
                            dt.Dispose();

                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromReadyStoreToWriteOffStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveFromReadyStoreToWriteOffStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public bool MoveBetweenReadyStore(bool bSummary, int ReadyStoreID, int FactoryID, decimal Count)
        {
            DataRow[] Rows = StoreItemsDT.Select("ReadyStoreID = " + ReadyStoreID);
            if (Rows.Count() > 0)
            {
                decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                if (CurrentCount < Count)
                    return false;
                int ID = -1;
                DataRow[] MRows = ReadyStoreDT.Select("Name = " + ReadyStoreID);
                if (MRows.Count() > 0)
                    ID = Convert.ToInt32(MRows[0]["ReadyStoreID"]);

                DataTable dt = new DataTable();
                string SelectCommand = @"SELECT * FROM ReadyStore WHERE ReadyStoreID = " + ID;
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            DA.Fill(dt);
                            WriteOffFromReadyStore(ReadyStoreID, CurrentCount, Count);
                            Rows[0]["CurrentCount"] = CurrentCount - Count;
                            if (bSummary && dt.Rows.Count > 0)
                            {
                                dt.Rows[0]["InvoiceCount"] = Count + Convert.ToDecimal(dt.Rows[0]["InvoiceCount"]);
                                dt.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(dt.Rows[0]["CurrentCount"]);
                            }
                            else
                            {
                                DataRow NewRow = dt.NewRow();

                                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                                NewRow["CreateUserID"] = Security.CurrentUserID;
                                if (dt.Columns.Contains("CreateDateTime"))
                                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                                NewRow["StoreItemID"] = Rows[0]["StoreItemID"];
                                NewRow["Length"] = Rows[0]["Length"];
                                NewRow["Width"] = Rows[0]["Width"];
                                NewRow["Height"] = Rows[0]["Height"];
                                NewRow["Thickness"] = Rows[0]["Thickness"];
                                NewRow["Diameter"] = Rows[0]["Diameter"];
                                NewRow["Admission"] = Rows[0]["Admission"];
                                NewRow["Capacity"] = Rows[0]["Capacity"];
                                NewRow["Weight"] = Rows[0]["Weight"];
                                NewRow["ColorID"] = Rows[0]["ColorID"];
                                NewRow["CoverID"] = Rows[0]["CoverID"];
                                NewRow["PatinaID"] = Rows[0]["PatinaID"];
                                NewRow["InvoiceCount"] = Count;
                                NewRow["CurrentCount"] = Count;
                                NewRow["FactoryID"] = FactoryID;
                                NewRow["Notes"] = Rows[0]["Notes"];
                                NewRow["DecorAssignmentID"] = Rows[0]["DecorAssignmentID"];

                                dt.Rows.Add(NewRow);
                            }
                            DA.Update(dt);
                            //ReadyStoreDT.Clear();
                            //ReadyStoreDA.Fill(ReadyStoreDT);
                            dt.Dispose();

                            return true;
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenReadyStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nMoveBetweenReadyStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
            return false;
        }

        public void WriteOffFromReadyStore(int ID, decimal CurrentCount, decimal Count)
        {
            string SelectCommand = @"SELECT * FROM ReadyStore WHERE ReadyStoreID = " + ID;

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        if (DA.Fill(DT) > 0)
                        {
                            DT.Rows[0]["CurrentCount"] = CurrentCount - Count;
                            DA.Update(DT);
                        }
                    }
                }
            }
        }


        public int GetLastManufactureStoreID()
        {
            int ID = -1;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM ManufactureStore ORDER BY ManufactureStoreID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ID = Convert.ToInt32(DT.Rows[0]["ManufactureStoreID"]);
                }
            }
            return ID;
        }

        public int GetLastStoreID()
        {
            int ID = -1;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM Store ORDER BY StoreID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ID = Convert.ToInt32(DT.Rows[0]["StoreID"]);
                }
            }
            return ID;
        }

        public int GetLastReadyStoreID()
        {
            int ID = -1;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM ReadyStore ORDER BY ReadyStoreID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ID = Convert.ToInt32(DT.Rows[0]["ReadyStoreID"]);
                }
            }
            return ID;
        }

        public int GetLastWriteOffStoreID()
        {
            int ID = -1;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM WriteOffStore ORDER BY WriteOffStoreID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ID = Convert.ToInt32(DT.Rows[0]["WriteOffStoreID"]);
                }
            }
            return ID;
        }

        public int GetLastPersonalStoreID()
        {
            int ID = -1;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 1 * FROM PersonalStore ORDER BY PersonalStoreID DESC",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    if (DT.Rows.Count > 0)
                        ID = Convert.ToInt32(DT.Rows[0]["PersonalStoreID"]);
                }
            }
            return ID;
        }


        public void UpdateStoreGroups(bool bPerson, int PersonID)
        {
            StoreGroupsDT.Clear();
            if (bPerson)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                    " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                    " (SELECT TechStoreSubGroupID FROM TechStore" +
                    " WHERE TechStoreID IN" +
                    " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                    " WHERE infiniu2_storage.dbo.PersonalStore.MovementInvoiceID IN (SELECT MovementInvoiceID FROM infiniu2_storage.dbo.MovementInvoices WHERE PersonID = " + PersonID + ") AND CurrentCount > 0 AND FactoryID = " + iFactoryID + ")))" +
                    " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
                {
                    DA.Fill(StoreGroupsDT);
                }
            }
            else
            {
                DataTable dt = new DataTable();
                using (SqlDataAdapter DA = new SqlDataAdapter(@"SELECT DISTINCT FactoryID, infiniu2_storage.dbo.Store.StoreItemID, infiniu2_storage.dbo.Store.FactoryID, G.TechStoreGroupID, G.TechStoreGroupName
FROM infiniu2_storage.dbo.Store INNER JOIN
dbo.TechStore AS S ON infiniu2_storage.dbo.Store.StoreItemID = S.TechStoreID INNER JOIN
dbo.TechStoreSubGroups AS SG ON S.TechStoreSubGroupID = SG.TechStoreSubGroupID INNER JOIN
dbo.TechStoreGroups AS G ON SG.TechStoreGroupID = G.TechStoreGroupID 
WHERE FactoryID = " + iFactoryID + " AND CurrentCount > 0 ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
                {
                    DA.Fill(dt);
                }

                using (DataView DV = new DataView(dt))
                {
                    StoreGroupsDT = DV.ToTable(true, new string[] { "TechStoreGroupName", "TechStoreGroupID" });
                }
                GroupsBS.DataSource = StoreGroupsDT;
                GroupsBS.MoveFirst();

                //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                //    " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                //    " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo." + sStoreName +
                //    " WHERE FactoryID = " + iFactoryID + " AND CurrentCount > 0)))" +
                //    " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
                //{
                //    DA.Fill(StoreGroupsDT);
                //}
            }
        }

        public void UpdateStoreSubGroups(bool bPerson, int PersonID)
        {
            StoreSubGroupsDT.Clear();
            if (bPerson)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                    " (SELECT TechStoreSubGroupID FROM TechStore" +
                    " WHERE TechStoreID IN" +
                    " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                    " WHERE infiniu2_storage.dbo.PersonalStore.MovementInvoiceID IN (SELECT MovementInvoiceID FROM infiniu2_storage.dbo.MovementInvoices WHERE PersonID = " + PersonID + ") AND CurrentCount > 0 AND FactoryID = " + iFactoryID + "))" +
                    " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
                {
                    DA.Fill(StoreSubGroupsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                    " (SELECT TechStoreSubGroupID FROM TechStore WHERE TechStoreID IN (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo." + sStoreName +
                    " WHERE FactoryID = " + iFactoryID + " AND CurrentCount > 0))" +
                    " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
                {
                    DA.Fill(StoreSubGroupsDT);
                }
            }
        }

        public void UpdateStoreItems(bool bPerson, int PersonID)
        {
            StoreItemsDT.Clear();
            if (bPerson)
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID, infiniu2_catalog.dbo.TechStore.TechStoreName FROM PersonalStore" +
                    " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                    " WHERE CurrentCount > 0 AND FactoryID = " + iFactoryID +
                    " AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM infiniu2_storage.dbo.MovementInvoices WHERE PersonID = " + PersonID + ")" +
                    " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StoreItemsDT);
                }
            }
            else
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT " + sStoreName + ".*, infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID, infiniu2_catalog.dbo.TechStore.TechStoreName FROM " + sStoreName +
                    " INNER JOIN infiniu2_catalog.dbo.TechStore ON " + sStoreName + ".StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                    " WHERE CurrentCount > 0 AND FactoryID = " + iFactoryID +
                    " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StoreItemsDT);
                }
            }
        }

        public void ReturnToManufactureStore(int ManufactureStoreID, decimal Count)
        {
            string SelectCommand = @"SELECT ManufactureStoreID, CurrentCount FROM ManufactureStore WHERE ManufactureStoreID = " + ManufactureStoreID;
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);

                            if (DT.Rows.Count > 0)
                            {
                                DT.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(DT.Rows[0]["CurrentCount"]);
                                DA.Update(DT);

                                DataRow[] Rows = StoreItemsDT.Select("ManufactureStoreID = " + ManufactureStoreID);
                                if (Rows.Count() > 0)
                                {
                                    decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                                    Rows[0]["CurrentCount"] = CurrentCount + Count;
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToManufactureStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToManufactureStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void ReturnToStore(int StoreID, decimal Count)
        {
            string SelectCommand = @"SELECT StoreID, CurrentCount FROM Store WHERE StoreID = " + StoreID;
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);

                            if (DT.Rows.Count > 0)
                            {
                                DT.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(DT.Rows[0]["CurrentCount"]);
                                DA.Update(DT);

                                DataRow[] Rows = StoreItemsDT.Select("StoreID = " + StoreID);
                                if (Rows.Count() > 0)
                                {
                                    decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                                    Rows[0]["CurrentCount"] = CurrentCount + Count;
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void ReturnToReadyStore(int ReadyStoreID, decimal Count)
        {
            string SelectCommand = @"SELECT ReadyStoreID, CurrentCount FROM ReadyStore WHERE ReadyStoreID = " + ReadyStoreID;
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);

                            if (DT.Rows.Count > 0)
                            {
                                DT.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(DT.Rows[0]["CurrentCount"]);
                                DA.Update(DT);

                                DataRow[] Rows = StoreItemsDT.Select("ReadyStoreID = " + ReadyStoreID);
                                if (Rows.Count() > 0)
                                {
                                    decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                                    Rows[0]["CurrentCount"] = CurrentCount + Count;
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToReadyStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToReadyStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void ReturnToPersonalStore(int PersonalStoreID, decimal Count)
        {
            string SelectCommand = @"SELECT PersonalStoreID, CurrentCount FROM PersonalStore WHERE PersonalStoreID = " + PersonalStoreID;
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);

                            if (DT.Rows.Count > 0)
                            {
                                DT.Rows[0]["CurrentCount"] = Count + Convert.ToDecimal(DT.Rows[0]["CurrentCount"]);
                                DA.Update(DT);

                                DataRow[] Rows = StoreItemsDT.Select("PersonalStoreID = " + PersonalStoreID);
                                if (Rows.Count() > 0)
                                {
                                    decimal CurrentCount = Convert.ToDecimal(Rows[0]["CurrentCount"]);
                                    Rows[0]["CurrentCount"] = CurrentCount + Count;
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToPersonalStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nReturnToPersonalStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }
    }








    public class MovementInvoices
    {
        int iMovementInvoiceID = -1;

        DataTable ManufactureStoreDT;
        DataTable MovementInvoicesDT;
        DataTable MovementInvoiceDetailsDT;
        DataTable MainStoreDT;
        DataTable ReadyStoreDT;
        DataTable WriteOffStoreDT;

        SqlDataAdapter ManufactureStoreDA;
        SqlDataAdapter MovementInvoicesDA;
        SqlDataAdapter MovementInvoiceDetailsDA;
        SqlDataAdapter MainStoreDA;
        SqlDataAdapter ReadyStoreDA;
        SqlDataAdapter WriteOffStoreDA;

        SqlCommandBuilder ManufactureStoreCB;
        SqlCommandBuilder MovementInvoicesCB;
        SqlCommandBuilder MovementInvoiceDetailsCB;
        SqlCommandBuilder MainStoreCB;
        SqlCommandBuilder ReadyStoreCB;
        SqlCommandBuilder WriteOffStoreCB;

        public MovementInvoices()
        {

        }

        public int CurrentMovementInvoiceID
        {
            get { return iMovementInvoiceID; }
            set { iMovementInvoiceID = value; }
        }

        public void Initialize()
        {
            ManufactureStoreDT = new DataTable();
            ManufactureStoreDA = new SqlDataAdapter("SELECT * FROM ManufactureStore",
                ConnectionStrings.StorageConnectionString);
            ManufactureStoreCB = new SqlCommandBuilder(ManufactureStoreDA);
            ManufactureStoreDA.Fill(ManufactureStoreDT);

            MovementInvoicesDT = new DataTable();
            MovementInvoicesDA = new SqlDataAdapter("SELECT * FROM MovementInvoices",
                ConnectionStrings.StorageConnectionString);
            MovementInvoicesCB = new SqlCommandBuilder(MovementInvoicesDA);
            MovementInvoicesDA.Fill(MovementInvoicesDT);

            MovementInvoiceDetailsDT = new DataTable();
            MovementInvoiceDetailsDA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails WHERE MovementInvoiceID = " + iMovementInvoiceID,
                ConnectionStrings.StorageConnectionString);
            MovementInvoiceDetailsCB = new SqlCommandBuilder(MovementInvoiceDetailsDA);
            MovementInvoiceDetailsDA.Fill(MovementInvoiceDetailsDT);

            ReadyStoreDT = new DataTable();
            ReadyStoreDA = new SqlDataAdapter("SELECT * FROM ReadyStore",
                ConnectionStrings.StorageConnectionString);
            ReadyStoreCB = new SqlCommandBuilder(ReadyStoreDA);
            ReadyStoreDA.Fill(ReadyStoreDT);

            MainStoreDT = new DataTable();
            MainStoreDA = new SqlDataAdapter("SELECT * FROM Store",
                ConnectionStrings.StorageConnectionString);
            MainStoreCB = new SqlCommandBuilder(MainStoreDA);
            MainStoreDA.Fill(MainStoreDT);

            WriteOffStoreDT = new DataTable();
            WriteOffStoreDA = new SqlDataAdapter("SELECT * FROM WriteOffStore",
                ConnectionStrings.StorageConnectionString);
            WriteOffStoreCB = new SqlCommandBuilder(WriteOffStoreDA);
            WriteOffStoreDA.Fill(WriteOffStoreDT);
        }

        public void AddMovementInvoiceDetail(
            bool bSummary, int StoreIDFrom, int StoreIDTo, decimal Count)
        {
            DataRow[] Rows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
            if (bSummary && Rows.Count() > 0)
            {
                Rows[0]["Count"] = Convert.ToDecimal(Rows[0]["Count"]) + Count;
            }
            else
            {
                DataRow NewRow = MovementInvoiceDetailsDT.NewRow();
                NewRow["CreateUserID"] = Security.CurrentUserID;
                if (MovementInvoiceDetailsDT.Columns.Contains("CreateDateTime"))
                    NewRow["CreateDateTime"] = Security.GetCurrentDate();
                NewRow["MovementInvoiceID"] = iMovementInvoiceID;
                NewRow["StoreIDFrom"] = StoreIDFrom;
                NewRow["StoreIDTo"] = StoreIDTo;
                NewRow["Count"] = Count;
                MovementInvoiceDetailsDT.Rows.Add(NewRow);
            }
            SaveMovementInvoiceDetails(iMovementInvoiceID);
        }

        public int SaveMovementInvoices(DateTime DateTime,
            int SellerStoreAllocID,
            int RecipientStoreAllocID, int RecipientSectorID,
            int PersonID, string PersonName, int StoreKeeperID,
            int ClientID, int SellerID,
            string ClientName, string Notes)
        {
            int LastMovementInvoiceID = 0;

            try
            {
                DataRow NewRow = MovementInvoicesDT.NewRow();

                NewRow["DateTime"] = DateTime;
                NewRow["SellerStoreAllocID"] = SellerStoreAllocID;
                NewRow["RecipientStoreAllocID"] = RecipientStoreAllocID;
                NewRow["RecipientSectorID"] = RecipientSectorID;
                NewRow["PersonID"] = PersonID;
                NewRow["PersonName"] = PersonName;
                NewRow["StoreKeeperID"] = StoreKeeperID;
                NewRow["ClientName"] = ClientName;
                NewRow["ClientID"] = ClientID;
                NewRow["SellerID"] = SellerID;
                NewRow["Notes"] = Notes;
                NewRow["CreateUserID"] = Security.CurrentUserID;
                NewRow["CreateDateTime"] = Security.GetCurrentDate();

                MovementInvoicesDT.Rows.Add(NewRow);

                MovementInvoicesDA.Update(MovementInvoicesDT);
                MovementInvoicesDT.Clear();
                MovementInvoicesDA.Fill(MovementInvoicesDT);
                if (MovementInvoicesDT.Rows.Count > 0 && (MovementInvoicesDT.Rows[MovementInvoicesDT.Rows.Count - 1]["MovementInvoiceID"] != DBNull.Value))
                    LastMovementInvoiceID = Convert.ToInt32(MovementInvoicesDT.Rows[MovementInvoicesDT.Rows.Count - 1]["MovementInvoiceID"]);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveMovementInvoices НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveMovementInvoices КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }

            return LastMovementInvoiceID;
        }

        public void SaveMovementInvoices(int MovementInvoiceID,
            int SellerStoreAllocID, int RecipientStoreAllocID, int RecipientSectorID,
            int PersonID, string PersonName, int StoreKeeperID,
            int ClientID, int SellerID,
            string ClientName, string Notes)
        {
            DataRow[] Rows = MovementInvoicesDT.Select("MovementInvoiceID = " + MovementInvoiceID);
            if (Rows.Count() > 0)
            {
                try
                {
                    //Rows[0]["DateTime"] = Security.GetCurrentDate();
                    Rows[0]["SellerStoreAllocID"] = SellerStoreAllocID;
                    Rows[0]["RecipientStoreAllocID"] = RecipientStoreAllocID;
                    Rows[0]["RecipientSectorID"] = RecipientSectorID;
                    Rows[0]["PersonID"] = PersonID;
                    Rows[0]["PersonName"] = PersonName;
                    Rows[0]["StoreKeeperID"] = StoreKeeperID;
                    Rows[0]["ClientName"] = ClientName;
                    Rows[0]["ClientID"] = ClientID;
                    Rows[0]["SellerID"] = SellerID;
                    Rows[0]["Notes"] = Notes;

                    MovementInvoicesDA.Update(MovementInvoicesDT);
                    MovementInvoicesDT.Clear();
                    MovementInvoicesDA.Fill(MovementInvoicesDT);
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nSaveMovementInvoices НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nSaveMovementInvoices КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
        }
        public static bool DBConnectionStatus()
        {
            try
            {
                using (SqlConnection sqlConn =
                    new SqlConnection(ConnectionStrings.UsersConnectionString))
                {
                    sqlConn.Open();
                    return (sqlConn.State == ConnectionState.Open);
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nНЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                return false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nКАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                return false;
            }
        }

        public void SaveMovementInvoiceDetails(int MovementInvoiceID)
        {
            try
            {
                MovementInvoiceDetailsDA.Update(MovementInvoiceDetailsDT);
                MovementInvoiceDetailsDT.Clear();
                MovementInvoiceDetailsDA.Dispose();
                MovementInvoiceDetailsCB.Dispose();
                MovementInvoiceDetailsDA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails WHERE MovementInvoiceID = " + iMovementInvoiceID,
                    ConnectionStrings.StorageConnectionString);
                MovementInvoiceDetailsCB = new SqlCommandBuilder(MovementInvoiceDetailsDA);
                MovementInvoiceDetailsDA.Fill(MovementInvoiceDetailsDT);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveMovementInvoiceDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveMovementInvoiceDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        //public void FillManufactureMovementInvoiceDetails(int MovementInvoiceID)
        //{
        //    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ManufactureStore WHERE MovementInvoiceID = " + MovementInvoiceID,
        //           ConnectionStrings.StorageConnectionString))
        //    {
        //        using (DataTable DT = new DataTable())
        //        {
        //            DA.Fill(DT);

        //            int j = 0;

        //            for (int i = 0; i < MovementInvoiceDetailsDT.Rows.Count; i++)
        //            {
        //                if (MovementInvoiceDetailsDT.Rows[i].RowState == DataRowState.Deleted)
        //                {
        //                    continue;
        //                }

        //                int StoreID = Convert.ToInt32(MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"]);

        //                if (StoreID == 0)
        //                {
        //                    MovementInvoiceDetailsDT.Rows[i]["MovementInvoiceID"] = MovementInvoiceID;
        //                    MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"] = DT.Rows[j++]["ManufactureStoreID"];
        //                }
        //                else
        //                {
        //                    DataRow[] Rows = DT.Select("ManufactureStoreID = " + StoreID);
        //                    if (Rows.Count() > 0)
        //                    {
        //                        j++;
        //                    }
        //                    else
        //                        MovementInvoiceDetailsDT.Rows[i].Delete();
        //                }
        //            }
        //        }
        //    }
        //}

        //public void FillStoreMovementInvoiceDetails(int MovementInvoiceID)
        //{
        //    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Store" +
        //        " WHERE MovementInvoiceID = " + MovementInvoiceID,
        //        ConnectionStrings.StorageConnectionString))
        //    {
        //        using (DataTable DT = new DataTable())
        //        {
        //            DA.Fill(DT);

        //            int j = 0;

        //            for (int i = 0; i < MovementInvoiceDetailsDT.Rows.Count; i++)
        //            {
        //                if (MovementInvoiceDetailsDT.Rows[i].RowState == DataRowState.Deleted)
        //                {
        //                    continue;
        //                }

        //                int StoreID = Convert.ToInt32(MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"]);

        //                if (StoreID == 0)
        //                {
        //                    MovementInvoiceDetailsDT.Rows[i]["MovementInvoiceID"] = MovementInvoiceID;
        //                    MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"] = DT.Rows[j++]["StoreID"];
        //                }
        //                else
        //                {
        //                    DataRow[] Rows = DT.Select("StoreID = " + StoreID);
        //                    if (Rows.Count() > 0)
        //                    {
        //                        j++;
        //                    }
        //                    else
        //                        MovementInvoiceDetailsDT.Rows[i].Delete();
        //                }
        //            }
        //        }
        //    }
        //}

        //public void FillReadyStoreMovementInvoiceDetails(int MovementInvoiceID)
        //{
        //    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ReadyStore" +
        //        " WHERE MovementInvoiceID = " + MovementInvoiceID,
        //        ConnectionStrings.StorageConnectionString))
        //    {
        //        using (DataTable DT = new DataTable())
        //        {
        //            DA.Fill(DT);

        //            int j = 0;

        //            for (int i = 0; i < MovementInvoiceDetailsDT.Rows.Count; i++)
        //            {
        //                if (MovementInvoiceDetailsDT.Rows[i].RowState == DataRowState.Deleted)
        //                {
        //                    continue;
        //                }

        //                int StoreID = Convert.ToInt32(MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"]);

        //                if (StoreID == 0)
        //                {
        //                    MovementInvoiceDetailsDT.Rows[i]["MovementInvoiceID"] = MovementInvoiceID;
        //                    MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"] = DT.Rows[j++]["ReadyStoreID"];
        //                }
        //                else
        //                {
        //                    DataRow[] Rows = DT.Select("ReadyStoreID = " + StoreID);
        //                    if (Rows.Count() > 0)
        //                    {
        //                        j++;
        //                    }
        //                    else
        //                        MovementInvoiceDetailsDT.Rows[i].Delete();
        //                }
        //            }
        //        }
        //    }
        //}

        //public void FillWriteOffStoreMovementInvoiceDetails(int MovementInvoiceID)
        //{
        //    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM WriteOffStore" +
        //           " WHERE MovementInvoiceID = " + MovementInvoiceID,
        //           ConnectionStrings.StorageConnectionString))
        //    {
        //        using (DataTable DT = new DataTable())
        //        {
        //            DA.Fill(DT);

        //            int j = 0;

        //            for (int i = 0; i < MovementInvoiceDetailsDT.Rows.Count; i++)
        //            {
        //                if (MovementInvoiceDetailsDT.Rows[i].RowState == DataRowState.Deleted)
        //                {
        //                    continue;
        //                }

        //                int StoreID = Convert.ToInt32(MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"]);

        //                if (StoreID == 0)
        //                {
        //                    MovementInvoiceDetailsDT.Rows[i]["MovementInvoiceID"] = MovementInvoiceID;
        //                    MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"] = DT.Rows[j++]["WriteOffStoreID"];
        //                }
        //                else
        //                {
        //                    DataRow[] Rows = DT.Select("WriteOffStoreID = " + StoreID);
        //                    if (Rows.Count() > 0)
        //                    {
        //                        j++;
        //                    }
        //                    else
        //                        MovementInvoiceDetailsDT.Rows[i].Delete();
        //                }
        //            }
        //        }
        //    }
        //}

        //public void FillPersonalStoreMovementInvoiceDetails(int MovementInvoiceID)
        //{
        //    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PersonalStore" +
        //        " WHERE MovementInvoiceID = " + MovementInvoiceID,
        //        ConnectionStrings.StorageConnectionString))
        //    {
        //        using (DataTable DT = new DataTable())
        //        {
        //            DA.Fill(DT);

        //            int j = 0;

        //            for (int i = 0; i < MovementInvoiceDetailsDT.Rows.Count; i++)
        //            {
        //                if (MovementInvoiceDetailsDT.Rows[i].RowState == DataRowState.Deleted)
        //                {
        //                    continue;
        //                }

        //                int StoreID = Convert.ToInt32(MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"]);

        //                if (StoreID == 0)
        //                {
        //                    MovementInvoiceDetailsDT.Rows[i]["MovementInvoiceID"] = MovementInvoiceID;
        //                    MovementInvoiceDetailsDT.Rows[i]["StoreIDTo"] = DT.Rows[j++]["PersonalStoreID"];
        //                }
        //                else
        //                {
        //                    DataRow[] Rows = DT.Select("PersonalStoreID = " + StoreID);
        //                    if (Rows.Count() > 0)
        //                    {
        //                        j++;
        //                    }
        //                    else
        //                        MovementInvoiceDetailsDT.Rows[i].Delete();
        //                }
        //            }
        //        }
        //    }
        //}

        static public void RemoveMovementInvoice(int MovementInvoiceID)
        {
            bool bEmptyInvoice = false;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails WHERE MovementInvoiceID = " + MovementInvoiceID,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    if (DA.Fill(DT) == 0)
                        bEmptyInvoice = true;
                }
            }

            if (bEmptyInvoice)
            {
                try
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoices WHERE MovementInvoiceID = " + MovementInvoiceID,
                        ConnectionStrings.StorageConnectionString))
                    {
                        using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                        {
                            using (DataTable DT = new DataTable())
                            {
                                if (DA.Fill(DT) > 0)
                                {
                                    DT.Rows[0].Delete();
                                    DA.Update(DT);
                                }
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    MessageBox.Show(ex.Message + " \r\nRemoveMovementInvoice НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message + " \r\nRemoveMovementInvoice КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
                }
            }
        }

        public void RemoveDetails(int StoreIDFrom, int StoreIDTo, decimal Count)
        {
            DataRow[] Rows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom + " AND StoreIDTo = " + StoreIDTo);
            if (Rows.Count() > 0)
            {
                for (int i = Rows.Count() - 1; i >= 0; i--)
                {
                    decimal MovCount = 0;
                    if (Rows[i]["Count"] != DBNull.Value)
                    {
                        MovCount = Convert.ToDecimal(Rows[i]["Count"]);
                        if (MovCount >= Count)
                        {
                            if (MovCount - Count == 0)
                                Rows[i].Delete();
                            else
                                Rows[i]["Count"] = MovCount - Count;
                            break;
                        }
                    }
                }
            }
        }
    }





    public class SellersManager
    {
        int CurrentSellerID = -1;
        int CurrentSellerGroupID = -1;
        int CurrentSellerSubGroupID = -1;

        DataTable SellersDataTable;
        DataTable SellersGroupsDataTable;
        DataTable SellersSubGroupsDataTable;
        DataTable SellersInfoDataTable;

        BindingSource SellersBindingSource;
        BindingSource SellersGroupsBindingSource;
        BindingSource SellersSubGroupsBindingSource;

        PercentageDataGrid SellersDataGrid;
        PercentageDataGrid SellersGroupsDataGrid;
        PercentageDataGrid SellersSubGroupsDataGrid;
        PercentageDataGrid SellersInfoDataGrid;

        SqlDataAdapter SellersDA;
        SqlDataAdapter SellersGroupsDA;
        SqlDataAdapter SellersSubGroupsDA;

        SqlCommandBuilder SellersCB;
        SqlCommandBuilder SellersGroupsCB;
        SqlCommandBuilder SellersSubGroupsCB;

        public SellersManager(
            ref PercentageDataGrid tSellersDataGrid,
            ref PercentageDataGrid tSellersGroupsDataGrid,
            ref PercentageDataGrid tSellersSubGroupsDataGrid,
            ref PercentageDataGrid tSellersInfoDataGrid)
        {
            SellersDataGrid = tSellersDataGrid;
            SellersGroupsDataGrid = tSellersGroupsDataGrid;
            SellersSubGroupsDataGrid = tSellersSubGroupsDataGrid;
            SellersInfoDataGrid = tSellersInfoDataGrid;

            Create();
            Fill();
            Binding();
            GridSettings();
        }

        private void Create()
        {
            SellersDataTable = new DataTable();
            SellersGroupsDataTable = new DataTable();
            SellersSubGroupsDataTable = new DataTable();
            SellersInfoDataTable = new DataTable("SellerInfoDataTable");

            SellersInfoDataTable.Columns.Add(new DataColumn("Name", Type.GetType("System.String")));
            SellersInfoDataTable.Columns.Add(new DataColumn("Position", Type.GetType("System.String")));
            SellersInfoDataTable.Columns.Add(new DataColumn("Phone", Type.GetType("System.String")));
            SellersInfoDataTable.Columns.Add(new DataColumn("Email", Type.GetType("System.String")));
            SellersInfoDataTable.Columns.Add(new DataColumn("ICQ", Type.GetType("System.String")));
            SellersInfoDataTable.Columns.Add(new DataColumn("Skype", Type.GetType("System.String")));

            SellersBindingSource = new BindingSource();
            SellersGroupsBindingSource = new BindingSource();
            SellersSubGroupsBindingSource = new BindingSource();
        }

        private void Fill()
        {
            SellersDA = new SqlDataAdapter("SELECT * FROM Sellers ORDER BY SellerName", ConnectionStrings.StorageConnectionString);
            SellersCB = new SqlCommandBuilder(SellersDA);
            SellersDA.Fill(SellersDataTable);

            SellersGroupsDA = new SqlDataAdapter("SELECT * FROM SellerGroups ORDER BY SellerGroup", ConnectionStrings.StorageConnectionString);
            SellersGroupsCB = new SqlCommandBuilder(SellersGroupsDA);
            SellersGroupsDA.Fill(SellersGroupsDataTable);

            SellersSubGroupsDA = new SqlDataAdapter("SELECT * FROM SellerSubGroups ORDER BY SellerSubGroup", ConnectionStrings.StorageConnectionString);
            SellersSubGroupsCB = new SqlCommandBuilder(SellersSubGroupsDA);
            SellersSubGroupsDA.Fill(SellersSubGroupsDataTable);
        }

        private void Binding()
        {
            SellersBindingSource.DataSource = SellersDataTable;
            SellersDataGrid.DataSource = SellersBindingSource;

            SellersGroupsBindingSource.DataSource = SellersGroupsDataTable;
            SellersGroupsDataGrid.DataSource = SellersGroupsBindingSource;

            SellersSubGroupsBindingSource.DataSource = SellersSubGroupsDataTable;
            SellersSubGroupsDataGrid.DataSource = SellersSubGroupsBindingSource;

            SellersInfoDataGrid.DataSource = new DataView(SellersInfoDataTable);
        }

        private void GridSettings()
        {
            SellersGroupsDataGrid.Columns["SellerGroupID"].Visible = false;
            SellersGroupsDataGrid.Columns["SellerGroup"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            SellersGroupsDataGrid.Columns["SellerGroup"].MinimumWidth = 150;

            SellersSubGroupsDataGrid.Columns["SellerGroupID"].Visible = false;
            SellersSubGroupsDataGrid.Columns["SellerSubGroupID"].Visible = false;
            SellersSubGroupsDataGrid.Columns["SellerSubGroup"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            SellersSubGroupsDataGrid.Columns["SellerSubGroup"].MinimumWidth = 150;

            SellersDataGrid.Columns["SellerID"].Visible = false;
            SellersDataGrid.Columns["Country"].Visible = false;
            SellersDataGrid.Columns["Address"].Visible = false;
            SellersDataGrid.Columns["ContractDocNumber"].Visible = false;
            SellersDataGrid.Columns["Email"].Visible = false;
            SellersDataGrid.Columns["Site"].Visible = false;
            SellersDataGrid.Columns["ContactsXML"].Visible = false;
            SellersDataGrid.Columns["Notes"].Visible = false;
            SellersDataGrid.Columns["UNN"].Visible = false;
            SellersDataGrid.Columns["SellerSubGroupID"].Visible = false;

            SellersDataGrid.Columns["SellerName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            SellersDataGrid.Columns["SellerName"].MinimumWidth = 150;

            SellersDataGrid.ColumnHeadersVisible = false;

            SellersInfoDataGrid.Columns["Name"].MinimumWidth = 150;
            SellersInfoDataGrid.Columns["Name"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            SellersInfoDataGrid.Columns["Position"].MinimumWidth = 150;
            SellersInfoDataGrid.Columns["Position"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            SellersInfoDataGrid.Columns["Phone"].MinimumWidth = 150;
            SellersInfoDataGrid.Columns["Phone"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            SellersInfoDataGrid.Columns["Email"].MinimumWidth = 150;
            SellersInfoDataGrid.Columns["Email"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            SellersInfoDataGrid.Columns["ICQ"].MinimumWidth = 150;
            SellersInfoDataGrid.Columns["ICQ"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            SellersInfoDataGrid.Columns["Skype"].MinimumWidth = 150;
            SellersInfoDataGrid.Columns["Skype"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

            SellersInfoDataGrid.Columns["Name"].HeaderText = "Имя";
            SellersInfoDataGrid.Columns["Position"].HeaderText = "Должность";
            SellersInfoDataGrid.Columns["Phone"].HeaderText = "Телефон";
            SellersInfoDataGrid.Columns["Email"].HeaderText = "E-mail";
            SellersInfoDataGrid.Columns["ICQ"].HeaderText = "ICQ";
            SellersInfoDataGrid.Columns["Skype"].HeaderText = "Skype";
        }

        #region Properties

        public DataTable InfoDataTableClone
        {
            get
            {
                DataTable DT = new DataTable();
                if (SellersInfoDataTable != null)
                    DT = SellersInfoDataTable.Clone();
                return DT;
            }
        }

        public DataTable InfoDataTableCopy
        {
            get
            {
                DataTable DT = new DataTable();
                if (SellersInfoDataTable != null)
                    DT = SellersInfoDataTable.Copy();
                return DT;
            }
        }

        public int SellersCount
        {
            get
            {
                int Count = 0;
                if (SellersBindingSource != null)
                {
                    Count = SellersBindingSource.Count;
                }
                return Count;
            }
        }

        public int SubGroupsCount
        {
            get
            {
                int Count = 0;
                if (SellersSubGroupsBindingSource != null)
                {
                    Count = SellersSubGroupsBindingSource.Count;
                }
                return Count;
            }
        }

        public string CurrentSellerName
        {
            get
            {
                string SellerName = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["SellerName"] != DBNull.Value)
                {
                    SellerName = ((DataRowView)SellersBindingSource.Current).Row["SellerName"].ToString();
                }
                return SellerName;
            }
        }

        public string CurrentSellerCountry
        {
            get
            {
                string Country = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["Country"] != DBNull.Value)
                {
                    Country = ((DataRowView)SellersBindingSource.Current).Row["Country"].ToString();
                }
                return Country;
            }
        }

        public string CurrentSellerAddress
        {
            get
            {
                string Address = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["Address"] != DBNull.Value)
                {
                    Address = ((DataRowView)SellersBindingSource.Current).Row["Address"].ToString();
                }
                return Address;
            }
        }

        public string CurrentContractDocNumber
        {
            get
            {
                string ContractDocNumber = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["ContractDocNumber"] != DBNull.Value)
                {
                    ContractDocNumber = ((DataRowView)SellersBindingSource.Current).Row["ContractDocNumber"].ToString();
                }
                return ContractDocNumber;
            }
        }

        public string CurrentSellerEmail
        {
            get
            {
                string Email = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["Email"] != DBNull.Value)
                {
                    Email = ((DataRowView)SellersBindingSource.Current).Row["Email"].ToString();
                }
                return Email;
            }
        }

        public string CurrentSellerSite
        {
            get
            {
                string Site = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["Site"] != DBNull.Value)
                {
                    Site = ((DataRowView)SellersBindingSource.Current).Row["Site"].ToString();
                }
                return Site;
            }
        }

        public string CurrentSellerNotes
        {
            get
            {
                string Notes = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["Notes"] != DBNull.Value)
                {
                    Notes = ((DataRowView)SellersBindingSource.Current).Row["Notes"].ToString();
                }
                return Notes;
            }
        }

        public string CurrentSellerUNN
        {
            get
            {
                string UNN = string.Empty;
                if (SellersBindingSource.Count > 0
                    && SellersBindingSource.Current != null
                    && ((DataRowView)SellersBindingSource.Current).Row["UNN"] != DBNull.Value)
                {
                    UNN = ((DataRowView)SellersBindingSource.Current).Row["UNN"].ToString();
                }
                return UNN;
            }
        }

        public string CurrentSellerGroupName
        {
            get
            {
                string SellerGroupName = string.Empty;
                if (SellersGroupsBindingSource.Count > 0
                    && SellersGroupsBindingSource.Current != null
                    && ((DataRowView)SellersGroupsBindingSource.Current).Row["SellerGroup"] != DBNull.Value)
                {
                    SellerGroupName = ((DataRowView)SellersGroupsBindingSource.Current).Row["SellerGroup"].ToString();
                }
                return SellerGroupName;
            }
        }

        public string CurrentSellerSubGroupName
        {
            get
            {
                string SellerSubGroupName = string.Empty;
                if (SellersSubGroupsBindingSource.Count > 0
                    && SellersSubGroupsBindingSource.Current != null
                    && ((DataRowView)SellersSubGroupsBindingSource.Current).Row["SellerSubGroup"] != DBNull.Value)
                {
                    SellerSubGroupName = ((DataRowView)SellersSubGroupsBindingSource.Current).Row["SellerSubGroup"].ToString();
                }
                return SellerSubGroupName;
            }
        }

        #endregion

        #region Filter functions

        public void FilterSellerSubGroups()
        {
            GetCurrentSellerGroup();
            SellersSubGroupsBindingSource.Filter = "SellerGroupID = " + CurrentSellerGroupID;
            SellersSubGroupsBindingSource.MoveFirst();
        }

        public void FilterSellers()
        {
            GetCurrentSellerSubGroup();
            SellersBindingSource.Filter = "SellerSubGroupID = " + CurrentSellerSubGroupID;
            SellersBindingSource.MoveFirst();
        }

        #endregion

        #region Get functions

        public void GetCurrentSeller()
        {
            if (SellersBindingSource.Count == 0)
            {
                CurrentSellerID = -1;
                return;
            }
            if (((DataRowView)SellersBindingSource.Current).Row["SellerID"] == DBNull.Value)
                return;
            else
                CurrentSellerID = Convert.ToInt32(((DataRowView)SellersBindingSource.Current).Row["SellerID"]);
        }

        public void GetCurrentSellerGroup()
        {
            if (SellersGroupsBindingSource.Count == 0)
            {
                CurrentSellerGroupID = -1;
                return;
            }
            if (((DataRowView)SellersGroupsBindingSource.Current).Row["SellerGroupID"] == DBNull.Value)
                return;
            else
                CurrentSellerGroupID = Convert.ToInt32(((DataRowView)SellersGroupsBindingSource.Current).Row["SellerGroupID"]);
        }

        public void GetCurrentSellerSubGroup()
        {
            if (SellersSubGroupsBindingSource.Count == 0)
            {
                CurrentSellerSubGroupID = -1;
                return;
            }
            if (((DataRowView)SellersSubGroupsBindingSource.Current).Row["SellerSubGroupID"] == DBNull.Value)
                return;
            else
                CurrentSellerSubGroupID = Convert.ToInt32(((DataRowView)SellersSubGroupsBindingSource.Current).Row["SellerSubGroupID"]);
        }

        public void GetSellersInfo()
        {
            SellersInfoDataTable.Clear();
            if (SellersDataGrid.SelectedRows.Count > 0)
            {
                string ContactsXML = SellersDataGrid.SelectedRows[0].Cells["ContactsXML"].Value.ToString();
                if (ContactsXML.Length == 0)
                    return;

                using (StringReader SR = new StringReader(ContactsXML))
                {
                    SellersInfoDataTable.ReadXml(SR);
                }
            }
        }

        #endregion

        #region Add fuctions

        public void AddSeller(string SellerName, string Country, string Address,
            string ContractDocNumber, string Email, string Site, string ContactsXML, string Notes, string UNN)
        {
            DataRow NewRow = SellersDataTable.NewRow();
            NewRow["SellerName"] = SellerName;
            NewRow["Country"] = Country;
            NewRow["Address"] = Address;
            NewRow["ContractDocNumber"] = ContractDocNumber;
            NewRow["Email"] = Email;
            NewRow["Site"] = Site;
            NewRow["ContactsXML"] = ContactsXML;
            NewRow["Notes"] = Notes;
            NewRow["UNN"] = UNN;
            NewRow["SellerSubGroupID"] = CurrentSellerSubGroupID;
            SellersDataTable.Rows.Add(NewRow);
            SaveSellers();
            SellersBindingSource.Position = SellersDataTable.Rows.Count;
        }

        public void AddSellerGroup(string SellerGroup)
        {
            DataRow NewRow = SellersGroupsDataTable.NewRow();
            NewRow["SellerGroup"] = SellerGroup;
            SellersGroupsDataTable.Rows.Add(NewRow);

            SaveSellerGroups();
            SellersGroupsBindingSource.Position = SellersGroupsDataTable.Rows.Count;
        }

        public void AddSellerSubGroup(string SellerSubGroup)
        {
            DataRow NewRow = SellersSubGroupsDataTable.NewRow();
            NewRow["SellerSubGroup"] = SellerSubGroup;
            NewRow["SellerGroupID"] = CurrentSellerGroupID;
            SellersSubGroupsDataTable.Rows.Add(NewRow);

            SaveSellerSubGroups();
            SellersSubGroupsBindingSource.Position = SellersSubGroupsDataTable.Rows.Count;
        }

        #endregion

        #region Edit fucntions

        public void EditSeller(string SellerName, string Country, string Address,
            string ContractDocNumber, string Email, string Site, string ContactsXML, string Notes, string UNN)
        {
            DataRow[] row = SellersDataTable.Select("SellerID = " + CurrentSellerID);
            if (row.Count() > 0)
            {
                row[0]["SellerName"] = SellerName;
                row[0]["Country"] = Country;
                row[0]["Address"] = Address;
                row[0]["ContractDocNumber"] = ContractDocNumber;
                row[0]["Email"] = Email;
                row[0]["Site"] = Site;
                row[0]["ContactsXML"] = ContactsXML;
                row[0]["Notes"] = Notes;
                row[0]["UNN"] = UNN;
            }

            SaveSellers();
            GetSellersInfo();
        }

        public void EditSellerGroup(string SellerGroup)
        {
            if (SellersGroupsBindingSource.Count == 0)
                return;

            SellersGroupsDataTable.Rows[SellersGroupsDataGrid.CurrentRow.Index]["SellerGroup"] = SellerGroup;

            try
            {
                SellersGroupsDA.Update(SellersGroupsDataTable);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nEditSellerGroup НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nEditSellerGroup КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void EditSellerSubGroup(string SellerSubGroup)
        {
            if (SellersSubGroupsBindingSource.Count == 0)
                return;

            DataRow[] row = SellersSubGroupsDataTable.Select("SellerSubGroupID = " + CurrentSellerSubGroupID);
            if (row.Count() > 0)
                row[0]["SellerSubGroup"] = SellerSubGroup;

            try
            {
                SellersSubGroupsDA.Update(SellersSubGroupsDataTable);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nEditSellerSubGroup НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nEditSellerSubGroup КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        #endregion

        #region Remove functions

        public void RemoveSeller()
        {
            if (SellersBindingSource.Count > 0)
            {
                SellersBindingSource.RemoveCurrent();
                SaveSellers();
            }
        }

        public void RemoveSellerGroup()
        {
            if (SellersGroupsBindingSource.Count > 0)
            {
                SellersGroupsBindingSource.RemoveCurrent();
                SaveSellerGroups();
            }
        }

        public void RemoveSellerSubGroup()
        {
            if (SellersSubGroupsBindingSource.Count > 0)
            {
                SellersSubGroupsBindingSource.RemoveCurrent();
                SaveSellerSubGroups();
            }
        }

        #endregion

        #region Save functions

        public void SaveSellers()
        {
            try
            {
                SellersDA.Update(SellersDataTable);
                SellersDataTable.Clear();
                SellersDA.Fill(SellersDataTable);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveSellers НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveSellers КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveSellerGroups()
        {
            try
            {
                SellersGroupsDA.Update(SellersGroupsDataTable);
                SellersGroupsDataTable.Clear();
                SellersGroupsDA.Fill(SellersGroupsDataTable);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveSellerGroups НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveSellerGroups КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveSellerSubGroups()
        {
            try
            {
                SellersSubGroupsDA.Update(SellersSubGroupsDataTable);
                SellersSubGroupsDataTable.Clear();
                SellersSubGroupsDA.Fill(SellersSubGroupsDataTable);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveSellerSubGroups НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveSellerSubGroups КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        #endregion

    }






    public class PurchaseInvoiceToExcel
    {
        private DataTable PurchaseInvoiceDT;
        private DataTable PurchaseInvoiceDTOption;
        Excel Ex = null;

        public PurchaseInvoiceToExcel(int PurchaseInvoiceID)
        {
            PurchaseInvoiceDT = new DataTable();
            PurchaseInvoiceDTOption = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_storage.dbo.Store.StoreID,infiniu2_storage.dbo.StoreItems.ItemName ,infiniu2_storage.dbo.StoreItems.SellerCode ,infiniu2_storage.dbo.StoreItems.MeasureID , infiniu2_storage.dbo.PurchaseInvoices.IncomeDate, infiniu2_storage.dbo.Store.PurchaseInvoiceID,infiniu2_storage.dbo.Store.InvoiceCount,infiniu2_storage.dbo.Store.CurrencyTypeID, infiniu2_storage.dbo.Sellers.SellerName, infiniu2_storage.dbo.PurchaseInvoices.Reason, infiniu2_storage.dbo.PurchaseInvoices.FactoryID, infiniu2_storage.dbo.Store.Price, infiniu2_storage.dbo.Store.Cost ,infiniu2_storage.dbo.Store.VAT , infiniu2_storage.dbo.Store.VATCost " +
                " FROM infiniu2_storage.dbo.PurchaseInvoices INNER JOIN infiniu2_storage.dbo.Store ON infiniu2_storage.dbo.PurchaseInvoices.PurchaseInvoiceID = infiniu2_storage.dbo.Store.PurchaseInvoiceID INNER JOIN " +
                " infiniu2_storage.dbo.StoreItems ON infiniu2_storage.dbo.StoreItems.StoreItemID = infiniu2_storage.dbo.Store.StoreItemID INNER JOIN " +
                " infiniu2_storage.dbo.Sellers ON infiniu2_storage.dbo.PurchaseInvoices.SellerID = infiniu2_storage.dbo.Sellers.SellerID WHERE infiniu2_storage.dbo.Store.PurchaseInvoiceID = " + PurchaseInvoiceID.ToString(),
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    PurchaseInvoiceDT = DT.Copy();
                }
            }

            PurchaseInvoiceDT.Columns.Add("FactoryFullName");
            PurchaseInvoiceDT.Columns.Add("Measure");
            PurchaseInvoiceDT.Columns.Add("CurrencyType");

            if (PurchaseInvoiceDT.Rows.Count == 1)
            {
                if (PurchaseInvoiceDT.Rows[0]["FactoryID"] != null)
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_catalog.dbo.Factory.FactoryFullName FROM infiniu2_catalog.dbo.Factory WHERE infiniu2_catalog.dbo.Factory.FactoryID = " + PurchaseInvoiceDT.Rows[0]["FactoryID"],
                        ConnectionStrings.CatalogConnectionString))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);
                            PurchaseInvoiceDT.Rows[0]["FactoryFullName"] = DT.Rows[0]["FactoryFullName"];
                            PurchaseInvoiceDT.Columns.Remove("FactoryID");
                        }
                    }
                if (PurchaseInvoiceDT.Rows[0]["MeasureID"] != null)
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_catalog.dbo.Measures.Measure FROM infiniu2_catalog.dbo.Measures WHERE infiniu2_catalog.dbo.Measures.MeasureID = " + PurchaseInvoiceDT.Rows[0]["MeasureID"],
                        ConnectionStrings.CatalogConnectionString))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);
                            PurchaseInvoiceDT.Rows[0]["Measure"] = DT.Rows[0]["Measure"];
                            PurchaseInvoiceDT.Columns.Remove("MeasureID");
                        }
                    }
                if (PurchaseInvoiceDT.Rows[0]["CurrencyTypeID"] != null)
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_catalog.dbo.CurrencyTypes.CurrencyType FROM infiniu2_catalog.dbo.CurrencyTypes WHERE infiniu2_catalog.dbo.CurrencyTypes.CurrencyTypeID = " + PurchaseInvoiceDT.Rows[0]["CurrencyTypeID"],
                        ConnectionStrings.CatalogConnectionString))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            DA.Fill(DT);
                            PurchaseInvoiceDT.Rows[0]["CurrencyType"] = DT.Rows[0]["CurrencyType"];
                            PurchaseInvoiceDT.Columns.Remove("CurrencyTypeID");
                        }
                    }

                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Length,Width,Height,Thickness,Diameter,Capacity,Weight,ColorID" +
                    " FROM infiniu2_storage.dbo.Store WHERE infiniu2_storage.dbo.Store.PurchaseInvoiceID = " + PurchaseInvoiceID.ToString(), ConnectionStrings.StorageConnectionString))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);
                        PurchaseInvoiceDTOption = DT.Copy();
                    }
                }

                if (PurchaseInvoiceDTOption.Rows[0]["Length"].ToString() != "")
                    PurchaseInvoiceDTOption.Columns["Length"].Caption = "Длина";
                else
                    PurchaseInvoiceDTOption.Columns.Remove("Length");

                if (PurchaseInvoiceDTOption.Rows[0]["Width"].ToString() != "")
                    PurchaseInvoiceDTOption.Columns["Width"].Caption = "Ширина";
                else
                    PurchaseInvoiceDTOption.Columns.Remove("Width");

                if (PurchaseInvoiceDTOption.Rows[0]["Height"].ToString() != "")
                    PurchaseInvoiceDTOption.Columns["Height"].Caption = "Высота";
                else
                    PurchaseInvoiceDTOption.Columns.Remove("Height");

                if (PurchaseInvoiceDTOption.Rows[0]["Thickness"].ToString() != "")
                    PurchaseInvoiceDTOption.Columns["Thickness"].Caption = "Толщина";
                else
                    PurchaseInvoiceDTOption.Columns.Remove("Thickness");

                if (PurchaseInvoiceDTOption.Rows[0]["Diameter"].ToString() != "")
                    PurchaseInvoiceDTOption.Columns["Diameter"].Caption = "Диаметр";
                else
                    PurchaseInvoiceDTOption.Columns.Remove("Diameter");

                if (PurchaseInvoiceDTOption.Rows[0]["Capacity"].ToString() != "")
                    PurchaseInvoiceDTOption.Columns["Capacity"].Caption = "Объём";
                else
                    PurchaseInvoiceDTOption.Columns.Remove("Capacity");

                if (PurchaseInvoiceDTOption.Rows[0]["Weight"].ToString() != "")
                    PurchaseInvoiceDTOption.Columns["Weight"].Caption = "Вес";
                else
                    PurchaseInvoiceDTOption.Columns.Remove("Weight");

                if (PurchaseInvoiceDTOption.Rows[0]["ColorID"].ToString() != "")
                {
                    using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_catalog.dbo.Colors.ColorName FROM infiniu2_catalog.dbo.Colors WHERE infiniu2_catalog.dbo.Colors.ColorID = " + PurchaseInvoiceDTOption.Rows[0]["ColorID"],
                            ConnectionStrings.CatalogConnectionString))
                    {
                        using (DataTable DT = new DataTable())
                        {
                            PurchaseInvoiceDTOption.Columns.Add("ColorName");
                            DA.Fill(DT);
                            PurchaseInvoiceDTOption.Rows[0]["ColorName"] = DT.Rows[0]["ColorName"];
                            PurchaseInvoiceDTOption.Columns["ColorName"].Caption = "Цвет";
                        }
                    }
                }

                PurchaseInvoiceDTOption.Columns.Remove("ColorID");

                if (Ex != null)
                {
                    Ex.Dispose();
                    Ex = null;
                }
                Ex = new Excel();
                Ex.NewDocument(1);
                Ex.SetMargins(1, 20, 0, 50, 0);
                Ex.WriteCell(1, "Приходная накладная № " + PurchaseInvoiceDT.Rows[0]["PurchaseInvoiceID"] + " от " + ((DateTime)PurchaseInvoiceDT.Rows[0]["IncomeDate"]).ToShortDateString(), 1, 5, 12, true);
                /* Ex.WriteCell(1, "№", 1, 2, 12, true);
                 Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["PurchaseInvoiceID"], 1, 3, 12, false);
                 Ex.WriteCell(1, "от", 1, 4, 12, true);
                 Ex.WriteCell(1, ((DateTime)PurchaseInvoiceDT.Rows[0]["IncomeDate"]).ToShortDateString(), 1, 5, 12, false);
                 */
                Ex.WriteCell(1, "Поставщик: " + PurchaseInvoiceDT.Rows[0]["SellerName"], 2, 1, 12, false);
                //Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["SellerName"], 2, 2, 12, false);
                Ex.WriteCell(1, "Получатель: " + PurchaseInvoiceDT.Rows[0]["FactoryFullName"], 3, 1, 12, false);
                // Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["FactoryFullName"], 3, 2, 12, false);
                Ex.WriteCell(1, "Основание: " + PurchaseInvoiceDT.Rows[0]["Reason"], 4, 1, 12, false);
                // Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["Reason"], 4, 2, 12, false);
                Ex.WriteCell(1, "№", 5, 1, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceID, 6, 1, 12, false);
                Ex.WriteCell(1, "Наименование", 5, 2, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["ItemName"], 6, 2, 12, false);
                Ex.WriteCell(1, "Код\n\rпоставщика", 5, 3, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["SellerCode"], 6, 3, 12, false);
                Ex.WriteCell(1, "Ед. изм.", 5, 4, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["Measure"], 6, 4, 12, false);
                int count = PurchaseInvoiceDTOption.Columns.Count;
                for (int i = 0; i < count; i++)
                {
                    Ex.WriteCell(1, PurchaseInvoiceDTOption.Columns[i].Caption, 5, 5 + i, 12, false);
                    Ex.WriteCell(1, PurchaseInvoiceDTOption.Rows[0][i], 6, 5 + i, 12, false);
                }

                Ex.WriteCell(1, "Кол-во", 5, 5 + count, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["InvoiceCount"], 6, 5 + count, 12, false);
                Ex.WriteCell(1, "Цена", 5, 6 + count, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["Price"], 6, 6 + count, 12, false);
                Ex.WriteCell(1, "Сумма", 5, 7 + count, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["Cost"], 6, 7 + count, 12, false);
                Ex.WriteCell(1, "НДС", 5, 8 + count, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["VAT"], 6, 8 + count, 12, false);
                Ex.WriteCell(1, "Сумма с НДС", 5, 9 + count, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["VATCost"], 6, 9 + count, 12, false);
                Ex.WriteCell(1, "Валюта", 5, 10 + count, 12, false);
                Ex.WriteCell(1, PurchaseInvoiceDT.Rows[0]["CurrencyType"], 6, 10 + count, 12, false);

                Ex.AutoFit(1, 5, 1, 6, 10 + count);
                for (int i = 1; i < 11 + count; i++)
                {
                    Ex.SetBorderStyle(1, 5, i, true, true, true, true, Excel.LineStyle.xlContinuous, Excel.BorderWeight.xlThin);
                    Ex.SetBorderStyle(1, 6, i, true, true, false, true, Excel.LineStyle.xlContinuous, Excel.BorderWeight.xlThin);
                }
                Ex.Visible = true;
            }
        }
    }





    public class Barcode
    {
        BarcodeLib.Barcode Barcod;

        SolidBrush FontBrush;

        public enum BarcodeLength { Short, Medium, Long };

        public Barcode()
        {
            Barcod = new BarcodeLib.Barcode();

            FontBrush = new System.Drawing.SolidBrush(Color.Black);
        }

        public void DrawBarcodeText(BarcodeLength BarcodeLength, Graphics Graphics, string Text, int X, int Y)
        {
            int CharOffset = 0;
            int CharWidth = 0;
            float FontSize = 0;

            if (BarcodeLength == Barcode.BarcodeLength.Short)
            {
                CharWidth = 8;
                CharOffset = 7;
                FontSize = 8.0f;
            }
            if (BarcodeLength == Barcode.BarcodeLength.Medium)
            {
                CharWidth = 18;
                CharOffset = 5;
                FontSize = 12.0f;
            }
            if (BarcodeLength == Barcode.BarcodeLength.Long)
            {
                CharWidth = 26;
                CharOffset = 5;
                FontSize = 14.0f;
            }

            Font F = new Font("Arial", FontSize, FontStyle.Bold);

            for (int i = 0; i < Text.Length; i++)
            {
                Graphics.DrawString(Text[i].ToString(), F, FontBrush, i * CharWidth + CharOffset + X, Y + 2);
            }

            F.Dispose();
        }

        public Image GetBarcode(BarcodeLength BarcodeLength, int BarcodeHeight, string Text)
        {
            //set length and height
            if (BarcodeLength == Barcode.BarcodeLength.Short)
            {
                Barcod.Width = 61 + 12;
            }
            if (BarcodeLength == Barcode.BarcodeLength.Medium)
            {
                Barcod.Width = 122 + 12;
            }
            if (BarcodeLength == Barcode.BarcodeLength.Long)
            {
                Barcod.Width = 185;
            }

            Barcod.Height = BarcodeHeight;


            //create area
            Bitmap B = new Bitmap(Barcod.Width, BarcodeHeight);
            Graphics G = Graphics.FromImage(B);
            G.Clear(Color.White);


            //create barcode
            Image Bar = Barcod.Encode(BarcodeLib.TYPE.CODE128C, Text);
            G.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.NearestNeighbor;
            G.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
            G.DrawImage(Bar, 0, 2);


            //create text
            G.TextRenderingHint = System.Drawing.Text.TextRenderingHint.SingleBitPerPixelGridFit;


            Bar.Dispose();
            G.Dispose();

            GC.Collect();

            return B;
        }
    }






    public class ConnectUnloads
    {
        public DataTable StoreDataTable;
        public BindingSource StoreBindingSource;
        SqlDataAdapter StoreDA;
        SqlCommandBuilder StoreCB;

        public ConnectUnloads()
        {
            CreateAndFill();
            Binding();
        }

        private void CreateAndFill()
        {
            StoreDataTable = new DataTable();
            StoreDA = new SqlDataAdapter("SELECT TOP 0 * FROM Goods", ConnectionStrings.LightConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDA.Fill(StoreDataTable);
        }

        private void Binding()
        {
            StoreBindingSource = new BindingSource() { DataSource = StoreDataTable };
        }

        public DataTable TableUsers()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT UserID, Name FROM Users  WHERE Fired <> 1 ORDER BY Name", ConnectionStrings.UsersConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return DT;
                }
            }
        }

        public DataTable TableCurrency()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT CurrencyTypeID, CurrencyType FROM CurrencyTypes", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return DT;
                }
            }
        }

        public DataTable TableMeasures()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MeasureID, Measure FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    return DT;
                }
            }
        }

        public void AddGoods(string SubjectName, int Count, string Cost, string MeasureID, string CurrencyTypeID)
        {
            DataRow NewRow = StoreDataTable.NewRow();
            NewRow["SubjectName"] = SubjectName;
            NewRow["Count"] = Count;
            NewRow["MeasureID"] = MeasureID;
            NewRow["Cost"] = Cost;
            NewRow["CurrencyTypeID"] = CurrencyTypeID;
            StoreDataTable.Rows.Add(NewRow);
        }

        public void SaveGoods(int UnloadID)
        {
            for (int i = 0; i < StoreDataTable.Rows.Count; i++)
                StoreDataTable.Rows[i]["UnloadID"] = UnloadID;
            StoreDA.Update(StoreDataTable);
        }

        public void Save(bool User, int UserID, string UserName, bool CheckedDate, DateTime dataTime, string Notes)
        {
            int UnloadID;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Unloads", ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        DataRow NewRow = DT.NewRow();
                        NewRow["ResponsibleUserID"] = Security.CurrentUserID;
                        if (User)
                            NewRow["UserID"] = UserID;

                        NewRow["UserName"] = UserName;

                        NewRow["NeedReturnObject"] = false;
                        NewRow["OutObject"] = false;

                        if (CheckedDate)
                        {
                            NewRow["UnloadDateTime"] = dataTime.Date;
                            NewRow["NeedReturnObject"] = true;
                        }

                        NewRow["Notes"] = Notes;
                        NewRow["ReturnObject"] = false;

                        DT.Rows.Add(NewRow);

                        DA.Update(DT);
                        DT.Clear();
                        DA.Fill(DT);
                        UnloadID = Convert.ToInt32(DT.Rows[DT.Rows.Count - 1]["UnloadID"]);
                    }
                }
            }

            SaveGoods(UnloadID);
        }
    }






    public class ViewConnectUnloads
    {
        public DataGridView UnloadDataGrid, GoodGrid;
        DataTable Good;


        public ViewConnectUnloads(ref PercentageDataGrid tUnloadDataGrid, ref PercentageDataGrid tGoodGrid)
        {
            UnloadDataGrid = tUnloadDataGrid;
            GoodGrid = tGoodGrid;
            CreateAndFill();
            Good = new DataTable();
            UpdateGood("0");
            GoodGrid.DataSource = Good;
        }

        public void UpdateGood(string UnloadID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Goods WHERE UnloadID = " + UnloadID, ConnectionStrings.LightConnectionString))
            {
                Good.Clear();
                DA.Fill(Good);
            }
        }

        public void CreateAndFill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Unloads ORDER BY UnloadID DESC", ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);
                        UnloadDataGrid.DataSource = DT;
                    }
                }
            }
        }

        public void ToExcel(int UnloadID)
        {
            Int64 Number = 8000000000;
            Excel Ex = new Excel();
            Ex.NewDocument(1);

            Ex.WriteCell(1, "№ накладной:", 1, 1, 12, true);
            Ex.WriteCell(1, "ФИО:", 2, 1, 12, true);
            Ex.WriteCell(1, "Ответственный:", 3, 1, 12, true);
            Ex.WriteCell(1, "Дата возврата:", 4, 1, 12, true);
            Ex.WriteCell(1, "Примечание:", 5, 1, 12, true);
            Ex.WriteCell(1, UnloadDataGrid.SelectedRows[0].Cells["UnloadID"].Value, 1, 2, 12, false);
            Ex.WriteCell(1, UnloadDataGrid.SelectedRows[0].Cells["UserName"].Value, 2, 2, 12, false);
            Ex.WriteCell(1, UnloadDataGrid.SelectedRows[0].Cells["ResponsibleUser"].FormattedValue, 3, 2, 12, false);
            if (UnloadDataGrid.SelectedRows[0].Cells["UnloadDateTime"].Value.ToString() == "")
            {
                Ex.WriteCell(1, "Без возврата", 4, 2, 12, false);
            }
            else
                Ex.WriteCell(1, ((DateTime)UnloadDataGrid.SelectedRows[0].Cells["UnloadDateTime"].Value).ToString("dd.MM.yyyy"), 4, 2, 12, false);
            Ex.WriteCell(1, UnloadDataGrid.SelectedRows[0].Cells["Notes"].Value, 5, 2, 12, false);


            Ex.WriteCell(1, "Наименование", 7, 1, 12, true);
            Ex.WriteCell(1, "Кол-во", 7, 2, 12, true);
            Ex.WriteCell(1, "", 7, 3, 12, true);
            Ex.WriteCell(1, "Цена", 7, 4, 12, true);
            Ex.WriteCell(1, "Валюта", 7, 5, 12, true);

            for (int i = 1; i <= GoodGrid.Rows.Count; i++)
            {
                for (int j = 1; j <= GoodGrid.Columns.Count - 4; j++)
                {
                    Ex.SetBorderStyle(1, 7 + i, j, true, true, true, true, Excel.LineStyle.xlContinuous, Excel.BorderWeight.xlThin);
                }

                Ex.WriteCell(1, GoodGrid.Rows[i - 1].Cells["SubjectName"].Value.ToString(), 7 + i, 1, 12, false);
                Ex.SetWrapText(1, 7 + i, 1, true);

                if (Ex.GetRowHeight(1, 7 + i) > 15.75M)
                {
                    Ex.SetRowHeight(1, 7 + i, Convert.ToDouble(Ex.GetRowHeight(1, 7 + i) / 2));
                    Ex.SetRowHeight(1, 7 + i, Convert.ToDouble(Ex.GetRowHeight(1, 7 + i)) + 15.75 - Convert.ToDouble(Ex.GetRowHeight(1, 7 + i)) % 15.75);
                }
                Ex.SetVerticalAlignment(1, 7 + i, 1, Excel.AlignVertical.xlTop);
                Ex.WriteCell(1, GoodGrid.Rows[i - 1].Cells["Count"].Value, 7 + i, 2, 12, false);
                Ex.SetVerticalAlignment(1, 7 + i, 2, Excel.AlignVertical.xlTop);
                Ex.WriteCell(1, GoodGrid.Rows[i - 1].Cells["Measure"].FormattedValue, 7 + i, 3, 12, false);
                Ex.SetVerticalAlignment(1, 7 + i, 3, Excel.AlignVertical.xlTop);
                Ex.WriteCell(1, GoodGrid.Rows[i - 1].Cells["Cost"].Value, 7 + i, 4, 12, false);
                Ex.SetVerticalAlignment(1, 7 + i, 4, Excel.AlignVertical.xlTop);
                Ex.WriteCell(1, GoodGrid.Rows[i - 1].Cells["CurrencyType"].FormattedValue, 7 + i, 5, 12, false);
                Ex.SetVerticalAlignment(1, 7 + i, 5, Excel.AlignVertical.xlTop);

                Number += UnloadID;
                Barcode Barcode = new Barcode();
                Image Bar = Barcode.GetBarcode(Infinium.Store.Barcode.BarcodeLength.Long + 50, 120, "00" + Number.ToString());
                Barcode = null;
                Ex.AddBarcode(Bar, 1, "F");
                Ex.WriteCell(1, "00" + Number.ToString(), 4, 6, 12, true);
            }

            Ex.AutoFit(1, 3, 1, 3, 1);
            Ex.SetColumnWidth(1, 2, 15);
            Ex.SetColumnWidth(1, 4, 15);

            Ex.Visible = true;
        }

        public void ReturnObject(string ReturnNotes)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Unloads WHERE UnloadID =" + UnloadDataGrid.SelectedRows[0].Cells["UnloadID"].Value.ToString(), ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        DT.Rows[0]["OrderedDateTime"] = Security.GetCurrentDate().Date;
                        DT.Rows[0]["FactReturnDateTime"] = Security.GetCurrentDate().Date;
                        DT.Rows[0]["ReturnObject"] = true;
                        DT.Rows[0]["ReturnNotes"] = ReturnNotes;

                        DA.Update(DT);
                    }
                }
            }
        }

        public void DeleteObject()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Unloads WHERE UnloadID =" + UnloadDataGrid.SelectedRows[0].Cells["UnloadID"].Value.ToString(), ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);
                        DT.Rows[0].Delete();
                        DA.Update(DT);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Goods WHERE UnloadID =" + UnloadDataGrid.SelectedRows[0].Cells["UnloadID"].Value.ToString(), ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);
                        for (int i = 0; i < DT.Rows.Count; i++)
                            DT.Rows[i].Delete();
                        DA.Update(DT);
                    }
                }
            }

            Good.Clear();
        }
    }












    public class PersonalInventoryManager
    {
        int iInventoryID = -1;
        int iFactoryID = -1;
        int iPersonID = -1;
        int Month = 0;
        int Year = 0;
        DateTime InventoryDate;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;
        private DataTable PatinaRALDataTable = null;
        DataTable InventoryDT;
        DataTable InventoryDetailsDT;

        BindingSource StoreBS;
        BindingSource SubGroupsBS;
        BindingSource GroupsBS;

        SqlDataAdapter InventoryDA;
        SqlDataAdapter StoreDA;
        SqlCommandBuilder InventoryCB;
        SqlCommandBuilder StoreCB;

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = new DataView(ColorsDT),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = new DataView(PatinaDT),
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public int CurrentInventoryID
        {
            get { return iInventoryID; }
            set { iInventoryID = value; }
        }

        public int CurrentFactoryID
        {
            get { return iFactoryID; }
            set { iFactoryID = value; }
        }

        public int CurrentPersonID
        {
            get { return iPersonID; }
            set { iPersonID = value; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public BindingSource GroupsList
        {
            get { return GroupsBS; }
        }

        public PersonalInventoryManager(int iMonth, int iYear)
        {
            Month = iMonth;
            Year = iYear;

            InventoryDate = new DateTime(Year, Month, 1);
            //InventoryDate = Security.GetCurrentDate().AddMonths(-1);
        }

        public void Initialize()
        {
            Create();
            Fill();
            CreateCoversDT();
            Binding();
        }

        private void Create()
        {
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
            StoreGroupsDT = new DataTable();
            InventoryDT = new DataTable();
            InventoryDetailsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM TechStoreSubGroups", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }

            InventoryDA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                    " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString);
            InventoryCB = new SqlCommandBuilder(InventoryDA);
            InventoryDA.Fill(InventoryDT);

            if (InventoryDT.Rows.Count > 0)
                iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PersonalInventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InventoryDetailsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE infiniu2_storage.dbo.PersonalStore.FactoryID = " + iFactoryID + " AND infiniu2_storage.dbo.PersonalStore.PersonalStoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.PersonalInventoryDetails WHERE InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + "))))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }

            StoreDA = new SqlDataAdapter("SELECT TOP 0 PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode, infiniu2_catalog.dbo.TechStore.MeasureID," +
                " PersonalInventoryDetails.StartMonthCount, PersonalInventoryDetails.EndMonthCount, PersonalInventoryDetails.Notes AS InvNotes FROM PersonalStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN PersonalInventoryDetails ON (PersonalStore.PersonalStoreID = PersonalInventoryDetails.StoreID AND PersonalInventoryDetails.InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + ")" +
                " WHERE PersonalStore.FactoryID = " + iFactoryID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDT.Clear();
            StoreDA.Fill(StoreDT);

            //StoreDT.Columns.Add(new DataColumn("checkboxHeader", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("EditEnd", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["PersonalStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        public void Binding()
        {
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = StoreSubGroupsDT
            };
            GroupsBS = new BindingSource()
            {
                DataSource = StoreGroupsDT
            };
        }

        #region Get fuctions

        public decimal StoreItemCurrentCount
        {
            get
            {
                decimal Count = 0;

                if (StoreBS.Count > 0)
                    Count = Convert.ToDecimal(((DataRowView)StoreBS.Current).Row["EndMonthCount"]);

                return Count;
            }
        }

        public int StoreCount
        {
            get
            {
                int Count = 0;
                if (StoreBS != null)
                {
                    Count = StoreBS.Count;
                }
                return Count;
            }
        }

        #endregion

        public void FilterStoreSubGroups(int StoreGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups WHERE TechStoreGroupID = " + StoreGroupID + " AND TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE infiniu2_storage.dbo.PersonalStore.FactoryID = " + iFactoryID + " AND infiniu2_storage.dbo.PersonalStore.PersonalStoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.PersonalInventoryDetails WHERE InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + ")))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                StoreSubGroupsDT.Clear();
                DA.Fill(StoreSubGroupsDT);
            }
            SubGroupsBS.MoveFirst();
        }

        public void FilterStore(int TechStoreSubGroupID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode, infiniu2_catalog.dbo.TechStore.MeasureID," +
                " PersonalInventoryDetails.StartMonthCount, PersonalInventoryDetails.EndMonthCount, PersonalInventoryDetails.Notes AS InvNotes FROM PersonalStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN PersonalInventoryDetails ON (PersonalStore.PersonalStoreID = PersonalInventoryDetails.StoreID AND PersonalInventoryDetails.InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + ")" +
                " WHERE FactoryID = " + iFactoryID + " AND PersonalStore.StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore" +
                " WHERE TechStoreSubGroupID = " + TechStoreSubGroupID +
                ") ORDER BY TechStoreName",
                ConnectionStrings.StorageConnectionString))
            {
                StoreDT.Clear();
                DA.Fill(StoreDT);
            }
            StoreBS.Sort = "StoreItemColumn, Diameter, Capacity, Thickness, Length, Height, Width, Admission, CoverID, PatinaID, ColorID";
            StoreBS.MoveFirst();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(StoreDT.Rows[i]["PersonalStoreID"]);
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + StoreID);
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }
        }

        /// <summary>
        /// Возвращает true, если на этот месяца инв. ведомость уже создана
        /// </summary>
        /// <returns></returns>
        public bool ExistInventoryDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        /// <summary>
        /// Находим инв. опись на текущий месяц. Если еще не создана, то создаем и сохраняем здесь
        /// </summary>
        public void CreateMonthInventory()
        {
            AddInventory();
            SaveInventory();
            iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);
        }

        public void CreateMonthInventoryDetails()
        {
            DateTime CreateDateTime = Security.GetCurrentDate();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PersonalInventoryDetails.*, PersonalStore.CurrentCount AS SCount FROM PersonalInventoryDetails" +
                " LEFT JOIN PersonalStore ON PersonalInventoryDetails.StoreID = PersonalStore.PersonalStoreID" +
                " WHERE EndMonthCount > 0 AND InventoryID = (SELECT InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        if (Convert.ToDecimal(DT.Rows[i]["StartMonthCount"]) == 0 && (Convert.ToDecimal(DT.Rows[i]["EndMonthCount"]) == 0))
                            continue;

                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["StoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = DT.Rows[i]["StoreID"];
                        NewRow["StartMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["EndMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["CreateDateTime"] = CreateDateTime;
                        NewRow["UserID"] = Security.CurrentUserID;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PersonalStoreID, MovementInvoiceID, InvoiceCount, CurrentCount FROM PersonalStore" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["PersonalStoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = Convert.ToInt32(DT.Rows[i]["PersonalStoreID"]);
                        NewRow["StartMonthCount"] = 0;
                        NewRow["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["InvoiceCount"]);
                        NewRow["CreateDateTime"] = CreateDateTime;
                        NewRow["UserID"] = Security.CurrentUserID;
                        NewRow["PersonID"] = iPersonID;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PersonalStoreID, DecorAssignmentID, InvoiceCount, CurrentCount FROM PersonalStore" +
                " WHERE DecorAssignmentID IS NOT NULL AND DATEPART(month, CreateDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, CreateDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["PersonalStoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = Convert.ToInt32(DT.Rows[i]["PersonalStoreID"]);
                        NewRow["StartMonthCount"] = 0;
                        NewRow["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["InvoiceCount"]);
                        NewRow["CreateDateTime"] = CreateDateTime;
                        NewRow["UserID"] = Security.CurrentUserID;
                        NewRow["PersonID"] = iPersonID;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PersonalInventoryDetails" +
                    " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public bool InventoryExist(int Month, int Year)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = " + Month +
                " AND DATEPART(year, InventoryDateTime) = " + Year,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void AddInventory()
        {
            DataRow NewRow = InventoryDT.NewRow();
            NewRow["InventoryDateTime"] = InventoryDate;
            NewRow["DateTime"] = Security.GetCurrentDate();
            NewRow["Name"] = InventoryDate.ToString("MMMM", CultureInfo.CurrentCulture);
            InventoryDT.Rows.Add(NewRow);
        }

        public void AddInventoryDetail(
            DateTime CreateDateTime,
            int InventoryID,
            int StoreID,
            decimal StartMonthCount,
            decimal EndMonthCount,
            int UserID,
            string Notes)
        {
            DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                Rows[0]["EndMonthCount"] = EndMonthCount;
                Rows[0]["ConfirmDetail"] = 1;
                Rows[0]["UserID"] = UserID;
                if (Notes.Length > 0)
                    Rows[0]["Notes"] = Notes;
            }
            else
            {
                DataRow NewRow = InventoryDetailsDT.NewRow();
                if (InventoryDetailsDT.Columns.Contains("CreateDateTime"))
                    NewRow["CreateDateTime"] = CreateDateTime;
                if (InventoryDetailsDT.Columns.Contains("ConfirmDateTime"))
                    NewRow["ConfirmDateTime"] = CreateDateTime;
                NewRow["InventoryID"] = InventoryID;
                NewRow["StoreID"] = StoreID;
                NewRow["StartMonthCount"] = StartMonthCount;
                NewRow["EndMonthCount"] = EndMonthCount;
                NewRow["ConfirmDetail"] = 1;
                NewRow["UserID"] = UserID;
                NewRow["PersonID"] = iPersonID;
                if (Notes.Length > 0)
                    NewRow["Notes"] = Notes;
                InventoryDetailsDT.Rows.Add(NewRow);
            }
        }

        public void ChangeCurrentFields(decimal EndMonthCount, string Notes)
        {
            ((DataRowView)StoreBS.Current).Row["CurrentCount"] = EndMonthCount;
            ((DataRowView)StoreBS.Current).Row["EndMonthCount"] = EndMonthCount;
            ((DataRowView)StoreBS.Current).Row["InvNotes"] = Notes;
        }

        public void InventaryEndEdit(bool EditEnd)
        {
            ((DataRowView)StoreBS.Current).Row["EditEnd"] = EditEnd;
        }

        public bool CheckFactCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("PersonalStoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(Rows[0]["EndMonthCount"]);
                return (StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount) != EndMonthCount;
            }
            return false;
        }

        public void GetGGG()
        {
            DataTable DT = StoreDT.Clone();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                if ((StartMonthCount + ArrivalMonthCount) < ExpenseMonthCount)
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow.ItemArray = StoreDT.Rows[i].ItemArray;
                    DT.Rows.Add(NewRow);
                }
            }
        }

        public decimal PlaningEndCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("PersonalStoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                return StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount;
            }
            return 0;
        }

        public void SaveInventory()
        {
            try
            {
                InventoryDA.Update(InventoryDT);
                InventoryDT.Clear();
                InventoryDA.Fill(InventoryDT);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveInventoryDetails(int InventoryID)
        {
            DateTime CurrentDate = Security.GetCurrentDate();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                if (Convert.ToBoolean(StoreDT.Rows[i]["EditEnd"]))
                {
                    DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["PersonalStoreID"]));
                    if (Rows.Count() < 1)
                        AddInventoryDetail(
                            CurrentDate,
                            InventoryID,
                            Convert.ToInt32(StoreDT.Rows[i]["PersonalStoreID"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]),
                            Security.CurrentUserID,
                            string.Empty);
                    else
                        Rows[0]["ConfirmDetail"] = true;
                }
            }


            for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
            {
                DataRow[] Rows = StoreDT.Select("PersonalStoreID = " + Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]));
                if (Rows.Count() > 0)
                    InventoryDetailsDT.Rows[i]["ConfirmDetail"] = Convert.ToBoolean(Rows[0]["EditEnd"]);
            }

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PersonalInventoryDetails" +
                        " WHERE InventoryID = " + Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]), ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveStore()
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM PersonalStore", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        if (StoreDT.GetChanges() != null)
                        {
                            DataTable DT = StoreDT.GetChanges();
                            DA.Update(DT);
                            DT.Dispose();
                        }
                        //DA.Update(StoreDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void UpdateTables()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE infiniu2_storage.dbo.PersonalStore.FactoryID = " + iFactoryID + " AND infiniu2_storage.dbo.PersonalStore.PersonalStoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.PersonalInventoryDetails WHERE InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + "))))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                StoreGroupsDT.Clear();
                DA.Fill(StoreGroupsDT);
            }

            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PersonalInventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    InventoryDetailsDT.Clear();
                    DA.Fill(InventoryDetailsDT);
                }
            }
            StoreDA = new SqlDataAdapter("SELECT PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode, infiniu2_catalog.dbo.TechStore.MeasureID," +
                " PersonalInventoryDetails.StartMonthCount, PersonalInventoryDetails.EndMonthCount, PersonalInventoryDetails.Notes AS InvNotes FROM PersonalStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN PersonalInventoryDetails ON (PersonalStore.PersonalStoreID = PersonalInventoryDetails.StoreID AND PersonalInventoryDetails.InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + ")" +
                " WHERE PersonalStore.FactoryID = " + iFactoryID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["PersonalStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void RefreshStore()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN (SELECT TechStoreGroupID FROM TechStoreSubGroups WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.PersonalStore" +
                " WHERE infiniu2_storage.dbo.PersonalStore.FactoryID = " + iFactoryID + " AND infiniu2_storage.dbo.PersonalStore.PersonalStoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.PersonalInventoryDetails WHERE InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + "))))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                StoreGroupsDT.Clear();
                DA.Fill(StoreGroupsDT);
            }

            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PersonalInventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    InventoryDetailsDT.Clear();
                    DA.Fill(InventoryDetailsDT);
                }
            }
            StoreDA = new SqlDataAdapter("SELECT PersonalStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode, infiniu2_catalog.dbo.TechStore.MeasureID," +
                " PersonalInventoryDetails.StartMonthCount, PersonalInventoryDetails.EndMonthCount, PersonalInventoryDetails.Notes AS InvNotes FROM PersonalStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN PersonalInventoryDetails ON (PersonalStore.PersonalStoreID = PersonalInventoryDetails.StoreID AND PersonalInventoryDetails.InventoryID = " + iInventoryID + " AND PersonID = " + iPersonID + ")" +
                " WHERE PersonalStore.FactoryID = " + iFactoryID +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["PersonalStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
            //    " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
            //    " AND DATEPART(year, IncomeDate) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(PurchaseInvoicesDT);

            //    for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
            //    {
            //        PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

            //        DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
            //        foreach (DataRow Row in StoreRows)
            //        {
            //            MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
            //            Row["MonthInvoiceCount"] = MonthInvoiceCount;
            //        }
            //    }
            //}

            PurchaseInvoicesDT.Dispose();
            PurchaseInvoicesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["MovementInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("MovementInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]) != 0 && StoreDT.Rows[i]["CreateDateTime"] != DBNull.Value)
                {
                    DateTime dt = Convert.ToDateTime(StoreDT.Rows[i]["CreateDateTime"]);
                    if (dt.Year == InventoryDate.Year && dt.Month == InventoryDate.Month)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                        if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                            StoreDT.Rows[i]["MonthInvoiceCount"] = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) + MonthInvoiceCount;
                        else
                            StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                    //StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
                }
                //if (StoreDT.Rows[i]["DecorAssignmentID"] == DBNull.Value)
                //    continue;
                //int DecorAssignmentID = Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]);

                //MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                //StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
            }
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (9) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("PersonalStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (9) AND RecipientStoreAllocID NOT IN (12,13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("PersonalStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        private DataTable WriteOffTable
        {
            get
            {
                DataTable DT = new DataTable();
                DT.Columns.Add(new DataColumn("OrdinalNumber", Type.GetType("System.String")));
                DT.Columns.Add(new DataColumn("ItemName", Type.GetType("System.String")));
                DT.Columns.Add(new DataColumn("Measure", Type.GetType("System.String")));
                DT.Columns.Add(new DataColumn("Price", Type.GetType("System.Decimal")));
                DT.Columns.Add(new DataColumn("Count", Type.GetType("System.Decimal")));
                DT.Columns.Add(new DataColumn("Cost", Type.GetType("System.Decimal")));
                DT.Columns.Add(new DataColumn("Notes", Type.GetType("System.String")));

                int j = 0;
                for (int i = 0; i < StoreDT.Rows.Count; i++)
                {
                    decimal StartMonthCount = 0;
                    decimal ArrivalMonthCount = 0;
                    decimal ExpenseMonthCount = 0;
                    decimal SellingMonthCount = 0;
                    decimal EndMonthCount = 0;
                    decimal count = 0;

                    int StoreItemID = -1;
                    decimal Length = -1;
                    decimal Width = -1;
                    decimal Height = -1;
                    decimal Thickness = -1;
                    decimal Diameter = -1;
                    decimal Admission = -1;
                    decimal Capacity = -1;
                    decimal Weight = -1;

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        ArrivalMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);

                    if (StoreDT.Rows[i]["StoreItemID"] != DBNull.Value)
                        StoreItemID = Convert.ToInt32(StoreDT.Rows[i]["StoreItemID"]);
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    if (StoreDT.Rows[i]["Height"] != DBNull.Value)
                        Height = Convert.ToDecimal(StoreDT.Rows[i]["Height"]);
                    if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                        Thickness = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                    if (StoreDT.Rows[i]["Diameter"] != DBNull.Value)
                        Diameter = Convert.ToDecimal(StoreDT.Rows[i]["Diameter"]);
                    if (StoreDT.Rows[i]["Admission"] != DBNull.Value)
                        Admission = Convert.ToDecimal(StoreDT.Rows[i]["Admission"]);
                    if (StoreDT.Rows[i]["Capacity"] != DBNull.Value)
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["Capacity"]);
                    if (StoreDT.Rows[i]["Weight"] != DBNull.Value)
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["Weight"]);

                    if ((StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount) > EndMonthCount)
                    {
                        DataRow NewRow = DT.NewRow();
                        NewRow["OrdinalNumber"] = ++j + ".";
                        NewRow["ItemName"] = StoreDT.Rows[i]["StoreItemColumn"];
                        switch (Convert.ToInt32(StoreDT.Rows[i]["MeasureID"]))
                        {
                            case 1:
                                NewRow["Measure"] = "м.кв.";
                                break;
                            case 2:
                                NewRow["Measure"] = "м.п.";
                                break;
                            case 3:
                                NewRow["Measure"] = "шт.";
                                break;
                            case 4:
                                NewRow["Measure"] = "кг.";
                                break;
                            case 5:
                                NewRow["Measure"] = "л.";
                                break;
                            case 6:
                                NewRow["Measure"] = "м.куб.";
                                break;
                            case 7:
                                NewRow["Measure"] = "тыс.шт.";
                                break;
                            case 8:
                                NewRow["Measure"] = "час";
                                break;
                            default:
                                break;
                        }
                        count = StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount - EndMonthCount;
                        NewRow["Price"] = Convert.ToDecimal(StoreDT.Rows[i]["Price"]);
                        NewRow["Count"] = count;
                        NewRow["Cost"] = GetCost(StoreItemID, Thickness, Length, Width, Height, Diameter, Capacity, Weight, Convert.ToDecimal(StoreDT.Rows[i]["Price"]), count);
                        NewRow["Notes"] = StoreDT.Rows[i]["InvNotes"];
                        DT.Rows.Add(NewRow);
                    }
                }
                return DT;
            }
        }

        public void InventoryReport2(string InventoryName, DateTime DateTime, string User1, string User2, string User3, string User4, string User5)
        {
            DataTable DT = WriteOffTable;
            int FactoryID = 1;
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = 0;
            int RowIndex = 1;

            #region Create fonts and styles

            HSSFFont DocHeaderFont = hssfworkbook.CreateFont();
            DocHeaderFont.FontHeightInPoints = 12;
            DocHeaderFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            DocHeaderFont.FontName = "Times New Roman";

            HSSFFont DocSimpleFont = hssfworkbook.CreateFont();
            DocSimpleFont.FontHeightInPoints = 12;
            DocSimpleFont.FontName = "Times New Roman";

            HSSFFont TableHeaderFont = hssfworkbook.CreateFont();
            TableHeaderFont.FontHeightInPoints = 10;
            TableHeaderFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            //TableHeaderFont.Boldweight = 10 * 256;
            TableHeaderFont.FontName = "Times New Roman";

            HSSFFont TableSimpleFont = hssfworkbook.CreateFont();
            TableSimpleFont.FontHeightInPoints = 10;
            TableSimpleFont.FontName = "Times New Roman";

            HSSFCellStyle DocHeaderStyle = hssfworkbook.CreateCellStyle();
            DocHeaderStyle.SetFont(DocHeaderFont);

            HSSFCellStyle DocSimpleStyle = hssfworkbook.CreateCellStyle();
            DocSimpleStyle.SetFont(DocSimpleFont);

            HSSFCellStyle DocJustifyStyle = hssfworkbook.CreateCellStyle();
            DocJustifyStyle.Alignment = HSSFCellStyle.ALIGN_JUSTIFY;
            DocJustifyStyle.SetFont(DocSimpleFont);

            HSSFCellStyle TableHeaderStyle = hssfworkbook.CreateCellStyle();
            TableHeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_TOP;
            TableHeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            TableHeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            TableHeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            TableHeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            TableHeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            TableHeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            TableHeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            TableHeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            TableHeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            TableHeaderStyle.WrapText = true;
            TableHeaderStyle.SetFont(TableHeaderFont);

            HSSFCellStyle OrdinalNumberCellStyle = hssfworkbook.CreateCellStyle();
            OrdinalNumberCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_TOP;
            OrdinalNumberCellStyle.Alignment = HSSFCellStyle.ALIGN_LEFT;
            OrdinalNumberCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            OrdinalNumberCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            OrdinalNumberCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            OrdinalNumberCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            OrdinalNumberCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            OrdinalNumberCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            OrdinalNumberCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            OrdinalNumberCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            OrdinalNumberCellStyle.WrapText = true;
            OrdinalNumberCellStyle.SetFont(TableSimpleFont);

            HSSFCellStyle ItemNameCellStyle = hssfworkbook.CreateCellStyle();
            ItemNameCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            ItemNameCellStyle.Alignment = HSSFCellStyle.ALIGN_LEFT;
            ItemNameCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            ItemNameCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            ItemNameCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            ItemNameCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            ItemNameCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            ItemNameCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            ItemNameCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            ItemNameCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            ItemNameCellStyle.WrapText = true;
            ItemNameCellStyle.SetFont(TableSimpleFont);

            HSSFCellStyle MeasureCellStyle = hssfworkbook.CreateCellStyle();
            MeasureCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            MeasureCellStyle.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            MeasureCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            MeasureCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            MeasureCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            MeasureCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            MeasureCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            MeasureCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            MeasureCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            MeasureCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            MeasureCellStyle.WrapText = true;
            MeasureCellStyle.SetFont(TableSimpleFont);

            HSSFCellStyle PriceCellStyle = hssfworkbook.CreateCellStyle();
            PriceCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            PriceCellStyle.Alignment = HSSFCellStyle.ALIGN_RIGHT;
            PriceCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            PriceCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            PriceCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            PriceCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            PriceCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            PriceCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            PriceCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            PriceCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            PriceCellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
            PriceCellStyle.WrapText = true;
            PriceCellStyle.SetFont(TableSimpleFont);

            HSSFCellStyle NotesCellStyle = hssfworkbook.CreateCellStyle();
            NotesCellStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_TOP;
            NotesCellStyle.Alignment = HSSFCellStyle.ALIGN_LEFT;
            NotesCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            NotesCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            NotesCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            NotesCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            NotesCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            NotesCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            NotesCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            NotesCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            NotesCellStyle.WrapText = true;
            NotesCellStyle.SetFont(TableSimpleFont);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Акт списания");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            //sheet1.PrintSetup.Landscape = true;

            HSSFCell c = sheet1.CreateRow(RowIndex++).CreateCell(6);
            c.CellStyle = DocHeaderStyle;
            c.SetCellValue("УТВЕРЖДАЮ");
            if (FactoryID == 1)
            {
                c = sheet1.CreateRow(RowIndex++).CreateCell(5);
                c.CellStyle = DocHeaderStyle;
                c.SetCellValue("Директор С ООО \"ЗОВ-Профиль\"");
                c = sheet1.CreateRow(RowIndex++).CreateCell(5);
                c.CellStyle = DocHeaderStyle;
                c.SetCellValue("_____________________Ф.А. Авдей");
            }
            if (FactoryID == 2)
            {
                c = sheet1.CreateRow(RowIndex++).CreateCell(5);
                c.CellStyle = DocHeaderStyle;
                c.SetCellValue("Директор С ООО \"ЗОВ-ТПС\"");
                c = sheet1.CreateRow(RowIndex++).CreateCell(5);
                c.CellStyle = DocHeaderStyle;
                c.SetCellValue("_____________________М.А. Авдей");
            }
            c = sheet1.CreateRow(RowIndex++).CreateCell(5);
            c.CellStyle = DocHeaderStyle;
            c.SetCellValue("\"_____\"___________________" + DateTime.Now.Year.ToString() + " г.");

            c = sheet1.CreateRow(++RowIndex).CreateCell(4);
            c.CellStyle = DocHeaderStyle;
            c.SetCellValue("АКТ");
            RowIndex++;
            RowIndex++;

            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     " + DateTime.ToString("dd MMMM yyyy"));
            c = sheet1.CreateRow(RowIndex).CreateCell(6);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     " + "г. Гродно");
            RowIndex++;
            RowIndex++;

            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 1, 6));
            c = sheet1.CreateRow(RowIndex++).CreateCell(1);
            c.CellStyle = DocJustifyStyle;
            c.SetCellValue("     " + "    Мы нижеподписавшиеся, комиссия в составе: председатель комиссии заместитель");
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 1, 6));
            c = sheet1.CreateRow(RowIndex++).CreateCell(1);
            c.CellStyle = DocJustifyStyle;
            c.SetCellValue("     " + "директора – " + User1 + ", члены комиссии: главный технолог – " + User2 + ", начальник");
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 1, 6));
            c = sheet1.CreateRow(RowIndex++).CreateCell(1);
            c.CellStyle = DocJustifyStyle;
            c.SetCellValue("     " + "цеха – " + User3 + ", инженер-технолог – " + User4 + ", ведущий инженер-механика – ");
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 1, 6));
            c = sheet1.CreateRow(RowIndex++).CreateCell(1);
            c.CellStyle = DocJustifyStyle;
            c.SetCellValue("     " + User5 + " провели списание следующих материалов:");

            RowIndex++;

            sheet1.SetColumnWidth(0, 4 * 256);
            sheet1.SetColumnWidth(1, 27 * 256);
            sheet1.SetColumnWidth(2, 5 * 256);
            sheet1.SetColumnWidth(3, 10 * 256);
            sheet1.SetColumnWidth(4, 7 * 256);
            sheet1.SetColumnWidth(5, 10 * 256);
            sheet1.SetColumnWidth(6, 35 * 256);

            c = sheet1.CreateRow(RowIndex).CreateCell(0);
            c.CellStyle = TableHeaderStyle;
            c.SetCellValue("№ п.п.");
            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = TableHeaderStyle;
            c.SetCellValue("Наименование");
            c = sheet1.CreateRow(RowIndex).CreateCell(2);
            c.CellStyle = TableHeaderStyle;
            c.SetCellValue("Ед. изм.");
            c = sheet1.CreateRow(RowIndex).CreateCell(3);
            c.CellStyle = TableHeaderStyle;
            c.SetCellValue("Цена");
            c = sheet1.CreateRow(RowIndex).CreateCell(4);
            c.CellStyle = TableHeaderStyle;
            c.SetCellValue("Кол-во");
            c = sheet1.CreateRow(RowIndex).CreateCell(5);
            c.CellStyle = TableHeaderStyle;
            c.SetCellValue("Сумма");
            c = sheet1.CreateRow(RowIndex).CreateCell(6);
            c.CellStyle = TableHeaderStyle;
            c.SetCellValue("Примечание");

            for (int x = 0; x < DT.Rows.Count; x++)
            {
                for (int y = 0; y < DT.Columns.Count; y++)
                {
                    Type t = DT.Rows[x][y].GetType();
                    ColumnIndex = y;

                    if (DT.Columns[y].ColumnName == "OrdinalNumber")
                    {
                        HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = OrdinalNumberCellStyle;
                        continue;
                    }
                    if (DT.Columns[y].ColumnName == "ItemName")
                    {
                        HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = ItemNameCellStyle;
                        continue;
                    }

                    if (DT.Columns[y].ColumnName == "Measure")
                    {
                        HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = MeasureCellStyle;
                        continue;
                    }

                    if (DT.Columns[y].ColumnName == "Price" || DT.Columns[y].ColumnName == "Count" || DT.Columns[y].ColumnName == "Cost")
                    {
                        HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                        cell.SetCellValue(Convert.ToDouble(DT.Rows[x][y]));
                        cell.CellStyle = PriceCellStyle;
                        continue;
                    }
                    if (DT.Columns[y].ColumnName == "Notes")
                    {
                        HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                        cell.SetCellValue(DT.Rows[x][y].ToString());
                        cell.CellStyle = NotesCellStyle;
                        continue;
                    }
                }
                RowIndex++;
            }
            RowIndex++;

            int ItemCount = 0;
            string[] str = new string[3] { " наименование.", " наименования.", " наименований." };
            string suffix = " наименований.";

            if (DT.Rows.Count > 0)
            {
                string s = DT.Rows[DT.Rows.Count - 1]["OrdinalNumber"].ToString();
                int.TryParse(s.Substring(0, s.Length - 1), out ItemCount);
                suffix = GetSuffix(ItemCount, str);
            }

            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     Итого по акту " + ItemCount + suffix);

            RowIndex++;
            RowIndex++;

            c = sheet1.CreateRow(RowIndex++).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("         Председатель комиссии:");

            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     заместитель директора");
            c = sheet1.CreateRow(RowIndex++).CreateCell(6);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     " + "-" + User1);

            c = sheet1.CreateRow(RowIndex++).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("         Члены комиссии:");

            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     главный технолог");
            c = sheet1.CreateRow(RowIndex++).CreateCell(6);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     " + "-" + User2);

            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     начальник цеха");
            c = sheet1.CreateRow(RowIndex++).CreateCell(6);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     " + "-" + User3);

            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     инженер-технолог");
            c = sheet1.CreateRow(RowIndex++).CreateCell(6);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     " + "-" + User4);

            c = sheet1.CreateRow(RowIndex).CreateCell(1);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     ведущий инженер-механик");
            c = sheet1.CreateRow(RowIndex++).CreateCell(6);
            c.CellStyle = DocSimpleStyle;
            c.SetCellValue("     " + "-" + User5);


            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        private bool IsCoatingRoller(int StoreItemID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreSubGroups.TechStoreGroupID, TechStore.TechStoreSubGroupID, TechStore.TechStoreID FROM TechStore" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID AND TechStoreSubGroups.TechStoreGroupID = 11" +
                " WHERE (TechStore.TechStoreID = " + StoreItemID + ")",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        return true;

                }
            }
            return false;
        }

        public decimal GetCost(int StoreItemID, decimal Thickness,
            decimal Length, decimal Width, decimal Height,
            decimal Diameter, decimal Capacity, decimal Weight,
            decimal Price, decimal Count)
        {
            int MeasureID = 0;
            decimal Sum = 0;

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Thickness, Length, Width, Height," +
                " Diameter, Capacity, Weight, MeasureID FROM TechStore WHERE TechStoreID = " + StoreItemID,
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                    {
                        MeasureID = Convert.ToInt32(DT.Rows[0]["MeasureID"]);

                        //м.кв.
                        if (MeasureID == 1)
                        {
                            ///ВСТАВИТЬ АЛГОРИТМ ДЛЯ "ОБЛИЦОВКА РОЛИКИ"

                            if (IsCoatingRoller(StoreItemID))
                            {
                                if (Thickness < 0 && DT.Rows[0]["Thickness"] != DBNull.Value)
                                    Thickness = Convert.ToDecimal(DT.Rows[0]["Thickness"]);
                                if (Diameter < 0 && DT.Rows[0]["Diameter"] != DBNull.Value)
                                    Diameter = Convert.ToDecimal(DT.Rows[0]["Diameter"]);

                                decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);
                                Sum = Square * Count * Price / 1000000;
                            }
                            else
                            {
                                if (Length < 0 && DT.Rows[0]["Length"] != DBNull.Value)
                                    Length = Convert.ToDecimal(DT.Rows[0]["Length"]);
                                if (Width < 0 && DT.Rows[0]["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(DT.Rows[0]["Width"]);
                                if (Height < 0 && DT.Rows[0]["Height"] != DBNull.Value)
                                    Height = Convert.ToDecimal(DT.Rows[0]["Height"]);
                                if (Length > 0)
                                {
                                    if (Width > 0)
                                    { }
                                    else
                                    {
                                        if (Height > 0)
                                            Width = Height;
                                    }
                                }
                                else
                                {
                                    if (Height > 0)
                                        Length = Height;
                                }
                                Sum = Length * Width * Count * Price / 1000000;
                            }
                        }

                        //м.п.
                        if (MeasureID == 2)
                        {
                            Sum = Length * Count * Price / 1000;
                        }

                        //шт.
                        if (MeasureID == 3)
                        {
                            Sum = Count * Price;
                        }

                        //кг.
                        if (MeasureID == 4)
                        {
                            if (Weight < 0)
                            {
                                Weight = Convert.ToDecimal(DT.Rows[0]["Weight"]);
                            }
                            Sum = Weight * Count * Price;
                        }

                        //л.
                        if (MeasureID == 5)
                        {
                            if (Capacity < 0)
                            {
                                Capacity = Convert.ToDecimal(DT.Rows[0]["Capacity"]);
                            }
                            Sum = Capacity * Count * Price;
                        }

                        //м.куб.
                        if (MeasureID == 6)
                        {
                            if (Length < 0 && DT.Rows[0]["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(DT.Rows[0]["Length"]);
                            if (Width < 0 && DT.Rows[0]["Width"] != DBNull.Value)
                                Width = Convert.ToDecimal(DT.Rows[0]["Width"]);
                            if (Thickness < 0 && DT.Rows[0]["Thickness"] != DBNull.Value)
                                Thickness = Convert.ToDecimal(DT.Rows[0]["Thickness"]);
                            if (Height < 0 && DT.Rows[0]["Height"] != DBNull.Value)
                                Height = Convert.ToDecimal(DT.Rows[0]["Height"]);
                            if (Thickness < 0)
                                Sum = Length * Width * Height * Count * Price / 1000000000;
                            if (Height < 0)
                                Sum = Length * Width * Thickness * Count * Price / 1000000000;
                        }

                        //тыс.шт.
                        if (MeasureID == 7)
                        {
                            Sum = Count * Price;
                        }


                        Decimal.Round(Sum, 2, MidpointRounding.AwayFromZero);
                    }
                }
            }

            return Sum;
        }

        private static string GetSuffix(int ItemCount, string[] str)
        {
            int i = 0;
            string suffix = string.Empty;

            ItemCount = ItemCount % 100;
            if (ItemCount >= 11 && ItemCount <= 19)
            {
                suffix = str[2];
            }
            else
            {
                i = ItemCount % 10;
                switch (i)
                {
                    case (1): suffix = str[0]; break;
                    case (2):
                    case (3):
                    case (4): suffix = str[1]; break;
                    default: suffix = str[2]; break;
                }
            }
            return suffix;
        }
    }

    public class MainStoreInventoryManager
    {

        int iInventoryID = -1;
        int iStoreGroupID = -1;
        int iFactoryID = -1;
        int Month = 0;
        int Year = 0;
        DateTime InventoryDate;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreSubGroupsDT;
        DataTable InventoryDT;
        DataTable InventoryDetailsDT;
        private DataTable PatinaRALDataTable = null;

        BindingSource StoreBS;
        BindingSource SubGroupsBS;

        SqlDataAdapter InventoryDA;
        SqlDataAdapter StoreDA;
        SqlCommandBuilder InventoryCB;
        SqlCommandBuilder StoreCB;

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = new DataView(ColorsDT),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = new DataView(PatinaDT),
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public int CurrentInventoryID
        {
            get { return iInventoryID; }
            set { iInventoryID = value; }
        }

        public int CurrentStoreGroupID
        {
            get { return iStoreGroupID; }
            set { iStoreGroupID = value; }
        }

        public int CurrentFactoryID
        {
            get { return iFactoryID; }
            set { iFactoryID = value; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public MainStoreInventoryManager(int iMonth, int iYear)
        {
            Month = iMonth;
            Year = iYear;

            InventoryDate = new DateTime(Year, Month, 1);
            //InventoryDate = Security.GetCurrentDate().AddMonths(-1);
        }

        public void Initialize()
        {
            Create();
            Fill();
            CreateCoversDT();
            Binding();
        }

        private void Create()
        {
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
            InventoryDT = new DataTable();
            InventoryDetailsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store WHERE FactoryID = " + iFactoryID + "))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }

            InventoryDA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                    " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString);
            InventoryCB = new SqlCommandBuilder(InventoryDA);
            InventoryDA.Fill(InventoryDT);

            if (InventoryDT.Rows.Count > 0)
                iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM infiniu2_storage.dbo.InventoryDetails" +
                " WHERE StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN (SELECT TechStoreID FROM TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE " +
                "TechStoreGroupID= " + iStoreGroupID + "))) AND InventoryID = " + iInventoryID, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(InventoryDetailsDT);
            }

            StoreDA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " InventoryDetails.StartMonthCount, InventoryDetails.EndMonthCount, infiniu2_catalog.dbo.TechStore.Notes AS TechNotes, InventoryDetails.Notes AS InvNotes FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN InventoryDetails ON (Store.StoreID = InventoryDetails.StoreID AND NOT (ConfirmDetail=1 AND InventoryDetails.StartMonthCount=0 AND InventoryDetails.EndMonthCount=0) AND InventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ")" +
                " AND PurchaseInvoiceID NOT IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices WHERE CAST(IncomeDate AS DATE) >= '" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDT.Clear();
            StoreDA.Fill(StoreDT);

            //StoreDT.Columns.Add(new DataColumn("checkboxHeader", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("EditEnd", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["StoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        public void Binding()
        {
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = StoreSubGroupsDT
            };
        }

        #region Get fuctions

        public decimal StoreItemCurrentCount
        {
            get
            {
                decimal Count = 0;

                if (StoreBS.Count > 0)
                    Count = Convert.ToDecimal(((DataRowView)StoreBS.Current).Row["EndMonthCount"]);

                return Count;
            }
        }

        public int StoreCount
        {
            get
            {
                int Count = 0;
                if (StoreBS != null)
                {
                    Count = StoreBS.Count;
                }
                return Count;
            }
        }

        #endregion

        public void FilterStore(int TechStoreSubGroupID, bool EditEnd)
        {
            if (SubGroupsBS.Count < 1)
            {
                StoreBS.Filter = "StoreItemID = -1";
                return;
            }

            string FactoryFilter = string.Empty;
            ArrayList array = new ArrayList();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID FROM TechStore WHERE TechStoreSubGroupID = " + TechStoreSubGroupID, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        array.Add(Convert.ToInt32(DT.Rows[i]["TechStoreID"]));
                    }
                }
            }

            if (iFactoryID > 0)
                FactoryFilter = " AND FactoryID = " + iFactoryID;
            if (iFactoryID == -1)
                FactoryFilter = " AND FactoryID = -1";

            if (array.Count > 0)
            {
                if (EditEnd)
                    StoreBS.Filter = "EditEnd=0 AND StoreItemID IN (" + string.Join(",", array.OfType<int>().ToArray()) + ")" + FactoryFilter;
                else
                    StoreBS.Filter = "StoreItemID IN (" + string.Join(",", array.OfType<int>().ToArray()) + ")" + FactoryFilter;
            }
            else
                StoreBS.Filter = "StoreItemID = -1";
            StoreBS.Sort = "StoreItemColumn, Diameter, Thickness, Length, Height, Width, Admission, Capacity, CoverID, PatinaID, ColorID";
            StoreBS.MoveFirst();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + StoreID);
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }
        }

        /// <summary>
        /// Возвращает true, если на этот месяца инв. ведомость уже создана
        /// </summary>
        /// <returns></returns>
        public bool ExistInventoryDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        /// <summary>
        /// Находим инв. опись на текущий месяц. Если еще не создана, то создаем и сохраняем здесь
        /// </summary>
        public void CreateMonthInventory()
        {
            AddInventory();
            SaveInventory();
            iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);
        }

        public void CreateMonthInventoryDetails()
        {
            DateTime CreateDateTime = Security.GetCurrentDate();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InventoryDetails.*, Store.CurrentCount AS SCount FROM InventoryDetails" +
                " INNER JOIN Store ON InventoryDetails.StoreID = Store.StoreID AND Store.StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN " +
                "(SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE " +
                    "TechStoreGroupID= " + iStoreGroupID + ")))" +
                " WHERE NOT (StartMonthCount=0 AND EndMonthCount = 0) AND InventoryID = (SELECT InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        int StoreID = Convert.ToInt32(DT.Rows[i]["StoreID"]);
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + StoreID);
                        //если позиция уже добавлена в инвентаризацию, то проверяем её текущий остаток. Возможно его уже обнулили
                        if (Rows.Count() > 0)
                        {
                            //decimal StartMonthCount = Convert.ToInt32(Rows[0]["StartMonthCount"]);
                            //decimal EndMonthCount = Convert.ToInt32(Rows[0]["EndMonthCount"]);
                            //if (StartMonthCount == 0 && EndMonthCount == 0)
                            //{
                            //    Rows[0].Delete();
                            //    continue;
                            //}
                            if (Convert.ToDecimal(Rows[0]["StartMonthCount"]) != Convert.ToDecimal(DT.Rows[i]["EndMonthCount"]))
                            {
                                Rows[0]["StartMonthCount"] = Convert.ToDecimal(DT.Rows[i]["EndMonthCount"]);
                                Rows[0]["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["EndMonthCount"]);
                            }
                            if (Convert.ToDecimal(DT.Rows[i]["StartMonthCount"]) > 0 && (Convert.ToDecimal(DT.Rows[i]["EndMonthCount"]) == 0))
                                Rows[0]["EndMonthCount"] = 0;
                            continue;
                        }

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = StoreID;
                        NewRow["StartMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["EndMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, PurchaseInvoiceID, InvoiceCount, CurrentCount FROM Store" +
                " WHERE Store.StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN " +
                "(SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE " +
                    "TechStoreGroupID= " + iStoreGroupID + "))) AND PurchaseInvoiceID IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, IncomeDate) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        int s = Convert.ToInt32(DT.Rows[i]["StoreID"]);
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["StoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = Convert.ToInt32(DT.Rows[i]["StoreID"]);
                        NewRow["StartMonthCount"] = 0;
                        NewRow["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["InvoiceCount"]);
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, MovementInvoiceID, InvoiceCount, CurrentCount FROM Store" +
                " WHERE Store.StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN " +
                "(SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE " +
                    "TechStoreGroupID= " + iStoreGroupID + "))) AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["StoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = Convert.ToInt32(DT.Rows[i]["StoreID"]);
                        NewRow["StartMonthCount"] = 0;
                        NewRow["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["InvoiceCount"]);
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, DecorAssignmentID, InvoiceCount, CurrentCount FROM Store" +
                " WHERE Store.StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN " +
                "(SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE " +
                    "TechStoreGroupID= " + iStoreGroupID + "))) AND DecorAssignmentID IS NOT NULL AND DATEPART(month, CreateDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, CreateDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["StoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = Convert.ToInt32(DT.Rows[i]["StoreID"]);
                        NewRow["StartMonthCount"] = 0;
                        NewRow["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["InvoiceCount"]);
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }
            for (int i = InventoryDetailsDT.Rows.Count - 1; i >= 0; i--)
            {
                decimal StartMonthCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["StartMonthCount"]);
                decimal EndMonthCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["EndMonthCount"]);
                bool ConfirmDetail = false;
                int StoreID = Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]);
                if (InventoryDetailsDT.Rows[i]["ConfirmDetail"] != DBNull.Value)
                    ConfirmDetail = Convert.ToBoolean(InventoryDetailsDT.Rows[i]["ConfirmDetail"]);
                if (StartMonthCount == 0 && EndMonthCount == 0 && !ConfirmDetail)
                {
                    InventoryDetailsDT.Rows[i].Delete();
                    continue;
                }
            }

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM infiniu2_storage.dbo.InventoryDetails" +
                    " WHERE StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN (SELECT TechStoreID FROM TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE " +
                    "TechStoreGroupID= " + iStoreGroupID + "))) AND InventoryID = " + iInventoryID, ConnectionStrings.CatalogConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }
                /*using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InventoryDetails" +
                    " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }*/
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public bool InventoryExist(int Month, int Year)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = " + Month +
                " AND DATEPART(year, InventoryDateTime) = " + Year,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void AddInventory()
        {
            DataRow NewRow = InventoryDT.NewRow();
            NewRow["InventoryDateTime"] = InventoryDate;
            NewRow["DateTime"] = Security.GetCurrentDate();
            NewRow["Name"] = InventoryDate.ToString("MMMM", CultureInfo.CurrentCulture);
            InventoryDT.Rows.Add(NewRow);
        }

        public void AddInventoryDetail(
            DateTime CreateDateTime,
            int InventoryID,
            int StoreID,
            decimal StartMonthCount,
            decimal EndMonthCount,
            int UserID,
            string Notes)
        {
            DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                if (InventoryDetailsDT.Columns.Contains("ConfirmDateTime"))
                    Rows[0]["ConfirmDateTime"] = CreateDateTime;
                Rows[0]["EndMonthCount"] = EndMonthCount;
                Rows[0]["ConfirmDetail"] = 1;
                Rows[0]["UserID"] = UserID;
                if (Notes.Length > 0)
                    Rows[0]["Notes"] = Notes;
            }
            else
            {
                DataRow NewRow = InventoryDetailsDT.NewRow();
                if (InventoryDetailsDT.Columns.Contains("CreateDateTime"))
                    NewRow["CreateDateTime"] = CreateDateTime;
                if (InventoryDetailsDT.Columns.Contains("ConfirmDateTime"))
                    NewRow["ConfirmDateTime"] = CreateDateTime;
                NewRow["InventoryID"] = InventoryID;
                NewRow["StoreID"] = StoreID;
                NewRow["StartMonthCount"] = StartMonthCount;
                NewRow["EndMonthCount"] = EndMonthCount;
                NewRow["ConfirmDetail"] = 1;
                NewRow["UserID"] = UserID;
                if (Notes.Length > 0)
                    NewRow["Notes"] = Notes;
                InventoryDetailsDT.Rows.Add(NewRow);
            }
        }

        public void UnConfirmInventoryDetail(
            int InventoryID,
            int StoreID)
        {
            DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                Rows[0]["ConfirmDateTime"] = DBNull.Value;
                Rows[0]["ConfirmDetail"] = 0;
                Rows[0]["UserID"] = 0;
                Rows[0]["Notes"] = DBNull.Value;
            }
        }

        public void ChangeCurrentFields(decimal EndMonthCount, string Notes)
        {
            ((DataRowView)StoreBS.Current).Row["CurrentCount"] = EndMonthCount;
            ((DataRowView)StoreBS.Current).Row["EndMonthCount"] = EndMonthCount;
            if (Notes.Length > 0)
                ((DataRowView)StoreBS.Current).Row["InvNotes"] = Notes;
        }

        public void InventaryEndEdit(bool EditEnd)
        {
            ((DataRowView)StoreBS.Current).Row["EditEnd"] = EditEnd;
        }

        public bool CheckFactCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(Rows[0]["EndMonthCount"]);
                return (StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount) != EndMonthCount;
            }
            return false;
        }

        public bool WhetherExpense(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["ExpenseCount"] != DBNull.Value && Convert.ToDecimal(Rows[0]["ExpenseCount"]) > 0)
                    return true;
                return false;
            }
            return false;
        }

        public void GetGGG()
        {
            DataTable DT = StoreDT.Clone();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                if ((StartMonthCount + ArrivalMonthCount) < ExpenseMonthCount)
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow.ItemArray = StoreDT.Rows[i].ItemArray;
                    DT.Rows.Add(NewRow);
                }
            }
        }

        public decimal PlaningEndCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                return StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount;
            }
            return 0;
        }

        public void SaveInventory()
        {
            try
            {
                InventoryDA.Update(InventoryDT);
                InventoryDT.Clear();
                InventoryDA.Fill(InventoryDT);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveInventoryDetails(int InventoryID)
        {
            DateTime CurrentDate = Security.GetCurrentDate();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);
                if (Convert.ToBoolean(StoreDT.Rows[i]["EditEnd"]))
                {
                    //StoreDT.Rows[i]["CurrentCount"] = StoreDT.Rows[i]["EndMonthCount"];
                    DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["StoreID"]));
                    if (Rows.Count() < 1)
                        AddInventoryDetail(
                            CurrentDate,
                            InventoryID,
                            Convert.ToInt32(StoreDT.Rows[i]["StoreID"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]),
                            Security.CurrentUserID,
                            string.Empty);
                    else
                        Rows[0]["ConfirmDetail"] = true;
                }
                else
                {
                    StoreDT.Rows[i]["EndMonthCount"] = DBNull.Value;
                    StoreDT.Rows[i]["InvNotes"] = DBNull.Value;
                }
            }


            for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]);
                DataRow[] Rows = StoreDT.Select("StoreID = " + Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]));
                if (Rows.Count() > 0)
                    InventoryDetailsDT.Rows[i]["ConfirmDetail"] = Convert.ToBoolean(Rows[0]["EditEnd"]);
            }

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM infiniu2_storage.dbo.InventoryDetails" +
                    " WHERE StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN (SELECT TechStoreID FROM TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE " +
                    "TechStoreGroupID= " + iStoreGroupID + "))) AND InventoryID = " + iInventoryID, ConnectionStrings.CatalogConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }

                /*using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InventoryDetails" +
                        " WHERE InventoryID = " + Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]), ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }*/
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveStore()
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM Store", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        if (StoreDT.GetChanges() != null)
                        {
                            DataTable DT = StoreDT.GetChanges();
                            DA.Update(DT);
                            DT.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void UpdateTables()
        {
            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            StoreDA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " InventoryDetails.StartMonthCount, InventoryDetails.EndMonthCount, InventoryDetails.Notes AS InvNotes FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN InventoryDetails ON (Store.StoreID = InventoryDetails.StoreID AND NOT (ConfirmDetail=1 AND InventoryDetails.StartMonthCount=0 AND InventoryDetails.EndMonthCount=0) AND InventoryDetails.InventoryID = " + iInventoryID + " AND EndMonthCount > 0)" +
                " WHERE Store.CurrentCount > 0 AND TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ")" +
                " AND PurchaseInvoiceID IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" +
                InventoryDate.ToString("yyyy-MM-dd") + "') AND DATEPART(year, IncomeDate) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["StoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void RefreshStore()
        {
            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            /*using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    InventoryDetailsDT.Clear();
                    DA.Fill(InventoryDetailsDT);
                }
            }*/

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM infiniu2_storage.dbo.InventoryDetails" +
                " WHERE StoreID IN (SELECT StoreID FROM infiniu2_storage.dbo.Store WHERE StoreItemID IN (SELECT TechStoreID FROM TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE " +
                "TechStoreGroupID= " + iStoreGroupID + "))) AND InventoryID = " + iInventoryID, ConnectionStrings.CatalogConnectionString))
            {
                InventoryDetailsDT.Clear();
                DA.Fill(InventoryDetailsDT);
            }

            StoreDA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " InventoryDetails.StartMonthCount, InventoryDetails.EndMonthCount, infiniu2_catalog.dbo.TechStore.Notes AS TechNotes, InventoryDetails.Notes AS InvNotes FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN InventoryDetails ON (Store.StoreID = InventoryDetails.StoreID AND NOT (ConfirmDetail=1 AND InventoryDetails.StartMonthCount=0 AND InventoryDetails.EndMonthCount=0) AND InventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ")" +
                " AND PurchaseInvoiceID NOT IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices WHERE CAST(IncomeDate AS DATE) >= '" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')" +
                " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDT.Clear();
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["StoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }
            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, IncomeDate) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }

            PurchaseInvoicesDT.Dispose();
            PurchaseInvoicesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["MovementInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("MovementInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            MonthInvoiceCount = 0;
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);
                if (Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]) != 0 && StoreDT.Rows[i]["CreateDateTime"] != DBNull.Value)
                {
                    DateTime dt = Convert.ToDateTime(StoreDT.Rows[i]["CreateDateTime"]);
                    if (dt.Year == InventoryDate.Year && dt.Month == InventoryDate.Month)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                        DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreID);
                        if (StoreRows.Count() == 0)
                        {
                            if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                                StoreDT.Rows[i]["MonthInvoiceCount"] = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) + MonthInvoiceCount;
                            else
                                StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
                        }
                        else
                        {

                        }
                    }
                }
            }
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID NOT IN (12,13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }
    }

    public class ManufactureInventoryManager
    {
        int iInventoryID = -1;
        int iStoreGroupID = -1;
        int iFactoryID = -1;
        int Month = 0;
        int Year = 0;
        DateTime InventoryDate;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreSubGroupsDT;
        DataTable InventoryDT;
        DataTable InventoryDetailsDT;

        BindingSource StoreBS;
        BindingSource SubGroupsBS;

        SqlDataAdapter InventoryDA;
        SqlDataAdapter StoreDA;
        SqlCommandBuilder InventoryCB;
        SqlCommandBuilder StoreCB;

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = new DataView(ColorsDT),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = new DataView(PatinaDT),
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public int CurrentInventoryID
        {
            get { return iInventoryID; }
            set { iInventoryID = value; }
        }

        public int CurrentStoreGroupID
        {
            get { return iStoreGroupID; }
            set { iStoreGroupID = value; }
        }

        public int CurrentFactoryID
        {
            get { return iFactoryID; }
            set { iFactoryID = value; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public ManufactureInventoryManager(int iMonth, int iYear)
        {
            Month = iMonth;
            Year = iYear;

            InventoryDate = new DateTime(Year, Month, 1);
            //InventoryDate = Security.GetCurrentDate().AddMonths(-1);
        }

        public void Initialize()
        {
            Create();
            Fill();
            CreateCoversDT();
            Binding();
        }

        private void Create()
        {
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
            InventoryDT = new DataTable();
            InventoryDetailsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore WHERE FactoryID = " + iFactoryID + "))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }

            InventoryDA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                    " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString);
            InventoryCB = new SqlCommandBuilder(InventoryDA);
            InventoryDA.Fill(InventoryDT);

            if (InventoryDT.Rows.Count > 0)
                iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ManufactureInventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InventoryDetailsDT);
            }

            StoreDA = new SqlDataAdapter("SELECT ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " ManufactureInventoryDetails.StartMonthCount, ManufactureInventoryDetails.EndMonthCount, ManufactureInventoryDetails.Notes AS InvNotes FROM ManufactureStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN ManufactureInventoryDetails ON (ManufactureStore.ManufactureStoreID = ManufactureInventoryDetails.StoreID AND ManufactureInventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ") ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDT.Clear();
            StoreDA.Fill(StoreDT);

            //StoreDT.Columns.Add(new DataColumn("checkboxHeader", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("EditEnd", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        public void Binding()
        {
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = StoreSubGroupsDT
            };
        }

        #region Get fuctions

        public decimal StoreItemCurrentCount
        {
            get
            {
                decimal Count = 0;

                if (StoreBS.Count > 0)
                    Count = Convert.ToDecimal(((DataRowView)StoreBS.Current).Row["EndMonthCount"]);

                return Count;
            }
        }

        public int StoreCount
        {
            get
            {
                int Count = 0;
                if (StoreBS != null)
                {
                    Count = StoreBS.Count;
                }
                return Count;
            }
        }

        #endregion

        public void FilterStore(int TechStoreSubGroupID, bool EditEnd)
        {
            if (SubGroupsBS.Count < 1)
            {
                StoreBS.Filter = "StoreItemID = -1";
                return;
            }

            string FactoryFilter = string.Empty;
            ArrayList array = new ArrayList();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID FROM TechStore WHERE TechStoreSubGroupID = " + TechStoreSubGroupID, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        array.Add(Convert.ToInt32(DT.Rows[i]["TechStoreID"]));
                    }
                }
            }

            if (iFactoryID > 0)
                FactoryFilter = " AND FactoryID = " + iFactoryID;
            if (iFactoryID == -1)
                FactoryFilter = " AND FactoryID = -1";

            if (array.Count > 0)
            {
                if (EditEnd)
                    StoreBS.Filter = "EditEnd=0 AND StoreItemID IN (" + string.Join(",", array.OfType<int>().ToArray()) + ")" + FactoryFilter;
                else
                    StoreBS.Filter = "StoreItemID IN (" + string.Join(",", array.OfType<int>().ToArray()) + ")" + FactoryFilter;
            }
            else
                StoreBS.Filter = "StoreItemID = -1";
            StoreBS.Sort = "StoreItemColumn, Diameter, Thickness, Length, Height, Width, Admission, Capacity, CoverID, PatinaID, ColorID";
            StoreBS.MoveFirst();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]);
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + StoreID);
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }
        }

        /// <summary>
        /// Возвращает true, если на этот месяца инв. ведомость уже создана
        /// </summary>
        /// <returns></returns>
        public bool ExistInventoryDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        /// <summary>
        /// Находим инв. опись на текущий месяц. Если еще не создана, то создаем и сохраняем здесь
        /// </summary>
        public void CreateMonthInventory()
        {
            AddInventory();
            SaveInventory();
            iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);
        }

        public void CreateMonthInventoryDetails()
        {
            DateTime CreateDateTime = Security.GetCurrentDate();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ManufactureInventoryDetails.*, ManufactureStore.CurrentCount AS SCount FROM ManufactureInventoryDetails" +
                " LEFT JOIN ManufactureStore ON ManufactureInventoryDetails.StoreID = ManufactureStore.ManufactureStoreID" +
                " WHERE NOT (StartMonthCount=0 AND EndMonthCount = 0) AND InventoryID = (SELECT InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        if (Convert.ToDecimal(DT.Rows[i]["StartMonthCount"]) == 0 && (Convert.ToDecimal(DT.Rows[i]["EndMonthCount"]) == 0))
                            continue;
                        int StoreID = Convert.ToInt32(DT.Rows[i]["StoreID"]);
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["StoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = DT.Rows[i]["StoreID"];
                        NewRow["StartMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["EndMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ManufactureStoreID, MovementInvoiceID, InvoiceCount, CurrentCount FROM ManufactureStore" +
                " WHERE DATEPART(month, CreateDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, CreateDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["ManufactureStoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        int StoreID = Convert.ToInt32(DT.Rows[i]["ManufactureStoreID"]);
                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = Convert.ToInt32(DT.Rows[i]["ManufactureStoreID"]);
                        NewRow["StartMonthCount"] = 0;
                        NewRow["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["InvoiceCount"]);
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            for (int i = InventoryDetailsDT.Rows.Count - 1; i >= 0; i--)
            {
                decimal StartMonthCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["StartMonthCount"]);
                decimal EndMonthCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["EndMonthCount"]);
                bool ConfirmDetail = false;
                int StoreID = Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]);
                if (InventoryDetailsDT.Rows[i]["ConfirmDetail"] != DBNull.Value)
                    ConfirmDetail = Convert.ToBoolean(InventoryDetailsDT.Rows[i]["ConfirmDetail"]);
                if (StartMonthCount == 0 && EndMonthCount == 0 && !ConfirmDetail)
                {
                    InventoryDetailsDT.Rows[i].Delete();
                    continue;
                }
            }

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public bool InventoryExist(int Month, int Year)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = " + Month +
                " AND DATEPART(year, InventoryDateTime) = " + Year,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void AddInventory()
        {
            DataRow NewRow = InventoryDT.NewRow();
            NewRow["InventoryDateTime"] = InventoryDate;
            NewRow["DateTime"] = Security.GetCurrentDate();
            NewRow["Name"] = InventoryDate.ToString("MMMM", CultureInfo.CurrentCulture);
            InventoryDT.Rows.Add(NewRow);
        }

        public void AddInventoryDetail(
            DateTime CreateDateTime,
            int InventoryID,
            int StoreID,
            decimal StartMonthCount,
            decimal EndMonthCount,
            int UserID,
            string Notes)
        {
            DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                Rows[0]["EndMonthCount"] = EndMonthCount;
                Rows[0]["ConfirmDetail"] = 1;
                Rows[0]["UserID"] = UserID;
                Rows[0]["ConfirmDateTime"] = CreateDateTime;
                if (Notes.Length > 0)
                    Rows[0]["Notes"] = Notes;
            }
            else
            {
                DataRow NewRow = InventoryDetailsDT.NewRow();
                if (InventoryDetailsDT.Columns.Contains("CreateDateTime"))
                    NewRow["CreateDateTime"] = CreateDateTime;
                if (InventoryDetailsDT.Columns.Contains("ConfirmDateTime"))
                    NewRow["ConfirmDateTime"] = CreateDateTime;
                NewRow["InventoryID"] = InventoryID;
                NewRow["StoreID"] = StoreID;
                NewRow["StartMonthCount"] = StartMonthCount;
                NewRow["EndMonthCount"] = EndMonthCount;
                NewRow["ConfirmDetail"] = 1;
                NewRow["UserID"] = UserID;
                if (Notes.Length > 0)
                    NewRow["Notes"] = Notes;
                InventoryDetailsDT.Rows.Add(NewRow);
            }
        }

        public void ChangeCurrentFields(decimal EndMonthCount, string Notes)
        {
            ((DataRowView)StoreBS.Current).Row["CurrentCount"] = EndMonthCount;
            ((DataRowView)StoreBS.Current).Row["EndMonthCount"] = EndMonthCount;
            ((DataRowView)StoreBS.Current).Row["InvNotes"] = Notes;
        }

        public void InventaryEndEdit(bool EditEnd)
        {
            ((DataRowView)StoreBS.Current).Row["EditEnd"] = EditEnd;
        }

        public bool CheckFactCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("ManufactureStoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(Rows[0]["EndMonthCount"]);
                return (StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount) != EndMonthCount;
            }
            return false;
        }

        public bool WhetherExpense(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("ManufactureStoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["ExpenseCount"] != DBNull.Value && Convert.ToDecimal(Rows[0]["ExpenseCount"]) > 0)
                    return true;
                return false;
            }
            return false;
        }

        public void GetGGG()
        {
            DataTable DT = StoreDT.Clone();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                if ((StartMonthCount + ArrivalMonthCount) < ExpenseMonthCount)
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow.ItemArray = StoreDT.Rows[i].ItemArray;
                    DT.Rows.Add(NewRow);
                }
            }
        }

        public decimal PlaningEndCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("ManufactureStoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                return StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount;
            }
            return 0;
        }

        public void SaveInventory()
        {
            try
            {
                InventoryDA.Update(InventoryDT);
                InventoryDT.Clear();
                InventoryDA.Fill(InventoryDT);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveInventoryDetails(int InventoryID)
        {
            DateTime CurrentDate = Security.GetCurrentDate();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                if (Convert.ToBoolean(StoreDT.Rows[i]["EditEnd"]))
                {
                    DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]));
                    if (Rows.Count() < 1)
                        AddInventoryDetail(
                            CurrentDate,
                            InventoryID,
                            Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]),
                            Security.CurrentUserID,
                            string.Empty);
                    else
                        Rows[0]["ConfirmDetail"] = true;
                }
            }


            for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
            {
                DataRow[] Rows = StoreDT.Select("ManufactureStoreID = " + Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]));
                if (Rows.Count() > 0)
                    InventoryDetailsDT.Rows[i]["ConfirmDetail"] = Convert.ToBoolean(Rows[0]["EditEnd"]);
            }
            try
            {


                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ManufactureInventoryDetails" +
                        " WHERE InventoryID = " + Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]), ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveStore()
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM ManufactureStore", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        if (StoreDT.GetChanges() != null)
                        {
                            DataTable DT = StoreDT.GetChanges();
                            DA.Update(DT);
                            DT.Dispose();
                        }
                        //DA.Update(StoreDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void UpdateTables()
        {
            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            StoreDA = new SqlDataAdapter("SELECT ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " ManufactureInventoryDetails.StartMonthCount, ManufactureInventoryDetails.EndMonthCount, ManufactureInventoryDetails.Notes AS InvNotes FROM ManufactureStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN ManufactureInventoryDetails ON (ManufactureStore.ManufactureStoreID = ManufactureInventoryDetails.StoreID AND ManufactureInventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ")" +
                " AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices WHERE DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')) ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDT.Clear();
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void RefreshStore()
        {
            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ManufactureInventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    InventoryDetailsDT.Clear();
                    DA.Fill(InventoryDetailsDT);
                }
            }
            //StoreDA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn," +
            //    " InventoryDetails.StartMonthCount, InventoryDetails.EndMonthCount, InventoryDetails.Notes AS InvNotes FROM Store" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " LEFT JOIN InventoryDetails ON (Store.StoreID = InventoryDetails.StoreID AND InventoryDetails.InventoryID = " + CurrentInventoryID + " AND EndMonthCount > 0)" +
            //    " WHERE Store.CurrentCount > 0 AND TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
            //    " WHERE TechStoreGroupID = " + CurrentStoreGroupID + " AND FactoryID = " + CurrentFactoryID + ")" +
            //    " AND PurchaseInvoiceID IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))" +
            //    " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            //StoreCB = new SqlCommandBuilder(StoreDA);
            //StoreDA.Fill(StoreDT);

            StoreDA = new SqlDataAdapter("SELECT ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " ManufactureInventoryDetails.StartMonthCount, ManufactureInventoryDetails.EndMonthCount, ManufactureInventoryDetails.Notes AS InvNotes FROM ManufactureStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN ManufactureInventoryDetails ON (ManufactureStore.ManufactureStoreID = ManufactureInventoryDetails.StoreID AND ManufactureInventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ") ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDT.Clear();
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]);
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }
            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
            //    " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
            //    " AND DATEPART(year, IncomeDate) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(PurchaseInvoicesDT);

            //    for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
            //    {
            //        PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

            //        DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
            //        foreach (DataRow Row in StoreRows)
            //        {
            //            MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
            //            Row["MonthInvoiceCount"] = MonthInvoiceCount;
            //        }
            //    }
            //}

            PurchaseInvoicesDT.Dispose();
            PurchaseInvoicesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>2 AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["MovementInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("MovementInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            //for (int i = 0; i < StoreDT.Rows.Count; i++)
            //{
            //    if (StoreDT.Rows[i]["DecorAssignmentID"] == DBNull.Value)
            //        continue;
            //    int DecorAssignmentID = Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]);

            //    MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
            //    StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
            //}
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND SellerStoreAllocID IN (3, 4) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("ManufactureStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND SellerStoreAllocID IN (3, 4) AND RecipientStoreAllocID IN (1, 2, 3, 4)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("ManufactureStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }
    }

    public class ReadyInventoryManager
    {
        int iInventoryID = -1;
        int iStoreGroupID = -1;
        int iFactoryID = -1;
        int Month = 0;
        int Year = 0;
        DateTime InventoryDate;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreSubGroupsDT;
        DataTable InventoryDT;
        DataTable InventoryDetailsDT;

        BindingSource StoreBS;
        BindingSource SubGroupsBS;

        SqlDataAdapter InventoryDA;
        SqlDataAdapter StoreDA;
        SqlCommandBuilder InventoryCB;
        SqlCommandBuilder StoreCB;

        public DataGridViewComboBoxColumn ColorsColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "ColorsColumn",
                    HeaderText = "Цвет",
                    DataPropertyName = "ColorID",
                    DataSource = new DataView(ColorsDT),
                    ValueMember = "ColorID",
                    DisplayMember = "ColorName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn CoversColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn()
                {
                    Name = "CoversColumn",
                    HeaderText = "Облицовка",
                    DataPropertyName = "CoverID",
                    DataSource = new DataView(CoversDT),
                    ValueMember = "CoverID",
                    DisplayMember = "CoverName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public DataGridViewComboBoxColumn PatinaColumn
        {
            get
            {
                DataGridViewComboBoxColumn Column = new DataGridViewComboBoxColumn();
                Column = new DataGridViewComboBoxColumn()
                {
                    Name = "PatinaColumn",
                    HeaderText = "Патина",
                    DataPropertyName = "PatinaID",
                    DataSource = new DataView(PatinaDT),
                    ValueMember = "PatinaID",
                    DisplayMember = "PatinaName",
                    DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing,
                    SortMode = DataGridViewColumnSortMode.Automatic
                };
                return Column;
            }
        }

        public int CurrentInventoryID
        {
            get { return iInventoryID; }
            set { iInventoryID = value; }
        }

        public int CurrentStoreGroupID
        {
            get { return iStoreGroupID; }
            set { iStoreGroupID = value; }
        }

        public int CurrentFactoryID
        {
            get { return iFactoryID; }
            set { iFactoryID = value; }
        }

        public BindingSource StoreList
        {
            get { return StoreBS; }
        }

        public BindingSource SubGroupsList
        {
            get { return SubGroupsBS; }
        }

        public ReadyInventoryManager(int iMonth, int iYear)
        {
            Month = iMonth;
            Year = iYear;

            InventoryDate = new DateTime(Year, Month, 1);
            //InventoryDate = Security.GetCurrentDate().AddMonths(-1);
        }

        public void Initialize()
        {
            Create();
            Fill();
            CreateCoversDT();
            Binding();
        }

        private void Create()
        {
            MeasuresDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
            InventoryDT = new DataTable();
            InventoryDetailsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ReadyStore WHERE FactoryID = " + iFactoryID + "))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }

            InventoryDA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                    " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString);
            InventoryCB = new SqlCommandBuilder(InventoryDA);
            InventoryDA.Fill(InventoryDT);

            if (InventoryDT.Rows.Count > 0)
                iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ReadyInventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InventoryDetailsDT);
            }

            StoreDA = new SqlDataAdapter("SELECT ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " ReadyInventoryDetails.StartMonthCount, ReadyInventoryDetails.EndMonthCount, ReadyInventoryDetails.Notes AS InvNotes FROM ReadyStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " LEFT JOIN ReadyInventoryDetails ON (ReadyStore.ReadyStoreID = ReadyInventoryDetails.StoreID AND ReadyInventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ")" +
                " AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices WHERE CAST(DateTime AS DATE) <='" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00') ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDT.Clear();
            StoreDA.Fill(StoreDT);

            //StoreDT.Columns.Add(new DataColumn("checkboxHeader", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("EditEnd", Type.GetType("System.Boolean")));
            StoreDT.Columns.Add(new DataColumn("MonthInvoiceCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("ExpenseCount", Type.GetType("System.Decimal")));
            StoreDT.Columns.Add(new DataColumn("SellingCount", Type.GetType("System.Decimal")));

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ReadyStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        public void Binding()
        {
            StoreBS = new BindingSource()
            {
                DataSource = StoreDT
            };
            SubGroupsBS = new BindingSource()
            {
                DataSource = StoreSubGroupsDT
            };
        }

        #region Get fuctions

        public decimal StoreItemCurrentCount
        {
            get
            {
                decimal Count = 0;

                if (StoreBS.Count > 0)
                    Count = Convert.ToDecimal(((DataRowView)StoreBS.Current).Row["EndMonthCount"]);

                return Count;
            }
        }

        public int StoreCount
        {
            get
            {
                int Count = 0;
                if (StoreBS != null)
                {
                    Count = StoreBS.Count;
                }
                return Count;
            }
        }

        #endregion

        public void FilterStore(int TechStoreSubGroupID)
        {
            if (SubGroupsBS.Count < 1)
            {
                StoreBS.Filter = "StoreItemID = -1";
                return;
            }

            string FactoryFilter = string.Empty;
            ArrayList array = new ArrayList();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID FROM TechStore WHERE TechStoreSubGroupID = " + TechStoreSubGroupID, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        array.Add(Convert.ToInt32(DT.Rows[i]["TechStoreID"]));
                    }
                }
            }

            if (iFactoryID > 0)
                FactoryFilter = " AND FactoryID = " + iFactoryID;
            if (iFactoryID == -1)
                FactoryFilter = " AND FactoryID = -1";

            if (array.Count > 0)
                StoreBS.Filter = "StoreItemID IN (" + string.Join(",", array.OfType<int>().ToArray()) + ")" + FactoryFilter;
            else
                StoreBS.Filter = "StoreItemID = -1";
            StoreBS.Sort = "StoreItemColumn, Diameter, Thickness, Length, Height, Width, Admission, Capacity, CoverID, PatinaID, ColorID";
            StoreBS.MoveFirst();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                int StoreID = Convert.ToInt32(StoreDT.Rows[i]["ReadyStoreID"]);
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + StoreID);
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }
        }

        /// <summary>
        /// Возвращает true, если на этот месяца инв. ведомость уже создана
        /// </summary>
        /// <returns></returns>
        public bool ExistInventoryDateTime()
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, GETDATE())",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        /// <summary>
        /// Находим инв. опись на текущий месяц. Если еще не создана, то создаем и сохраняем здесь
        /// </summary>
        public void CreateMonthInventory()
        {
            AddInventory();
            SaveInventory();
            iInventoryID = Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]);
        }

        public void CreateMonthInventoryDetails()
        {
            DateTime CreateDateTime = Security.GetCurrentDate();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ReadyInventoryDetails.*, ReadyStore.CurrentCount AS SCount FROM ReadyInventoryDetails" +
                " LEFT JOIN ReadyStore ON ReadyInventoryDetails.StoreID = ReadyStore.ReadyStoreID" +
                " WHERE EndMonthCount > 0 AND InventoryID = (SELECT InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.AddMonths(-1).ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        if (Convert.ToDecimal(DT.Rows[i]["StartMonthCount"]) == 0 && (Convert.ToDecimal(DT.Rows[i]["EndMonthCount"]) == 0))
                            continue;

                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["StoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = DT.Rows[i]["StoreID"];
                        NewRow["StartMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["EndMonthCount"] = DT.Rows[i]["EndMonthCount"];
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ReadyStoreID, MovementInvoiceID, InvoiceCount, CurrentCount FROM ReadyStore" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        //не перезаписывать остатки, если они уже внесены
                        DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + DT.Rows[i]["ReadyStoreID"]);
                        if (Rows.Count() > 0)
                            continue;

                        DataRow NewRow = InventoryDetailsDT.NewRow();
                        NewRow["InventoryID"] = iInventoryID;
                        NewRow["StoreID"] = Convert.ToInt32(DT.Rows[i]["ReadyStoreID"]);
                        NewRow["StartMonthCount"] = 0;
                        NewRow["EndMonthCount"] = Convert.ToDecimal(DT.Rows[i]["InvoiceCount"]);
                        NewRow["CreateDateTime"] = CreateDateTime;
                        InventoryDetailsDT.Rows.Add(NewRow);
                    }
                }
            }

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ReadyInventoryDetails" +
                    " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nCreateMonthInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public bool InventoryExist(int Month, int Year)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = " + Month +
                " AND DATEPART(year, InventoryDateTime) = " + Year,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void AddInventory()
        {
            DataRow NewRow = InventoryDT.NewRow();
            NewRow["InventoryDateTime"] = InventoryDate;
            NewRow["DateTime"] = Security.GetCurrentDate();
            NewRow["Name"] = InventoryDate.ToString("MMMM", CultureInfo.CurrentCulture);
            InventoryDT.Rows.Add(NewRow);
        }

        public void AddInventoryDetail(
            DateTime CreateDateTime,
            int InventoryID,
            int StoreID,
            decimal StartMonthCount,
            decimal EndMonthCount,
            int UserID,
            string Notes)
        {
            DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                Rows[0]["EndMonthCount"] = EndMonthCount;
                Rows[0]["ConfirmDetail"] = 1;
                Rows[0]["UserID"] = UserID;
                if (Notes.Length > 0)
                    Rows[0]["Notes"] = Notes;
            }
            else
            {
                DataRow NewRow = InventoryDetailsDT.NewRow();
                if (InventoryDetailsDT.Columns.Contains("CreateDateTime"))
                    NewRow["CreateDateTime"] = CreateDateTime;
                if (InventoryDetailsDT.Columns.Contains("ConfirmDateTime"))
                    NewRow["ConfirmDateTime"] = CreateDateTime;
                NewRow["InventoryID"] = InventoryID;
                NewRow["StoreID"] = StoreID;
                NewRow["StartMonthCount"] = StartMonthCount;
                NewRow["EndMonthCount"] = EndMonthCount;
                NewRow["ConfirmDetail"] = 1;
                NewRow["UserID"] = UserID;
                if (Notes.Length > 0)
                    NewRow["Notes"] = Notes;
                InventoryDetailsDT.Rows.Add(NewRow);
            }
        }

        public void ChangeCurrentFields(decimal EndMonthCount, string Notes)
        {
            ((DataRowView)StoreBS.Current).Row["CurrentCount"] = EndMonthCount;
            ((DataRowView)StoreBS.Current).Row["EndMonthCount"] = EndMonthCount;
            ((DataRowView)StoreBS.Current).Row["InvNotes"] = Notes;
        }

        public void InventaryEndEdit(bool EditEnd)
        {
            ((DataRowView)StoreBS.Current).Row["EditEnd"] = EditEnd;
        }

        public bool CheckFactCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("ReadyStoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(Rows[0]["EndMonthCount"]);
                return (StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount) != EndMonthCount;
            }
            return false;
        }

        public void GetGGG()
        {
            DataTable DT = StoreDT.Clone();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                decimal EndMonthCount = 0;
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                if ((StartMonthCount + ArrivalMonthCount) < ExpenseMonthCount)
                {
                    DataRow NewRow = DT.NewRow();
                    NewRow.ItemArray = StoreDT.Rows[i].ItemArray;
                    DT.Rows.Add(NewRow);
                }
            }
        }

        public decimal PlaningEndCount(int StoreID)
        {
            DataRow[] Rows = StoreDT.Select("ReadyStoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                decimal StartMonthCount = 0;
                decimal ArrivalMonthCount = 0;
                decimal ExpenseMonthCount = 0;
                decimal SellingMonthCount = 0;
                if (Rows[0]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToDecimal(Rows[0]["StartMonthCount"]);
                if (Rows[0]["MonthInvoiceCount"] != DBNull.Value)
                    ArrivalMonthCount = Convert.ToDecimal(Rows[0]["MonthInvoiceCount"]);
                if (Rows[0]["ExpenseCount"] != DBNull.Value)
                    ExpenseMonthCount = Convert.ToDecimal(Rows[0]["ExpenseCount"]);
                if (Rows[0]["SellingCount"] != DBNull.Value)
                    SellingMonthCount = Convert.ToDecimal(Rows[0]["SellingCount"]);
                return StartMonthCount + ArrivalMonthCount - ExpenseMonthCount - SellingMonthCount;
            }
            return 0;
        }

        public void SaveInventory()
        {
            try
            {
                InventoryDA.Update(InventoryDT);
                InventoryDT.Clear();
                InventoryDA.Fill(InventoryDT);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventory КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveInventoryDetails(int InventoryID)
        {
            DateTime CurrentDate = Security.GetCurrentDate();
            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                if (Convert.ToBoolean(StoreDT.Rows[i]["EditEnd"]))
                {
                    DataRow[] Rows = InventoryDetailsDT.Select("InventoryID = " + InventoryID + " AND StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ReadyStoreID"]));
                    if (Rows.Count() < 1)
                        AddInventoryDetail(
                            CurrentDate,
                            InventoryID,
                            Convert.ToInt32(StoreDT.Rows[i]["ReadyStoreID"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]),
                            Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]),
                            Security.CurrentUserID,
                            string.Empty);
                    else
                    {
                        Rows[0]["ConfirmDetail"] = true;
                        Rows[0]["UserID"] = Security.CurrentUserID;
                    }
                }
            }


            for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
            {
                DataRow[] Rows = StoreDT.Select("ReadyStoreID = " + Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]));
                if (Rows.Count() > 0)
                    InventoryDetailsDT.Rows[i]["ConfirmDetail"] = Convert.ToBoolean(Rows[0]["EditEnd"]);
            }

            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ReadyInventoryDetails" +
                        " WHERE InventoryID = " + Convert.ToInt32(InventoryDT.Rows[0]["InventoryID"]), ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        DA.Update(InventoryDetailsDT);
                        InventoryDetailsDT.Clear();
                        DA.Fill(InventoryDetailsDT);
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveInventoryDetails КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void SaveStore()
        {
            try
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM ReadyStore", ConnectionStrings.StorageConnectionString))
                {
                    using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                    {
                        if (StoreDT.GetChanges() != null)
                        {
                            DataTable DT = StoreDT.GetChanges();
                            DA.Update(DT);
                            DT.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore НЕТ СОЕДИНЕНИЯ С БАЗОЙ. ЛЕНА, ПОЗОВИ МЕНЯ! :-)");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message + " \r\nSaveStore КАКАЯ-ТО НЕВЕДОМАЯ ЁБАНАЯ ХУЙНЯ. ЛЕНА, ПОЗОВИ МЕНЯ!");
            }
        }

        public void UpdateTables()
        {
            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            StoreDA = new SqlDataAdapter("SELECT ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " ReadyInventoryDetails.StartMonthCount, ReadyInventoryDetails.EndMonthCount, ReadyInventoryDetails.Notes AS InvNotes FROM ReadyStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " LEFT JOIN ReadyInventoryDetails ON (ReadyStore.ReadyStoreID = ReadyInventoryDetails.StoreID AND ReadyInventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ")" +
                " AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices WHERE CAST(DateTime AS DATE) <='" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00') ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ReadyStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }

            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void RefreshStore()
        {
            StoreDT.Clear();
            if (StoreDA != null)
            {
                StoreDA.Dispose();
                StoreCB.Dispose();
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ReadyInventoryDetails" +
                " WHERE InventoryID = " + iInventoryID, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    InventoryDetailsDT.Clear();
                    DA.Fill(InventoryDetailsDT);
                }
            }
            //StoreDA = new SqlDataAdapter("SELECT Store.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn," +
            //    " InventoryDetails.StartMonthCount, InventoryDetails.EndMonthCount, InventoryDetails.Notes AS InvNotes FROM Store" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " LEFT JOIN InventoryDetails ON (Store.StoreID = InventoryDetails.StoreID AND InventoryDetails.InventoryID = " + CurrentInventoryID + " AND EndMonthCount > 0)" +
            //    " WHERE Store.CurrentCount > 0 AND TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
            //    " WHERE TechStoreGroupID = " + CurrentStoreGroupID + " AND FactoryID = " + CurrentFactoryID + ")" +
            //    " AND PurchaseInvoiceID IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))" +
            //    " ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            //StoreCB = new SqlCommandBuilder(StoreDA);
            //StoreDA.Fill(StoreDT);

            StoreDA = new SqlDataAdapter("SELECT ReadyStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn,infiniu2_catalog.dbo.TechStore.SellerCode," +
                " ReadyInventoryDetails.StartMonthCount, ReadyInventoryDetails.EndMonthCount, ReadyInventoryDetails.Notes AS InvNotes FROM ReadyStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " LEFT JOIN ReadyInventoryDetails ON (ReadyStore.ReadyStoreID = ReadyInventoryDetails.StoreID AND ReadyInventoryDetails.InventoryID = " + iInventoryID + ")" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
                " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ")" +
                " AND MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices WHERE CAST(DateTime AS DATE) <='" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00') ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            StoreCB = new SqlCommandBuilder(StoreDA);
            StoreDA.Fill(StoreDT);

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                DataRow[] Rows = InventoryDetailsDT.Select("StoreID = " + Convert.ToInt32(StoreDT.Rows[i]["ReadyStoreID"]));
                if (Rows.Count() > 0)
                    StoreDT.Rows[i]["EditEnd"] = Convert.ToBoolean(Rows[0]["ConfirmDetail"]);
                else
                    StoreDT.Rows[i]["EditEnd"] = false;
            }
            FillInvoice();
            FillExpense();
            FillSelling();
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
            //    " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
            //    " AND DATEPART(year, IncomeDate) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(PurchaseInvoicesDT);

            //    for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
            //    {
            //        PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

            //        DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
            //        foreach (DataRow Row in StoreRows)
            //        {
            //            MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
            //            Row["MonthInvoiceCount"] = MonthInvoiceCount;
            //        }
            //    }
            //}

            PurchaseInvoicesDT.Dispose();
            PurchaseInvoicesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["MovementInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("MovementInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            //for (int i = 0; i < StoreDT.Rows.Count; i++)
            //{
            //    if (StoreDT.Rows[i]["DecorAssignmentID"] == DBNull.Value)
            //        continue;
            //    int DecorAssignmentID = Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]);

            //    MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
            //    StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
            //}
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (10, 11) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("ReadyStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (10, 11) AND RecipientStoreAllocID NOT IN (12,13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("ReadyStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }
    }







    public class MainStoreInventoryList
    {
        DateTime InventoryDate;

        int FactoryID = 0;
        int Month = 0;
        int Year = 0;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;

        DataTable[] StoreCategoryDT;

        ArrayList[] HeaderNames;

        public MainStoreInventoryList(int iFactoryID, string InventoryName,
            int iMonth, int iYear)
        {
            FactoryID = iFactoryID;
            Month = iMonth;
            Year = iYear;
            InventoryDate = new DateTime(Year, Month, 1);
            Initialize();
        }

        private void Initialize()
        {
            Create();
            Fill();
            FillStartEndCount();
            FillInvoice();
            FillExpense();
            FillSelling();
            CreateStoreCategory();
            FillStoreCategory();
            CreateHeaderColumns();
        }

        private void Create()
        {
            ColorsDT = new DataTable();
            MeasuresDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreGroupsDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            CreateCoversDT();
            GetColorsDT();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_storage.dbo.Store.*, TechStore.MeasureID, TechStoreGroups.TechStoreGroupID, TechStoreSubGroups.TechStoreSubGroupID FROM infiniu2_storage.dbo.InventoryDetails" +
                " INNER JOIN infiniu2_storage.dbo.Store ON infiniu2_storage.dbo.InventoryDetails.StoreID=infiniu2_storage.dbo.Store.StoreID AND infiniu2_storage.dbo.Store.FactoryID = " + FactoryID +
                " INNER JOIN TechStore ON infiniu2_storage.dbo.Store.StoreItemID = TechStore.TechStoreID" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID" +
                " WHERE InventoryID IN (SELECT InventoryID FROM infiniu2_storage.dbo.Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreDT);
            }
            StoreDT.Columns.Add("StartMonthCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("ExpenseCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("SellingCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("EndMonthCount", Type.GetType("System.Int32"));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN" +
                " (SELECT TechStoreGroupID FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store WHERE FactoryID = " + FactoryID + ")))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store WHERE FactoryID = " + FactoryID + "))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void CreateStoreCategory()
        {
            DataTable TempDT = new DataTable();
            StoreCategoryDT = new DataTable[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                StoreCategoryDT[i] = new DataTable()
                {
                    TableName = StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString()
                };
                StoreCategoryDT[i].Columns.Add("ID", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("StoreItem", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Measure", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Cover", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Color", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Patina", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Diameter", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Thickness", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Length", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Height", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Width", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Admission", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Capacity", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Weight", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("SellingCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
                //StoreCategoryDT[i].Columns.Add("InvoiceCount", Type.GetType("System.Int32"));
                //StoreCategoryDT[i].Columns.Add("CurrentCount", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("FactCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Notes", Type.GetType("System.String"));
            }
        }

        private void FillStoreCategory()
        {
            DataTable TempDT = new DataTable();
            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                DataRow[] StoreRows = StoreDT.Select("TechStoreGroupID = " + Convert.ToInt32(StoreGroupsDT.Rows[i]["TechStoreGroupID"]));

                foreach (DataRow Row in StoreRows)
                {
                    DataRow NewRow = StoreCategoryDT[i].NewRow();

                    NewRow["ID"] = Row["StoreID"];
                    if (Row["StoreItemID"] != DBNull.Value)
                        NewRow["StoreItem"] = GetItemName(Convert.ToInt32(Row["StoreItemID"]));
                    if (Row["MeasureID"] != DBNull.Value)
                        NewRow["Measure"] = GetMeasure(Convert.ToInt32(Row["MeasureID"]));
                    NewRow["Diameter"] = Row["Diameter"];
                    NewRow["Capacity"] = Row["Capacity"];
                    NewRow["Thickness"] = Row["Thickness"];
                    NewRow["Length"] = Row["Length"];
                    NewRow["Height"] = Row["Height"];
                    NewRow["Width"] = Row["Width"];
                    NewRow["Admission"] = Row["Admission"];
                    NewRow["Weight"] = Row["Weight"];
                    if (Row["CoverID"] != DBNull.Value)
                        NewRow["Cover"] = GetCoverName(Convert.ToInt32(Row["CoverID"]));
                    if (Row["PatinaID"] != DBNull.Value)
                        NewRow["Patina"] = GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                    if (Row["ColorID"] != DBNull.Value)
                        NewRow["Color"] = GetColorName(Convert.ToInt32(Row["ColorID"]));

                    NewRow["StartMonthCount"] = Row["StartMonthCount"];
                    NewRow["MonthInvoiceCount"] = Row["MonthInvoiceCount"];
                    NewRow["ExpenseCount"] = Row["ExpenseCount"];
                    NewRow["SellingCount"] = Row["SellingCount"];
                    NewRow["EndMonthCount"] = Row["CurrentCount"];
                    //NewRow["InvoiceCount"] = Row["InvoiceCount"];
                    //NewRow["CurrentCount"] = Row["CurrentCount"];

                    StoreCategoryDT[i].Rows.Add(NewRow);
                }

                using (DataView DV = new DataView(
                    StoreCategoryDT[i],
                    string.Empty,
                    "StoreItem, Cover, Patina, Color, Length, Height, Width, Weight",
                    DataViewRowState.CurrentRows))
                {
                    TempDT.Clear();
                    TempDT = DV.ToTable();
                    StoreCategoryDT[i].Clear();
                    StoreCategoryDT[i] = TempDT.Copy();
                }
            }
            TempDT.Dispose();
        }

        private void CreateHeaderColumns()
        {
            HeaderNames = new ArrayList[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                HeaderNames[i] = new ArrayList();
                foreach (DataColumn Column in StoreCategoryDT[i].Columns)
                {
                    foreach (DataRow Row in StoreCategoryDT[i].Rows)
                    {
                        if (Column.ColumnName == "StartMonthCount"
                            || Column.ColumnName == "MonthInvoiceCount"
                            || Column.ColumnName == "ExpenseCount"
                            || Column.ColumnName == "SellingCount"
                            || Column.ColumnName == "EndMonthCount")
                            continue;
                        if (Row[Column.ColumnName] != DBNull.Value)
                        {
                            HeaderNames[i].Add(Column.ColumnName);
                            break;
                        }
                    }
                }
                HeaderNames[i].Add("StartMonthCount");
                HeaderNames[i].Add("MonthInvoiceCount");
                HeaderNames[i].Add("ExpenseCount");
                HeaderNames[i].Add("SellingCount");
                HeaderNames[i].Add("EndMonthCount");
                HeaderNames[i].Add("FactCount");
                HeaderNames[i].Add("Notes");
                //HeaderNames[i].Insert(0, "ID");
            }
        }

        #region Get functions

        private string GetMeasure(int MeasureID)
        {
            DataRow[] Rows = MeasuresDT.Select("MeasureID = " + MeasureID);
            return Rows[0]["Measure"].ToString();
        }

        public string GetColorName(int ColorID)
        {
            DataRow[] Rows = ColorsDT.Select("ColorID = " + ColorID);
            return Rows[0]["ColorName"].ToString();
        }

        private string GetCoverName(int CoverID)
        {
            DataRow[] Rows = CoversDT.Select("CoverID = " + CoverID);
            return Rows[0]["CoverName"].ToString();
        }

        public string GetPatinaName(int PatinaID)
        {
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + PatinaID);
            return Rows[0]["PatinaName"].ToString();
        }

        private string GetItemName(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["TechStoreName"].ToString();
        }

        #endregion

        public void FillStartEndCount()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal StartCount = 0;
            decimal EndCount = 0;
            int StoreID = -1;

            DataTable RemainsDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT StoreID, StartMonthCount, EndMonthCount FROM InventoryDetails" +
                " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") +
                "') AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(RemainsDT);

                for (int i = 0; i < RemainsDT.Rows.Count; i++)
                {
                    StartCount = 0;
                    StartCount = Convert.ToDecimal(RemainsDT.Rows[i]["StartMonthCount"]);
                    EndCount = Convert.ToDecimal(RemainsDT.Rows[i]["EndMonthCount"]);
                    StoreID = Convert.ToInt32(RemainsDT.Rows[i]["StoreID"]);

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreID);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["StartMonthCount"] = StartCount;
                        StoreRows[0]["EndMonthCount"] = EndCount;
                    }
                }
            }

            //DataTable InventoryDetailsDT = new DataTable();
            //DataTable Table = new DataTable();

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InventoryDetails" +
            //    " WHERE InventoryID IN (SELECT InventoryID FROM Inventory" +
            //    " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(InventoryDetailsDT);

            //    for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
            //    {
            //        StartCount = 0;
            //        StartCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["StartMonthCount"]);
            //        EndCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["EndMonthCount"]);
            //        StoreID = Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]);

            //        DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreID);
            //        if (StoreRows.Count() > 0)
            //        {
            //            StoreRows[0]["StartMonthCount"] = StartCount;
            //            StoreRows[0]["EndMonthCount"] = EndCount;
            //        }
            //    }
            //}
            RemainsDT.Dispose();

            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int MovementInvoiceID = -1;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE CAST(IncomeDate AS DATE) >= '" + InventoryDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(IncomeDate AS DATE) < '" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);
                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            PurchaseInvoicesDT.Dispose();
            PurchaseInvoicesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE CAST(DateTime AS DATE) >= '" + InventoryDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);
                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    MovementInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["MovementInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("MovementInvoiceID = " + MovementInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                if (Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]) != 0 && StoreDT.Rows[i]["CreateDateTime"] != DBNull.Value)
                {
                    DateTime dt = Convert.ToDateTime(StoreDT.Rows[i]["CreateDateTime"]);
                    if (dt.Year == InventoryDate.Year && dt.Month == InventoryDate.Month)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                        if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                            StoreDT.Rows[i]["MonthInvoiceCount"] = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) + MonthInvoiceCount;
                        else
                            StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
                    }

                }
            }
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID NOT IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        //горизонтальный лист
        public void InventoryReport(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 9;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 9;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                //sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "InvoiceCount")
                    {
                        HeaderName = "Приход шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "CurrentCount")
                    {
                        HeaderName = "Остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт. остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }
            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}

        //вертикальный лист
        public void InventoryReport2(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 8;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 8;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString());
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                //sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "MonthInvoiceCount")
                    {
                        HeaderName = "Приход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "ExpenseCount")
                    {
                        HeaderName = "Расход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "SellingCount")
                    {
                        HeaderName = "Реализация";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "StartMonthCount")
                    {
                        HeaderName = "ОСТн";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "EndMonthCount")
                    {
                        HeaderName = "ОСТк";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }

            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

    }

    public class ManufactureStoreInventoryList
    {
        DateTime InventoryDate;

        int FactoryID = 0;
        int Month = 0;
        int Year = 0;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;

        DataTable[] StoreCategoryDT;

        ArrayList[] HeaderNames;

        public ManufactureStoreInventoryList(int iFactoryID, string InventoryName,
            int iMonth, int iYear)
        {
            FactoryID = iFactoryID;
            Month = iMonth;
            Year = iYear;
            InventoryDate = new DateTime(Year, Month, 1);
            Initialize();
        }

        private void Initialize()
        {
            Create();
            Fill();
            FillStartEndCount();
            FillInvoice();
            FillExpense();
            FillSelling();
            CreateStoreCategory();
            FillStoreCategory();
            CreateHeaderColumns();
        }

        private void Create()
        {
            ColorsDT = new DataTable();
            MeasuresDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreGroupsDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            CreateCoversDT();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_storage.dbo.ManufactureStore.*, TechStore.MeasureID, TechStoreGroups.TechStoreGroupID, TechStoreSubGroups.TechStoreSubGroupID FROM infiniu2_storage.dbo.ManufactureInventoryDetails" +
                " INNER JOIN infiniu2_storage.dbo.ManufactureStore ON infiniu2_storage.dbo.ManufactureInventoryDetails.StoreID=infiniu2_storage.dbo.ManufactureStore.ManufactureStoreID AND infiniu2_storage.dbo.ManufactureStore.FactoryID = " + FactoryID +
                " INNER JOIN TechStore ON infiniu2_storage.dbo.ManufactureStore.StoreItemID = TechStore.TechStoreID" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID" +
                " WHERE InventoryID IN (SELECT InventoryID FROM infiniu2_storage.dbo.Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, InventoryDateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreDT);
            }

            StoreDT.Columns.Add("StartMonthCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("ExpenseCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("SellingCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("EndMonthCount", Type.GetType("System.Int32"));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN" +
                " (SELECT TechStoreGroupID FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore WHERE FactoryID = " + FactoryID + ")))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore WHERE FactoryID = " + FactoryID + "))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void CreateStoreCategory()
        {
            DataTable TempDT = new DataTable();
            StoreCategoryDT = new DataTable[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                StoreCategoryDT[i] = new DataTable()
                {
                    TableName = StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString()
                };
                StoreCategoryDT[i].Columns.Add("ID", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("StoreItem", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Measure", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Cover", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Color", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Patina", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Diameter", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Thickness", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Length", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Height", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Width", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Admission", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Capacity", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Weight", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("SellingCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
                //StoreCategoryDT[i].Columns.Add("InvoiceCount", Type.GetType("System.Int32"));
                //StoreCategoryDT[i].Columns.Add("CurrentCount", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("FactCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Notes", Type.GetType("System.String"));
            }
        }

        private void FillStoreCategory()
        {
            DataTable TempDT = new DataTable();
            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                DataRow[] StoreRows = StoreDT.Select("TechStoreGroupID = " + Convert.ToInt32(StoreGroupsDT.Rows[i]["TechStoreGroupID"]));

                foreach (DataRow Row in StoreRows)
                {
                    DataRow NewRow = StoreCategoryDT[i].NewRow();

                    NewRow["ID"] = Row["ManufactureStoreID"];
                    if (Row["StoreItemID"] != DBNull.Value)
                        NewRow["StoreItem"] = GetItemName(Convert.ToInt32(Row["StoreItemID"]));
                    if (Row["MeasureID"] != DBNull.Value)
                        NewRow["Measure"] = GetMeasure(Convert.ToInt32(Row["MeasureID"]));
                    NewRow["Diameter"] = Row["Diameter"];
                    NewRow["Capacity"] = Row["Capacity"];
                    NewRow["Thickness"] = Row["Thickness"];
                    NewRow["Length"] = Row["Length"];
                    NewRow["Height"] = Row["Height"];
                    NewRow["Width"] = Row["Width"];
                    NewRow["Admission"] = Row["Admission"];
                    NewRow["Weight"] = Row["Weight"];
                    if (Row["CoverID"] != DBNull.Value)
                        NewRow["Cover"] = GetCoverName(Convert.ToInt32(Row["CoverID"]));
                    if (Row["PatinaID"] != DBNull.Value)
                        NewRow["Patina"] = GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                    if (Row["ColorID"] != DBNull.Value)
                        NewRow["Color"] = GetColorName(Convert.ToInt32(Row["ColorID"]));

                    NewRow["StartMonthCount"] = Row["StartMonthCount"];
                    NewRow["MonthInvoiceCount"] = Row["MonthInvoiceCount"];
                    NewRow["ExpenseCount"] = Row["ExpenseCount"];
                    NewRow["SellingCount"] = Row["SellingCount"];
                    NewRow["EndMonthCount"] = Row["CurrentCount"];
                    //NewRow["InvoiceCount"] = Row["InvoiceCount"];
                    //NewRow["CurrentCount"] = Row["CurrentCount"];

                    StoreCategoryDT[i].Rows.Add(NewRow);
                }

                using (DataView DV = new DataView(
                    StoreCategoryDT[i],
                    string.Empty,
                    "StoreItem, Cover, Patina, Color, Length, Height, Width, Weight",
                    DataViewRowState.CurrentRows))
                {
                    TempDT.Clear();
                    TempDT = DV.ToTable();
                    StoreCategoryDT[i].Clear();
                    StoreCategoryDT[i] = TempDT.Copy();
                }
            }
            TempDT.Dispose();
        }

        private void CreateHeaderColumns()
        {
            HeaderNames = new ArrayList[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                HeaderNames[i] = new ArrayList();
                foreach (DataColumn Column in StoreCategoryDT[i].Columns)
                {
                    foreach (DataRow Row in StoreCategoryDT[i].Rows)
                    {
                        if (Column.ColumnName == "StartMonthCount"
                            || Column.ColumnName == "MonthInvoiceCount"
                            || Column.ColumnName == "ExpenseCount"
                            || Column.ColumnName == "SellingCount"
                            || Column.ColumnName == "EndMonthCount")
                            continue;
                        if (Row[Column.ColumnName] != DBNull.Value)
                        {
                            HeaderNames[i].Add(Column.ColumnName);
                            break;
                        }
                    }
                }
                HeaderNames[i].Add("StartMonthCount");
                HeaderNames[i].Add("MonthInvoiceCount");
                HeaderNames[i].Add("ExpenseCount");
                HeaderNames[i].Add("SellingCount");
                HeaderNames[i].Add("EndMonthCount");
                HeaderNames[i].Add("FactCount");
                HeaderNames[i].Add("Notes");
                //HeaderNames[i].Insert(0, "ID");
            }
        }

        #region Get functions

        private string GetMeasure(int MeasureID)
        {
            DataRow[] Rows = MeasuresDT.Select("MeasureID = " + MeasureID);
            return Rows[0]["Measure"].ToString();
        }

        public string GetColorName(int ColorID)
        {
            DataRow[] Rows = ColorsDT.Select("ColorID = " + ColorID);
            return Rows[0]["ColorName"].ToString();
        }

        private string GetCoverName(int CoverID)
        {
            DataRow[] Rows = CoversDT.Select("CoverID = " + CoverID);
            return Rows[0]["CoverName"].ToString();
        }

        public string GetPatinaName(int PatinaID)
        {
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + PatinaID);
            return Rows[0]["PatinaName"].ToString();
        }

        private string GetItemName(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["TechStoreName"].ToString();
        }

        #endregion

        public void FillStartEndCount()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal StartCount = 0;
            decimal EndCount = 0;
            int StoreID = -1;

            DataTable InventoryDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM ManufactureInventoryDetails" +
                " WHERE InventoryID IN (SELECT InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InventoryDetailsDT);

                for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
                {
                    StartCount = 0;
                    StartCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["StartMonthCount"]);
                    EndCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["EndMonthCount"]);
                    StoreID = Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]);

                    DataRow[] StoreRows = StoreDT.Select("ManufactureStoreID = " + StoreID);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["StartMonthCount"] = StartCount;
                        StoreRows[0]["EndMonthCount"] = EndCount;
                    }
                }
            }
            InventoryDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
            //    " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
            //    " AND DATEPART(year, IncomeDate) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(PurchaseInvoicesDT);

            //    for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
            //    {
            //        PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

            //        DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
            //        foreach (DataRow Row in StoreRows)
            //        {
            //            MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
            //            Row["MonthInvoiceCount"] = MonthInvoiceCount;
            //        }
            //    }
            //}

            PurchaseInvoicesDT.Dispose();
            PurchaseInvoicesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>2 AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["MovementInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("MovementInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            //for (int i = 0; i < StoreDT.Rows.Count; i++)
            //{
            //    if (StoreDT.Rows[i]["DecorAssignmentID"] == DBNull.Value)
            //        continue;
            //    int DecorAssignmentID = Convert.ToInt32(StoreDT.Rows[i]["DecorAssignmentID"]);

            //    MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
            //    StoreDT.Rows[i]["MonthInvoiceCount"] = MonthInvoiceCount;
            //}
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND SellerStoreAllocID IN (3, 4) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("ManufactureStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND SellerStoreAllocID IN (3, 4) AND RecipientStoreAllocID IN (1, 2, 3, 4)" +
                " AND DATEPART(month, DateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')" +
                " AND DATEPART(year, DateTime) = DATEPART(year, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("ManufactureStoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        //горизонтальный лист
        public void InventoryReport(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 9;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 9;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                //sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "InvoiceCount")
                    {
                        HeaderName = "Приход шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "CurrentCount")
                    {
                        HeaderName = "Остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт. остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }
            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}

        //вертикальный лист
        public void InventoryReport2(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 8;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 8;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString());
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                //sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "MonthInvoiceCount")
                    {
                        HeaderName = "Приход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "ExpenseCount")
                    {
                        HeaderName = "Расход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "SellingCount")
                    {
                        HeaderName = "Реализация";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "StartMonthCount")
                    {
                        HeaderName = "ОСТн";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "EndMonthCount")
                    {
                        HeaderName = "ОСТк";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }

            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

    }

    public class ReadyStoreInventoryList
    {
        DateTime InventoryDate;

        int FactoryID = 0;
        int Month = 0;
        int Year = 0;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;

        DataTable[] StoreCategoryDT;

        ArrayList[] HeaderNames;

        public ReadyStoreInventoryList(int iFactoryID, string InventoryName,
            int iMonth, int iYear)
        {
            FactoryID = iFactoryID;
            Month = iMonth;
            Year = iYear;
            InventoryDate = new DateTime(Year, Month, 1);
            Initialize();
        }

        private void Initialize()
        {
            Create();
            Fill();
            FillStartEndCount();
            FillInvoice();
            FillExpense();
            FillSelling();
            CreateStoreCategory();
            FillStoreCategory();
            CreateHeaderColumns();
        }

        private void Create()
        {
            ColorsDT = new DataTable();
            MeasuresDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreGroupsDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            CreateCoversDT();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Store.*, TechStore.MeasureID, TechStoreGroups.TechStoreGroupID, TechStoreSubGroups.TechStoreSubGroupID FROM Store" +
                " INNER JOIN TechStore ON Store.StoreItemID = TechStore.TechStoreID" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID" +
                " INNER JOIN InventoryDetails ON Store.StoreID = InventoryDetails.StoreID" +
                " AND InventoryID IN (SELECT InventoryID FROM Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))" +
                " AND PurchaseInvoiceID NOT IN (SELECT PurchaseInvoiceID FROM PurchaseInvoices WHERE CAST(IncomeDate AS DATE) >= '" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')" +
                " WHERE FactoryID = " + FactoryID,
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
            }
            StoreDT.Columns.Add("StartMonthCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("ExpenseCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("SellingCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("EndMonthCount", Type.GetType("System.Int32"));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN" +
                " (SELECT TechStoreGroupID FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM Store WHERE FactoryID = " + FactoryID + ")))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM Store WHERE FactoryID = " + FactoryID + "))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void CreateStoreCategory()
        {
            DataTable TempDT = new DataTable();
            StoreCategoryDT = new DataTable[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                StoreCategoryDT[i] = new DataTable()
                {
                    TableName = StoreGroupsDT.Rows[i]["StoreGroup"].ToString()
                };
                StoreCategoryDT[i].Columns.Add("ID", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("StoreItem", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Measure", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Cover", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Color", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Patina", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Diameter", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Thickness", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Length", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Height", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Width", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Admission", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Capacity", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Weight", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("SellingCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
                //StoreCategoryDT[i].Columns.Add("InvoiceCount", Type.GetType("System.Int32"));
                //StoreCategoryDT[i].Columns.Add("CurrentCount", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("FactCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Notes", Type.GetType("System.String"));
            }
        }

        private void FillStoreCategory()
        {
            DataTable TempDT = new DataTable();
            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                DataRow[] StoreRows = StoreDT.Select("TechStoreGroupID = " + Convert.ToInt32(StoreGroupsDT.Rows[i]["TechStoreGroupID"]));

                foreach (DataRow Row in StoreRows)
                {
                    DataRow NewRow = StoreCategoryDT[i].NewRow();

                    NewRow["ID"] = Row["StoreID"];
                    if (Row["StoreItemID"] != DBNull.Value)
                        NewRow["StoreItem"] = GetItemName(Convert.ToInt32(Row["StoreItemID"]));
                    if (Row["MeasureID"] != DBNull.Value)
                        NewRow["Measure"] = GetMeasure(Convert.ToInt32(Row["MeasureID"]));
                    NewRow["Diameter"] = Row["Diameter"];
                    NewRow["Capacity"] = Row["Capacity"];
                    NewRow["Thickness"] = Row["Thickness"];
                    NewRow["Length"] = Row["Length"];
                    NewRow["Height"] = Row["Height"];
                    NewRow["Width"] = Row["Width"];
                    NewRow["Admission"] = Row["Admission"];
                    NewRow["Weight"] = Row["Weight"];
                    if (Row["CoverID"] != DBNull.Value)
                        NewRow["Cover"] = GetCoverName(Convert.ToInt32(Row["CoverID"]));
                    if (Row["PatinaID"] != DBNull.Value)
                        NewRow["Patina"] = GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                    if (Row["ColorID"] != DBNull.Value)
                        NewRow["Color"] = GetColorName(Convert.ToInt32(Row["ColorID"]));

                    NewRow["StartMonthCount"] = Row["StartMonthCount"];
                    NewRow["MonthInvoiceCount"] = Row["MonthInvoiceCount"];
                    NewRow["ExpenseCount"] = Row["ExpenseCount"];
                    NewRow["SellingCount"] = Row["SellingCount"];
                    NewRow["EndMonthCount"] = Row["CurrentCount"];
                    //NewRow["InvoiceCount"] = Row["InvoiceCount"];
                    //NewRow["CurrentCount"] = Row["CurrentCount"];

                    StoreCategoryDT[i].Rows.Add(NewRow);
                }

                using (DataView DV = new DataView(
                    StoreCategoryDT[i],
                    string.Empty,
                    "StoreItem, Cover, Patina, Color, Length, Height, Width, Weight",
                    DataViewRowState.CurrentRows))
                {
                    TempDT.Clear();
                    TempDT = DV.ToTable();
                    StoreCategoryDT[i].Clear();
                    StoreCategoryDT[i] = TempDT.Copy();
                }
            }
            TempDT.Dispose();
        }

        private void CreateHeaderColumns()
        {
            HeaderNames = new ArrayList[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                HeaderNames[i] = new ArrayList();
                foreach (DataColumn Column in StoreCategoryDT[i].Columns)
                {
                    foreach (DataRow Row in StoreCategoryDT[i].Rows)
                    {
                        if (Column.ColumnName == "StartMonthCount"
                            || Column.ColumnName == "MonthInvoiceCount"
                            || Column.ColumnName == "ExpenseCount"
                            || Column.ColumnName == "SellingCount"
                            || Column.ColumnName == "EndMonthCount")
                            continue;
                        if (Row[Column.ColumnName] != DBNull.Value)
                        {
                            HeaderNames[i].Add(Column.ColumnName);
                            break;
                        }
                    }
                }
                HeaderNames[i].Add("StartMonthCount");
                HeaderNames[i].Add("MonthInvoiceCount");
                HeaderNames[i].Add("ExpenseCount");
                HeaderNames[i].Add("SellingCount");
                HeaderNames[i].Add("EndMonthCount");
                HeaderNames[i].Add("FactCount");
                HeaderNames[i].Add("Notes");
                //HeaderNames[i].Insert(0, "ID");
            }
        }

        #region Get functions

        private string GetMeasure(int MeasureID)
        {
            DataRow[] Rows = MeasuresDT.Select("MeasureID = " + MeasureID);
            return Rows[0]["Measure"].ToString();
        }

        public string GetColorName(int ColorID)
        {
            DataRow[] Rows = ColorsDT.Select("ColorID = " + ColorID);
            return Rows[0]["ColorName"].ToString();
        }

        private string GetCoverName(int CoverID)
        {
            DataRow[] Rows = CoversDT.Select("CoverID = " + CoverID);
            return Rows[0]["CoverName"].ToString();
        }

        public string GetPatinaName(int PatinaID)
        {
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + PatinaID);
            return Rows[0]["PatinaName"].ToString();
        }

        private string GetItemName(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStore = " + StoreItemID);
            return Rows[0]["TechStoreName"].ToString();
        }

        #endregion

        public void FillStartEndCount()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal StartCount = 0;
            decimal EndCount = 0;
            int StoreID = -1;

            DataTable InventoryDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InventoryDetails" +
                " WHERE InventoryID IN (SELECT InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InventoryDetailsDT);

                for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
                {
                    StartCount = 0;
                    StartCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["StartMonthCount"]);
                    EndCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["EndMonthCount"]);
                    StoreID = Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]);

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreID);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["StartMonthCount"] = StartCount;
                        StoreRows[0]["EndMonthCount"] = EndCount;
                    }
                }
            }
            InventoryDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month,  '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (3, 4)" +
                " AND DATEPART(month, DateTime) = DATEPART(month,  '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        //горизонтальный лист
        public void InventoryReport(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 9;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 9;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                //sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "InvoiceCount")
                    {
                        HeaderName = "Приход шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "CurrentCount")
                    {
                        HeaderName = "Остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт. остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }
            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}

        //вертикальный лист
        public void InventoryReport2(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 8;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 8;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                //sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "MonthInvoiceCount")
                    {
                        HeaderName = "Приход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "ExpenseCount")
                    {
                        HeaderName = "Расход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "SellingCount")
                    {
                        HeaderName = "Реализация";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "StartMonthCount")
                    {
                        HeaderName = "ОСТн";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "EndMonthCount")
                    {
                        HeaderName = "ОСТк";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }

            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

    }

    public class PersonalStoreInventoryList
    {
        DateTime InventoryDate;

        int FactoryID = 0;
        int Month = 0;
        int Year = 0;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;

        DataTable[] StoreCategoryDT;

        ArrayList[] HeaderNames;

        public PersonalStoreInventoryList(int iFactoryID, string InventoryName,
            int iMonth, int iYear)
        {
            FactoryID = iFactoryID;
            Month = iMonth;
            Year = iYear;
            InventoryDate = new DateTime(Year, Month, 1);
            Initialize();
        }

        private void Initialize()
        {
            Create();
            Fill();
            FillStartEndCount();
            FillInvoice();
            FillExpense();
            FillSelling();
            CreateStoreCategory();
            FillStoreCategory();
            CreateHeaderColumns();
        }

        private void Create()
        {
            ColorsDT = new DataTable();
            MeasuresDT = new DataTable();
            PatinaDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreGroupsDT = new DataTable();
            StoreSubGroupsDT = new DataTable();
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        public void Fill()
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            CreateCoversDT();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_storage.dbo.Store.*, TechStore.MeasureID, TechStoreGroups.TechStoreGroupID, TechStoreSubGroups.TechStoreSubGroupID FROM infiniu2_storage.dbo.Store" +
                " INNER JOIN TechStore ON Store.StoreItemID = TechStore.TechStoreID" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID" +
                " INNER JOIN infiniu2_storage.dbo.InventoryDetails ON Store.StoreID = infiniu2_storage.dbo.InventoryDetails.StoreID" +
                " AND InventoryID IN (SELECT InventoryID FROM infiniu2_storage.dbo.Inventory WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))" +
                " AND PurchaseInvoiceID NOT IN (SELECT PurchaseInvoiceID FROM infiniu2_storage.dbo.PurchaseInvoices WHERE CAST(IncomeDate AS DATE) >= '" + InventoryDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')" +
                " WHERE FactoryID = " + FactoryID,
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreDT);
            }
            StoreDT.Columns.Add("StartMonthCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("ExpenseCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("SellingCount", Type.GetType("System.Int32"));
            StoreDT.Columns.Add("EndMonthCount", Type.GetType("System.Int32"));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " WHERE TechStoreGroupID IN" +
                " (SELECT TechStoreGroupID FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store WHERE FactoryID = " + FactoryID + ")))" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " WHERE TechStoreSubGroupID IN" +
                " (SELECT TechStoreSubGroupID FROM TechStore" +
                " WHERE TechStoreID IN" +
                " (SELECT DISTINCT StoreItemID FROM infiniu2_storage.dbo.Store WHERE FactoryID = " + FactoryID + "))" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void CreateStoreCategory()
        {
            DataTable TempDT = new DataTable();
            StoreCategoryDT = new DataTable[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                StoreCategoryDT[i] = new DataTable()
                {
                    TableName = StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString()
                };
                StoreCategoryDT[i].Columns.Add("ID", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("StoreItem", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Measure", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Cover", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Color", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Patina", Type.GetType("System.String"));
                StoreCategoryDT[i].Columns.Add("Diameter", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Thickness", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Length", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Height", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Width", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Admission", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Capacity", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Weight", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("SellingCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
                //StoreCategoryDT[i].Columns.Add("InvoiceCount", Type.GetType("System.Int32"));
                //StoreCategoryDT[i].Columns.Add("CurrentCount", Type.GetType("System.Int32"));
                StoreCategoryDT[i].Columns.Add("FactCount", Type.GetType("System.Decimal"));
                StoreCategoryDT[i].Columns.Add("Notes", Type.GetType("System.String"));
            }
        }

        private void FillStoreCategory()
        {
            DataTable TempDT = new DataTable();
            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                DataRow[] StoreRows = StoreDT.Select("TechStoreGroupID = " + Convert.ToInt32(StoreGroupsDT.Rows[i]["TechStoreGroupID"]));

                foreach (DataRow Row in StoreRows)
                {
                    DataRow NewRow = StoreCategoryDT[i].NewRow();

                    NewRow["ID"] = Row["StoreID"];
                    if (Row["StoreItemID"] != DBNull.Value)
                        NewRow["StoreItem"] = GetItemName(Convert.ToInt32(Row["StoreItemID"]));
                    if (Row["MeasureID"] != DBNull.Value)
                        NewRow["Measure"] = GetMeasure(Convert.ToInt32(Row["MeasureID"]));
                    NewRow["Diameter"] = Row["Diameter"];
                    NewRow["Capacity"] = Row["Capacity"];
                    NewRow["Thickness"] = Row["Thickness"];
                    NewRow["Length"] = Row["Length"];
                    NewRow["Height"] = Row["Height"];
                    NewRow["Width"] = Row["Width"];
                    NewRow["Admission"] = Row["Admission"];
                    NewRow["Weight"] = Row["Weight"];
                    if (Row["CoverID"] != DBNull.Value)
                        NewRow["Cover"] = GetCoverName(Convert.ToInt32(Row["CoverID"]));
                    if (Row["PatinaID"] != DBNull.Value)
                        NewRow["Patina"] = GetPatinaName(Convert.ToInt32(Row["PatinaID"]));
                    if (Row["ColorID"] != DBNull.Value)
                        NewRow["Color"] = GetColorName(Convert.ToInt32(Row["ColorID"]));

                    NewRow["StartMonthCount"] = Row["StartMonthCount"];
                    NewRow["MonthInvoiceCount"] = Row["MonthInvoiceCount"];
                    NewRow["ExpenseCount"] = Row["ExpenseCount"];
                    NewRow["SellingCount"] = Row["SellingCount"];
                    NewRow["EndMonthCount"] = Row["CurrentCount"];
                    //NewRow["InvoiceCount"] = Row["InvoiceCount"];
                    //NewRow["CurrentCount"] = Row["CurrentCount"];

                    StoreCategoryDT[i].Rows.Add(NewRow);
                }

                using (DataView DV = new DataView(
                    StoreCategoryDT[i],
                    string.Empty,
                    "StoreItem, Cover, Patina, Color, Length, Height, Width, Weight",
                    DataViewRowState.CurrentRows))
                {
                    TempDT.Clear();
                    TempDT = DV.ToTable();
                    StoreCategoryDT[i].Clear();
                    StoreCategoryDT[i] = TempDT.Copy();
                }
            }
            TempDT.Dispose();
        }

        private void CreateHeaderColumns()
        {
            HeaderNames = new ArrayList[StoreGroupsDT.Rows.Count];

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                HeaderNames[i] = new ArrayList();
                foreach (DataColumn Column in StoreCategoryDT[i].Columns)
                {
                    foreach (DataRow Row in StoreCategoryDT[i].Rows)
                    {
                        if (Column.ColumnName == "StartMonthCount"
                            || Column.ColumnName == "MonthInvoiceCount"
                            || Column.ColumnName == "ExpenseCount"
                            || Column.ColumnName == "SellingCount"
                            || Column.ColumnName == "EndMonthCount")
                            continue;
                        if (Row[Column.ColumnName] != DBNull.Value)
                        {
                            HeaderNames[i].Add(Column.ColumnName);
                            break;
                        }
                    }
                }
                HeaderNames[i].Add("StartMonthCount");
                HeaderNames[i].Add("MonthInvoiceCount");
                HeaderNames[i].Add("ExpenseCount");
                HeaderNames[i].Add("SellingCount");
                HeaderNames[i].Add("EndMonthCount");
                HeaderNames[i].Add("FactCount");
                HeaderNames[i].Add("Notes");
                //HeaderNames[i].Insert(0, "ID");
            }
        }

        #region Get functions

        private string GetMeasure(int MeasureID)
        {
            DataRow[] Rows = MeasuresDT.Select("MeasureID = " + MeasureID);
            return Rows[0]["Measure"].ToString();
        }

        public string GetColorName(int ColorID)
        {
            DataRow[] Rows = ColorsDT.Select("ColorID = " + ColorID);
            return Rows[0]["ColorName"].ToString();
        }

        private string GetCoverName(int CoverID)
        {
            DataRow[] Rows = CoversDT.Select("CoverID = " + CoverID);
            return Rows[0]["CoverName"].ToString();
        }

        public string GetPatinaName(int PatinaID)
        {
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + PatinaID);
            return Rows[0]["PatinaName"].ToString();
        }

        private string GetItemName(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["TechStoreName"].ToString();
        }

        #endregion

        public void FillStartEndCount()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal StartCount = 0;
            decimal EndCount = 0;
            int StoreID = -1;

            DataTable InventoryDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InventoryDetails" +
                " WHERE InventoryID IN (SELECT InventoryID FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(InventoryDetailsDT);

                for (int i = 0; i < InventoryDetailsDT.Rows.Count; i++)
                {
                    StartCount = 0;
                    StartCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["StartMonthCount"]);
                    EndCount = Convert.ToDecimal(InventoryDetailsDT.Rows[i]["EndMonthCount"]);
                    StoreID = Convert.ToInt32(InventoryDetailsDT.Rows[i]["StoreID"]);

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreID);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["StartMonthCount"] = StartCount;
                        StoreRows[0]["EndMonthCount"] = EndCount;
                    }
                }
            }
            InventoryDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillInvoice()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal MonthInvoiceCount = 0;
            int PurchaseInvoiceID = -1;

            DataTable PurchaseInvoicesDT = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE DATEPART(month, IncomeDate) = DATEPART(month, '" + InventoryDate.ToString("yyyy-MM-dd") + "')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);

                for (int i = 0; i < PurchaseInvoicesDT.Rows.Count; i++)
                {
                    PurchaseInvoiceID = Convert.ToInt32(PurchaseInvoicesDT.Rows[i]["PurchaseInvoiceID"]);

                    DataRow[] StoreRows = StoreDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
                    foreach (DataRow Row in StoreRows)
                    {
                        MonthInvoiceCount = Convert.ToDecimal(Row["InvoiceCount"]);
                        Row["MonthInvoiceCount"] = MonthInvoiceCount;
                    }
                }
            }
            PurchaseInvoicesDT.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillSelling()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal SellingCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (12, 13)" +
                " AND DATEPART(month, DateTime) = DATEPART(month,  '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    SellingCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        SellingCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["SellingCount"] = SellingCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        public void FillExpense()
        {
            System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
            sw.Start();

            decimal ExpenseCount = 0;
            int StoreIDFrom = -1;

            DataTable MovementInvoiceDetailsDT = new DataTable();
            DataTable Table = new DataTable();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (3, 4)" +
                " AND DATEPART(month, DateTime) = DATEPART(month,  '" + InventoryDate.ToString("yyyy-MM-dd") + "'))",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(MovementInvoiceDetailsDT);

                using (DataView DV = new DataView(MovementInvoiceDetailsDT))
                {
                    Table = DV.ToTable(true, new string[] { "StoreIDFrom" });
                }

                for (int i = 0; i < Table.Rows.Count; i++)
                {
                    ExpenseCount = 0;
                    StoreIDFrom = Convert.ToInt32(Table.Rows[i]["StoreIDFrom"]);

                    DataRow[] MRows = MovementInvoiceDetailsDT.Select("StoreIDFrom = " + StoreIDFrom);
                    foreach (DataRow Row in MRows)
                    {
                        ExpenseCount += Convert.ToDecimal(Row["Count"]);
                    }

                    DataRow[] StoreRows = StoreDT.Select("StoreID = " + StoreIDFrom);
                    if (StoreRows.Count() > 0)
                    {
                        StoreRows[0]["ExpenseCount"] = ExpenseCount;
                    }
                }
            }
            MovementInvoiceDetailsDT.Dispose();
            Table.Dispose();
            sw.Stop();
            double G = sw.Elapsed.TotalSeconds;
        }

        //горизонтальный лист
        public void InventoryReport(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 9;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 9;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                //sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "InvoiceCount")
                    {
                        HeaderName = "Приход шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "CurrentCount")
                    {
                        HeaderName = "Остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт. остаток шт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }
            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}

        //вертикальный лист
        public void InventoryReport2(string InventoryName)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int ColumnIndex = -1;
            int RowIndex = 1;
            int ColumnWidth = 0;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupNameFont = hssfworkbook.CreateFont();
            StoreGroupNameFont.FontHeightInPoints = 16;
            StoreGroupNameFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            StoreGroupNameFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupNameStyle = hssfworkbook.CreateCellStyle();
            StoreGroupNameStyle.SetFont(StoreGroupNameFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 8;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            HSSFFont SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 8;
            SimpleFont.FontName = "Calibri";

            HSSFCellStyle SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.SetFont(SimpleFont);

            #endregion

            for (int i = 0; i < StoreGroupsDT.Rows.Count; i++)
            {
                RowIndex = 1;

                HSSFSheet sheet1 = hssfworkbook.CreateSheet(StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString());
                sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

                sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
                sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
                sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
                sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

                //sheet1.PrintSetup.Landscape = true;

                HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["TechStoreGroupName"].ToString());
                StoreGroupNameCell.CellStyle = StoreGroupNameStyle;

                for (int j = 0; j < HeaderNames[i].Count; j++)
                {
                    if (HeaderNames[i][j].ToString() == "ID")
                    {
                        HeaderName = "ID";
                        ColumnWidth = 5;
                    }
                    if (HeaderNames[i][j].ToString() == "StoreItem")
                    {
                        HeaderName = "Наименование";
                        ColumnWidth = 30;
                    }
                    if (HeaderNames[i][j].ToString() == "Measure")
                    {
                        HeaderName = "Ед.изм.";
                        ColumnWidth = 8;
                    }
                    if (HeaderNames[i][j].ToString() == "Diameter")
                    {
                        HeaderName = "Диаметр мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Capacity")
                    {
                        HeaderName = "Емкость л";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Thickness")
                    {
                        HeaderName = "Толщина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Length")
                    {
                        HeaderName = "Длина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Height")
                    {
                        HeaderName = "Высота мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Width")
                    {
                        HeaderName = "Ширина мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Admission")
                    {
                        HeaderName = "Допуск мм";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Cover")
                    {
                        HeaderName = "Облицовка";
                        ColumnWidth = 18;
                    }
                    if (HeaderNames[i][j].ToString() == "Patina")
                    {
                        HeaderName = "Патина";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "Color")
                    {
                        HeaderName = "Цвет";
                        ColumnWidth = 17;
                    }
                    if (HeaderNames[i][j].ToString() == "Weight")
                    {
                        HeaderName = "Вес кг";
                        ColumnWidth = 9;
                    }
                    if (HeaderNames[i][j].ToString() == "MonthInvoiceCount")
                    {
                        HeaderName = "Приход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "ExpenseCount")
                    {
                        HeaderName = "Расход";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "SellingCount")
                    {
                        HeaderName = "Реализация";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "StartMonthCount")
                    {
                        HeaderName = "ОСТн";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "EndMonthCount")
                    {
                        HeaderName = "ОСТк";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "FactCount")
                    {
                        HeaderName = "Факт.";
                        ColumnWidth = 7;
                    }
                    if (HeaderNames[i][j].ToString() == "Notes")
                    {
                        HeaderName = "Примечание";
                        ColumnWidth = 15;
                    }

                    HSSFCell cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), j, HeaderName);
                    cell.CellStyle = HeaderStyle;
                    sheet1.SetColumnWidth(j, ColumnWidth * 256);
                }

                for (int x = 0; x < StoreCategoryDT[i].Rows.Count; x++)
                {
                    ColumnIndex = -1;

                    for (int y = 0; y < StoreCategoryDT[i].Columns.Count; y++)
                    {
                        if (!HeaderNames[i].Contains(StoreCategoryDT[i].Columns[y].ColumnName))
                        {
                            continue;
                        }

                        Type t = StoreCategoryDT[i].Rows[x][y].GetType();
                        ColumnIndex++;
                        if (t.Name == "Decimal")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToDouble(StoreCategoryDT[i].Rows[x][y]));

                            HSSFCellStyle cellStyle = hssfworkbook.CreateCellStyle();
                            cellStyle.DataFormat = HSSFDataFormat.GetBuiltinFormat("0.00");
                            cellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
                            cellStyle.BottomBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
                            cellStyle.LeftBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
                            cellStyle.RightBorderColor = HSSFColor.BLACK.index;
                            cellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
                            cellStyle.TopBorderColor = HSSFColor.BLACK.index;
                            cellStyle.SetFont(SimpleFont);
                            cell.CellStyle = cellStyle;
                            continue;
                        }
                        if (t.Name == "Int32")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(Convert.ToInt32(StoreCategoryDT[i].Rows[x][y]));
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }

                        if (t.Name == "String" || t.Name == "DBNull")
                        {
                            HSSFCell cell = sheet1.CreateRow(RowIndex + 1).CreateCell(ColumnIndex);
                            cell.SetCellValue(StoreCategoryDT[i].Rows[x][y].ToString());
                            cell.CellStyle = SimpleCellStyle;
                            continue;
                        }
                    }
                    RowIndex++;
                }

            }

            //string ReportFilePath = ReadReportFilePath("InventoryListReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = string.Empty;
            FileName = InventoryName + " ЗОВ-Профиль";
            if (FactoryID == 2)
                FileName = InventoryName + " ЗОВ-ТПС";

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

    }






    public class NewInventoryParameters
    {
        public int Month = 0;
        public int Year = 0;
        public bool OKPress = false;
    }

    public class ReportParameters
    {
        public int DatePeriodType = 0;
        public int QuarterNumber = 0;
        public int ReportType = 0;
        public bool OKPress = false;
        public DateTime FirstDate;
        public DateTime SecondDate;
        public ArrayList SubGroups;
    }

    public class WriteOffParameters
    {
        public bool OKPress = false;
        public string User1 = string.Empty;
        public string User2 = string.Empty;
        public string User3 = string.Empty;
        public string User4 = string.Empty;
        public string User5 = string.Empty;
        public DateTime WriteOffDate;
    }

    public class NewMovementParameters
    {
        public string PersonName = string.Empty;
        public int SellerStoreAllocID = 0;
        public int RecipientStoreAllocID = 0;
        public int RecipientSectorID = 0;
        public int PersonID = 0;
        public int StoreKeeperID = 0;
        public int ClientID = 0;
        public int SellerID = 0;
        public string ClientName = string.Empty;
        public string Notes = string.Empty;
        public object DateTime = DBNull.Value;
        public int MovementInvoiceID = -1;
        public int FactoryID = -1;
        public bool OKPress = false;
    }



    public class MovementInvoiceToExcel
    {
        int MovementInvoiceID = 0;
        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;

        DataTable MovementInvoicesDT;
        DataTable ResultTableDT;

        public MovementInvoiceToExcel(int iMovementInvoiceID)
        {
            MovementInvoiceID = iMovementInvoiceID;
            Initialize();
            Create();
            Fill();
            FillResultTable();
        }

        private void Initialize()
        {
        }

        private void Create()
        {
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            MeasuresDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            MovementInvoicesDT = new DataTable();

            ResultTableDT = new DataTable();
            ResultTableDT.Columns.Add("StoreItem", Type.GetType("System.String"));
            ResultTableDT.Columns.Add("Measure", Type.GetType("System.String"));
            ResultTableDT.Columns.Add("Cover", Type.GetType("System.String"));
            ResultTableDT.Columns.Add("Color", Type.GetType("System.String"));
            ResultTableDT.Columns.Add("Patina", Type.GetType("System.String"));
            ResultTableDT.Columns.Add("Diameter", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("Thickness", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("Length", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("Height", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("Width", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("Admission", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("Capacity", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("Weight", Type.GetType("System.Decimal"));
            ResultTableDT.Columns.Add("InvoiceCount", Type.GetType("System.Decimal"));
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void Fill()
        {
            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            CreateCoversDT();
            int RecipientStoreAllocID = 0;
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoices WHERE MovementInvoiceID=" + MovementInvoiceID,
                ConnectionStrings.StorageConnectionString))
            {
                if (DA.Fill(MovementInvoicesDT) > 0)
                    RecipientStoreAllocID = Convert.ToInt32(MovementInvoicesDT.Rows[0]["RecipientStoreAllocID"]);
            }

            string SelectCommand = @"SELECT Store.*,
                infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_catalog.dbo.TechStore.Thickness AS SThickness,
                infiniu2_catalog.dbo.TechStore.Length AS SLength, infiniu2_catalog.dbo.TechStore.Height AS SHeight, infiniu2_catalog.dbo.TechStore.Width AS SWidth, infiniu2_catalog.dbo.TechStore.Admission AS SAdmission, 
                infiniu2_catalog.dbo.TechStore.Diameter AS SDiameter, infiniu2_catalog.dbo.TechStore.Capacity AS SCapacity, infiniu2_catalog.dbo.TechStore.Weight AS SWeight FROM Store
                INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID WHERE MovementInvoiceID=" + MovementInvoiceID;
            string SelectCommand1 = @"SELECT TechStoreID, TechStoreName, MeasureID FROM TechStore WHERE TechStoreID IN (SELECT StoreItemID FROM infiniu2_storage.dbo.Store WHERE MovementInvoiceID=" + MovementInvoiceID + ")";
            if (RecipientStoreAllocID == 3 || RecipientStoreAllocID == 4)
            {
                SelectCommand = @"SELECT ManufactureStore.*,
                infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_catalog.dbo.TechStore.Thickness AS SThickness,
                infiniu2_catalog.dbo.TechStore.Length AS SLength, infiniu2_catalog.dbo.TechStore.Height AS SHeight, infiniu2_catalog.dbo.TechStore.Width AS SWidth, infiniu2_catalog.dbo.TechStore.Admission AS SAdmission, 
                infiniu2_catalog.dbo.TechStore.Diameter AS SDiameter, infiniu2_catalog.dbo.TechStore.Capacity AS SCapacity, infiniu2_catalog.dbo.TechStore.Weight AS SWeight FROM ManufactureStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID WHERE MovementInvoiceID=" + MovementInvoiceID;
                SelectCommand1 = @"SELECT TechStoreID, TechStoreName, MeasureID FROM TechStore WHERE TechStoreID IN (SELECT StoreItemID FROM infiniu2_storage.dbo.ManufactureStore WHERE MovementInvoiceID=" + MovementInvoiceID + ")";
            }
            if (RecipientStoreAllocID == 10 || RecipientStoreAllocID == 11)
            {
                SelectCommand = @"SELECT ReadyStore.*,
                infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_catalog.dbo.TechStore.Thickness AS SThickness,
                infiniu2_catalog.dbo.TechStore.Length AS SLength, infiniu2_catalog.dbo.TechStore.Height AS SHeight, infiniu2_catalog.dbo.TechStore.Width AS SWidth, infiniu2_catalog.dbo.TechStore.Admission AS SAdmission, 
                infiniu2_catalog.dbo.TechStore.Diameter AS SDiameter, infiniu2_catalog.dbo.TechStore.Capacity AS SCapacity, infiniu2_catalog.dbo.TechStore.Weight AS SWeight FROM ReadyStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON ReadyStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID WHERE MovementInvoiceID=" + MovementInvoiceID;
                SelectCommand1 = @"SELECT TechStoreID, TechStoreName, MeasureID FROM TechStore WHERE TechStoreID IN (SELECT StoreItemID FROM infiniu2_storage.dbo.ReadyStore WHERE MovementInvoiceID=" + MovementInvoiceID + ")";
            }
            if (RecipientStoreAllocID == 12 || RecipientStoreAllocID == 13)
            {
                SelectCommand = @"SELECT WriteOffStore.*,
                infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_catalog.dbo.TechStore.Thickness AS SThickness,
                infiniu2_catalog.dbo.TechStore.Length AS SLength, infiniu2_catalog.dbo.TechStore.Height AS SHeight, infiniu2_catalog.dbo.TechStore.Width AS SWidth, infiniu2_catalog.dbo.TechStore.Admission AS SAdmission, 
                infiniu2_catalog.dbo.TechStore.Diameter AS SDiameter, infiniu2_catalog.dbo.TechStore.Capacity AS SCapacity, infiniu2_catalog.dbo.TechStore.Weight AS SWeight FROM WriteOffStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON WriteOffStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID WHERE MovementInvoiceID=" + MovementInvoiceID;
                SelectCommand1 = @"SELECT TechStoreID, TechStoreName, MeasureID FROM TechStore WHERE TechStoreID IN (SELECT StoreItemID FROM infiniu2_storage.dbo.WriteOffStore WHERE MovementInvoiceID=" + MovementInvoiceID + ")";
            }
            if (RecipientStoreAllocID == 9)
            {
                SelectCommand = @"SELECT PersonalStore.*,
                infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_catalog.dbo.TechStore.Thickness AS SThickness,
                infiniu2_catalog.dbo.TechStore.Length AS SLength, infiniu2_catalog.dbo.TechStore.Height AS SHeight, infiniu2_catalog.dbo.TechStore.Width AS SWidth, infiniu2_catalog.dbo.TechStore.Admission AS SAdmission, 
                infiniu2_catalog.dbo.TechStore.Diameter AS SDiameter, infiniu2_catalog.dbo.TechStore.Capacity AS SCapacity, infiniu2_catalog.dbo.TechStore.Weight AS SWeight FROM PersonalStore
                INNER JOIN infiniu2_catalog.dbo.TechStore ON PersonalStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID WHERE MovementInvoiceID=" + MovementInvoiceID;
                SelectCommand1 = @"SELECT TechStoreID, TechStoreName, MeasureID FROM TechStore WHERE TechStoreID IN (SELECT StoreItemID FROM infiniu2_storage.dbo.PersonalStore WHERE MovementInvoiceID=" + MovementInvoiceID + ")";
            }
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand1, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private bool IsCoatingRoller(int StoreItemID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreSubGroups.TechStoreGroupID, TechStore.TechStoreSubGroupID, TechStore.TechStoreID FROM TechStore" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID AND TechStoreSubGroups.TechStoreGroupID = 11" +
                " WHERE (TechStore.TechStoreID = " + StoreItemID + ")",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        return true;

                }
            }
            return false;
        }

        private void FillResultTable()
        {
            int StoreID = -1;

            decimal InvoiceCount = 0;

            decimal Thickness = 0;
            decimal Length = 0;
            decimal Height = 0;
            decimal Width = 0;
            decimal Diameter = 0;
            decimal Weight = 0;
            decimal Capacity = 0;

            int MeasureID = 0;
            int TechStoreID = 0;

            ResultTableDT.Clear();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                InvoiceCount = 0;

                StoreID = Convert.ToInt32(StoreDT.Rows[i][0]);
                MeasureID = GetMeasureID(Convert.ToInt32(StoreDT.Rows[i]["StoreItemID"]));
                TechStoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreItemID"]);

                string str = GetItemName(TechStoreID);

                if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                    InvoiceCount = Convert.ToInt32(StoreDT.Rows[i]["InvoiceCount"]);

                InvoiceCount = 0;

                //м.кв.
                if (MeasureID == 1)
                {
                    if (IsCoatingRoller(TechStoreID))
                    {
                        if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                            Thickness = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                        else
                            Thickness = Convert.ToDecimal(StoreDT.Rows[i]["SThickness"]);

                        if (StoreDT.Rows[i]["Diameter"] != DBNull.Value)
                            Diameter = Convert.ToDecimal(StoreDT.Rows[i]["Diameter"]);
                        else
                            Diameter = Convert.ToDecimal(StoreDT.Rows[i]["SDiameter"]);

                        if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                        else
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                        decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);

                        if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                            InvoiceCount = Square * Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]) / 1000000;
                    }
                    else
                    {
                        if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                            Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                        else
                        {
                            if (StoreDT.Rows[i]["Height"] != DBNull.Value)
                                Length = Convert.ToDecimal(StoreDT.Rows[i]["Height"]);
                            else
                            {
                                if (StoreDT.Rows[i]["SLength"] != DBNull.Value)
                                    Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);
                                else
                                    if (StoreDT.Rows[i]["SHeight"] != DBNull.Value)
                                    Length = Convert.ToDecimal(StoreDT.Rows[i]["SHeight"]);
                            }
                        }
                        if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                        else
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                        if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                            InvoiceCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]) / 1000000;
                    }
                }

                //м.п.
                if (MeasureID == 2)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                        InvoiceCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]) / 1000;
                }

                //шт.
                if (MeasureID == 3)
                {
                    if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                        InvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }

                //кг.
                if (MeasureID == 4)
                {
                    if (StoreDT.Rows[i]["Weight"] != DBNull.Value)
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["Weight"]);
                    else
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["SWeight"]);

                    if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                        InvoiceCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }

                //л.
                if (MeasureID == 5)
                {
                    if (StoreDT.Rows[i]["Capacity"] != DBNull.Value)
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["Capacity"]);
                    else
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["SCapacity"]);

                    if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                        InvoiceCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }

                //м.куб.
                if (MeasureID == 6)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["SHeight"] != DBNull.Value)
                    {
                        if (StoreDT.Rows[i]["Height"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Height"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SHeight"]);
                    }
                    else
                    {
                        if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SThickness"]);
                    }

                    if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                        InvoiceCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]) / 1000000000;
                }

                //тыс.шт.
                if (MeasureID == 7)
                {
                    if (StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                        InvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }

                DataRow NewRow = ResultTableDT.NewRow();
                NewRow["StoreItem"] = GetItemName(TechStoreID);
                NewRow["Measure"] = GetMeasure(MeasureID);

                if (StoreDT.Rows[i]["CoverID"] != DBNull.Value)
                    NewRow["Cover"] = GetCoverName(Convert.ToInt32(StoreDT.Rows[i]["CoverID"]));
                if (StoreDT.Rows[i]["PatinaID"] != DBNull.Value)
                    NewRow["Patina"] = GetPatinaName(Convert.ToInt32(StoreDT.Rows[i]["PatinaID"]));
                if (StoreDT.Rows[i]["ColorID"] != DBNull.Value)
                    NewRow["Color"] = GetColorName(Convert.ToInt32(StoreDT.Rows[i]["ColorID"]));

                NewRow["Diameter"] = StoreDT.Rows[i]["Diameter"];
                NewRow["Capacity"] = StoreDT.Rows[i]["Capacity"];
                NewRow["Thickness"] = StoreDT.Rows[i]["Thickness"];
                NewRow["Length"] = StoreDT.Rows[i]["Length"];
                NewRow["Height"] = StoreDT.Rows[i]["Height"];
                NewRow["Width"] = StoreDT.Rows[i]["Width"];
                NewRow["Admission"] = StoreDT.Rows[i]["Admission"];
                NewRow["Weight"] = StoreDT.Rows[i]["Weight"];

                NewRow["InvoiceCount"] = InvoiceCount;
                ResultTableDT.Rows.Add(NewRow);
            }

            using (DataView DV = new DataView(ResultTableDT.Copy()))
            {
                ResultTableDT.Clear();
                DV.Sort = "StoreItem, InvoiceCount";
                ResultTableDT = DV.ToTable();
            }
        }

        #region Get functions

        private int GetMeasureID(int TechStoreID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + TechStoreID);
            return Convert.ToInt32(Rows[0]["MeasureID"]);
        }

        private string GetMeasure(int MeasureID)
        {
            DataRow[] Rows = MeasuresDT.Select("MeasureID = " + MeasureID);
            return Rows[0]["Measure"].ToString();
        }

        private string GetItemName(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["TechStoreName"].ToString();
        }

        public string GetColorName(int ColorID)
        {
            DataRow[] Rows = ColorsDT.Select("ColorID = " + ColorID);
            return Rows[0]["ColorName"].ToString();
        }

        private string GetCoverName(int CoverID)
        {
            DataRow[] Rows = CoversDT.Select("CoverID = " + CoverID);
            return Rows[0]["CoverName"].ToString();
        }

        public string GetPatinaName(int PatinaID)
        {
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + PatinaID);
            return Rows[0]["PatinaName"].ToString();
        }


        #endregion

        private bool IsColumnEmpty(string ColName)
        {
            for (int i = 0; i < ResultTableDT.Rows.Count; i++)
            {
                if (ResultTableDT.Rows[i][ColName] != DBNull.Value)
                    return false;
            }
            return true;
        }

        public void ToExcel(DateTime DateTime, object CreateDateTime, string SellerStoreAlloc, string RecipientStoreAlloc, string RecipientSector, string PersonName, string StoreKeeper)
        {
            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("накладная");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            HSSFFont HeaderF = hssfworkbook.CreateFont();
            HeaderF.FontHeightInPoints = 11;
            HeaderF.Boldweight = 11 * 256;
            HeaderF.FontName = "Calibri";
            HSSFFont SimpleF = hssfworkbook.CreateFont();
            SimpleF.FontHeightInPoints = 10;
            SimpleF.FontName = "Calibri";
            HSSFCellStyle SimpleCS = hssfworkbook.CreateCellStyle();
            SimpleCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCS.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCS.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCS.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCS.TopBorderColor = HSSFColor.BLACK.index;
            SimpleCS.SetFont(SimpleF);
            HSSFCellStyle CostCS = hssfworkbook.CreateCellStyle();
            CostCS.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            CostCS.BorderBottom = HSSFCellStyle.BORDER_THIN;
            CostCS.BottomBorderColor = HSSFColor.BLACK.index;
            CostCS.BorderLeft = HSSFCellStyle.BORDER_THIN;
            CostCS.LeftBorderColor = HSSFColor.BLACK.index;
            CostCS.BorderRight = HSSFCellStyle.BORDER_THIN;
            CostCS.RightBorderColor = HSSFColor.BLACK.index;
            CostCS.BorderTop = HSSFCellStyle.BORDER_THIN;
            CostCS.TopBorderColor = HSSFColor.BLACK.index;
            CostCS.SetFont(SimpleF);
            HSSFCellStyle HeaderCS1 = hssfworkbook.CreateCellStyle();
            HeaderCS1.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderCS1.SetFont(HeaderF);
            HSSFCellStyle HeaderCS = hssfworkbook.CreateCellStyle();
            HeaderCS.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderCS.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderCS.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderCS.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderCS.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderCS.RightBorderColor = HSSFColor.BLACK.index;
            HeaderCS.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderCS.TopBorderColor = HSSFColor.BLACK.index;
            HeaderCS.WrapText = true;
            HeaderCS.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            //HeaderCS.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderCS.SetFont(HeaderF);

            int DisplayIndex = 0;
            int RowIndex = 0;

            HSSFCell cell;

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Накладная на движение №" + MovementInvoiceID + " от " + Convert.ToDateTime(DateTime).ToString("dd.MM.yyyy HH:mm"));
            cell.CellStyle = HeaderCS1;

            if (CreateDateTime != DBNull.Value)
            {
                if (DateTime != Convert.ToDateTime(CreateDateTime))
                {
                    cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Дата создания накладной: " + Convert.ToDateTime(CreateDateTime).ToString("dd.MM.yyyy HH:mm"));
                    cell.CellStyle = HeaderCS1;
                }
            }

            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Откуда: " + SellerStoreAlloc);
            cell.CellStyle = HeaderCS1;
            if (RecipientSector == "-")
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Куда: " + RecipientStoreAlloc);
                cell.CellStyle = HeaderCS1;
            }
            else
            {
                cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Куда: " + RecipientStoreAlloc + ", " + RecipientSector);
                cell.CellStyle = HeaderCS1;
            }
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "МОЛ: " + PersonName);
            cell.CellStyle = HeaderCS1;
            cell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, "Составитель: " + StoreKeeper);
            cell.CellStyle = HeaderCS1;

            RowIndex++;
            HSSFRow r = sheet1.CreateRow(RowIndex);
            DisplayIndex = 0;

            cell = r.CreateCell(DisplayIndex);
            cell.SetCellValue("Наименование");
            cell.CellStyle = HeaderCS;
            sheet1.SetColumnWidth(DisplayIndex++, 30 * 256);

            cell = r.CreateCell(DisplayIndex);
            cell.SetCellValue("Ед.изм.");
            cell.CellStyle = HeaderCS;
            sheet1.SetColumnWidth(DisplayIndex++, 8 * 256);

            if (!IsColumnEmpty("Cover"))
            {
                cell = r.CreateCell(DisplayIndex);
                cell.SetCellValue("Облицовка");
                cell.CellStyle = HeaderCS;
                sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            }
            if (!IsColumnEmpty("Color"))
            {
                cell = r.CreateCell(DisplayIndex);
                cell.SetCellValue("Цвет");
                cell.CellStyle = HeaderCS;
                sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            }
            if (!IsColumnEmpty("Patina"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Патина");
                cell.CellStyle = HeaderCS;
            }
            if (!IsColumnEmpty("Diameter"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Диаметр");
                cell.CellStyle = HeaderCS;
            }
            if (!IsColumnEmpty("Thickness"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Толщина");
                cell.CellStyle = HeaderCS;
            }
            if (!IsColumnEmpty("Length"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Длина");
                cell.CellStyle = HeaderCS;
            }
            if (!IsColumnEmpty("Height"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Высота");
                cell.CellStyle = HeaderCS;
            }
            if (!IsColumnEmpty("Width"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Ширина");
                cell.CellStyle = HeaderCS;
            }
            if (!IsColumnEmpty("Capacity"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Объем");
                cell.CellStyle = HeaderCS;
            }
            if (!IsColumnEmpty("Weight"))
            {
                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue("Вес");
                cell.CellStyle = HeaderCS;
            }

            cell = r.CreateCell(DisplayIndex++);
            cell.SetCellValue("Кол-во");
            cell.CellStyle = HeaderCS;

            DisplayIndex = 0;
            RowIndex++;
            for (int x = 0; x < ResultTableDT.Rows.Count; x++)
            {
                DisplayIndex = 0;
                r = sheet1.CreateRow(RowIndex);

                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue(ResultTableDT.Rows[x]["StoreItem"].ToString());
                cell.CellStyle = SimpleCS;

                cell = r.CreateCell(DisplayIndex++);
                cell.SetCellValue(ResultTableDT.Rows[x]["Measure"].ToString());
                cell.CellStyle = SimpleCS;

                if (!IsColumnEmpty("Cover"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Cover"] != DBNull.Value)
                        cell.SetCellValue(ResultTableDT.Rows[x]["Cover"].ToString());
                    cell.CellStyle = SimpleCS;
                }
                if (!IsColumnEmpty("Color"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Color"] != DBNull.Value)
                        cell.SetCellValue(ResultTableDT.Rows[x]["Color"].ToString());
                    cell.CellStyle = SimpleCS;
                }
                if (!IsColumnEmpty("Patina"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Patina"] != DBNull.Value)
                        cell.SetCellValue(ResultTableDT.Rows[x]["Patina"].ToString());
                    cell.CellStyle = SimpleCS;
                }
                if (!IsColumnEmpty("Diameter"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Diameter"] != DBNull.Value)
                        cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["Diameter"]));
                    cell.CellStyle = CostCS;
                }
                if (!IsColumnEmpty("Thickness"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Thickness"] != DBNull.Value)
                        cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["Thickness"]));
                    cell.CellStyle = CostCS;
                }
                if (!IsColumnEmpty("Length"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Length"] != DBNull.Value)
                        cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["Length"]));
                    cell.CellStyle = CostCS;
                }
                if (!IsColumnEmpty("Height"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Height"] != DBNull.Value)
                        cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["Height"]));
                    cell.CellStyle = CostCS;
                }
                if (!IsColumnEmpty("Width"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Width"] != DBNull.Value)
                        cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["Width"]));
                    cell.CellStyle = CostCS;
                }
                if (!IsColumnEmpty("Capacity"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Capacity"] != DBNull.Value)
                        cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["Capacity"]));
                    cell.CellStyle = CostCS;
                }
                if (!IsColumnEmpty("Weight"))
                {
                    cell = r.CreateCell(DisplayIndex++);
                    if (ResultTableDT.Rows[x]["Weight"] != DBNull.Value)
                        cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["Weight"]));
                    cell.CellStyle = CostCS;
                }
                cell = r.CreateCell(DisplayIndex++);
                if (ResultTableDT.Rows[x]["InvoiceCount"] != DBNull.Value)
                    cell.SetCellValue(Convert.ToDouble(ResultTableDT.Rows[x]["InvoiceCount"]));
                cell.CellStyle = CostCS;
                RowIndex++;
            }
            RowIndex++;
            RowIndex++;
            string FileName = "Накладная на движение №" + MovementInvoiceID;
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();
            System.Diagnostics.Process.Start(file.FullName);
        }

    }


    public class ReportToExcel
    {
        ReportParameters ReportParameters;
        int FactoryID = 0;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;
        DataTable ArrivalCountDT;
        DataTable ExpenseCountDT;
        DataTable SellingCountDT;
        DataTable StartCountDT;
        DataTable EndCountDT;

        DataTable CurrencyDT;
        DataTable NaturalUnitsDT;
        DataTable FinancialDT;
        DataTable StoreParametersDT;

        public ReportToExcel(int iFactoryID, ReportParameters tReportParameters)
        {
            //InventoryDate = Security.GetCurrentDate().AddMonths(-1);
            ReportParameters = tReportParameters;
            FactoryID = iFactoryID;
            Initialize();
        }

        private void Initialize()
        {
            Create();
            Fill();
            //FillStartEndCount();
            //FillInvoice();
            //FillExpense();
            //FillSelling();
        }

        private void Create()
        {
            ArrivalCountDT = new DataTable();
            ExpenseCountDT = new DataTable();
            SellingCountDT = new DataTable();
            StartCountDT = new DataTable();
            EndCountDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            MeasuresDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreGroupsDT = new DataTable();
            StoreSubGroupsDT = new DataTable();

            CurrencyDT = new DataTable();
            CurrencyDT.Columns.Add("DateTime", Type.GetType("System.DateTime"));
            CurrencyDT.Columns.Add("BYN", Type.GetType("System.Decimal"));
            CurrencyDT.Columns.Add("USD", Type.GetType("System.Decimal"));
            CurrencyDT.Columns.Add("RUR", Type.GetType("System.Decimal"));

            NaturalUnitsDT = new DataTable();
            NaturalUnitsDT.Columns.Add("StoreGroup", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("StoreSubGroup", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("StoreItem", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("Measure", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));

            FinancialDT = new DataTable();
            FinancialDT.Columns.Add("StoreGroup", Type.GetType("System.String"));
            FinancialDT.Columns.Add("StoreSubGroup", Type.GetType("System.String"));
            FinancialDT.Columns.Add("StoreItem", Type.GetType("System.String"));
            FinancialDT.Columns.Add("Notes", Type.GetType("System.String"));
            FinancialDT.Columns.Add("Measure", Type.GetType("System.String"));
            FinancialDT.Columns.Add("Price", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("StartMonthCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("MonthInvoiceCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("SellingCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("ExpenseCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("EndMonthCost", Type.GetType("System.Decimal"));

            StoreParametersDT = new DataTable();
            StoreParametersDT.Columns.Add("StoreGroup", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("StoreSubGroup", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("StoreItem", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Notes", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Measure", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Cover", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Color", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Patina", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Diameter", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Thickness", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Length", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Height", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Width", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Admission", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Capacity", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Weight", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Price", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("StartMonthCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("MonthInvoiceCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("ExpenseCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("SellingCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("EndMonthCost", Type.GetType("System.Decimal"));
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void Fill()
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            CreateCoversDT();

            string SubGroupsFilter = string.Empty;
            if (ReportParameters.SubGroups.Count > 0)
                SubGroupsFilter = " AND infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID IN (" + string.Join(",", ReportParameters.SubGroups.OfType<int>().ToArray()) + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupID, infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID," +
                " infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_catalog.dbo.TechStore.Thickness AS SThickness," +
                " infiniu2_catalog.dbo.TechStore.Length AS SLength, infiniu2_catalog.dbo.TechStore.Height AS SHeight, infiniu2_catalog.dbo.TechStore.Width AS SWidth, infiniu2_catalog.dbo.TechStore.Admission AS SAdmission, infiniu2_catalog.dbo.TechStore.Diameter AS SDiameter, infiniu2_catalog.dbo.TechStore.Capacity AS SCapacity, infiniu2_catalog.dbo.TechStore.Weight AS SWeight," +
                " Store.* FROM Store" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON Store.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN infiniu2_catalog.dbo.TechStoreSubGroups ON infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID = infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID" + SubGroupsFilter +
                " INNER JOIN infiniu2_catalog.dbo.TechStoreGroups ON infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreGroupID = infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupID" +
                " WHERE Store.FactoryID = " + FactoryID +
                " AND (CreateDateTime IS NULL OR CAST (CreateDateTime AS date) <= '" + ReportParameters.SecondDate.ToString("yyyy-MM-dd") + "')" +
                " ORDER BY infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupName, infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupName, infiniu2_catalog.dbo.TechStore.TechStoreName",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
            }
            StoreDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private bool IsCoatingRoller(int StoreItemID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreSubGroups.TechStoreGroupID, TechStore.TechStoreSubGroupID, TechStore.TechStoreID FROM TechStore" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID AND TechStoreSubGroups.TechStoreGroupID = 11" +
                " WHERE (TechStore.TechStoreID = " + StoreItemID + ")",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        return true;

                }
            }
            return false;
        }

        private void NaturelUnitsStatistics()
        {
            decimal StartMonthCount = 0;
            decimal MonthInvoiceCount = 0;
            decimal SellingCount = 0;
            decimal ExpenseCount = 0;
            decimal EndMonthCount = 0;

            decimal Thickness = 0;
            decimal Length = 0;
            decimal Height = 0;
            decimal Width = 0;
            decimal Diameter = 0;
            decimal Weight = 0;
            decimal Capacity = 0;

            int MeasureID = 0;
            int TechStoreGroupID = 0;
            int TechStoreSubGroupID = 0;
            int TechStoreID = 0;

            NaturalUnitsDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(StoreDT))
            {
                Table = DV.ToTable(true, new string[] { "TechStoreGroupID", "TechStoreSubGroupID", "StoreItemID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                MeasureID = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                TechStoreGroupID = Convert.ToInt32(Table.Rows[i]["TechStoreGroupID"]);
                TechStoreSubGroupID = Convert.ToInt32(Table.Rows[i]["TechStoreSubGroupID"]);
                TechStoreID = Convert.ToInt32(Table.Rows[i]["StoreItemID"]);
                string name = GetItemName(TechStoreID);
                DataRow[] Rows = StoreDT.Select("TechStoreGroupID = " + TechStoreGroupID +
                    " AND TechStoreSubGroupID = " + TechStoreSubGroupID + " AND StoreItemID = " + TechStoreID + " AND MeasureID = " + MeasureID);
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        MeasureID = Convert.ToInt32(row["MeasureID"]);

                        //м.кв.
                        if (MeasureID == 1)
                        {
                            if (IsCoatingRoller(TechStoreID))
                            {
                                if (row["Thickness"] != DBNull.Value)
                                    Thickness = Convert.ToDecimal(row["Thickness"]);
                                else
                                    Thickness = Convert.ToDecimal(row["SThickness"]);

                                if (row["Diameter"] != DBNull.Value)
                                    Diameter = Convert.ToDecimal(row["Diameter"]);
                                else
                                    Diameter = Convert.ToDecimal(row["SDiameter"]);

                                if (row["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(row["Width"]);
                                else
                                    Width = Convert.ToDecimal(row["SWidth"]);

                                decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);

                                if (row["StartMonthCount"] != DBNull.Value)
                                    StartMonthCount += Square * Convert.ToDecimal(row["StartMonthCount"]) / 1000000;
                                if (row["MonthInvoiceCount"] != DBNull.Value)
                                    MonthInvoiceCount += Square * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000000;
                                if (row["SellingCount"] != DBNull.Value)
                                    SellingCount += Square * Convert.ToDecimal(row["SellingCount"]) / 1000000;
                                if (row["ExpenseCount"] != DBNull.Value)
                                    ExpenseCount += Square * Convert.ToDecimal(row["ExpenseCount"]) / 1000000;
                                if (row["EndMonthCount"] != DBNull.Value)
                                    EndMonthCount += Square * Convert.ToDecimal(row["EndMonthCount"]) / 1000000;
                            }
                            else
                            {
                                if (row["Length"] != DBNull.Value)
                                    Length = Convert.ToDecimal(row["Length"]);
                                else
                                    Length = Convert.ToDecimal(row["SLength"]);
                                if (row["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(row["Width"]);
                                else
                                    Width = Convert.ToDecimal(row["SWidth"]);

                                if (row["StartMonthCount"] != DBNull.Value)
                                    StartMonthCount += Length * Width * Convert.ToDecimal(row["StartMonthCount"]) / 1000000;
                                if (row["MonthInvoiceCount"] != DBNull.Value)
                                    MonthInvoiceCount += Length * Width * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000000;
                                if (row["SellingCount"] != DBNull.Value)
                                    SellingCount += Length * Width * Convert.ToDecimal(row["SellingCount"]) / 1000000;
                                if (row["ExpenseCount"] != DBNull.Value)
                                    ExpenseCount += Length * Width * Convert.ToDecimal(row["ExpenseCount"]) / 1000000;
                                if (row["EndMonthCount"] != DBNull.Value)
                                    EndMonthCount += Length * Width * Convert.ToDecimal(row["EndMonthCount"]) / 1000000;
                            }
                        }

                        //м.п.
                        if (MeasureID == 2)
                        {
                            if (row["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(row["Length"]);
                            else
                                Length = Convert.ToDecimal(row["SLength"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Length * Convert.ToDecimal(row["StartMonthCount"]) / 1000;
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Length * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000;
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Length * Convert.ToDecimal(row["SellingCount"]) / 1000;
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Length * Convert.ToDecimal(row["ExpenseCount"]) / 1000;
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Length * Convert.ToDecimal(row["EndMonthCount"]) / 1000;
                        }

                        //шт.
                        if (MeasureID == 3)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //кг.
                        if (MeasureID == 4)
                        {
                            if (row["Weight"] != DBNull.Value)
                                Weight = Convert.ToDecimal(row["Weight"]);
                            else
                                Weight = Convert.ToDecimal(row["SWeight"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Weight * Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Weight * Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Weight * Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Weight * Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Weight * Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //л.
                        if (MeasureID == 5)
                        {
                            if (row["Capacity"] != DBNull.Value)
                                Capacity = Convert.ToDecimal(row["Capacity"]);
                            else
                                Capacity = Convert.ToDecimal(row["SCapacity"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Capacity * Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Capacity * Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Capacity * Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Capacity * Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Capacity * Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //м.куб.
                        if (MeasureID == 6)
                        {
                            if (row["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(row["Length"]);
                            else
                                Length = Convert.ToDecimal(row["SLength"]);

                            if (row["Width"] != DBNull.Value)
                                Width = Convert.ToDecimal(row["Width"]);
                            else
                                Width = Convert.ToDecimal(row["SWidth"]);

                            if (row["SHeight"] != DBNull.Value)
                            {
                                if (row["Height"] != DBNull.Value)
                                    Height = Convert.ToDecimal(row["Height"]);
                                else
                                    Height = Convert.ToDecimal(row["SHeight"]);
                            }
                            else
                            {
                                if (row["Thickness"] != DBNull.Value)
                                    Height = Convert.ToDecimal(row["Thickness"]);
                                else
                                    Height = Convert.ToDecimal(row["SThickness"]);
                            }

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Length * Width * Height * Convert.ToDecimal(row["StartMonthCount"]) / 1000000000;
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Length * Width * Height * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000000000;
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Length * Width * Height * Convert.ToDecimal(row["SellingCount"]) / 1000000000;
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Length * Width * Height * Convert.ToDecimal(row["ExpenseCount"]) / 1000000000;
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Length * Width * Height * Convert.ToDecimal(row["EndMonthCount"]) / 1000000000;
                        }

                        //тыс.шт.
                        if (MeasureID == 7)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //if (row["StartMonthCount"] != DBNull.Value)
                        //    StartMonthCount += Convert.ToInt32(row["StartMonthCount"]);
                        //if (row["MonthInvoiceCount"] != DBNull.Value)
                        //    MonthInvoiceCount += Convert.ToInt32(row["MonthInvoiceCount"]);
                        //if (row["SellingCount"] != DBNull.Value)
                        //    SellingCount += Convert.ToInt32(row["SellingCount"]);
                        //if (row["ExpenseCount"] != DBNull.Value)
                        //    ExpenseCount += Convert.ToInt32(row["ExpenseCount"]);
                        //if (row["EndMonthCount"] != DBNull.Value)
                        //    EndMonthCount += Convert.ToInt32(row["EndMonthCount"]);
                    }
                    DataRow NewRow = NaturalUnitsDT.NewRow();
                    NewRow["StoreGroup"] = GetGroupName(TechStoreGroupID);
                    NewRow["StoreSubGroup"] = GetSubGroupName(TechStoreSubGroupID);
                    NewRow["StoreItem"] = GetItemName(TechStoreID);
                    NewRow["Measure"] = GetMeasure(MeasureID);
                    NewRow["StartMonthCount"] = StartMonthCount;
                    NewRow["MonthInvoiceCount"] = MonthInvoiceCount;
                    NewRow["SellingCount"] = SellingCount;
                    NewRow["ExpenseCount"] = ExpenseCount;
                    NewRow["EndMonthCount"] = EndMonthCount;
                    NaturalUnitsDT.Rows.Add(NewRow);
                }
            }

            Table.Dispose();
            NaturalUnitsDT.DefaultView.Sort = "StoreGroup, StoreSubGroup, StoreItem";
        }

        private void FinancialStatistics()
        {
            decimal Conversion = 0;
            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            int StoreID = -1;

            decimal StartMonthCount = 0;
            decimal MonthInvoiceCount = 0;
            decimal SellingCount = 0;
            decimal ExpenseCount = 0;
            decimal EndMonthCount = 0;

            decimal Length = 0;
            decimal Height = 0;
            decimal Width = 0;
            decimal Weight = 0;
            decimal Capacity = 0;

            int MeasureID = 0;
            int TechStoreGroupID = 0;
            int TechStoreSubGroupID = 0;
            int TechStoreID = 0;

            FinancialDT.Clear();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                Price = 0;

                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;
                Conversion = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);

                MeasureID = Convert.ToInt32(StoreDT.Rows[i]["MeasureID"]);
                TechStoreGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreGroupID"]);
                TechStoreSubGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreSubGroupID"]);
                TechStoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreItemID"]);
                string str = GetItemName(TechStoreID);

                if (StoreDT.Rows[i]["Price"] != DBNull.Value)
                {
                    Price = Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                    if (Price != 0)
                        Conversion = Convert.ToDecimal(StoreDT.Rows[i]["Price"]) / Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                }

                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToInt32(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    MonthInvoiceCount = Convert.ToInt32(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingCount = Convert.ToInt32(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseCount = Convert.ToInt32(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToInt32(StoreDT.Rows[i]["EndMonthCount"]);

                if (StoreDT.Rows[i]["VATCost"] != DBNull.Value && StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                {
                    StartMonthCost = StartMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    MonthInvoiceCost = MonthInvoiceCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    SellingCost = SellingCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    ExpenseCost = ExpenseCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    EndMonthCost = EndMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);

                    if (Conversion != 0)
                    {
                        StartMonthCost = StartMonthCost / Conversion;
                        MonthInvoiceCost = MonthInvoiceCost / Conversion;
                        SellingCost = SellingCost / Conversion;
                        ExpenseCost = ExpenseCost / Conversion;
                        EndMonthCost = EndMonthCost / Conversion;
                    }
                }

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                //м.кв.
                if (MeasureID == 1)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);
                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000;
                }

                //м.п.
                if (MeasureID == 2)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000;
                }

                //шт.
                if (MeasureID == 3)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //кг.
                if (MeasureID == 4)
                {
                    if (StoreDT.Rows[i]["Weight"] != DBNull.Value)
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["Weight"]);
                    else
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["SWeight"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //л.
                if (MeasureID == 5)
                {
                    if (StoreDT.Rows[i]["Capacity"] != DBNull.Value)
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["Capacity"]);
                    else
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["SCapacity"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //м.куб.
                if (MeasureID == 6)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["SHeight"] != DBNull.Value)
                    {
                        if (StoreDT.Rows[i]["Height"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Height"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SHeight"]);
                    }
                    else
                    {
                        if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SThickness"]);
                    }

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000000;
                }

                //тыс.шт.
                if (MeasureID == 7)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                DataRow NewRow = FinancialDT.NewRow();
                NewRow["StoreGroup"] = GetGroupName(TechStoreGroupID);
                NewRow["StoreSubGroup"] = GetSubGroupName(TechStoreSubGroupID);
                NewRow["StoreItem"] = GetItemName(TechStoreID);
                NewRow["Notes"] = GetItemNote(TechStoreID);
                NewRow["Measure"] = GetMeasure(MeasureID);
                NewRow["Price"] = Price;
                NewRow["StartMonthCost"] = StartMonthCost;
                NewRow["StartMonthCount"] = StartMonthCount;
                NewRow["MonthInvoiceCost"] = MonthInvoiceCost;
                NewRow["MonthInvoiceCount"] = MonthInvoiceCount;
                NewRow["SellingCost"] = SellingCost;
                NewRow["SellingCount"] = SellingCount;
                NewRow["ExpenseCost"] = ExpenseCost;
                NewRow["ExpenseCount"] = ExpenseCount;
                NewRow["EndMonthCost"] = EndMonthCost;
                NewRow["EndMonthCount"] = EndMonthCount;
                FinancialDT.Rows.Add(NewRow);
            }

            FinancialDT.DefaultView.Sort = "StoreGroup, StoreSubGroup, StoreItem, Price";
        }

        private void StoreParametersStatistics()
        {
            decimal Conversion = 0;
            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            int StoreID = -1;

            decimal StartMonthCount = 0;
            decimal MonthInvoiceCount = 0;
            decimal SellingCount = 0;
            decimal ExpenseCount = 0;
            decimal EndMonthCount = 0;

            decimal Length = 0;
            decimal Height = 0;
            decimal Width = 0;
            decimal Weight = 0;
            decimal Capacity = 0;

            int MeasureID = 0;
            int TechStoreGroupID = 0;
            int TechStoreSubGroupID = 0;
            int TechStoreID = 0;

            StoreParametersDT.Clear();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                Price = 0;

                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;
                Conversion = 0;

                StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);
                MeasureID = Convert.ToInt32(StoreDT.Rows[i]["MeasureID"]);
                TechStoreGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreGroupID"]);
                TechStoreSubGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreSubGroupID"]);
                TechStoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreItemID"]);

                string str = GetItemName(TechStoreID);

                if (StoreDT.Rows[i]["Price"] != DBNull.Value)
                {
                    Price = Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                    if (Price != 0)
                        Conversion = Convert.ToDecimal(StoreDT.Rows[i]["Price"]) / Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                }

                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToInt32(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    MonthInvoiceCount = Convert.ToInt32(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingCount = Convert.ToInt32(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseCount = Convert.ToInt32(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToInt32(StoreDT.Rows[i]["EndMonthCount"]);

                if (StoreDT.Rows[i]["VATCost"] != DBNull.Value && StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                {
                    StartMonthCost = StartMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    MonthInvoiceCost = MonthInvoiceCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    SellingCost = SellingCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    ExpenseCost = ExpenseCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    EndMonthCost = EndMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);

                    if (Conversion != 0)
                    {
                        StartMonthCost = StartMonthCost / Conversion;
                        MonthInvoiceCost = MonthInvoiceCost / Conversion;
                        SellingCost = SellingCost / Conversion;
                        ExpenseCost = ExpenseCost / Conversion;
                        EndMonthCost = EndMonthCost / Conversion;
                    }
                }

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                //м.кв.
                if (MeasureID == 1)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);
                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000;
                }

                //м.п.
                if (MeasureID == 2)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000;
                }

                //шт.
                if (MeasureID == 3)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //кг.
                if (MeasureID == 4)
                {
                    if (StoreDT.Rows[i]["Weight"] != DBNull.Value)
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["Weight"]);
                    else
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["SWeight"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //л.
                if (MeasureID == 5)
                {
                    if (StoreDT.Rows[i]["Capacity"] != DBNull.Value)
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["Capacity"]);
                    else
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["SCapacity"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //м.куб.
                if (MeasureID == 6)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["SHeight"] != DBNull.Value)
                    {
                        if (StoreDT.Rows[i]["Height"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Height"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SHeight"]);
                    }
                    else
                    {
                        if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SThickness"]);
                    }

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000000;
                }

                //тыс.шт.
                if (MeasureID == 7)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                DataRow NewRow = StoreParametersDT.NewRow();
                NewRow["StoreGroup"] = GetGroupName(TechStoreGroupID);
                NewRow["StoreSubGroup"] = GetSubGroupName(TechStoreSubGroupID);
                NewRow["StoreItem"] = GetItemName(TechStoreID);
                NewRow["Notes"] = GetItemNote(TechStoreID);
                NewRow["Measure"] = GetMeasure(MeasureID);

                if (StoreDT.Rows[i]["CoverID"] != DBNull.Value)
                    NewRow["Cover"] = GetCoverName(Convert.ToInt32(StoreDT.Rows[i]["CoverID"]));
                if (StoreDT.Rows[i]["PatinaID"] != DBNull.Value)
                    NewRow["Patina"] = GetPatinaName(Convert.ToInt32(StoreDT.Rows[i]["PatinaID"]));
                if (StoreDT.Rows[i]["ColorID"] != DBNull.Value)
                    NewRow["Color"] = GetColorName(Convert.ToInt32(StoreDT.Rows[i]["ColorID"]));

                NewRow["Diameter"] = StoreDT.Rows[i]["Diameter"];
                NewRow["Capacity"] = StoreDT.Rows[i]["Capacity"];
                NewRow["Thickness"] = StoreDT.Rows[i]["Thickness"];
                NewRow["Length"] = StoreDT.Rows[i]["Length"];
                NewRow["Height"] = StoreDT.Rows[i]["Height"];
                NewRow["Width"] = StoreDT.Rows[i]["Width"];
                NewRow["Admission"] = StoreDT.Rows[i]["Admission"];
                NewRow["Weight"] = StoreDT.Rows[i]["Weight"];

                NewRow["Price"] = Price;
                NewRow["StartMonthCost"] = StartMonthCost;
                NewRow["StartMonthCount"] = StartMonthCount;
                NewRow["MonthInvoiceCost"] = MonthInvoiceCost;
                NewRow["MonthInvoiceCount"] = MonthInvoiceCount;
                NewRow["SellingCost"] = SellingCost;
                NewRow["SellingCount"] = SellingCount;
                NewRow["ExpenseCost"] = ExpenseCost;
                NewRow["ExpenseCount"] = ExpenseCount;
                NewRow["EndMonthCost"] = EndMonthCost;
                NewRow["EndMonthCount"] = EndMonthCount;
                StoreParametersDT.Rows.Add(NewRow);
            }

            StoreParametersDT.DefaultView.Sort = "StoreGroup, StoreSubGroup, StoreItem, Price";
        }

        #region Get functions

        private string GetMeasure(int MeasureID)
        {
            DataRow[] Rows = MeasuresDT.Select("MeasureID = " + MeasureID);
            return Rows[0]["Measure"].ToString();
        }

        private string GetGroupName(int StoreGroupID)
        {
            string StoreGroup = string.Empty;
            DataRow[] Rows = StoreGroupsDT.Select("TechStoreGroupID = " + StoreGroupID);
            if (Rows.Count() > 0)
                StoreGroup = Rows[0]["TechStoreGroupName"].ToString();
            return StoreGroup;
        }

        private string GetSubGroupName(int StoreSubGroupID)
        {
            string StoreSubGroup = string.Empty;
            DataRow[] Rows = StoreSubGroupsDT.Select("TechStoreSubGroupID = " + StoreSubGroupID);
            if (Rows.Count() > 0)
                StoreSubGroup = Rows[0]["TechStoreSubGroupName"].ToString();
            return StoreSubGroup;
        }

        private string GetItemName(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["TechStoreName"].ToString();
        }

        private string GetItemNote(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["Notes"].ToString();
        }

        #endregion

        public bool InventoryExist(int Month, int Year)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = " + Month +
                " AND DATEPART(year, InventoryDateTime) = " + Year,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void GetStoreCount()
        {
            ArrivalCountDT.Clear();
            ExpenseCountDT.Clear();
            SellingCountDT.Clear();
            StartCountDT.Clear();

            if (InventoryExist(ReportParameters.FirstDate.Month, ReportParameters.FirstDate.Year))
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InventoryID, StoreID, StartMonthCount AS CurrentCount FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE CAST (InventoryDateTime AS date) = '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + "')",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartCountDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InventoryID, StoreID, EndMonthCount AS CurrentCount FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE CAST (InventoryDateTime AS date) = '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + "')",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndCountDT);
                }
            }
            else
            {
                int count = 0;
                DateTime date1 = ReportParameters.FirstDate;
                while (!InventoryExist(date1.Month, date1.Year))
                {
                    date1 = ReportParameters.FirstDate.AddMonths(--count);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InventoryID, StoreID, EndMonthCount AS CurrentCount FROM InventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE CAST (InventoryDateTime AS date) = '" + date1.ToString("yyyy-MM-dd") + "')",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartCountDT);
                }
                EndCountDT = StoreDT.Copy();
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT PurchaseInvoiceID FROM PurchaseInvoices" +
                " WHERE CAST(IncomeDate AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + "'" +
                " AND CAST(IncomeDate AS DATE) < '" + ReportParameters.SecondDate.ToString("yyyy-MM-dd") + "'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivalCountDT);
            }
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
            //    " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
            //    " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (3, 4)" +
            //    " AND CAST(DateTime AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + "'" +
            //    " AND CAST(DateTime AS DATE) < '" + ReportParameters.SecondDate.ToString("yyyy-MM-dd") + "')",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ExpenseCountDT);
            //}
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
            //    " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
            //    " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (12, 13)" +
            //    " AND CAST(DateTime AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + "'" +
            //    " AND CAST(DateTime AS DATE) < '" + ReportParameters.SecondDate.ToString("yyyy-MM-dd") + "')",
            //    ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(SellingCountDT);
            //}
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID NOT IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + ReportParameters.SecondDate.ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ExpenseCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE SellerStoreAllocID IN (1, 2) AND RecipientStoreAllocID IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + ReportParameters.SecondDate.ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellingCountDT);
            }
        }

        public void FillStoreCount()
        {
            decimal ArrivalCount = 0;
            decimal EndMonthCount = 0;
            decimal ExpenseCount = 0;
            decimal SellingCount = 0;
            decimal StartMonthCount = 0;
            int PurchaseInvoiceID = -1;
            int StoreID = -1;

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                ArrivalCount = 0;
                EndMonthCount = 0;
                ExpenseCount = 0;
                SellingCount = 0;
                StartMonthCount = 0;
                PurchaseInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["PurchaseInvoiceID"]);
                StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);
                int StoreItemID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);

                //ОСТн
                DataRow[] StartRows = StartCountDT.Select("StoreID = " + StoreID);
                if (StartRows.Count() > 0)
                {
                    StartMonthCount = Convert.ToDecimal(StartRows[0]["CurrentCount"]);
                }
                //ОСТк
                DataRow[] EndRows = EndCountDT.Select("StoreID = " + StoreID);
                if (EndRows.Count() > 0)
                {
                    EndMonthCount = Convert.ToDecimal(EndRows[0]["CurrentCount"]);
                }
                else
                    EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]);
                //DataRow[] EndRows = EndCountDT.Select("StoreID = " + StoreID);
                //if (EndRows.Count() > 0)
                //{
                //    EndMonthCount = Convert.ToDecimal(EndRows[0]["CurrentCount"]);
                //}
                //Приход
                DataRow[] ArrivalRows = ArrivalCountDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
                if (ArrivalRows.Count() > 0)
                {
                    ArrivalCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }
                //Реализация
                DataRow[] SellingRows = SellingCountDT.Select("StoreIDFrom = " + StoreID);
                if (SellingRows.Count() > 0)
                {
                    foreach (DataRow item in SellingRows)
                        SellingCount += Convert.ToDecimal(item["Count"]);
                }
                //Расход
                DataRow[] ExpenseRows = ExpenseCountDT.Select("StoreIDFrom = " + StoreID);
                if (ExpenseRows.Count() > 0)
                {
                    foreach (DataRow item in ExpenseRows)
                        ExpenseCount += Convert.ToDecimal(item["Count"]);
                }

                StoreDT.Rows[i]["MonthInvoiceCount"] = ArrivalCount;
                StoreDT.Rows[i]["ExpenseCount"] = ExpenseCount;
                StoreDT.Rows[i]["EndMonthCount"] = EndMonthCount;
                StoreDT.Rows[i]["SellingCount"] = SellingCount;
                StoreDT.Rows[i]["StartMonthCount"] = StartMonthCount;
            }
            DataRow[] EmptyRows = StoreDT.Select("MonthInvoiceCount = 0 AND ExpenseCount = 0 AND EndMonthCount = 0 AND SellingCount = 0 AND StartMonthCount = 0");
            for (int i = EmptyRows.Count() - 1; i >= 0; i--)
                EmptyRows[i].Delete();
            StoreDT.AcceptChanges();
        }

        public string GetColorName(int ColorID)
        {
            DataRow[] Rows = ColorsDT.Select("ColorID = " + ColorID);
            return Rows[0]["ColorName"].ToString();
        }

        private string GetCoverName(int CoverID)
        {
            DataRow[] Rows = CoversDT.Select("CoverID = " + CoverID);
            return Rows[0]["CoverName"].ToString();
        }

        public string GetPatinaName(int PatinaID)
        {
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + PatinaID);
            return Rows[0]["PatinaName"].ToString();
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}

        //вертикальный лист
        public void NaturalUnitsReport(string InventoryName)
        {
            NaturelUnitsStatistics();

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int RowIndex = 1;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            //HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("В натуральных единицах");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            //sheet1.PrintSetup.Landscape = true;

            //HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
            //StoreGroupNameCell.CellStyle = StoreGroupNameStyle;
            int DisplayIndex = 0;
            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Ед.изм.");
            HeaderCell1.CellStyle = HeaderStyle;
            //HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Прим.");
            //HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "ОТСн");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Приход");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Реализация");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "В производство");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "ОСТк");
            HeaderCell1.CellStyle = HeaderStyle;
            DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 10 * 256);
            //sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);


            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(NaturalUnitsDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = NaturalUnitsDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);
                    }

                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;

                    HSSFCell StartMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                    StartMonthCell.SetCellValue(StartMonthCount);
                    StartMonthCell.CellStyle = StoreItemStyle;
                    HSSFCell MonthInvoiceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                    MonthInvoiceCell.SetCellValue(MonthInvoiceCount);
                    MonthInvoiceCell.CellStyle = StoreItemStyle;
                    HSSFCell SellingCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                    SellingCell.SetCellValue(SellingCount);
                    SellingCell.CellStyle = StoreItemStyle;
                    HSSFCell ExpenseCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                    ExpenseCell.SetCellValue(ExpenseCount);
                    ExpenseCell.CellStyle = StoreItemStyle;
                    HSSFCell EndMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                    EndMonthCell.SetCellValue(EndMonthCount);
                    EndMonthCell.CellStyle = RightBorderStyle;

                    RowIndex++;
                }

                using (DataView DV = new DataView(NaturalUnitsDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = NaturalUnitsDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);
                        }

                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;

                        HSSFCell StartMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                        StartMonthCell.SetCellValue(StartMonthCount);
                        StartMonthCell.CellStyle = StoreItemStyle;
                        HSSFCell MonthInvoiceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                        MonthInvoiceCell.SetCellValue(MonthInvoiceCount);
                        MonthInvoiceCell.CellStyle = StoreItemStyle;
                        HSSFCell SellingCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                        SellingCell.SetCellValue(SellingCount);
                        SellingCell.CellStyle = StoreItemStyle;
                        HSSFCell ExpenseCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                        ExpenseCell.SetCellValue(ExpenseCount);
                        ExpenseCell.CellStyle = StoreItemStyle;
                        HSSFCell EndMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                        EndMonthCell.SetCellValue(EndMonthCount);
                        EndMonthCell.CellStyle = RightBorderStyle;

                        RowIndex++;
                    }

                    using (DataView DV = new DataView(NaturalUnitsDT,
                        "StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'",
                        string.Empty, DataViewRowState.CurrentRows))
                    {
                        StoreItemsTable = DV.ToTable(true, new string[] { "StoreItem", "Measure" });
                    }
                    for (int c = 0; c < StoreItemsTable.Rows.Count; c++)
                    {
                        StartMonthCount = 0;
                        MonthInvoiceCount = 0;
                        SellingCount = 0;
                        ExpenseCount = 0;
                        EndMonthCount = 0;

                        Measure = StoreItemsTable.Rows[c]["Measure"].ToString();
                        StoreItem = StoreItemsTable.Rows[c]["StoreItem"].ToString();

                        DataRow[] StoreItemRows = NaturalUnitsDT.Select("StoreGroup = '" + StoreGroup +
                            "' AND StoreSubGroup = '" + StoreSubGroup + "' AND StoreItem = '" + StoreItem + "' AND Measure = '" + Measure + "'");
                        if (StoreItemRows.Count() != 0)
                        {
                            foreach (DataRow row in StoreItemRows)
                            {
                                if (row["StartMonthCount"] != DBNull.Value)
                                    StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                                if (row["MonthInvoiceCount"] != DBNull.Value)
                                    MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                                if (row["SellingCount"] != DBNull.Value)
                                    SellingCount += Convert.ToDouble(row["SellingCount"]);
                                if (row["ExpenseCount"] != DBNull.Value)
                                    ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                                if (row["EndMonthCount"] != DBNull.Value)
                                    EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);
                            }

                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell StartMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                            StartMonthCell.SetCellValue(StartMonthCount);
                            StartMonthCell.CellStyle = StoreItemStyle;
                            HSSFCell MonthInvoiceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                            MonthInvoiceCell.SetCellValue(MonthInvoiceCount);
                            MonthInvoiceCell.CellStyle = StoreItemStyle;
                            HSSFCell SellingCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                            SellingCell.SetCellValue(SellingCount);
                            SellingCell.CellStyle = StoreItemStyle;
                            HSSFCell ExpenseCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                            ExpenseCell.SetCellValue(ExpenseCount);
                            ExpenseCell.CellStyle = StoreItemStyle;
                            HSSFCell EndMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                            EndMonthCell.SetCellValue(EndMonthCount);
                            EndMonthCell.CellStyle = RightBorderStyle;

                            RowIndex++;
                        }
                    }
                }
            }

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 6);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            //string ReportFilePath = ReadReportFilePath("StoreMovementReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = InventoryName;

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        public void FinancialReport(string InventoryName)
        {
            //GetCurrency();
            FinancialStatistics();

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int RowIndex = 1;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemDecStyle = hssfworkbook.CreateCellStyle();
            StoreItemDecStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            StoreItemDecStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            StoreItemDecStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.SetFont(StoreItemFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            RowIndex = 1;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("В денежном выражении");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            //sheet1.PrintSetup.Landscape = true;

            //HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
            //StoreGroupNameCell.CellStyle = StoreGroupNameStyle;
            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HSSFCell HeaderCell1_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 0, string.Empty);
            HeaderCell1_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, 0, 0));
            HSSFCell HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Ед.изм.");
            HeaderCell2.CellStyle = HeaderStyle;
            HSSFCell HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 1, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, 1, 1));
            HSSFCell HeaderCell3 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цена");
            HeaderCell3.CellStyle = HeaderStyle;
            HSSFCell HeaderCell3_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 2, string.Empty);
            HeaderCell3_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, 2, 2));
            HSSFCell HeaderCell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Остаток на " + ReportParameters.FirstDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell4.CellStyle = HeaderStyle;
            HSSFCell HeaderCell4_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            HeaderCell4_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 3, 4));
            HSSFCell HeaderCell5 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 3, "Кол-во");
            HeaderCell5.CellStyle = HeaderStyle;
            HSSFCell HeaderCell6 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 4, "Сумма");
            HeaderCell6.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Приход");
            HeaderCell7.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 5, 6));
            HSSFCell HeaderCell8 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 5, "Кол-во");
            HeaderCell8.CellStyle = HeaderStyle;
            HSSFCell HeaderCell9 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 6, "Сумма");
            HeaderCell9.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Реализация");
            HeaderCell10.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, string.Empty);
            HeaderCell10_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 7, 8));
            HSSFCell HeaderCell11 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 7, "Кол-во");
            HeaderCell11.CellStyle = HeaderStyle;
            HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 8, "Сумма");
            HeaderCell12.CellStyle = HeaderStyle;
            HSSFCell HeaderCell13 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "В производство");
            HeaderCell13.CellStyle = HeaderStyle;
            HSSFCell HeaderCell13_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 10, string.Empty);
            HeaderCell13_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 9, 10));
            HSSFCell HeaderCell14 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 9, "Кол-во");
            HeaderCell14.CellStyle = HeaderStyle;
            HSSFCell HeaderCell15 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 10, "Сумма");
            HeaderCell15.CellStyle = HeaderStyle;
            HSSFCell HeaderCell16 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 11, "Остаток на " + ReportParameters.SecondDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell16.CellStyle = HeaderStyle;
            HSSFCell HeaderCell16_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 12, string.Empty);
            HeaderCell16_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 11, 12));
            HSSFCell HeaderCell17 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 11, "Кол-во");
            HeaderCell17.CellStyle = HeaderStyle;
            HSSFCell HeaderCell18 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 12, "Сумма");
            HeaderCell18.CellStyle = HeaderStyle;
            RowIndex++;

            sheet1.SetColumnWidth(0, 40 * 256);
            sheet1.SetColumnWidth(1, 9 * 256);
            sheet1.SetColumnWidth(2, 9 * 256);
            sheet1.SetColumnWidth(3, 16 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);
            sheet1.SetColumnWidth(5, 9 * 256);
            sheet1.SetColumnWidth(6, 9 * 256);
            sheet1.SetColumnWidth(7, 9 * 256);
            sheet1.SetColumnWidth(8, 9 * 256);
            sheet1.SetColumnWidth(9, 9 * 256);
            sheet1.SetColumnWidth(10, 9 * 256);
            sheet1.SetColumnWidth(11, 16 * 256);
            sheet1.SetColumnWidth(12, 16 * 256);

            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(FinancialDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = FinancialDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                        if (row["StartMonthCost"] != DBNull.Value)
                            StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                        if (row["MonthInvoiceCost"] != DBNull.Value)
                            MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                        if (row["SellingCost"] != DBNull.Value)
                            SellingCost += Convert.ToDecimal(row["SellingCost"]);
                        if (row["ExpenseCost"] != DBNull.Value)
                            ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                        if (row["EndMonthCost"] != DBNull.Value)
                            EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                    }

                    StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                    MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                    SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                    ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                    EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);

                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                    PriceCell.SetCellValue(string.Empty);
                    PriceCell.CellStyle = StoreItemDecStyle;

                    HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                    StartMonthCountCell.SetCellValue(StartMonthCount);
                    StartMonthCountCell.CellStyle = StoreItemStyle;
                    HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                    StartMonthCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell MonthInvoiceCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                    MonthInvoiceCountCell.SetCellValue(MonthInvoiceCount);
                    MonthInvoiceCountCell.CellStyle = StoreItemStyle;
                    HSSFCell MonthInvoiceCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                    MonthInvoiceCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                    MonthInvoiceCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell SellingCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(7);
                    SellingCountCell.SetCellValue(SellingCount);
                    SellingCountCell.CellStyle = StoreItemStyle;
                    HSSFCell SellingCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(8);
                    SellingCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                    SellingCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell ExpenseCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(9);
                    ExpenseCountCell.SetCellValue(ExpenseCount);
                    ExpenseCountCell.CellStyle = StoreItemStyle;
                    HSSFCell ExpenseCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(10);
                    ExpenseCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                    ExpenseCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell EndMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(11);
                    EndMonthCountCell.SetCellValue(EndMonthCount);
                    EndMonthCountCell.CellStyle = StoreItemStyle;
                    HSSFCell EndMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(12);
                    EndMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                    EndMonthCostCell.CellStyle = RightBorderStyle;

                    RowIndex++;
                }

                using (DataView DV = new DataView(FinancialDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCost = 0;
                    MonthInvoiceCost = 0;
                    SellingCost = 0;
                    ExpenseCost = 0;
                    EndMonthCost = 0;

                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = FinancialDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost += Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                        }

                        StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                        MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                        SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                        ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                        EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);

                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                        PriceCell.SetCellValue(string.Empty);
                        PriceCell.CellStyle = StoreItemDecStyle;

                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                        StartMonthCountCell.SetCellValue(StartMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                        StartMonthCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell MonthInvoiceCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                        MonthInvoiceCountCell.SetCellValue(MonthInvoiceCount);
                        MonthInvoiceCountCell.CellStyle = StoreItemStyle;
                        HSSFCell MonthInvoiceCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                        MonthInvoiceCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                        MonthInvoiceCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell SellingCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(7);
                        SellingCountCell.SetCellValue(SellingCount);
                        SellingCountCell.CellStyle = StoreItemStyle;
                        HSSFCell SellingCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(8);
                        SellingCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                        SellingCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell ExpenseCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(9);
                        ExpenseCountCell.SetCellValue(ExpenseCount);
                        ExpenseCountCell.CellStyle = StoreItemStyle;
                        HSSFCell ExpenseCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(10);
                        ExpenseCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                        ExpenseCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell EndMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(11);
                        EndMonthCountCell.SetCellValue(EndMonthCount);
                        EndMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell EndMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(12);
                        EndMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                        EndMonthCostCell.CellStyle = RightBorderStyle;

                        RowIndex++;
                    }

                    DataRow[] StoreItemRows = FinancialDT.Select("StoreGroup = '" + StoreGroup +
                        "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (StoreItemRows.Count() != 0)
                    {
                        foreach (DataRow row in StoreItemRows)
                        {
                            Price = 0;

                            StartMonthCost = 0;
                            MonthInvoiceCost = 0;
                            SellingCost = 0;
                            ExpenseCost = 0;
                            EndMonthCost = 0;

                            StartMonthCount = 0;
                            MonthInvoiceCount = 0;
                            SellingCount = 0;
                            ExpenseCount = 0;
                            EndMonthCount = 0;

                            if (row["Price"] != DBNull.Value)
                                Price = Convert.ToDecimal(row["Price"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount = Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount = Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount = Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount = Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount = Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost = Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost = Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost = Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost = Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost = Convert.ToDecimal(row["EndMonthCost"]);

                            Measure = row["Measure"].ToString();
                            StoreItem = row["StoreItem"].ToString();

                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                            PriceCell.SetCellValue(Convert.ToDouble(Price));
                            PriceCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                            StartMonthCountCell.SetCellValue(StartMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                            StartMonthCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell MonthInvoiceCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                            MonthInvoiceCountCell.SetCellValue(MonthInvoiceCount);
                            MonthInvoiceCountCell.CellStyle = StoreItemStyle;
                            HSSFCell MonthInvoiceCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                            MonthInvoiceCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                            MonthInvoiceCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell SellingCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(7);
                            SellingCountCell.SetCellValue(SellingCount);
                            SellingCountCell.CellStyle = StoreItemStyle;
                            HSSFCell SellingCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(8);
                            SellingCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                            SellingCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell ExpenseCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(9);
                            ExpenseCountCell.SetCellValue(ExpenseCount);
                            ExpenseCountCell.CellStyle = StoreItemStyle;
                            HSSFCell ExpenseCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(10);
                            ExpenseCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                            ExpenseCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell EndMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(11);
                            EndMonthCountCell.SetCellValue(EndMonthCount);
                            EndMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell EndMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(12);
                            EndMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                            EndMonthCostCell.CellStyle = RightBorderStyle;

                            RowIndex++;
                        }
                    }
                }
            }

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 12);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);

            sheet1.CreateFreezePane(1, 3);
            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            //string ReportFilePath = ReadReportFilePath("StoreMovementReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = InventoryName;

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        public void StoreParametersReport(string InventoryName)
        {
            //GetCurrency();
            StoreParametersStatistics();

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int RowIndex = 1;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemDecStyle = hssfworkbook.CreateCellStyle();
            StoreItemDecStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            StoreItemDecStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            int DisplayIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Расширенный отчет");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HSSFCell HeaderCell1_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell1_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HSSFCell HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Прим.");
            HeaderCell2.CellStyle = HeaderStyle;
            HSSFCell HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ед.изм.");
            HeaderCell2.CellStyle = HeaderStyle;
            HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Облицовка");
            HeaderCell4.CellStyle = HeaderStyle;
            HSSFCell HeaderCell4_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell4_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell5 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цвет");
            HeaderCell5.CellStyle = HeaderStyle;
            HSSFCell HeaderCell5_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell5_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell6 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Патина");
            HeaderCell6.CellStyle = HeaderStyle;
            HSSFCell HeaderCell6_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell6_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Длина");
            HeaderCell7.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell8 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Высота");
            HeaderCell8.CellStyle = HeaderStyle;
            HSSFCell HeaderCell8_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell8_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell9 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ширина");
            HeaderCell9.CellStyle = HeaderStyle;
            HSSFCell HeaderCell9_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell9_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell10 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Емкость");
            HeaderCell10.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell10_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell11 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Вес");
            HeaderCell11.CellStyle = HeaderStyle;
            HSSFCell HeaderCell11_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell11_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell3 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цена");
            HeaderCell3.CellStyle = HeaderStyle;
            HSSFCell HeaderCell3_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell3_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.FirstDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell12.CellStyle = HeaderStyle;
            HSSFCell HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Приход");
            HeaderCell12.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Реализация");
            HeaderCell12.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "В производство");
            HeaderCell12.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.SecondDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell12.CellStyle = HeaderStyle;

            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            RowIndex++;

            DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);

            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;
            string Notes = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(StoreParametersDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                        if (row["StartMonthCost"] != DBNull.Value)
                            StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                        if (row["MonthInvoiceCost"] != DBNull.Value)
                            MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                        if (row["SellingCost"] != DBNull.Value)
                            SellingCost += Convert.ToDecimal(row["SellingCost"]);
                        if (row["ExpenseCost"] != DBNull.Value)
                            ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                        if (row["EndMonthCost"] != DBNull.Value)
                            EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                    }

                    StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                    MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                    SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                    ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                    EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                    DisplayIndex = 0;
                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CoverCell.SetCellValue(string.Empty);
                    CoverCell.CellStyle = StoreItemStyle;
                    HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    ColorCell.SetCellValue(string.Empty);
                    ColorCell.CellStyle = StoreItemStyle;
                    HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PatinaCell.SetCellValue(string.Empty);
                    PatinaCell.CellStyle = StoreItemStyle;
                    HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    HeightCell.SetCellValue(string.Empty);
                    HeightCell.CellStyle = StoreItemStyle;
                    HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WidthCell.SetCellValue(string.Empty);
                    WidthCell.CellStyle = StoreItemStyle;
                    HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CapacityCell.SetCellValue(string.Empty);
                    CapacityCell.CellStyle = StoreItemStyle;
                    HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WeightCell.SetCellValue(string.Empty);
                    WeightCell.CellStyle = StoreItemStyle;
                    HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PriceCell.SetCellValue(string.Empty);
                    PriceCell.CellStyle = StoreItemStyle;

                    HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(StartMonthCount);
                    StartMonthCountCell.CellStyle = StoreItemStyle;
                    HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                    StartMonthCountCell.CellStyle = StoreItemStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(SellingCount);
                    StartMonthCountCell.CellStyle = StoreItemStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(ExpenseCount);
                    StartMonthCountCell.CellStyle = StoreItemStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(EndMonthCount);
                    StartMonthCountCell.CellStyle = StoreItemStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    RowIndex++;
                }

                using (DataView DV = new DataView(StoreParametersDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCost = 0;
                    MonthInvoiceCost = 0;
                    SellingCost = 0;
                    ExpenseCost = 0;
                    EndMonthCost = 0;

                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost += Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                        }

                        StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                        MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                        SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                        ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                        EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                        DisplayIndex = 0;
                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CoverCell.SetCellValue(string.Empty);
                        CoverCell.CellStyle = StoreItemStyle;
                        HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        ColorCell.SetCellValue(string.Empty);
                        ColorCell.CellStyle = StoreItemStyle;
                        HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PatinaCell.SetCellValue(string.Empty);
                        PatinaCell.CellStyle = StoreItemStyle;
                        HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        HeightCell.SetCellValue(string.Empty);
                        HeightCell.CellStyle = StoreItemStyle;
                        HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WidthCell.SetCellValue(string.Empty);
                        WidthCell.CellStyle = StoreItemStyle;
                        HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CapacityCell.SetCellValue(string.Empty);
                        CapacityCell.CellStyle = StoreItemStyle;
                        HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WeightCell.SetCellValue(string.Empty);
                        WeightCell.CellStyle = StoreItemStyle;

                        HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PriceCell.SetCellValue(string.Empty);
                        PriceCell.CellStyle = StoreItemStyle;

                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(StartMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(SellingCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(ExpenseCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(EndMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        RowIndex++;
                    }

                    DataRow[] StoreItemRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup +
                        "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (StoreItemRows.Count() != 0)
                    {
                        foreach (DataRow row in StoreItemRows)
                        {
                            Price = 0;

                            StartMonthCost = 0;
                            MonthInvoiceCost = 0;
                            SellingCost = 0;
                            ExpenseCost = 0;
                            EndMonthCost = 0;

                            StartMonthCount = 0;
                            MonthInvoiceCount = 0;
                            SellingCount = 0;
                            ExpenseCount = 0;
                            EndMonthCount = 0;

                            if (row["Price"] != DBNull.Value)
                                Price = Convert.ToDecimal(row["Price"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount = Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount = Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount = Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount = Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount = Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost = Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost = Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost = Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost = Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost = Convert.ToDecimal(row["EndMonthCost"]);

                            Measure = row["Measure"].ToString();
                            StoreItem = row["StoreItem"].ToString();
                            Notes = row["Notes"].ToString();
                            DisplayIndex = 0;
                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Notes);
                            MeasureCell.CellStyle = StoreItemStyle;
                            MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Cover"] != DBNull.Value)
                                CoverCell.SetCellValue(row["Cover"].ToString());
                            else
                                CoverCell.SetCellValue(string.Empty);
                            CoverCell.CellStyle = StoreItemStyle;

                            HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Color"] != DBNull.Value)
                                ColorCell.SetCellValue(row["Color"].ToString());
                            else
                                ColorCell.SetCellValue(string.Empty);
                            ColorCell.CellStyle = StoreItemStyle;

                            HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Patina"] != DBNull.Value)
                                PatinaCell.SetCellValue(row["Patina"].ToString());
                            else
                                PatinaCell.SetCellValue(string.Empty);
                            PatinaCell.CellStyle = StoreItemStyle;

                            HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Length"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Length"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemStyle;

                            HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Height"] != DBNull.Value)
                                HeightCell.SetCellValue(Convert.ToDouble(row["Height"]));
                            else
                                HeightCell.SetCellValue(string.Empty);
                            HeightCell.CellStyle = StoreItemStyle;

                            HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Width"] != DBNull.Value)
                                WidthCell.SetCellValue(Convert.ToDouble(row["Width"]));
                            else
                                WidthCell.SetCellValue(string.Empty);
                            WidthCell.CellStyle = StoreItemStyle;

                            HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Capacity"] != DBNull.Value)
                                CapacityCell.SetCellValue(Convert.ToDouble(row["Capacity"]));
                            else
                                CapacityCell.SetCellValue(string.Empty);
                            CapacityCell.CellStyle = StoreItemStyle;

                            HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Weight"] != DBNull.Value)
                                WeightCell.SetCellValue(Convert.ToDouble(row["Weight"]));
                            else
                                WeightCell.SetCellValue(string.Empty);
                            WeightCell.CellStyle = StoreItemStyle;

                            HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            PriceCell.SetCellValue(Convert.ToDouble(Price));
                            PriceCell.CellStyle = StoreItemDecStyle;

                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(StartMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(SellingCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(ExpenseCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(EndMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            RowIndex++;
                        }
                    }
                }
            }

            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 12);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);

            StoreParameteresSheet(ref hssfworkbook, InventoryName, "ОСТн");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "Приход");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "Реализация");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "В производство");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "ОСТк");
            sheet1.CreateFreezePane(1, 3);
            //string ReportFilePath = ReadReportFilePath("StoreMovementReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = InventoryName;
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        private void StoreParameteresSheet(ref HSSFWorkbook hssfworkbook, string InventoryName, string ReportType)
        {
            int RowIndex = 1;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemDecStyle = hssfworkbook.CreateCellStyle();
            StoreItemDecStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            StoreItemDecStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet(ReportType);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            int DisplayIndex = 0;
            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HSSFCell HeaderCell1_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell1_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HSSFCell HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Прим.");
            HeaderCell2.CellStyle = HeaderStyle;
            HSSFCell HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ед.изм.");
            HeaderCell2.CellStyle = HeaderStyle;
            HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Облицовка");
            HeaderCell4.CellStyle = HeaderStyle;
            HSSFCell HeaderCell4_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell4_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell5 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цвет");
            HeaderCell5.CellStyle = HeaderStyle;
            HSSFCell HeaderCell5_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell5_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell6 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Патина");
            HeaderCell6.CellStyle = HeaderStyle;
            HSSFCell HeaderCell6_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell6_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Длина");
            HeaderCell7.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell8 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Высота");
            HeaderCell8.CellStyle = HeaderStyle;
            HSSFCell HeaderCell8_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell8_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell9 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ширина");
            HeaderCell9.CellStyle = HeaderStyle;
            HSSFCell HeaderCell9_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell9_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell10 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Емкость");
            HeaderCell10.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell10_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell11 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Вес");
            HeaderCell11.CellStyle = HeaderStyle;
            HSSFCell HeaderCell11_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell11_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell3 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цена");
            HeaderCell3.CellStyle = HeaderStyle;
            HSSFCell HeaderCell3_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell3_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            if (ReportType == "ОСТн")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.FirstDate.ToString("dd MMMM yyyy") + "г.");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "Приход")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Приход");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "Реализация")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Реализация");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "В производство")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "В производство");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "ОСТк")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.SecondDate.ToString("dd MMMM yyyy") + "г.");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            HSSFCell HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HSSFCell HeaderCell13 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, "Кол-во");
            HeaderCell13.CellStyle = HeaderStyle;
            HSSFCell HeaderCell14 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex + 1, "Сумма");
            HeaderCell14.CellStyle = HeaderStyle;

            RowIndex++;
            DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 11 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 11 * 256);

            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;
            string Notes = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(StoreParametersDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                        if (row["StartMonthCost"] != DBNull.Value)
                            StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                        if (row["MonthInvoiceCost"] != DBNull.Value)
                            MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                        if (row["SellingCost"] != DBNull.Value)
                            SellingCost += Convert.ToDecimal(row["SellingCost"]);
                        if (row["ExpenseCost"] != DBNull.Value)
                            ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                        if (row["EndMonthCost"] != DBNull.Value)
                            EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                    }

                    StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                    MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                    SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                    ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                    EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                    DisplayIndex = 0;
                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CoverCell.SetCellValue(string.Empty);
                    CoverCell.CellStyle = StoreItemStyle;
                    HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    ColorCell.SetCellValue(string.Empty);
                    ColorCell.CellStyle = StoreItemStyle;
                    HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PatinaCell.SetCellValue(string.Empty);
                    PatinaCell.CellStyle = StoreItemStyle;
                    HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    HeightCell.SetCellValue(string.Empty);
                    HeightCell.CellStyle = StoreItemStyle;
                    HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WidthCell.SetCellValue(string.Empty);
                    WidthCell.CellStyle = StoreItemStyle;
                    HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CapacityCell.SetCellValue(string.Empty);
                    CapacityCell.CellStyle = StoreItemStyle;
                    HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WeightCell.SetCellValue(string.Empty);
                    WeightCell.CellStyle = StoreItemStyle;
                    HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PriceCell.SetCellValue(string.Empty);
                    PriceCell.CellStyle = StoreItemStyle;

                    if (ReportType == "ОСТн")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(StartMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "Приход")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "Реализация")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(SellingCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "В производство")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(ExpenseCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "ОСТк")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(EndMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }

                    RowIndex++;
                }

                using (DataView DV = new DataView(StoreParametersDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCost = 0;
                    MonthInvoiceCost = 0;
                    SellingCost = 0;
                    ExpenseCost = 0;
                    EndMonthCost = 0;

                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost += Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                        }

                        StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                        MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                        SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                        ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                        EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                        DisplayIndex = 0;
                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CoverCell.SetCellValue(string.Empty);
                        CoverCell.CellStyle = StoreItemStyle;
                        HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        ColorCell.SetCellValue(string.Empty);
                        ColorCell.CellStyle = StoreItemStyle;
                        HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PatinaCell.SetCellValue(string.Empty);
                        PatinaCell.CellStyle = StoreItemStyle;
                        HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        HeightCell.SetCellValue(string.Empty);
                        HeightCell.CellStyle = StoreItemStyle;
                        HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WidthCell.SetCellValue(string.Empty);
                        WidthCell.CellStyle = StoreItemStyle;
                        HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CapacityCell.SetCellValue(string.Empty);
                        CapacityCell.CellStyle = StoreItemStyle;
                        HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WeightCell.SetCellValue(string.Empty);
                        WeightCell.CellStyle = StoreItemStyle;
                        HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PriceCell.SetCellValue(string.Empty);
                        PriceCell.CellStyle = StoreItemStyle;

                        if (ReportType == "ОСТн")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(StartMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "Приход")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "Реализация")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(SellingCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "В производство")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(ExpenseCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "ОСТк")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(EndMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }

                        RowIndex++;
                    }

                    DataRow[] StoreItemRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup +
                        "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (StoreItemRows.Count() != 0)
                    {
                        foreach (DataRow row in StoreItemRows)
                        {
                            Price = 0;

                            StartMonthCost = 0;
                            MonthInvoiceCost = 0;
                            SellingCost = 0;
                            ExpenseCost = 0;
                            EndMonthCost = 0;

                            StartMonthCount = 0;
                            MonthInvoiceCount = 0;
                            SellingCount = 0;
                            ExpenseCount = 0;
                            EndMonthCount = 0;

                            if (row["Price"] != DBNull.Value)
                                Price = Convert.ToDecimal(row["Price"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount = Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount = Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount = Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount = Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount = Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost = Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost = Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost = Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost = Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost = Convert.ToDecimal(row["EndMonthCost"]);

                            Measure = row["Measure"].ToString();
                            StoreItem = row["StoreItem"].ToString();
                            Notes = row["Notes"].ToString();

                            DisplayIndex = 0;
                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Notes);
                            MeasureCell.CellStyle = StoreItemStyle;
                            MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Cover"] != DBNull.Value)
                                CoverCell.SetCellValue(row["Cover"].ToString());
                            else
                                CoverCell.SetCellValue(string.Empty);
                            CoverCell.CellStyle = StoreItemStyle;

                            HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Color"] != DBNull.Value)
                                ColorCell.SetCellValue(row["Color"].ToString());
                            else
                                ColorCell.SetCellValue(string.Empty);
                            ColorCell.CellStyle = StoreItemStyle;

                            HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Patina"] != DBNull.Value)
                                PatinaCell.SetCellValue(row["Patina"].ToString());
                            else
                                PatinaCell.SetCellValue(string.Empty);
                            PatinaCell.CellStyle = StoreItemStyle;

                            HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Length"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Length"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemStyle;

                            HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Height"] != DBNull.Value)
                                HeightCell.SetCellValue(Convert.ToDouble(row["Height"]));
                            else
                                HeightCell.SetCellValue(string.Empty);
                            HeightCell.CellStyle = StoreItemStyle;

                            HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Width"] != DBNull.Value)
                                WidthCell.SetCellValue(Convert.ToDouble(row["Width"]));
                            else
                                WidthCell.SetCellValue(string.Empty);
                            WidthCell.CellStyle = StoreItemStyle;

                            HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Capacity"] != DBNull.Value)
                                CapacityCell.SetCellValue(Convert.ToDouble(row["Capacity"]));
                            else
                                CapacityCell.SetCellValue(string.Empty);
                            CapacityCell.CellStyle = StoreItemStyle;

                            HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Weight"] != DBNull.Value)
                                WeightCell.SetCellValue(Convert.ToDouble(row["Weight"]));
                            else
                                WeightCell.SetCellValue(string.Empty);
                            WeightCell.CellStyle = StoreItemStyle;

                            HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            PriceCell.SetCellValue(Convert.ToDouble(Price));
                            PriceCell.CellStyle = StoreItemDecStyle;

                            if (ReportType == "ОСТн")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(StartMonthCount);
                                StartMonthCountCell.CellStyle = StoreItemStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "Приход")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                                StartMonthCountCell.CellStyle = StoreItemStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "Реализация")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(SellingCount);
                                StartMonthCountCell.CellStyle = StoreItemStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "В производство")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(ExpenseCount);
                                StartMonthCountCell.CellStyle = StoreItemStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "ОСТк")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(EndMonthCount);
                                StartMonthCountCell.CellStyle = StoreItemStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }

                            RowIndex++;
                        }
                    }
                }
            }

            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 12);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            //HSSFRegionUtil.SetBorderBottom(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            //HSSFRegionUtil.SetBorderLeft(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            //HSSFRegionUtil.SetBorderRight(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
        }
    }


    public class ManufactureReportToExcel
    {
        ReportParameters ReportParameters;
        int FactoryID = 0;

        DataTable MeasuresDT;
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable StoreItemsDT;
        DataTable StoreDT;
        DataTable StoreGroupsDT;
        DataTable StoreSubGroupsDT;
        DataTable ArrivalCountDT;
        DataTable ExpenseCountDT;
        DataTable SellingCountDT;
        DataTable StartCountDT;
        DataTable EndCountDT;

        DataTable CurrencyDT;
        DataTable NaturalUnitsDT;
        DataTable FinancialDT;
        DataTable StoreParametersDT;

        public ManufactureReportToExcel(int iFactoryID, ReportParameters tReportParameters)
        {
            //InventoryDate = Security.GetCurrentDate().AddMonths(-1);
            ReportParameters = tReportParameters;
            FactoryID = iFactoryID;
            Initialize();
        }

        private void Initialize()
        {
            Create();
            Fill();
            //FillStartEndCount();
            //FillInvoice();
            //FillExpense();
            //FillSelling();
        }

        private void Create()
        {
            ArrivalCountDT = new DataTable();
            ExpenseCountDT = new DataTable();
            SellingCountDT = new DataTable();
            StartCountDT = new DataTable();
            EndCountDT = new DataTable();
            ColorsDT = new DataTable();
            PatinaDT = new DataTable();
            MeasuresDT = new DataTable();
            StoreItemsDT = new DataTable();
            StoreDT = new DataTable();
            StoreGroupsDT = new DataTable();
            StoreSubGroupsDT = new DataTable();

            CurrencyDT = new DataTable();
            CurrencyDT.Columns.Add("DateTime", Type.GetType("System.DateTime"));
            CurrencyDT.Columns.Add("BYN", Type.GetType("System.Decimal"));
            CurrencyDT.Columns.Add("USD", Type.GetType("System.Decimal"));
            CurrencyDT.Columns.Add("RUR", Type.GetType("System.Decimal"));

            NaturalUnitsDT = new DataTable();
            NaturalUnitsDT.Columns.Add("StoreGroup", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("StoreSubGroup", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("StoreItem", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("Measure", Type.GetType("System.String"));
            NaturalUnitsDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            NaturalUnitsDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));

            FinancialDT = new DataTable();
            FinancialDT.Columns.Add("StoreGroup", Type.GetType("System.String"));
            FinancialDT.Columns.Add("StoreSubGroup", Type.GetType("System.String"));
            FinancialDT.Columns.Add("StoreItem", Type.GetType("System.String"));
            FinancialDT.Columns.Add("Notes", Type.GetType("System.String"));
            FinancialDT.Columns.Add("Measure", Type.GetType("System.String"));
            FinancialDT.Columns.Add("Price", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("StartMonthCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("MonthInvoiceCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("SellingCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("ExpenseCost", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
            FinancialDT.Columns.Add("EndMonthCost", Type.GetType("System.Decimal"));

            StoreParametersDT = new DataTable();
            StoreParametersDT.Columns.Add("StoreGroup", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("StoreSubGroup", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("StoreItem", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Notes", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Measure", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Cover", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Color", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Patina", Type.GetType("System.String"));
            StoreParametersDT.Columns.Add("Diameter", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Thickness", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Length", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Height", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Width", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Admission", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Capacity", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Weight", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("Price", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("StartMonthCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("MonthInvoiceCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("ExpenseCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("SellingCost", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));
            StoreParametersDT.Columns.Add("EndMonthCost", Type.GetType("System.Decimal"));
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void Fill()
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Measures", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(MeasuresDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }

            CreateCoversDT();

            string SubGroupsFilter = string.Empty;
            if (ReportParameters.SubGroups.Count > 0)
                SubGroupsFilter = " AND infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID IN (" + string.Join(",", ReportParameters.SubGroups.OfType<int>().ToArray()) + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupID, infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID," +
                " infiniu2_catalog.dbo.TechStore.MeasureID, infiniu2_catalog.dbo.TechStore.Thickness AS SThickness," +
                " infiniu2_catalog.dbo.TechStore.Length AS SLength, infiniu2_catalog.dbo.TechStore.Height AS SHeight, infiniu2_catalog.dbo.TechStore.Width AS SWidth, infiniu2_catalog.dbo.TechStore.Admission AS SAdmission, infiniu2_catalog.dbo.TechStore.Diameter AS SDiameter, infiniu2_catalog.dbo.TechStore.Capacity AS SCapacity, infiniu2_catalog.dbo.TechStore.Weight AS SWeight," +
                " ManufactureStore.* FROM ManufactureStore" +
                " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
                " INNER JOIN infiniu2_catalog.dbo.TechStoreSubGroups ON infiniu2_catalog.dbo.TechStore.TechStoreSubGroupID = infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupID" + SubGroupsFilter +
                " INNER JOIN infiniu2_catalog.dbo.TechStoreGroups ON infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreGroupID = infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupID" +
                " WHERE ManufactureStore.FactoryID = " + FactoryID +
                " AND (CreateDateTime IS NULL OR CAST (CreateDateTime AS date) <= '" + ReportParameters.SecondDate.ToString("yyyy-MM-dd") + "')" +
                " ORDER BY infiniu2_catalog.dbo.TechStoreGroups.TechStoreGroupName, infiniu2_catalog.dbo.TechStoreSubGroups.TechStoreSubGroupName, infiniu2_catalog.dbo.TechStore.TechStoreName",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
            }
            //StoreDA = new SqlDataAdapter("SELECT ManufactureStore.*, infiniu2_catalog.dbo.TechStore.TechStoreName AS StoreItemColumn," +
            //    " ManufactureInventoryDetails.StartMonthCount, ManufactureInventoryDetails.EndMonthCount, ManufactureInventoryDetails.Notes AS InvNotes FROM ManufactureStore" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " LEFT JOIN ManufactureInventoryDetails ON (ManufactureStore.ManufactureStoreID = ManufactureInventoryDetails.StoreID AND ManufactureInventoryDetails.InventoryID = " + iInventoryID + ")" +
            //    " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups" +
            //    " WHERE TechStoreGroupID = " + iStoreGroupID + " AND FactoryID = " + iFactoryID + ") ORDER BY TechStoreName", ConnectionStrings.StorageConnectionString);
            //StoreCB = new SqlCommandBuilder(StoreDA);
            //StoreDT.Clear();
            //StoreDA.Fill(StoreDT);
            StoreDT.Columns.Add("StartMonthCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("MonthInvoiceCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("SellingCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("ExpenseCount", Type.GetType("System.Decimal"));
            StoreDT.Columns.Add("EndMonthCount", Type.GetType("System.Decimal"));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStore ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreItemsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreGroups" +
                " ORDER BY TechStoreGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreGroupsDT);
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM TechStoreSubGroups" +
                " ORDER BY TechStoreSubGroupName", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(StoreSubGroupsDT);
            }
        }

        private void CreateCoversDT()
        {
            CoversDT = new DataTable();
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private bool IsCoatingRoller(int StoreItemID)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreSubGroups.TechStoreGroupID, TechStore.TechStoreSubGroupID, TechStore.TechStoreID FROM TechStore" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID AND TechStoreSubGroups.TechStoreGroupID = 11" +
                " WHERE (TechStore.TechStoreID = " + StoreItemID + ")",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    if (DT.Rows.Count > 0)
                        return true;

                }
            }
            return false;
        }

        private void NaturelUnitsStatistics()
        {
            decimal StartMonthCount = 0;
            decimal MonthInvoiceCount = 0;
            decimal SellingCount = 0;
            decimal ExpenseCount = 0;
            decimal EndMonthCount = 0;

            decimal Thickness = 0;
            decimal Length = 0;
            decimal Height = 0;
            decimal Width = 0;
            decimal Diameter = 0;
            decimal Weight = 0;
            decimal Capacity = 0;

            int MeasureID = 0;
            int TechStoreGroupID = 0;
            int TechStoreSubGroupID = 0;
            int TechStoreID = 0;

            NaturalUnitsDT.Clear();

            DataTable Table = new DataTable();

            using (DataView DV = new DataView(StoreDT))
            {
                Table = DV.ToTable(true, new string[] { "TechStoreGroupID", "TechStoreSubGroupID", "StoreItemID", "MeasureID" });
            }

            for (int i = 0; i < Table.Rows.Count; i++)
            {
                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                MeasureID = Convert.ToInt32(Table.Rows[i]["MeasureID"]);
                TechStoreGroupID = Convert.ToInt32(Table.Rows[i]["TechStoreGroupID"]);
                TechStoreSubGroupID = Convert.ToInt32(Table.Rows[i]["TechStoreSubGroupID"]);
                TechStoreID = Convert.ToInt32(Table.Rows[i]["StoreItemID"]);
                string name = GetItemName(TechStoreID);
                DataRow[] Rows = StoreDT.Select("TechStoreGroupID = " + TechStoreGroupID +
                    " AND TechStoreSubGroupID = " + TechStoreSubGroupID + " AND StoreItemID = " + TechStoreID + " AND MeasureID = " + MeasureID);
                if (Rows.Count() != 0)
                {
                    foreach (DataRow row in Rows)
                    {
                        MeasureID = Convert.ToInt32(row["MeasureID"]);

                        //м.кв.
                        if (MeasureID == 1)
                        {
                            if (IsCoatingRoller(TechStoreID))
                            {
                                if (row["Thickness"] != DBNull.Value)
                                    Thickness = Convert.ToDecimal(row["Thickness"]);
                                else
                                    Thickness = Convert.ToDecimal(row["SThickness"]);

                                if (row["Diameter"] != DBNull.Value)
                                    Diameter = Convert.ToDecimal(row["Diameter"]);
                                else
                                    Diameter = Convert.ToDecimal(row["SDiameter"]);

                                if (row["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(row["Width"]);
                                else
                                    Width = Convert.ToDecimal(row["SWidth"]);

                                decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);

                                if (row["StartMonthCount"] != DBNull.Value)
                                    StartMonthCount += Square * Convert.ToDecimal(row["StartMonthCount"]) / 1000;
                                if (row["MonthInvoiceCount"] != DBNull.Value)
                                    MonthInvoiceCount += Square * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000;
                                if (row["SellingCount"] != DBNull.Value)
                                    SellingCount += Square * Convert.ToDecimal(row["SellingCount"]) / 1000;
                                if (row["ExpenseCount"] != DBNull.Value)
                                    ExpenseCount += Square * Convert.ToDecimal(row["ExpenseCount"]) / 1000;
                                if (row["EndMonthCount"] != DBNull.Value)
                                    EndMonthCount += Square * Convert.ToDecimal(row["EndMonthCount"]) / 1000;
                            }
                            else
                            {
                                if (row["Length"] != DBNull.Value)
                                    Length = Convert.ToDecimal(row["Length"]);
                                else
                                    Length = Convert.ToDecimal(row["SLength"]);
                                if (row["Width"] != DBNull.Value)
                                    Width = Convert.ToDecimal(row["Width"]);
                                else
                                    Width = Convert.ToDecimal(row["SWidth"]);

                                if (row["StartMonthCount"] != DBNull.Value)
                                    StartMonthCount += Length * Width * Convert.ToDecimal(row["StartMonthCount"]) / 1000000;
                                if (row["MonthInvoiceCount"] != DBNull.Value)
                                    MonthInvoiceCount += Length * Width * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000000;
                                if (row["SellingCount"] != DBNull.Value)
                                    SellingCount += Length * Width * Convert.ToDecimal(row["SellingCount"]) / 1000000;
                                if (row["ExpenseCount"] != DBNull.Value)
                                    ExpenseCount += Length * Width * Convert.ToDecimal(row["ExpenseCount"]) / 1000000;
                                if (row["EndMonthCount"] != DBNull.Value)
                                    EndMonthCount += Length * Width * Convert.ToDecimal(row["EndMonthCount"]) / 1000000;
                            }
                        }

                        //м.п.
                        if (MeasureID == 2)
                        {
                            if (row["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(row["Length"]);
                            else
                                Length = Convert.ToDecimal(row["SLength"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Length * Convert.ToDecimal(row["StartMonthCount"]) / 1000;
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Length * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000;
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Length * Convert.ToDecimal(row["SellingCount"]) / 1000;
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Length * Convert.ToDecimal(row["ExpenseCount"]) / 1000;
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Length * Convert.ToDecimal(row["EndMonthCount"]) / 1000;
                        }

                        //шт.
                        if (MeasureID == 3)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //кг.
                        if (MeasureID == 4)
                        {
                            if (row["Weight"] != DBNull.Value)
                                Weight = Convert.ToDecimal(row["Weight"]);
                            else
                                Weight = Convert.ToDecimal(row["SWeight"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Weight * Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Weight * Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Weight * Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Weight * Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Weight * Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //л.
                        if (MeasureID == 5)
                        {
                            if (row["Capacity"] != DBNull.Value)
                                Capacity = Convert.ToDecimal(row["Capacity"]);
                            else
                                Capacity = Convert.ToDecimal(row["SCapacity"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Capacity * Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Capacity * Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Capacity * Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Capacity * Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Capacity * Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //м.куб.
                        if (MeasureID == 6)
                        {
                            if (row["Length"] != DBNull.Value)
                                Length = Convert.ToDecimal(row["Length"]);
                            else
                                Length = Convert.ToDecimal(row["SLength"]);

                            if (row["Width"] != DBNull.Value)
                                Width = Convert.ToDecimal(row["Width"]);
                            else
                                Width = Convert.ToDecimal(row["SWidth"]);

                            if (row["SHeight"] != DBNull.Value)
                            {
                                if (row["Height"] != DBNull.Value)
                                    Height = Convert.ToDecimal(row["Height"]);
                                else
                                    Height = Convert.ToDecimal(row["SHeight"]);
                            }
                            else
                            {
                                if (row["Thickness"] != DBNull.Value)
                                    Height = Convert.ToDecimal(row["Thickness"]);
                                else
                                    Height = Convert.ToDecimal(row["SThickness"]);
                            }

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Length * Width * Height * Convert.ToDecimal(row["StartMonthCount"]) / 1000000000;
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Length * Width * Height * Convert.ToDecimal(row["MonthInvoiceCount"]) / 1000000000;
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Length * Width * Height * Convert.ToDecimal(row["SellingCount"]) / 1000000000;
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Length * Width * Height * Convert.ToDecimal(row["ExpenseCount"]) / 1000000000;
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Length * Width * Height * Convert.ToDecimal(row["EndMonthCount"]) / 1000000000;
                        }

                        //тыс.шт.
                        if (MeasureID == 7)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDecimal(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDecimal(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDecimal(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDecimal(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDecimal(row["EndMonthCount"]);
                        }

                        //if (row["StartMonthCount"] != DBNull.Value)
                        //    StartMonthCount += Convert.ToInt32(row["StartMonthCount"]);
                        //if (row["MonthInvoiceCount"] != DBNull.Value)
                        //    MonthInvoiceCount += Convert.ToInt32(row["MonthInvoiceCount"]);
                        //if (row["SellingCount"] != DBNull.Value)
                        //    SellingCount += Convert.ToInt32(row["SellingCount"]);
                        //if (row["ExpenseCount"] != DBNull.Value)
                        //    ExpenseCount += Convert.ToInt32(row["ExpenseCount"]);
                        //if (row["EndMonthCount"] != DBNull.Value)
                        //    EndMonthCount += Convert.ToInt32(row["EndMonthCount"]);
                    }
                    DataRow NewRow = NaturalUnitsDT.NewRow();
                    NewRow["StoreGroup"] = GetGroupName(TechStoreGroupID);
                    NewRow["StoreSubGroup"] = GetSubGroupName(TechStoreSubGroupID);
                    NewRow["StoreItem"] = GetItemName(TechStoreID);
                    NewRow["Measure"] = GetMeasure(MeasureID);
                    NewRow["StartMonthCount"] = StartMonthCount;
                    NewRow["MonthInvoiceCount"] = MonthInvoiceCount;
                    NewRow["SellingCount"] = SellingCount;
                    NewRow["ExpenseCount"] = ExpenseCount;
                    NewRow["EndMonthCount"] = EndMonthCount;
                    NaturalUnitsDT.Rows.Add(NewRow);
                }
            }

            Table.Dispose();
            NaturalUnitsDT.DefaultView.Sort = "StoreGroup, StoreSubGroup, StoreItem";
        }

        private void FinancialStatistics()
        {
            decimal Conversion = 0;
            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            int StoreID = -1;

            decimal StartMonthCount = 0;
            decimal MonthInvoiceCount = 0;
            decimal SellingCount = 0;
            decimal ExpenseCount = 0;
            decimal EndMonthCount = 0;

            decimal Length = 0;
            decimal Height = 0;
            decimal Width = 0;
            decimal Weight = 0;
            decimal Capacity = 0;

            int MeasureID = 0;
            int TechStoreGroupID = 0;
            int TechStoreSubGroupID = 0;
            int TechStoreID = 0;

            FinancialDT.Clear();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                Price = 0;

                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;
                Conversion = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreID"]);

                MeasureID = Convert.ToInt32(StoreDT.Rows[i]["MeasureID"]);
                TechStoreGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreGroupID"]);
                TechStoreSubGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreSubGroupID"]);
                TechStoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreItemID"]);
                string str = GetItemName(TechStoreID);

                if (StoreDT.Rows[i]["Price"] != DBNull.Value)
                {
                    Price = Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                    if (Price != 0)
                        Conversion = Convert.ToDecimal(StoreDT.Rows[i]["Price"]) / Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                }

                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToInt32(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    MonthInvoiceCount = Convert.ToInt32(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingCount = Convert.ToInt32(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseCount = Convert.ToInt32(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToInt32(StoreDT.Rows[i]["EndMonthCount"]);

                if (StoreDT.Rows[i]["VATCost"] != DBNull.Value && StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                {
                    StartMonthCost = StartMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    MonthInvoiceCost = MonthInvoiceCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    SellingCost = SellingCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    ExpenseCost = ExpenseCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                    EndMonthCost = EndMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);

                    if (Conversion != 0)
                    {
                        StartMonthCost = StartMonthCost / Conversion;
                        MonthInvoiceCost = MonthInvoiceCost / Conversion;
                        SellingCost = SellingCost / Conversion;
                        ExpenseCost = ExpenseCost / Conversion;
                        EndMonthCost = EndMonthCost / Conversion;
                    }
                }

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                //м.кв.
                if (MeasureID == 1)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);
                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000;
                }

                //м.п.
                if (MeasureID == 2)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000;
                }

                //шт.
                if (MeasureID == 3)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //кг.
                if (MeasureID == 4)
                {
                    if (StoreDT.Rows[i]["Weight"] != DBNull.Value)
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["Weight"]);
                    else
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["SWeight"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //л.
                if (MeasureID == 5)
                {
                    if (StoreDT.Rows[i]["Capacity"] != DBNull.Value)
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["Capacity"]);
                    else
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["SCapacity"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //м.куб.
                if (MeasureID == 6)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["SHeight"] != DBNull.Value)
                    {
                        if (StoreDT.Rows[i]["Height"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Height"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SHeight"]);
                    }
                    else
                    {
                        if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SThickness"]);
                    }

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000000;
                }

                //тыс.шт.
                if (MeasureID == 7)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                DataRow NewRow = FinancialDT.NewRow();
                NewRow["StoreGroup"] = GetGroupName(TechStoreGroupID);
                NewRow["StoreSubGroup"] = GetSubGroupName(TechStoreSubGroupID);
                NewRow["StoreItem"] = GetItemName(TechStoreID);
                NewRow["Notes"] = GetItemNote(TechStoreID);
                NewRow["Measure"] = GetMeasure(MeasureID);
                NewRow["Price"] = Price;
                NewRow["StartMonthCost"] = StartMonthCost;
                NewRow["StartMonthCount"] = StartMonthCount;
                NewRow["MonthInvoiceCost"] = MonthInvoiceCost;
                NewRow["MonthInvoiceCount"] = MonthInvoiceCount;
                NewRow["SellingCost"] = SellingCost;
                NewRow["SellingCount"] = SellingCount;
                NewRow["ExpenseCost"] = ExpenseCost;
                NewRow["ExpenseCount"] = ExpenseCount;
                NewRow["EndMonthCost"] = EndMonthCost;
                NewRow["EndMonthCount"] = EndMonthCount;
                FinancialDT.Rows.Add(NewRow);
            }

            FinancialDT.DefaultView.Sort = "StoreGroup, StoreSubGroup, StoreItem, Price";
        }

        private void StoreParametersStatistics()
        {
            //decimal Conversion = 0;
            //decimal Price = 0;

            //decimal StartMonthCost = 0;
            //decimal MonthInvoiceCost = 0;
            //decimal SellingCost = 0;
            //decimal ExpenseCost = 0;
            //decimal EndMonthCost = 0;

            int StoreID = -1;

            decimal StartMonthCount = 0;
            decimal MonthInvoiceCount = 0;
            decimal SellingCount = 0;
            decimal ExpenseCount = 0;
            decimal EndMonthCount = 0;

            decimal Thickness = 0;
            decimal Length = 0;
            decimal Height = 0;
            decimal Width = 0;
            decimal Diameter = 0;
            decimal Weight = 0;
            decimal Capacity = 0;

            int MeasureID = 0;
            int TechStoreGroupID = 0;
            int TechStoreSubGroupID = 0;
            int TechStoreID = 0;

            StoreParametersDT.Clear();

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                //Price = 0;

                //StartMonthCost = 0;
                //MonthInvoiceCost = 0;
                //SellingCost = 0;
                //ExpenseCost = 0;
                //EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;
                //Conversion = 0;

                StoreID = Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]);
                MeasureID = Convert.ToInt32(StoreDT.Rows[i]["MeasureID"]);
                TechStoreGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreGroupID"]);
                TechStoreSubGroupID = Convert.ToInt32(StoreDT.Rows[i]["TechStoreSubGroupID"]);
                TechStoreID = Convert.ToInt32(StoreDT.Rows[i]["StoreItemID"]);

                string str = GetItemName(TechStoreID);

                //if (StoreDT.Rows[i]["Price"] != DBNull.Value)
                //{
                //    Price = Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                //    if (Price != 0)
                //        Conversion = Convert.ToDecimal(StoreDT.Rows[i]["Price"]) / Convert.ToDecimal(StoreDT.Rows[i]["PriceEUR"]);
                //}

                if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                    StartMonthCount = Convert.ToInt32(StoreDT.Rows[i]["StartMonthCount"]);
                if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                    MonthInvoiceCount = Convert.ToInt32(StoreDT.Rows[i]["MonthInvoiceCount"]);
                if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                    SellingCount = Convert.ToInt32(StoreDT.Rows[i]["SellingCount"]);
                if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                    ExpenseCount = Convert.ToInt32(StoreDT.Rows[i]["ExpenseCount"]);
                if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                    EndMonthCount = Convert.ToInt32(StoreDT.Rows[i]["EndMonthCount"]);

                //if (StoreDT.Rows[i]["VATCost"] != DBNull.Value && StoreDT.Rows[i]["InvoiceCount"] != DBNull.Value)
                //{
                //    StartMonthCost = StartMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                //    MonthInvoiceCost = MonthInvoiceCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                //    SellingCost = SellingCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                //    ExpenseCost = ExpenseCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                //    EndMonthCost = EndMonthCount * Convert.ToDecimal(StoreDT.Rows[i]["VATCost"]) / Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);

                //    if (Conversion != 0)
                //    {
                //        StartMonthCost = StartMonthCost / Conversion;
                //        MonthInvoiceCost = MonthInvoiceCost / Conversion;
                //        SellingCost = SellingCost / Conversion;
                //        ExpenseCost = ExpenseCost / Conversion;
                //        EndMonthCost = EndMonthCost / Conversion;
                //    }
                //}

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                //м.кв.
                if (MeasureID == 1)
                {
                    if (IsCoatingRoller(TechStoreID))
                    {
                        if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                            Thickness = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                        else
                            Thickness = Convert.ToDecimal(StoreDT.Rows[i]["SThickness"]);

                        if (StoreDT.Rows[i]["Diameter"] != DBNull.Value)
                            Diameter = Convert.ToDecimal(StoreDT.Rows[i]["Diameter"]);
                        else
                            Diameter = Convert.ToDecimal(StoreDT.Rows[i]["SDiameter"]);

                        if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                        else
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                        decimal Square = (Diameter * Diameter - 165 * 165) * Width / (Thickness * 1273.885m);

                        if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Square * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000;
                        if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Square * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000;
                        if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                            SellingCount += Square * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000;
                        if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Square * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000;
                        if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Square * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000;
                    }
                    else
                    {
                        if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                            Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                        else
                            Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);
                        if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                        else
                            Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                        if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000;
                        if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000;
                        if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                            SellingCount += Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000;
                        if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000;
                        if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Length * Width * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000;
                    }
                }

                //м.п.
                if (MeasureID == 2)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000;
                }

                //шт.
                if (MeasureID == 3)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //кг.
                if (MeasureID == 4)
                {
                    if (StoreDT.Rows[i]["Weight"] != DBNull.Value)
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["Weight"]);
                    else
                        Weight = Convert.ToDecimal(StoreDT.Rows[i]["SWeight"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Weight * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //л.
                if (MeasureID == 5)
                {
                    if (StoreDT.Rows[i]["Capacity"] != DBNull.Value)
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["Capacity"]);
                    else
                        Capacity = Convert.ToDecimal(StoreDT.Rows[i]["SCapacity"]);

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Capacity * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                //м.куб.
                if (MeasureID == 6)
                {
                    if (StoreDT.Rows[i]["Length"] != DBNull.Value)
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["Length"]);
                    else
                        Length = Convert.ToDecimal(StoreDT.Rows[i]["SLength"]);

                    if (StoreDT.Rows[i]["Width"] != DBNull.Value)
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["Width"]);
                    else
                        Width = Convert.ToDecimal(StoreDT.Rows[i]["SWidth"]);

                    if (StoreDT.Rows[i]["SHeight"] != DBNull.Value)
                    {
                        if (StoreDT.Rows[i]["Height"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Height"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SHeight"]);
                    }
                    else
                    {
                        if (StoreDT.Rows[i]["Thickness"] != DBNull.Value)
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["Thickness"]);
                        else
                            Height = Convert.ToDecimal(StoreDT.Rows[i]["SThickness"]);
                    }

                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]) / 1000000000;
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Length * Width * Height * Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]) / 1000000000;
                }

                //тыс.шт.
                if (MeasureID == 7)
                {
                    if (StoreDT.Rows[i]["StartMonthCount"] != DBNull.Value)
                        StartMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["StartMonthCount"]);
                    if (StoreDT.Rows[i]["MonthInvoiceCount"] != DBNull.Value)
                        MonthInvoiceCount = Convert.ToDecimal(StoreDT.Rows[i]["MonthInvoiceCount"]);
                    if (StoreDT.Rows[i]["SellingCount"] != DBNull.Value)
                        SellingCount = Convert.ToDecimal(StoreDT.Rows[i]["SellingCount"]);
                    if (StoreDT.Rows[i]["ExpenseCount"] != DBNull.Value)
                        ExpenseCount = Convert.ToDecimal(StoreDT.Rows[i]["ExpenseCount"]);
                    if (StoreDT.Rows[i]["EndMonthCount"] != DBNull.Value)
                        EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["EndMonthCount"]);
                }

                DataRow NewRow = StoreParametersDT.NewRow();
                NewRow["StoreGroup"] = GetGroupName(TechStoreGroupID);
                NewRow["StoreSubGroup"] = GetSubGroupName(TechStoreSubGroupID);
                NewRow["StoreItem"] = GetItemName(TechStoreID);
                NewRow["Notes"] = GetItemNote(TechStoreID);
                NewRow["Measure"] = GetMeasure(MeasureID);

                if (StoreDT.Rows[i]["CoverID"] != DBNull.Value)
                    NewRow["Cover"] = GetCoverName(Convert.ToInt32(StoreDT.Rows[i]["CoverID"]));
                if (StoreDT.Rows[i]["PatinaID"] != DBNull.Value)
                    NewRow["Patina"] = GetPatinaName(Convert.ToInt32(StoreDT.Rows[i]["PatinaID"]));
                if (StoreDT.Rows[i]["ColorID"] != DBNull.Value)
                    NewRow["Color"] = GetColorName(Convert.ToInt32(StoreDT.Rows[i]["ColorID"]));

                NewRow["Diameter"] = StoreDT.Rows[i]["Diameter"];
                NewRow["Capacity"] = StoreDT.Rows[i]["Capacity"];
                NewRow["Thickness"] = StoreDT.Rows[i]["Thickness"];
                NewRow["Length"] = StoreDT.Rows[i]["Length"];
                NewRow["Height"] = StoreDT.Rows[i]["Height"];
                NewRow["Width"] = StoreDT.Rows[i]["Width"];
                NewRow["Admission"] = StoreDT.Rows[i]["Admission"];
                NewRow["Weight"] = StoreDT.Rows[i]["Weight"];

                //NewRow["Price"] = Price;
                //NewRow["StartMonthCost"] = StartMonthCost;
                NewRow["StartMonthCount"] = StartMonthCount;
                //NewRow["MonthInvoiceCost"] = MonthInvoiceCost;
                NewRow["MonthInvoiceCount"] = MonthInvoiceCount;
                //NewRow["SellingCost"] = SellingCost;
                NewRow["SellingCount"] = SellingCount;
                //NewRow["ExpenseCost"] = ExpenseCost;
                NewRow["ExpenseCount"] = ExpenseCount;
                //NewRow["EndMonthCost"] = EndMonthCost;
                NewRow["EndMonthCount"] = EndMonthCount;
                StoreParametersDT.Rows.Add(NewRow);
            }

            StoreParametersDT.DefaultView.Sort = "StoreGroup, StoreSubGroup, StoreItem";
        }

        #region Get functions

        private string GetMeasure(int MeasureID)
        {
            DataRow[] Rows = MeasuresDT.Select("MeasureID = " + MeasureID);
            return Rows[0]["Measure"].ToString();
        }

        private string GetGroupName(int StoreGroupID)
        {
            string StoreGroup = string.Empty;
            DataRow[] Rows = StoreGroupsDT.Select("TechStoreGroupID = " + StoreGroupID);
            if (Rows.Count() > 0)
                StoreGroup = Rows[0]["TechStoreGroupName"].ToString();
            return StoreGroup;
        }

        private string GetSubGroupName(int StoreSubGroupID)
        {
            string StoreSubGroup = string.Empty;
            DataRow[] Rows = StoreSubGroupsDT.Select("TechStoreSubGroupID = " + StoreSubGroupID);
            if (Rows.Count() > 0)
                StoreSubGroup = Rows[0]["TechStoreSubGroupName"].ToString();
            return StoreSubGroup;
        }

        private string GetItemName(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["TechStoreName"].ToString();
        }

        private string GetItemNote(int StoreItemID)
        {
            DataRow[] Rows = StoreItemsDT.Select("TechStoreID = " + StoreItemID);
            return Rows[0]["Notes"].ToString();
        }

        #endregion

        public bool InventoryExist(int Month, int Year)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Inventory" +
                " WHERE DATEPART(month, InventoryDateTime) = " + Month +
                " AND DATEPART(year, InventoryDateTime) = " + Year,
                ConnectionStrings.StorageConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    return DT.Rows.Count > 0;
                }
            }
        }

        public void GetStoreCount()
        {
            ArrivalCountDT.Clear();
            ExpenseCountDT.Clear();
            SellingCountDT.Clear();
            StartCountDT.Clear();

            if (InventoryExist(ReportParameters.FirstDate.Month, ReportParameters.FirstDate.Year))
            {
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InventoryID, StoreID, StartMonthCount AS CurrentCount FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE CAST (InventoryDateTime AS date) = '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + "')",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartCountDT);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InventoryID, StoreID, EndMonthCount AS CurrentCount FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE CAST (InventoryDateTime AS date) = '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + "')",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(EndCountDT);
                }
            }
            else
            {
                int count = 0;
                DateTime date1 = ReportParameters.FirstDate;
                while (!InventoryExist(date1.Month, date1.Year))
                {
                    date1 = ReportParameters.FirstDate.AddMonths(--count);
                }
                using (SqlDataAdapter DA = new SqlDataAdapter("SELECT InventoryID, StoreID, EndMonthCount AS CurrentCount FROM ManufactureInventoryDetails" +
                    " WHERE InventoryID IN (SELECT TOP 1 InventoryID FROM Inventory" +
                    " WHERE CAST (InventoryDateTime AS date) = '" + date1.ToString("yyyy-MM-dd") + "')",
                    ConnectionStrings.StorageConnectionString))
                {
                    DA.Fill(StartCountDT);
                }
                EndCountDT = StoreDT.Copy();
            }

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>2 AND CAST(DateTime AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + ReportParameters.FirstDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00'",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ArrivalCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND SellerStoreAllocID IN (3, 4) AND RecipientStoreAllocID NOT IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + ReportParameters.FirstDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(ExpenseCountDT);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM MovementInvoiceDetails" +
                " WHERE MovementInvoiceID IN (SELECT MovementInvoiceID FROM MovementInvoices" +
                " WHERE TypeCreation<>1 AND RecipientStoreAllocID IN (12, 13)" +
                " AND CAST(DateTime AS DATE) >= '" + ReportParameters.FirstDate.ToString("yyyy-MM-dd") + " 00:00'" +
                " AND CAST(DateTime AS DATE) < '" + ReportParameters.FirstDate.AddMonths(1).ToString("yyyy-MM-dd") + " 00:00')",
                ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellingCountDT);
            }
        }

        public void FillStoreCount()
        {
            decimal ArrivalCount = 0;
            decimal EndMonthCount = 0;
            decimal ExpenseCount = 0;
            decimal SellingCount = 0;
            decimal StartMonthCount = 0;
            int PurchaseInvoiceID = -1;
            int StoreID = -1;

            for (int i = 0; i < StoreDT.Rows.Count; i++)
            {
                ArrivalCount = 0;
                EndMonthCount = 0;
                ExpenseCount = 0;
                SellingCount = 0;
                StartMonthCount = 0;
                PurchaseInvoiceID = Convert.ToInt32(StoreDT.Rows[i]["MovementInvoiceID"]);
                StoreID = Convert.ToInt32(StoreDT.Rows[i]["ManufactureStoreID"]);

                //ОСТн
                DataRow[] StartRows = StartCountDT.Select("StoreID = " + StoreID);
                if (StartRows.Count() > 0)
                {
                    StartMonthCount = Convert.ToDecimal(StartRows[0]["CurrentCount"]);
                }
                //ОСТк
                EndMonthCount = Convert.ToDecimal(StoreDT.Rows[i]["CurrentCount"]);
                //DataRow[] EndRows = EndCountDT.Select("StoreID = " + StoreID);
                //if (EndRows.Count() > 0)
                //{
                //    EndMonthCount = Convert.ToDecimal(EndRows[0]["CurrentCount"]);
                //}
                //Приход
                DataRow[] ArrivalRows = ArrivalCountDT.Select("MovementInvoiceID = " + PurchaseInvoiceID);
                if (ArrivalRows.Count() > 0)
                {
                    ArrivalCount = Convert.ToDecimal(StoreDT.Rows[i]["InvoiceCount"]);
                }
                //Реализация
                DataRow[] SellingRows = SellingCountDT.Select("StoreIDFrom = " + StoreID);
                if (SellingRows.Count() > 0)
                {
                    foreach (DataRow item in SellingRows)
                        SellingCount += Convert.ToDecimal(item["Count"]);
                }
                //Расход
                DataRow[] ExpenseRows = ExpenseCountDT.Select("StoreIDFrom = " + StoreID);
                if (ExpenseRows.Count() > 0)
                {
                    foreach (DataRow item in ExpenseRows)
                        ExpenseCount += Convert.ToDecimal(item["Count"]);
                }

                StoreDT.Rows[i]["MonthInvoiceCount"] = ArrivalCount;
                StoreDT.Rows[i]["ExpenseCount"] = ExpenseCount;
                StoreDT.Rows[i]["EndMonthCount"] = EndMonthCount;
                StoreDT.Rows[i]["SellingCount"] = SellingCount;
                StoreDT.Rows[i]["StartMonthCount"] = StartMonthCount;
            }
            DataRow[] EmptyRows = StoreDT.Select("MonthInvoiceCount = 0 AND ExpenseCount = 0 AND EndMonthCount = 0 AND SellingCount = 0 AND StartMonthCount = 0");
            for (int i = EmptyRows.Count() - 1; i >= 0; i--)
                EmptyRows[i].Delete();
            StoreDT.AcceptChanges();
        }

        public string GetColorName(int ColorID)
        {
            DataRow[] Rows = ColorsDT.Select("ColorID = " + ColorID);
            return Rows[0]["ColorName"].ToString();
        }

        private string GetCoverName(int CoverID)
        {
            DataRow[] Rows = CoversDT.Select("CoverID = " + CoverID);
            return Rows[0]["CoverName"].ToString();
        }

        public string GetPatinaName(int PatinaID)
        {
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + PatinaID);
            return Rows[0]["PatinaName"].ToString();
        }

        //private string ReadReportFilePath(string FileName)
        //{
        //    string ReportFilePath = string.Empty;

        //    using (System.IO.StreamReader sr = new System.IO.StreamReader(FileName, Encoding.Default))
        //    {
        //        ReportFilePath = sr.ReadToEnd();
        //    }
        //    return ReportFilePath;
        //}

        //вертикальный лист
        public void NaturalUnitsReport(string InventoryName)
        {
            NaturelUnitsStatistics();

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int RowIndex = 1;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            //HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("В натуральных единицах");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            //sheet1.PrintSetup.Landscape = true;

            //HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
            //StoreGroupNameCell.CellStyle = StoreGroupNameStyle;
            int DisplayIndex = 0;
            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Ед.изм.");
            HeaderCell1.CellStyle = HeaderStyle;
            //HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Прим.");
            //HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "ОТСн");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Приход");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "Реализация");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "В производство");
            HeaderCell1.CellStyle = HeaderStyle;
            HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex++, "ОСТк");
            HeaderCell1.CellStyle = HeaderStyle;
            DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 10 * 256);
            //sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);


            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(NaturalUnitsDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = NaturalUnitsDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);
                    }

                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;

                    HSSFCell StartMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                    StartMonthCell.SetCellValue(StartMonthCount);
                    StartMonthCell.CellStyle = StoreItemStyle;
                    HSSFCell MonthInvoiceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                    MonthInvoiceCell.SetCellValue(MonthInvoiceCount);
                    MonthInvoiceCell.CellStyle = StoreItemStyle;
                    HSSFCell SellingCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                    SellingCell.SetCellValue(SellingCount);
                    SellingCell.CellStyle = StoreItemStyle;
                    HSSFCell ExpenseCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                    ExpenseCell.SetCellValue(ExpenseCount);
                    ExpenseCell.CellStyle = StoreItemStyle;
                    HSSFCell EndMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                    EndMonthCell.SetCellValue(EndMonthCount);
                    EndMonthCell.CellStyle = RightBorderStyle;

                    RowIndex++;
                }

                using (DataView DV = new DataView(NaturalUnitsDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = NaturalUnitsDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);
                        }

                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;

                        HSSFCell StartMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                        StartMonthCell.SetCellValue(StartMonthCount);
                        StartMonthCell.CellStyle = StoreItemStyle;
                        HSSFCell MonthInvoiceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                        MonthInvoiceCell.SetCellValue(MonthInvoiceCount);
                        MonthInvoiceCell.CellStyle = StoreItemStyle;
                        HSSFCell SellingCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                        SellingCell.SetCellValue(SellingCount);
                        SellingCell.CellStyle = StoreItemStyle;
                        HSSFCell ExpenseCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                        ExpenseCell.SetCellValue(ExpenseCount);
                        ExpenseCell.CellStyle = StoreItemStyle;
                        HSSFCell EndMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                        EndMonthCell.SetCellValue(EndMonthCount);
                        EndMonthCell.CellStyle = RightBorderStyle;

                        RowIndex++;
                    }

                    using (DataView DV = new DataView(NaturalUnitsDT,
                        "StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'",
                        string.Empty, DataViewRowState.CurrentRows))
                    {
                        StoreItemsTable = DV.ToTable(true, new string[] { "StoreItem", "Measure" });
                    }
                    for (int c = 0; c < StoreItemsTable.Rows.Count; c++)
                    {
                        StartMonthCount = 0;
                        MonthInvoiceCount = 0;
                        SellingCount = 0;
                        ExpenseCount = 0;
                        EndMonthCount = 0;

                        Measure = StoreItemsTable.Rows[c]["Measure"].ToString();
                        StoreItem = StoreItemsTable.Rows[c]["StoreItem"].ToString();

                        DataRow[] StoreItemRows = NaturalUnitsDT.Select("StoreGroup = '" + StoreGroup +
                            "' AND StoreSubGroup = '" + StoreSubGroup + "' AND StoreItem = '" + StoreItem + "' AND Measure = '" + Measure + "'");
                        if (StoreItemRows.Count() != 0)
                        {
                            foreach (DataRow row in StoreItemRows)
                            {
                                if (row["StartMonthCount"] != DBNull.Value)
                                    StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                                if (row["MonthInvoiceCount"] != DBNull.Value)
                                    MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                                if (row["SellingCount"] != DBNull.Value)
                                    SellingCount += Convert.ToDouble(row["SellingCount"]);
                                if (row["ExpenseCount"] != DBNull.Value)
                                    ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                                if (row["EndMonthCount"] != DBNull.Value)
                                    EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);
                            }

                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell StartMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                            StartMonthCell.SetCellValue(StartMonthCount);
                            StartMonthCell.CellStyle = StoreItemStyle;
                            HSSFCell MonthInvoiceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                            MonthInvoiceCell.SetCellValue(MonthInvoiceCount);
                            MonthInvoiceCell.CellStyle = StoreItemStyle;
                            HSSFCell SellingCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                            SellingCell.SetCellValue(SellingCount);
                            SellingCell.CellStyle = StoreItemStyle;
                            HSSFCell ExpenseCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                            ExpenseCell.SetCellValue(ExpenseCount);
                            ExpenseCell.CellStyle = StoreItemStyle;
                            HSSFCell EndMonthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                            EndMonthCell.SetCellValue(EndMonthCount);
                            EndMonthCell.CellStyle = RightBorderStyle;

                            RowIndex++;
                        }
                    }
                }
            }

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 6);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            //string ReportFilePath = ReadReportFilePath("StoreMovementReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = InventoryName;

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        public void FinancialReport(string InventoryName)
        {
            //GetCurrency();
            FinancialStatistics();

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int RowIndex = 1;
            string HeaderName = string.Empty;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemDecStyle = hssfworkbook.CreateCellStyle();
            StoreItemDecStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            StoreItemDecStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            StoreItemDecStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.SetFont(StoreItemFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            RowIndex = 1;

            HSSFSheet sheet1 = hssfworkbook.CreateSheet("В денежном выражении");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            //sheet1.PrintSetup.Landscape = true;

            //HSSFCell StoreGroupNameCell = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex++), 0, StoreGroupsDT.Rows[i]["StoreGroup"].ToString());
            //StoreGroupNameCell.CellStyle = StoreGroupNameStyle;
            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 0, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HSSFCell HeaderCell1_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 0, string.Empty);
            HeaderCell1_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, 0, 0));
            HSSFCell HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 1, "Ед.изм.");
            HeaderCell2.CellStyle = HeaderStyle;
            HSSFCell HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 1, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, 1, 1));
            HSSFCell HeaderCell3 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 2, "Цена");
            HeaderCell3.CellStyle = HeaderStyle;
            HSSFCell HeaderCell3_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 2, string.Empty);
            HeaderCell3_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, 2, 2));
            HSSFCell HeaderCell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 3, "Остаток на " + ReportParameters.FirstDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell4.CellStyle = HeaderStyle;
            HSSFCell HeaderCell4_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 4, string.Empty);
            HeaderCell4_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 3, 4));
            HSSFCell HeaderCell5 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 3, "Кол-во");
            HeaderCell5.CellStyle = HeaderStyle;
            HSSFCell HeaderCell6 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 4, "Сумма");
            HeaderCell6.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 5, "Приход");
            HeaderCell7.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 6, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 5, 6));
            HSSFCell HeaderCell8 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 5, "Кол-во");
            HeaderCell8.CellStyle = HeaderStyle;
            HSSFCell HeaderCell9 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 6, "Сумма");
            HeaderCell9.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 7, "Реализация");
            HeaderCell10.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 8, string.Empty);
            HeaderCell10_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 7, 8));
            HSSFCell HeaderCell11 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 7, "Кол-во");
            HeaderCell11.CellStyle = HeaderStyle;
            HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 8, "Сумма");
            HeaderCell12.CellStyle = HeaderStyle;
            HSSFCell HeaderCell13 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 9, "В производство");
            HeaderCell13.CellStyle = HeaderStyle;
            HSSFCell HeaderCell13_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 10, string.Empty);
            HeaderCell13_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 9, 10));
            HSSFCell HeaderCell14 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 9, "Кол-во");
            HeaderCell14.CellStyle = HeaderStyle;
            HSSFCell HeaderCell15 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 10, "Сумма");
            HeaderCell15.CellStyle = HeaderStyle;
            HSSFCell HeaderCell16 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 11, "Остаток на " + ReportParameters.SecondDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell16.CellStyle = HeaderStyle;
            HSSFCell HeaderCell16_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), 12, string.Empty);
            HeaderCell16_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, 11, 12));
            HSSFCell HeaderCell17 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 11, "Кол-во");
            HeaderCell17.CellStyle = HeaderStyle;
            HSSFCell HeaderCell18 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), 12, "Сумма");
            HeaderCell18.CellStyle = HeaderStyle;
            RowIndex++;

            sheet1.SetColumnWidth(0, 40 * 256);
            sheet1.SetColumnWidth(1, 9 * 256);
            sheet1.SetColumnWidth(2, 9 * 256);
            sheet1.SetColumnWidth(3, 16 * 256);
            sheet1.SetColumnWidth(4, 16 * 256);
            sheet1.SetColumnWidth(5, 9 * 256);
            sheet1.SetColumnWidth(6, 9 * 256);
            sheet1.SetColumnWidth(7, 9 * 256);
            sheet1.SetColumnWidth(8, 9 * 256);
            sheet1.SetColumnWidth(9, 9 * 256);
            sheet1.SetColumnWidth(10, 9 * 256);
            sheet1.SetColumnWidth(11, 16 * 256);
            sheet1.SetColumnWidth(12, 16 * 256);

            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(FinancialDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = FinancialDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                        if (row["StartMonthCost"] != DBNull.Value)
                            StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                        if (row["MonthInvoiceCost"] != DBNull.Value)
                            MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                        if (row["SellingCost"] != DBNull.Value)
                            SellingCost += Convert.ToDecimal(row["SellingCost"]);
                        if (row["ExpenseCost"] != DBNull.Value)
                            ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                        if (row["EndMonthCost"] != DBNull.Value)
                            EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                    }

                    StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                    MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                    SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                    ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                    EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);

                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                    PriceCell.SetCellValue(string.Empty);
                    PriceCell.CellStyle = StoreItemDecStyle;

                    HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                    StartMonthCountCell.SetCellValue(StartMonthCount);
                    StartMonthCountCell.CellStyle = StoreItemStyle;
                    HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                    StartMonthCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell MonthInvoiceCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                    MonthInvoiceCountCell.SetCellValue(MonthInvoiceCount);
                    MonthInvoiceCountCell.CellStyle = StoreItemStyle;
                    HSSFCell MonthInvoiceCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                    MonthInvoiceCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                    MonthInvoiceCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell SellingCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(7);
                    SellingCountCell.SetCellValue(SellingCount);
                    SellingCountCell.CellStyle = StoreItemStyle;
                    HSSFCell SellingCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(8);
                    SellingCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                    SellingCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell ExpenseCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(9);
                    ExpenseCountCell.SetCellValue(ExpenseCount);
                    ExpenseCountCell.CellStyle = StoreItemStyle;
                    HSSFCell ExpenseCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(10);
                    ExpenseCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                    ExpenseCostCell.CellStyle = StoreItemDecStyle;
                    HSSFCell EndMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(11);
                    EndMonthCountCell.SetCellValue(EndMonthCount);
                    EndMonthCountCell.CellStyle = StoreItemStyle;
                    HSSFCell EndMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(12);
                    EndMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                    EndMonthCostCell.CellStyle = RightBorderStyle;

                    RowIndex++;
                }

                using (DataView DV = new DataView(FinancialDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCost = 0;
                    MonthInvoiceCost = 0;
                    SellingCost = 0;
                    ExpenseCost = 0;
                    EndMonthCost = 0;

                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = FinancialDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost += Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                        }

                        StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                        MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                        SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                        ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                        EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);

                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                        PriceCell.SetCellValue(string.Empty);
                        PriceCell.CellStyle = StoreItemDecStyle;

                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                        StartMonthCountCell.SetCellValue(StartMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                        StartMonthCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell MonthInvoiceCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                        MonthInvoiceCountCell.SetCellValue(MonthInvoiceCount);
                        MonthInvoiceCountCell.CellStyle = StoreItemStyle;
                        HSSFCell MonthInvoiceCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                        MonthInvoiceCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                        MonthInvoiceCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell SellingCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(7);
                        SellingCountCell.SetCellValue(SellingCount);
                        SellingCountCell.CellStyle = StoreItemStyle;
                        HSSFCell SellingCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(8);
                        SellingCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                        SellingCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell ExpenseCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(9);
                        ExpenseCountCell.SetCellValue(ExpenseCount);
                        ExpenseCountCell.CellStyle = StoreItemStyle;
                        HSSFCell ExpenseCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(10);
                        ExpenseCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                        ExpenseCostCell.CellStyle = StoreItemDecStyle;
                        HSSFCell EndMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(11);
                        EndMonthCountCell.SetCellValue(EndMonthCount);
                        EndMonthCountCell.CellStyle = StoreItemStyle;
                        HSSFCell EndMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(12);
                        EndMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                        EndMonthCostCell.CellStyle = RightBorderStyle;

                        RowIndex++;
                    }

                    DataRow[] StoreItemRows = FinancialDT.Select("StoreGroup = '" + StoreGroup +
                        "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (StoreItemRows.Count() != 0)
                    {
                        foreach (DataRow row in StoreItemRows)
                        {
                            Price = 0;

                            StartMonthCost = 0;
                            MonthInvoiceCost = 0;
                            SellingCost = 0;
                            ExpenseCost = 0;
                            EndMonthCost = 0;

                            StartMonthCount = 0;
                            MonthInvoiceCount = 0;
                            SellingCount = 0;
                            ExpenseCount = 0;
                            EndMonthCount = 0;

                            if (row["Price"] != DBNull.Value)
                                Price = Convert.ToDecimal(row["Price"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount = Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount = Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount = Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount = Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount = Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost = Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost = Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost = Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost = Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost = Convert.ToDecimal(row["EndMonthCost"]);

                            Measure = row["Measure"].ToString();
                            StoreItem = row["StoreItem"].ToString();

                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(0);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(1);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(2);
                            PriceCell.SetCellValue(Convert.ToDouble(Price));
                            PriceCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(3);
                            StartMonthCountCell.SetCellValue(StartMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(4);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                            StartMonthCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell MonthInvoiceCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(5);
                            MonthInvoiceCountCell.SetCellValue(MonthInvoiceCount);
                            MonthInvoiceCountCell.CellStyle = StoreItemStyle;
                            HSSFCell MonthInvoiceCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(6);
                            MonthInvoiceCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                            MonthInvoiceCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell SellingCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(7);
                            SellingCountCell.SetCellValue(SellingCount);
                            SellingCountCell.CellStyle = StoreItemStyle;
                            HSSFCell SellingCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(8);
                            SellingCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                            SellingCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell ExpenseCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(9);
                            ExpenseCountCell.SetCellValue(ExpenseCount);
                            ExpenseCountCell.CellStyle = StoreItemStyle;
                            HSSFCell ExpenseCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(10);
                            ExpenseCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                            ExpenseCostCell.CellStyle = StoreItemDecStyle;
                            HSSFCell EndMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(11);
                            EndMonthCountCell.SetCellValue(EndMonthCount);
                            EndMonthCountCell.CellStyle = StoreItemStyle;
                            HSSFCell EndMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(12);
                            EndMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                            EndMonthCostCell.CellStyle = RightBorderStyle;

                            RowIndex++;
                        }
                    }
                }
            }

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 12);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);

            sheet1.CreateFreezePane(1, 3);
            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            //string ReportFilePath = ReadReportFilePath("StoreMovementReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = InventoryName;

            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        public void StoreParametersReport(string InventoryName)
        {
            //GetCurrency();
            StoreParametersStatistics();

            HSSFWorkbook hssfworkbook = new HSSFWorkbook();

            ////create a entry of DocumentSummaryInformation
            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            ////create a entry of SummaryInformation
            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            int RowIndex = 1;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemDecStyle = hssfworkbook.CreateCellStyle();
            StoreItemDecStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            StoreItemDecStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            int DisplayIndex = 0;
            HSSFSheet sheet1 = hssfworkbook.CreateSheet("Расширенный отчет");
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HSSFCell HeaderCell1_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell1_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HSSFCell HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Прим.");
            HeaderCell2.CellStyle = HeaderStyle;
            HSSFCell HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ед.изм.");
            HeaderCell2.CellStyle = HeaderStyle;
            HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Облицовка");
            HeaderCell4.CellStyle = HeaderStyle;
            HSSFCell HeaderCell4_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell4_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell5 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цвет");
            HeaderCell5.CellStyle = HeaderStyle;
            HSSFCell HeaderCell5_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell5_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell6 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Патина");
            HeaderCell6.CellStyle = HeaderStyle;
            HSSFCell HeaderCell6_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell6_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Диаметр");
            HeaderCell7.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Толщина");
            HeaderCell7.CellStyle = HeaderStyle;
            HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Длина");
            HeaderCell7.CellStyle = HeaderStyle;
            HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell8 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Высота");
            HeaderCell8.CellStyle = HeaderStyle;
            HSSFCell HeaderCell8_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell8_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell9 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ширина");
            HeaderCell9.CellStyle = HeaderStyle;
            HSSFCell HeaderCell9_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell9_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell10 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Емкость");
            HeaderCell10.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell10_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell11 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Вес");
            HeaderCell11.CellStyle = HeaderStyle;
            HSSFCell HeaderCell11_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell11_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell3 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цена");
            HeaderCell3.CellStyle = HeaderStyle;
            HSSFCell HeaderCell3_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell3_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.FirstDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell12.CellStyle = HeaderStyle;
            HSSFCell HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Приход");
            HeaderCell12.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Реализация");
            HeaderCell12.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "В производство");
            HeaderCell12.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.SecondDate.ToString("dd MMMM yyyy") + "г.");
            HeaderCell12.CellStyle = HeaderStyle;

            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Кол-во");
            HeaderCell12_1.CellStyle = HeaderStyle;
            HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, "Сумма");
            HeaderCell12_1.CellStyle = HeaderStyle;

            RowIndex++;

            DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 16 * 256);

            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;
            string Notes = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(StoreParametersDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                        if (row["StartMonthCost"] != DBNull.Value)
                            StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                        if (row["MonthInvoiceCost"] != DBNull.Value)
                            MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                        if (row["SellingCost"] != DBNull.Value)
                            SellingCost += Convert.ToDecimal(row["SellingCost"]);
                        if (row["ExpenseCost"] != DBNull.Value)
                            ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                        if (row["EndMonthCost"] != DBNull.Value)
                            EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                    }

                    StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                    MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                    SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                    ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                    EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                    DisplayIndex = 0;
                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CoverCell.SetCellValue(string.Empty);
                    CoverCell.CellStyle = StoreItemStyle;
                    HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    ColorCell.SetCellValue(string.Empty);
                    ColorCell.CellStyle = StoreItemStyle;
                    HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PatinaCell.SetCellValue(string.Empty);
                    PatinaCell.CellStyle = StoreItemStyle;
                    HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    HeightCell.SetCellValue(string.Empty);
                    HeightCell.CellStyle = StoreItemStyle;
                    HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WidthCell.SetCellValue(string.Empty);
                    WidthCell.CellStyle = StoreItemStyle;
                    HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CapacityCell.SetCellValue(string.Empty);
                    CapacityCell.CellStyle = StoreItemStyle;
                    HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WeightCell.SetCellValue(string.Empty);
                    WeightCell.CellStyle = StoreItemStyle;
                    HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PriceCell.SetCellValue(string.Empty);
                    PriceCell.CellStyle = StoreItemStyle;

                    HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(StartMonthCount);
                    StartMonthCountCell.CellStyle = StoreItemDecStyle;
                    HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                    StartMonthCountCell.CellStyle = StoreItemDecStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(SellingCount);
                    StartMonthCountCell.CellStyle = StoreItemDecStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(ExpenseCount);
                    StartMonthCountCell.CellStyle = StoreItemDecStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCountCell.SetCellValue(EndMonthCount);
                    StartMonthCountCell.CellStyle = StoreItemDecStyle;
                    StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                    StartMonthCostCell.CellStyle = RightBorderStyle;

                    RowIndex++;
                }

                using (DataView DV = new DataView(StoreParametersDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCost = 0;
                    MonthInvoiceCost = 0;
                    SellingCost = 0;
                    ExpenseCost = 0;
                    EndMonthCost = 0;

                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost += Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                        }

                        StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                        MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                        SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                        ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                        EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                        DisplayIndex = 0;
                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CoverCell.SetCellValue(string.Empty);
                        CoverCell.CellStyle = StoreItemStyle;
                        HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        ColorCell.SetCellValue(string.Empty);
                        ColorCell.CellStyle = StoreItemStyle;
                        HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PatinaCell.SetCellValue(string.Empty);
                        PatinaCell.CellStyle = StoreItemStyle;
                        HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        HeightCell.SetCellValue(string.Empty);
                        HeightCell.CellStyle = StoreItemStyle;
                        HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WidthCell.SetCellValue(string.Empty);
                        WidthCell.CellStyle = StoreItemStyle;
                        HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CapacityCell.SetCellValue(string.Empty);
                        CapacityCell.CellStyle = StoreItemStyle;
                        HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WeightCell.SetCellValue(string.Empty);
                        WeightCell.CellStyle = StoreItemStyle;

                        HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PriceCell.SetCellValue(string.Empty);
                        PriceCell.CellStyle = StoreItemStyle;

                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(StartMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(SellingCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(ExpenseCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCountCell.SetCellValue(EndMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;

                        RowIndex++;
                    }

                    DataRow[] StoreItemRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup +
                        "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (StoreItemRows.Count() != 0)
                    {
                        foreach (DataRow row in StoreItemRows)
                        {
                            Price = 0;

                            StartMonthCost = 0;
                            MonthInvoiceCost = 0;
                            SellingCost = 0;
                            ExpenseCost = 0;
                            EndMonthCost = 0;

                            StartMonthCount = 0;
                            MonthInvoiceCount = 0;
                            SellingCount = 0;
                            ExpenseCount = 0;
                            EndMonthCount = 0;

                            if (row["Price"] != DBNull.Value)
                                Price = Convert.ToDecimal(row["Price"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount = Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount = Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount = Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount = Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount = Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost = Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost = Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost = Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost = Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost = Convert.ToDecimal(row["EndMonthCost"]);

                            Measure = row["Measure"].ToString();
                            StoreItem = row["StoreItem"].ToString();
                            Notes = row["Notes"].ToString();
                            DisplayIndex = 0;
                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Notes);
                            MeasureCell.CellStyle = StoreItemStyle;
                            MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Cover"] != DBNull.Value)
                                CoverCell.SetCellValue(row["Cover"].ToString());
                            else
                                CoverCell.SetCellValue(string.Empty);
                            CoverCell.CellStyle = StoreItemStyle;

                            HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Color"] != DBNull.Value)
                                ColorCell.SetCellValue(row["Color"].ToString());
                            else
                                ColorCell.SetCellValue(string.Empty);
                            ColorCell.CellStyle = StoreItemStyle;

                            HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Patina"] != DBNull.Value)
                                PatinaCell.SetCellValue(row["Patina"].ToString());
                            else
                                PatinaCell.SetCellValue(string.Empty);
                            PatinaCell.CellStyle = StoreItemStyle;

                            HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Diameter"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Diameter"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemStyle;

                            LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Thickness"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Thickness"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemDecStyle;

                            LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Length"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Length"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemStyle;

                            HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Height"] != DBNull.Value)
                                HeightCell.SetCellValue(Convert.ToDouble(row["Height"]));
                            else
                                HeightCell.SetCellValue(string.Empty);
                            HeightCell.CellStyle = StoreItemStyle;

                            HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Width"] != DBNull.Value)
                                WidthCell.SetCellValue(Convert.ToDouble(row["Width"]));
                            else
                                WidthCell.SetCellValue(string.Empty);
                            WidthCell.CellStyle = StoreItemStyle;

                            HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Capacity"] != DBNull.Value)
                                CapacityCell.SetCellValue(Convert.ToDouble(row["Capacity"]));
                            else
                                CapacityCell.SetCellValue(string.Empty);
                            CapacityCell.CellStyle = StoreItemStyle;

                            HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Weight"] != DBNull.Value)
                                WeightCell.SetCellValue(Convert.ToDouble(row["Weight"]));
                            else
                                WeightCell.SetCellValue(string.Empty);
                            WeightCell.CellStyle = StoreItemStyle;

                            HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            PriceCell.SetCellValue(Convert.ToDouble(Price));
                            PriceCell.CellStyle = StoreItemDecStyle;

                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(StartMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(SellingCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(ExpenseCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCountCell.SetCellValue(EndMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;

                            RowIndex++;
                        }
                    }
                }
            }

            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 12);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);

            StoreParameteresSheet(ref hssfworkbook, InventoryName, "ОСТн");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "Приход");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "Реализация");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "В производство");
            StoreParameteresSheet(ref hssfworkbook, InventoryName, "ОСТк");
            sheet1.CreateFreezePane(1, 3);
            //string ReportFilePath = ReadReportFilePath("StoreMovementReportPath.config");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //if (FactoryID == 1)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-Профиль");
            //if (FactoryID == 2)
            //    ReportFilePath = Path.Combine(ReportFilePath, "ЗОВ-ТПС");

            //if (!(Directory.Exists(ReportFilePath)))
            //{
            //    Directory.CreateDirectory(ReportFilePath);
            //}

            //string FileName = InventoryName + ".xls";

            //FileName = Path.Combine(ReportFilePath, FileName);

            //int DocNumber = 1;

            //while (File.Exists(FileName))
            //{
            //    FileName = InventoryName + "(" + DocNumber++ + ").xls";
            //    FileName = Path.Combine(ReportFilePath, FileName);
            //}

            //FileInfo file = new FileInfo(FileName);

            string FileName = InventoryName;
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int DocNumber = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + DocNumber++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

        private void StoreParameteresSheet(ref HSSFWorkbook hssfworkbook, string InventoryName, string ReportType)
        {
            int RowIndex = 1;

            #region Create fonts and styles

            HSSFFont StoreGroupFont = hssfworkbook.CreateFont();
            StoreGroupFont.FontHeightInPoints = 11;
            StoreGroupFont.Boldweight = 12 * 256;
            StoreGroupFont.FontName = "Calibri";

            HSSFFont StoreSubGroupFont = hssfworkbook.CreateFont();
            StoreSubGroupFont.FontHeightInPoints = 11;
            StoreSubGroupFont.IsItalic = true;
            StoreSubGroupFont.Boldweight = 12 * 256;
            StoreSubGroupFont.FontName = "Calibri";

            HSSFFont StoreItemFont = hssfworkbook.CreateFont();
            StoreItemFont.FontHeightInPoints = 11;
            StoreItemFont.FontName = "Calibri";

            HSSFCellStyle StoreGroupStyle = hssfworkbook.CreateCellStyle();
            StoreGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreGroupStyle.SetFont(StoreGroupFont);

            HSSFCellStyle StoreSubGroupStyle = hssfworkbook.CreateCellStyle();
            StoreSubGroupStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            StoreSubGroupStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreSubGroupStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreSubGroupStyle.SetFont(StoreSubGroupFont);

            HSSFCellStyle LeftBorderStyle = hssfworkbook.CreateCellStyle();
            LeftBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            LeftBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            LeftBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            LeftBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            LeftBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle RightBorderStyle = hssfworkbook.CreateCellStyle();
            RightBorderStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.00");
            RightBorderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            RightBorderStyle.RightBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            RightBorderStyle.TopBorderColor = HSSFColor.BLACK.index;
            RightBorderStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemStyle = hssfworkbook.CreateCellStyle();
            StoreItemStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0");
            StoreItemStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemStyle.SetFont(StoreItemFont);

            HSSFCellStyle StoreItemDecStyle = hssfworkbook.CreateCellStyle();
            StoreItemDecStyle.DataFormat = hssfworkbook.CreateDataFormat().GetFormat("### ### ##0.000");
            StoreItemDecStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.BottomBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.LeftBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.RightBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            StoreItemDecStyle.TopBorderColor = HSSFColor.BLACK.index;
            StoreItemDecStyle.SetFont(StoreItemFont);

            HSSFFont HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 11;
            HeaderFont.Boldweight = 12 * 256;
            HeaderFont.FontName = "Calibri";

            HSSFCellStyle HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_MEDIUM;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            #endregion

            HSSFSheet sheet1 = hssfworkbook.CreateSheet(ReportType);
            sheet1.PrintSetup.PaperSize = (short)PaperSizeType.A4;

            sheet1.SetMargin(HSSFSheet.LeftMargin, (double).12);
            sheet1.SetMargin(HSSFSheet.RightMargin, (double).07);
            sheet1.SetMargin(HSSFSheet.TopMargin, (double).20);
            sheet1.SetMargin(HSSFSheet.BottomMargin, (double).20);

            int DisplayIndex = 0;
            HSSFCell HeaderCell1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Наименование материала");
            HeaderCell1.CellStyle = HeaderStyle;
            HSSFCell HeaderCell1_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell1_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));

            HSSFCell HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Прим.");
            HeaderCell2.CellStyle = HeaderStyle;
            HSSFCell HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex++, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            HeaderCell2 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ед.изм.");
            HeaderCell2.CellStyle = HeaderStyle;
            HeaderCell2_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell2_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell4 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Облицовка");
            HeaderCell4.CellStyle = HeaderStyle;
            HSSFCell HeaderCell4_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell4_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell5 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цвет");
            HeaderCell5.CellStyle = HeaderStyle;
            HSSFCell HeaderCell5_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell5_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell6 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Патина");
            HeaderCell6.CellStyle = HeaderStyle;
            HSSFCell HeaderCell6_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell6_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Диаметр");
            HeaderCell7.CellStyle = HeaderStyle;
            HSSFCell HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Толщина");
            HeaderCell7.CellStyle = HeaderStyle;
            HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HeaderCell7 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Длина");
            HeaderCell7.CellStyle = HeaderStyle;
            HeaderCell7_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell7_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell8 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Высота");
            HeaderCell8.CellStyle = HeaderStyle;
            HSSFCell HeaderCell8_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell8_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell9 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Ширина");
            HeaderCell9.CellStyle = HeaderStyle;
            HSSFCell HeaderCell9_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell9_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell10 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Емкость");
            HeaderCell10.CellStyle = HeaderStyle;
            HSSFCell HeaderCell10_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell10_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell11 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Вес");
            HeaderCell11.CellStyle = HeaderStyle;
            HSSFCell HeaderCell11_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell11_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            HSSFCell HeaderCell3 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Цена");
            HeaderCell3.CellStyle = HeaderStyle;
            HSSFCell HeaderCell3_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, string.Empty);
            HeaderCell3_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex + 1, DisplayIndex, DisplayIndex++));
            if (ReportType == "ОСТн")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.FirstDate.ToString("dd MMMM yyyy") + "г.");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "Приход")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Приход");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "Реализация")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Реализация");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "В производство")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "В производство");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            if (ReportType == "ОСТк")
            {
                HSSFCell HeaderCell12 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex, "Остаток на " + ReportParameters.SecondDate.ToString("dd MMMM yyyy") + "г.");
                HeaderCell12.CellStyle = HeaderStyle;
            }
            HSSFCell HeaderCell12_1 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex), DisplayIndex + 1, string.Empty);
            HeaderCell12_1.CellStyle = HeaderStyle;
            sheet1.AddMergedRegion(new CellRangeAddress(RowIndex, RowIndex, DisplayIndex, DisplayIndex + 1));
            HSSFCell HeaderCell13 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex, "Кол-во");
            HeaderCell13.CellStyle = HeaderStyle;
            HSSFCell HeaderCell14 = HSSFCellUtil.CreateCell(sheet1.CreateRow(RowIndex + 1), DisplayIndex + 1, "Сумма");
            HeaderCell14.CellStyle = HeaderStyle;

            RowIndex++;
            DisplayIndex = 0;
            sheet1.SetColumnWidth(DisplayIndex++, 40 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 20 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 15 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 9 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 11 * 256);
            sheet1.SetColumnWidth(DisplayIndex++, 11 * 256);

            decimal Price = 0;

            decimal StartMonthCost = 0;
            decimal MonthInvoiceCost = 0;
            decimal SellingCost = 0;
            decimal ExpenseCost = 0;
            decimal EndMonthCost = 0;

            double StartMonthCount = 0;
            double MonthInvoiceCount = 0;
            double SellingCount = 0;
            double ExpenseCount = 0;
            double EndMonthCount = 0;

            string Measure = string.Empty;
            string StoreGroup = string.Empty;
            string StoreSubGroup = string.Empty;
            string StoreItem = string.Empty;
            string Notes = string.Empty;

            DataTable GroupsTable = new DataTable();
            DataTable SubGroupsTable = new DataTable();
            DataTable StoreItemsTable = new DataTable();

            using (DataView DV = new DataView(StoreParametersDT))
            {
                GroupsTable = DV.ToTable(true, new string[] { "StoreGroup" });
            }
            for (int i = 0; i < GroupsTable.Rows.Count; i++)
            {
                StartMonthCost = 0;
                MonthInvoiceCost = 0;
                SellingCost = 0;
                ExpenseCost = 0;
                EndMonthCost = 0;

                StartMonthCount = 0;
                MonthInvoiceCount = 0;
                SellingCount = 0;
                ExpenseCount = 0;
                EndMonthCount = 0;

                StoreGroup = GroupsTable.Rows[i]["StoreGroup"].ToString();

                DataRow[] GroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "'");
                if (GroupRows.Count() != 0)
                {
                    foreach (DataRow row in GroupRows)
                    {
                        if (row["StartMonthCount"] != DBNull.Value)
                            StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                        if (row["MonthInvoiceCount"] != DBNull.Value)
                            MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                        if (row["SellingCount"] != DBNull.Value)
                            SellingCount += Convert.ToDouble(row["SellingCount"]);
                        if (row["ExpenseCount"] != DBNull.Value)
                            ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                        if (row["EndMonthCount"] != DBNull.Value)
                            EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                        if (row["StartMonthCost"] != DBNull.Value)
                            StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                        if (row["MonthInvoiceCost"] != DBNull.Value)
                            MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                        if (row["SellingCost"] != DBNull.Value)
                            SellingCost += Convert.ToDecimal(row["SellingCost"]);
                        if (row["ExpenseCost"] != DBNull.Value)
                            ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                        if (row["EndMonthCost"] != DBNull.Value)
                            EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                    }

                    StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                    MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                    SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                    ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                    EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                    DisplayIndex = 0;
                    HSSFCell GroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    GroupCell.SetCellValue(StoreGroup);
                    GroupCell.CellStyle = StoreGroupStyle;
                    HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    MeasureCell.SetCellValue(string.Empty);
                    MeasureCell.CellStyle = StoreItemStyle;
                    HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CoverCell.SetCellValue(string.Empty);
                    CoverCell.CellStyle = StoreItemStyle;
                    HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    ColorCell.SetCellValue(string.Empty);
                    ColorCell.CellStyle = StoreItemStyle;
                    HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PatinaCell.SetCellValue(string.Empty);
                    PatinaCell.CellStyle = StoreItemStyle;
                    HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    LengthCell.SetCellValue(string.Empty);
                    LengthCell.CellStyle = StoreItemStyle;
                    HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    HeightCell.SetCellValue(string.Empty);
                    HeightCell.CellStyle = StoreItemStyle;
                    HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WidthCell.SetCellValue(string.Empty);
                    WidthCell.CellStyle = StoreItemStyle;
                    HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    CapacityCell.SetCellValue(string.Empty);
                    CapacityCell.CellStyle = StoreItemStyle;
                    HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    WeightCell.SetCellValue(string.Empty);
                    WeightCell.CellStyle = StoreItemStyle;
                    HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                    PriceCell.SetCellValue(string.Empty);
                    PriceCell.CellStyle = StoreItemStyle;

                    if (ReportType == "ОСТн")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(StartMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "Приход")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "Реализация")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(SellingCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "В производство")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(ExpenseCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }
                    if (ReportType == "ОСТк")
                    {
                        HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                        StartMonthCountCell.SetCellValue(EndMonthCount);
                        StartMonthCountCell.CellStyle = StoreItemDecStyle;
                        HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                        StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                        StartMonthCostCell.CellStyle = RightBorderStyle;
                    }

                    RowIndex++;
                }

                using (DataView DV = new DataView(StoreParametersDT, "StoreGroup = '" + StoreGroup + "'", string.Empty, DataViewRowState.CurrentRows))
                {
                    SubGroupsTable = DV.ToTable(true, new string[] { "StoreSubGroup" });
                }
                for (int j = 0; j < SubGroupsTable.Rows.Count; j++)
                {
                    StartMonthCost = 0;
                    MonthInvoiceCost = 0;
                    SellingCost = 0;
                    ExpenseCost = 0;
                    EndMonthCost = 0;

                    StartMonthCount = 0;
                    MonthInvoiceCount = 0;
                    SellingCount = 0;
                    ExpenseCount = 0;
                    EndMonthCount = 0;

                    StoreSubGroup = SubGroupsTable.Rows[j]["StoreSubGroup"].ToString();

                    DataRow[] SubGroupRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup + "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (SubGroupRows.Count() != 0)
                    {
                        foreach (DataRow row in SubGroupRows)
                        {
                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount += Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount += Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount += Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount += Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount += Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost += Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost += Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost += Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost += Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost += Convert.ToDecimal(row["EndMonthCost"]);
                        }

                        StartMonthCost = Decimal.Round(StartMonthCost, 2, MidpointRounding.AwayFromZero);
                        MonthInvoiceCost = Decimal.Round(MonthInvoiceCost, 2, MidpointRounding.AwayFromZero);
                        SellingCost = Decimal.Round(SellingCost, 2, MidpointRounding.AwayFromZero);
                        ExpenseCost = Decimal.Round(ExpenseCost, 2, MidpointRounding.AwayFromZero);
                        EndMonthCost = Decimal.Round(EndMonthCost, 2, MidpointRounding.AwayFromZero);
                        DisplayIndex = 0;
                        HSSFCell SubGroupCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        SubGroupCell.SetCellValue("  " + StoreSubGroup);
                        SubGroupCell.CellStyle = StoreSubGroupStyle;
                        HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        MeasureCell.SetCellValue(string.Empty);
                        MeasureCell.CellStyle = StoreItemStyle;
                        HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CoverCell.SetCellValue(string.Empty);
                        CoverCell.CellStyle = StoreItemStyle;
                        HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        ColorCell.SetCellValue(string.Empty);
                        ColorCell.CellStyle = StoreItemStyle;
                        HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PatinaCell.SetCellValue(string.Empty);
                        PatinaCell.CellStyle = StoreItemStyle;
                        HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        LengthCell.SetCellValue(string.Empty);
                        LengthCell.CellStyle = StoreItemStyle;
                        HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        HeightCell.SetCellValue(string.Empty);
                        HeightCell.CellStyle = StoreItemStyle;
                        HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WidthCell.SetCellValue(string.Empty);
                        WidthCell.CellStyle = StoreItemStyle;
                        HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        CapacityCell.SetCellValue(string.Empty);
                        CapacityCell.CellStyle = StoreItemStyle;
                        HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        WeightCell.SetCellValue(string.Empty);
                        WeightCell.CellStyle = StoreItemStyle;
                        HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                        PriceCell.SetCellValue(string.Empty);
                        PriceCell.CellStyle = StoreItemStyle;

                        if (ReportType == "ОСТн")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(StartMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "Приход")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "Реализация")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(SellingCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "В производство")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(ExpenseCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }
                        if (ReportType == "ОСТк")
                        {
                            HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                            StartMonthCountCell.SetCellValue(EndMonthCount);
                            StartMonthCountCell.CellStyle = StoreItemDecStyle;
                            HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                            StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                            StartMonthCostCell.CellStyle = RightBorderStyle;
                        }

                        RowIndex++;
                    }

                    DataRow[] StoreItemRows = StoreParametersDT.Select("StoreGroup = '" + StoreGroup +
                        "' AND StoreSubGroup = '" + StoreSubGroup + "'");
                    if (StoreItemRows.Count() != 0)
                    {
                        foreach (DataRow row in StoreItemRows)
                        {
                            Price = 0;

                            StartMonthCost = 0;
                            MonthInvoiceCost = 0;
                            SellingCost = 0;
                            ExpenseCost = 0;
                            EndMonthCost = 0;

                            StartMonthCount = 0;
                            MonthInvoiceCount = 0;
                            SellingCount = 0;
                            ExpenseCount = 0;
                            EndMonthCount = 0;

                            if (row["Price"] != DBNull.Value)
                                Price = Convert.ToDecimal(row["Price"]);

                            if (row["StartMonthCount"] != DBNull.Value)
                                StartMonthCount = Convert.ToDouble(row["StartMonthCount"]);
                            if (row["MonthInvoiceCount"] != DBNull.Value)
                                MonthInvoiceCount = Convert.ToDouble(row["MonthInvoiceCount"]);
                            if (row["SellingCount"] != DBNull.Value)
                                SellingCount = Convert.ToDouble(row["SellingCount"]);
                            if (row["ExpenseCount"] != DBNull.Value)
                                ExpenseCount = Convert.ToDouble(row["ExpenseCount"]);
                            if (row["EndMonthCount"] != DBNull.Value)
                                EndMonthCount = Convert.ToDouble(row["EndMonthCount"]);

                            if (row["StartMonthCost"] != DBNull.Value)
                                StartMonthCost = Convert.ToDecimal(row["StartMonthCost"]);
                            if (row["MonthInvoiceCost"] != DBNull.Value)
                                MonthInvoiceCost = Convert.ToDecimal(row["MonthInvoiceCost"]);
                            if (row["SellingCost"] != DBNull.Value)
                                SellingCost = Convert.ToDecimal(row["SellingCost"]);
                            if (row["ExpenseCost"] != DBNull.Value)
                                ExpenseCost = Convert.ToDecimal(row["ExpenseCost"]);
                            if (row["EndMonthCost"] != DBNull.Value)
                                EndMonthCost = Convert.ToDecimal(row["EndMonthCost"]);

                            Measure = row["Measure"].ToString();
                            StoreItem = row["StoreItem"].ToString();
                            Notes = row["Notes"].ToString();

                            DisplayIndex = 0;
                            HSSFCell StoreItemCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            StoreItemCell.SetCellValue("    " + StoreItem);
                            StoreItemCell.CellStyle = LeftBorderStyle;
                            HSSFCell MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Notes);
                            MeasureCell.CellStyle = StoreItemStyle;
                            MeasureCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            MeasureCell.SetCellValue(Measure);
                            MeasureCell.CellStyle = StoreItemStyle;

                            HSSFCell CoverCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Cover"] != DBNull.Value)
                                CoverCell.SetCellValue(row["Cover"].ToString());
                            else
                                CoverCell.SetCellValue(string.Empty);
                            CoverCell.CellStyle = StoreItemStyle;

                            HSSFCell ColorCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Color"] != DBNull.Value)
                                ColorCell.SetCellValue(row["Color"].ToString());
                            else
                                ColorCell.SetCellValue(string.Empty);
                            ColorCell.CellStyle = StoreItemStyle;

                            HSSFCell PatinaCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Patina"] != DBNull.Value)
                                PatinaCell.SetCellValue(row["Patina"].ToString());
                            else
                                PatinaCell.SetCellValue(string.Empty);
                            PatinaCell.CellStyle = StoreItemStyle;

                            HSSFCell LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Diameter"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Diameter"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemStyle;

                            LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Thickness"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Thickness"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemDecStyle;

                            LengthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Length"] != DBNull.Value)
                                LengthCell.SetCellValue(Convert.ToDouble(row["Length"]));
                            else
                                LengthCell.SetCellValue(string.Empty);
                            LengthCell.CellStyle = StoreItemStyle;

                            HSSFCell HeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Height"] != DBNull.Value)
                                HeightCell.SetCellValue(Convert.ToDouble(row["Height"]));
                            else
                                HeightCell.SetCellValue(string.Empty);
                            HeightCell.CellStyle = StoreItemStyle;

                            HSSFCell WidthCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Width"] != DBNull.Value)
                                WidthCell.SetCellValue(Convert.ToDouble(row["Width"]));
                            else
                                WidthCell.SetCellValue(string.Empty);
                            WidthCell.CellStyle = StoreItemStyle;

                            HSSFCell CapacityCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Capacity"] != DBNull.Value)
                                CapacityCell.SetCellValue(Convert.ToDouble(row["Capacity"]));
                            else
                                CapacityCell.SetCellValue(string.Empty);
                            CapacityCell.CellStyle = StoreItemStyle;

                            HSSFCell WeightCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            if (row["Weight"] != DBNull.Value)
                                WeightCell.SetCellValue(Convert.ToDouble(row["Weight"]));
                            else
                                WeightCell.SetCellValue(string.Empty);
                            WeightCell.CellStyle = StoreItemStyle;

                            HSSFCell PriceCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex++);
                            PriceCell.SetCellValue(Convert.ToDouble(Price));
                            PriceCell.CellStyle = StoreItemDecStyle;

                            if (ReportType == "ОСТн")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(StartMonthCount);
                                StartMonthCountCell.CellStyle = StoreItemDecStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(StartMonthCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "Приход")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(MonthInvoiceCount);
                                StartMonthCountCell.CellStyle = StoreItemDecStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(MonthInvoiceCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "Реализация")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(SellingCount);
                                StartMonthCountCell.CellStyle = StoreItemDecStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(SellingCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "В производство")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(ExpenseCount);
                                StartMonthCountCell.CellStyle = StoreItemDecStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(ExpenseCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }
                            if (ReportType == "ОСТк")
                            {
                                HSSFCell StartMonthCountCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex);
                                StartMonthCountCell.SetCellValue(EndMonthCount);
                                StartMonthCountCell.CellStyle = StoreItemDecStyle;
                                HSSFCell StartMonthCostCell = sheet1.CreateRow(RowIndex + 1).CreateCell(DisplayIndex + 1);
                                StartMonthCostCell.SetCellValue(Convert.ToDouble(EndMonthCost));
                                StartMonthCostCell.CellStyle = RightBorderStyle;
                            }

                            RowIndex++;
                        }
                    }
                }
            }

            GroupsTable.Dispose();
            SubGroupsTable.Dispose();
            StoreItemsTable.Dispose();

            CellRangeAddress region = new CellRangeAddress(RowIndex + 1, RowIndex + 1, 0, 12);
            HSSFRegionUtil.SetBorderTop(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            //HSSFRegionUtil.SetBorderBottom(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            //HSSFRegionUtil.SetBorderLeft(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
            //HSSFRegionUtil.SetBorderRight(HSSFCellStyle.BORDER_MEDIUM, region, sheet1, hssfworkbook);
        }
    }






    public class CuttingToolsClass
    {
        PercentageDataGrid DecorProductDataGrid;
        PercentageDataGrid DecorDataGrid;
        public PercentageDataGrid HeadsDataGrid;

        DataTable DecorProductDT;
        DataTable DecorDT;
        DataTable DecorDTresult;
        DataTable HeadsDT;
        DataTable HeadsDTresult;
        DataTable HeadTypesDT;
        DataTable HeadNumbersDT;
        DataTable HeadNumbersDTresult;

        public BindingSource HeadsBS;
        public BindingSource HeadTypesBS;
        public BindingSource HeadNumbersBS;

        public CuttingToolsClass(ref PercentageDataGrid tDecorProductDataGrid, ref PercentageDataGrid tDecorDataGrid, ref PercentageDataGrid tHeadsDataGrid)
        {
            DecorProductDataGrid = tDecorProductDataGrid;
            DecorDataGrid = tDecorDataGrid;
            HeadsDataGrid = tHeadsDataGrid;
            CreateAndFill();
            Bindings();
            GridSettings();
        }

        private void GridSettings()
        {
            DecorProductDataGrid.Columns["ProductID"].Visible = false;
            DecorProductDataGrid.Columns["ProductName"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;
            DecorDataGrid.Columns["DecorID"].Visible = false;
            DecorDataGrid.Columns["ProductID"].Visible = false;
            DecorDataGrid.Columns["Name"].AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill;

            HeadsDataGrid.Columns["HeadTypeId"].Visible = false;
            HeadsDataGrid.Columns["HeadNumberId"].Visible = false;
            HeadsDataGrid.Columns["HeadId"].Visible = false;
            HeadsDataGrid.Columns["DecorID"].Visible = false;


            DataGridViewComboBoxColumn HeadTypesColumn = new DataGridViewComboBoxColumn()
            {
                Name = "HeadType",
                DataSource = HeadTypesDT.Copy(),
                DisplayMember = "HeadType",
                ValueMember = "HeadTypeId",
                DataPropertyName = "HeadTypeId",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            HeadsDataGrid.Columns.Add(HeadTypesColumn);

            DataGridViewComboBoxColumn HeadNumbersColumn = new DataGridViewComboBoxColumn()
            {
                Name = "HeadNumber",
                DataSource = HeadNumbersDT.Copy(),
                DisplayMember = "HeadNumber",
                ValueMember = "HeadNumberId",
                DataPropertyName = "HeadNumberId",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            HeadsDataGrid.Columns.Add(HeadNumbersColumn);

            DataGridViewComboBoxColumn WidthColumn = new DataGridViewComboBoxColumn()
            {
                Name = "Width",
                DataSource = HeadNumbersDT.Copy(),
                DisplayMember = "Width",
                ValueMember = "HeadNumberId",
                DataPropertyName = "HeadNumberId",
                DisplayStyle = DataGridViewComboBoxDisplayStyle.Nothing
            };
            HeadsDataGrid.Columns.Add(WidthColumn);

            int DisplayIndex = 0;
            HeadsDataGrid.Columns["Width"].DisplayIndex = DisplayIndex++;
            HeadsDataGrid.Columns["HeadNumber"].DisplayIndex = DisplayIndex++;
            HeadsDataGrid.Columns["HeadType"].DisplayIndex = DisplayIndex++;

            HeadsDataGrid.Columns["HeadType"].HeaderText = "Тип";
            HeadsDataGrid.Columns["Articul"].HeaderText = "Название";
            HeadsDataGrid.Columns["HeadNumber"].HeaderText = "Инв. №";
            HeadsDataGrid.Columns["Width"].HeaderText = "Ширина";
            HeadsDataGrid.Columns["CompleteCount"].HeaderText = "Кол-во";
            HeadsDataGrid.Columns["PlanResource"].HeaderText = "Планируемый\nресурс";
            HeadsDataGrid.Columns["FactResource"].HeaderText = "Фактический\nресурс";
            HeadsDataGrid.Columns["IsBroken"].HeaderText = "Повреждён";

            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                NumberGroupSeparator = " ",
                NumberDecimalDigits = 1,
                NumberDecimalSeparator = ","
            };
            HeadsDataGrid.Columns["PlanResource"].DefaultCellStyle.Format = "N";
            HeadsDataGrid.Columns["PlanResource"].DefaultCellStyle.FormatProvider = nfi1;
            HeadsDataGrid.Columns["FactResource"].DefaultCellStyle.Format = "N";
            HeadsDataGrid.Columns["FactResource"].DefaultCellStyle.FormatProvider = nfi1;

            HeadsDataGrid.Columns["HeadType"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            HeadsDataGrid.Columns["Articul"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            HeadsDataGrid.Columns["HeadNumber"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            HeadsDataGrid.Columns["Width"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            HeadsDataGrid.Columns["CompleteCount"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            HeadsDataGrid.Columns["PlanResource"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            HeadsDataGrid.Columns["FactResource"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
            HeadsDataGrid.Columns["IsBroken"].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;
        }

        private void CreateAndFill()
        {
            DecorProductDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT ProductID, ProductName FROM DecorProducts WHERE (ProductID IN (SELECT DISTINCT ProductID FROM DecorConfig WHERE (Enabled = 'true'))) ORDER BY ProductName ASC", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorProductDT);
            }

            DecorDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT DecorID, ProductID, Name FROM Decor WHERE (DecorID IN (SELECT DISTINCT DecorID FROM DecorConfig WHERE (Enabled = 'true'))) ORDER BY Name ASC", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(DecorDT);
            }

            DecorDTresult = DecorDT.Clone();

            HeadsDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Heads", ConnectionStrings.LightConnectionString))
            {
                DA.Fill(HeadsDT);
            }

            HeadsDTresult = HeadsDT.Clone();

            HeadTypesDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM HeadTypes", ConnectionStrings.LightConnectionString))
            {
                DA.Fill(HeadTypesDT);
            }

            HeadNumbersDT = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM HeadNumbers", ConnectionStrings.LightConnectionString))
            {
                DA.Fill(HeadNumbersDT);
            }

            HeadNumbersDTresult = HeadNumbersDT.Clone();
        }

        private void Bindings()
        {
            HeadTypesBS = new BindingSource() { DataSource = HeadTypesDT };
            HeadNumbersBS = new BindingSource() { DataSource = HeadNumbersDTresult };
            HeadsBS = new BindingSource() { DataSource = HeadsDTresult };

            DecorProductDataGrid.DataSource = DecorProductDT;
            DecorDataGrid.DataSource = DecorDTresult;
            HeadsDataGrid.DataSource = HeadsBS;
        }

        public void FilterDecorDT(int ProductID)
        {
            DecorDT.DefaultView.RowFilter = "ProductID = " + ProductID;
            DecorDTresult.Clear();

            foreach (DataRow Row in DecorDT.DefaultView.ToTable().Rows)
            {
                DecorDTresult.ImportRow(Row);
            }
        }

        public void FilterHeadsDT(int DecorID)
        {
            HeadsDT.DefaultView.RowFilter = "DecorID = " + DecorID;
            HeadsDTresult.Clear();

            foreach (DataRow Row in HeadsDT.DefaultView.ToTable().Rows)
            {
                HeadsDTresult.ImportRow(Row);
            }
        }

        public void FilterHeadNumbersDT(int HeadTypeId)
        {
            HeadNumbersDT.DefaultView.RowFilter = "HeadTypeId = " + HeadTypeId;
            HeadNumbersDTresult.Clear();

            foreach (DataRow Row in HeadNumbersDT.DefaultView.ToTable().Rows)
            {
                HeadNumbersDTresult.ImportRow(Row);
            }
        }

        private void UpdateHeadsDT()
        {
            HeadsDT.Clear();

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Heads", ConnectionStrings.LightConnectionString))
            {
                DA.Fill(HeadsDT);
            }
        }

        public void AddHead(int HeadTypeId, string Articul, int HeadNumberId, int DecorID, string CompleteCount, decimal PlanResource, decimal FactResource)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TOP 0 * FROM Heads", ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        DataRow NewRow = DT.NewRow();
                        NewRow["HeadTypeId"] = HeadTypeId;
                        NewRow["Articul"] = Articul;

                        if (HeadNumberId == 0)
                            NewRow["HeadNumberId"] = DBNull.Value;
                        else
                            NewRow["HeadNumberId"] = HeadNumberId;

                        NewRow["DecorID"] = DecorID;
                        NewRow["CompleteCount"] = CompleteCount;
                        NewRow["PlanResource"] = PlanResource;
                        NewRow["FactResource"] = FactResource;
                        NewRow["IsBroken"] = false;

                        DT.Rows.Add(NewRow);

                        DA.Update(DT);
                    }
                }
            }
            UpdateHeadsDT();
        }

        public void EditHead(int HeadTypeId, string Articul, int HeadNumberId, int DecorID, string CompleteCount, decimal PlanResource, decimal FactResource, bool IsBroken, int HeadId)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Heads WHERE HeadId = " + HeadId, ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);

                        DT.Rows[0]["HeadTypeId"] = HeadTypeId;
                        DT.Rows[0]["Articul"] = Articul;

                        if (HeadNumberId == 0)
                            DT.Rows[0]["HeadNumberId"] = DBNull.Value;
                        else
                            DT.Rows[0]["HeadNumberId"] = HeadNumberId;

                        DT.Rows[0]["DecorID"] = DecorID;
                        DT.Rows[0]["CompleteCount"] = CompleteCount;
                        DT.Rows[0]["PlanResource"] = PlanResource;
                        DT.Rows[0]["FactResource"] = FactResource;
                        DT.Rows[0]["IsBroken"] = IsBroken;

                        DA.Update(DT);
                    }
                }
            }
            UpdateHeadsDT();
        }

        public void RemoveHead(int HeadId)
        {
            using (SqlDataAdapter DA = new SqlDataAdapter("DELETE FROM Heads WHERE HeadId = " + HeadId, ConnectionStrings.LightConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    using (DataTable DT = new DataTable())
                    {
                        DA.Fill(DT);
                        DA.Update(DT);
                    }
                }
            }
            UpdateHeadsDT();
        }
    }






    public struct GeneticsInfo
    {
        public string IncomeDate;//дата прихода
        public string DocNumber;//№ док
        public string Seller;//поставщик
        public string Created;//изготовлено
        public string Cover;
        public string Color;
        public string Patina;
        public string Diameter;
        public string Thickness;
        public string Length;
        public string Height;
        public string Width;
        public string Admission;
        public string Capacity;
        public string Weight;
        public string InvoiceCount;
        public string Produced;//произведено
        public string BestBefore;//срок годности
        public string StoreNotes;
        public string Producer;//производитель
        public int SerialNumber;
        public int FactoryID;
        public string BarcodeNumber;
        public string GeneticNotes;
        public string TechStoreGroupName;
        public string TechStoreSubGroupName;
        public string TechStoreName;
    }

    public class GeneticsManager
    {
        DataTable ColorsDT;
        DataTable CoversDT;
        DataTable PatinaDT;
        private DataTable PatinaRALDataTable = null;
        DataTable PurchaseInvoicesDT;
        DataTable SellersDT;
        DataTable StoreDT;
        DataTable StoreGeneticsDT;
        DataTable TechStoreDT;

        GeneticsInfo GeneticsInfo;

        public GeneticsManager()
        {

        }

        public GeneticsInfo GetGeneticsInfo
        {
            get { return GeneticsInfo; }
        }

        public void ClearGeneticsInfo()
        {
            GeneticsInfo.Admission = string.Empty;
            GeneticsInfo.BarcodeNumber = string.Empty;
            GeneticsInfo.BestBefore = string.Empty;
            GeneticsInfo.Capacity = string.Empty;
            GeneticsInfo.Color = string.Empty;
            GeneticsInfo.Cover = string.Empty;
            GeneticsInfo.Created = string.Empty;
            GeneticsInfo.Diameter = string.Empty;
            GeneticsInfo.DocNumber = string.Empty;
            GeneticsInfo.FactoryID = 0;
            GeneticsInfo.GeneticNotes = string.Empty;
            GeneticsInfo.Height = string.Empty;
            GeneticsInfo.IncomeDate = string.Empty;
            GeneticsInfo.InvoiceCount = string.Empty;
            GeneticsInfo.Length = string.Empty;
            GeneticsInfo.StoreNotes = string.Empty;
            GeneticsInfo.Patina = string.Empty;
            GeneticsInfo.Produced = string.Empty;
            GeneticsInfo.Producer = string.Empty;
            GeneticsInfo.Seller = string.Empty;
            GeneticsInfo.SerialNumber = 0;
            GeneticsInfo.Thickness = string.Empty;
            GeneticsInfo.Weight = string.Empty;
            GeneticsInfo.Width = string.Empty;
        }

        public void Initialize()
        {
            Create();
            CreateCoversDT();
            Fill();
        }

        private void Create()
        {
            ColorsDT = new DataTable();
            CoversDT = new DataTable();
            PatinaDT = new DataTable();
            PurchaseInvoicesDT = new DataTable();
            SellersDT = new DataTable();
            StoreDT = new DataTable();
            StoreGeneticsDT = new DataTable();
            TechStoreDT = new DataTable();
        }

        private void CreateCoversDT()
        {
            CoversDT.Columns.Add(new DataColumn("CoverID", Type.GetType("System.Int64")));
            CoversDT.Columns.Add(new DataColumn("CoverName", Type.GetType("System.String")));

            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT TechStoreID, TechStoreName FROM TechStore" +
                " WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)" +
                " ORDER BY TechStoreName",
                ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    DataRow EmptyRow = CoversDT.NewRow();
                    EmptyRow["CoverID"] = -1;
                    EmptyRow["CoverName"] = "-";
                    CoversDT.Rows.Add(EmptyRow);

                    DataRow ChoiceRow = CoversDT.NewRow();
                    ChoiceRow["CoverID"] = 0;
                    ChoiceRow["CoverName"] = "на выбор";
                    CoversDT.Rows.Add(ChoiceRow);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = CoversDT.NewRow();
                        NewRow["CoverID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["CoverName"] = DT.Rows[i]["TechStoreName"].ToString();
                        CoversDT.Rows.Add(NewRow);
                    }
                }
            }
        }

        private void GetColorsDT()
        {
            ColorsDT = new DataTable();
            ColorsDT.Columns.Add(new DataColumn("ColorID", Type.GetType("System.Int64")));
            ColorsDT.Columns.Add(new DataColumn("ColorName", Type.GetType("System.String")));
            string SelectCommand = @"SELECT TechStoreID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM TechStoreSubGroups WHERE TechStoreGroupID = 11)
                ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = -1;
                        NewRow["ColorName"] = "-";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = 0;
                        NewRow["ColorName"] = "на выбор";
                        ColorsDT.Rows.Add(NewRow);
                    }
                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow NewRow = ColorsDT.NewRow();
                        NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["TechStoreID"]);
                        NewRow["ColorName"] = DT.Rows[i]["TechStoreName"].ToString();
                        ColorsDT.Rows.Add(NewRow);
                    }
                }
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM InsetColors WHERE GroupID IN (2,3,4,5,6,21,22)", ConnectionStrings.CatalogConnectionString))
            {
                using (DataTable DT = new DataTable())
                {
                    DA.Fill(DT);

                    for (int i = 0; i < DT.Rows.Count; i++)
                    {
                        DataRow[] rows = ColorsDT.Select("ColorID=" + Convert.ToInt32(DT.Rows[i]["InsetColorID"]));
                        if (rows.Count() == 0)
                        {
                            DataRow NewRow = ColorsDT.NewRow();
                            NewRow["ColorID"] = Convert.ToInt64(DT.Rows[i]["InsetColorID"]);
                            NewRow["ColorName"] = DT.Rows[i]["InsetColorName"].ToString();
                            ColorsDT.Rows.Add(NewRow);
                        }
                    }
                }
            }
        }

        private void Fill()
        {
            //using (SqlDataAdapter DA = new SqlDataAdapter("SELECT Colors.*, TechStoreName FROM Colors" +
            //    " INNER JOIN infiniu2_catalog.dbo.TechStore" +
            //    " ON Colors.ColorID = infiniu2_catalog.dbo.TechStore.TechStoreID" +
            //    " ORDER BY ColorsGroupID, TechStoreName", ConnectionStrings.StorageConnectionString))
            //{
            //    DA.Fill(ColorsDT);
            //    {
            //        DataRow EmptyRow1 = ColorsDT.NewRow();
            //        EmptyRow1["ColorID"] = -1;
            //        EmptyRow1["TechStoreName"] = "-";
            //        ColorsDT.Rows.InsertAt(EmptyRow1, 0);

            //        DataRow ChoiceRow1 = ColorsDT.NewRow();
            //        ChoiceRow1["ColorID"] = 0;
            //        ChoiceRow1["TechStoreName"] = "на выбор";
            //        ColorsDT.Rows.InsertAt(ChoiceRow1, 1);
            //    }
            //}

            GetColorsDT();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM Patina", ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaDT);
            }
            PatinaRALDataTable = new DataTable();
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT * FROM PatinaRAL WHERE Enabled=1",
                ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(PatinaRALDataTable);
            }
            foreach (DataRow item in PatinaRALDataTable.Rows)
            {
                DataRow NewRow = PatinaDT.NewRow();
                NewRow["PatinaID"] = item["PatinaRALID"];
                NewRow["PatinaName"] = item["PatinaRAL"];
                NewRow["DisplayName"] = item["DisplayName"];
                PatinaDT.Rows.Add(NewRow);
            }
            using (SqlDataAdapter DA = new SqlDataAdapter("SELECT SellerID, SellerName FROM Sellers", ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(SellersDT);
            }
        }

        public void FillPurchaseInvoices(int PurchaseInvoiceID)
        {
            string SelectCommand = "SELECT * FROM PurchaseInvoices WHERE PurchaseInvoiceID = " + PurchaseInvoiceID;
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(PurchaseInvoicesDT);
            }
        }

        public void FillStore(int[] StoreID)
        {
            string SelectCommand = "SELECT * FROM Store WHERE StoreID IN (" + string.Join(",", StoreID) + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreDT);
            }
        }

        public void FillStoreGenetics(int[] StoreID)
        {
            string SelectCommand = "SELECT * FROM StoreGenetics WHERE StoreID IN (" + string.Join(",", StoreID) + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(StoreGeneticsDT);
            }
        }

        public void FillTechStore(int[] TechStoreID)
        {
            string SelectCommand = "SELECT TechStoreID, TechStoreName, TechStoreSubGroupName, TechStoreGroupName, MeasureID FROM TechStore" +
                " INNER JOIN TechStoreSubGroups ON TechStore.TechStoreSubGroupID = TechStoreSubGroups.TechStoreSubGroupID" +
                " INNER JOIN TechStoreGroups ON TechStoreSubGroups.TechStoreGroupID = TechStoreGroups.TechStoreGroupID" +
                " WHERE TechStoreID IN (" + string.Join(",", TechStoreID) + ")";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(TechStoreDT);
            }
        }

        public void ClearPurchaseInvoices()
        {
            PurchaseInvoicesDT.Clear();
        }

        public void ClearStore()
        {
            StoreDT.Clear();
        }

        public void ClearTechStore()
        {
            TechStoreDT.Clear();
        }

        #region
        public string Created(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreGeneticsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Created"].ToString();
            return s;
        }

        public int Factory(int StoreID)
        {
            int s = 0;
            DataRow[] Rows = StoreGeneticsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Convert.ToInt32(Rows[0]["FactoryID"]);
            return s;
        }

        public string Diameter(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Diameter"].ToString();
            return s;
        }

        public string Thickness(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Thickness"].ToString();
            return s;
        }

        public string Length(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Length"].ToString();
            return s;
        }

        public string Height(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Height"].ToString();
            return s;
        }

        public string Width(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Width"].ToString();
            return s;
        }

        public string Admission(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Admission"].ToString();
            return s;
        }

        public string Capacity(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Capacity"].ToString();
            return s;
        }

        public string Weight(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Weight"].ToString();
            return s;
        }

        public string InvoiceCount(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["InvoiceCount"].ToString();
            return s;
        }

        public string Produced(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Produced"].ToString();
            return s;
        }

        public string BestBefore(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["BestBefore"].ToString();
            return s;
        }

        public string Notes(int StoreID)
        {
            string s = string.Empty;
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
                s = Rows[0]["Notes"].ToString();
            return s;
        }

        public string Color(int Parameter)
        {
            string s = string.Empty;
            DataRow[] Rows = ColorsDT.Select("ColorID = " + Parameter);
            if (Rows.Count() > 0)
                s = Rows[0]["ColorName"].ToString();
            return s;
        }

        public string Cover(int Parameter)
        {
            string s = string.Empty;
            DataRow[] Rows = CoversDT.Select("CoverID = " + Parameter);
            if (Rows.Count() > 0)
                s = Rows[0]["CoverName"].ToString();
            return s;
        }

        public string Patina(int Parameter)
        {
            string s = string.Empty;
            DataRow[] Rows = PatinaDT.Select("PatinaID = " + Parameter);
            if (Rows.Count() > 0)
                s = Rows[0]["PatinaName"].ToString();
            return s;
        }

        public string DocNumber(int Parameter)
        {
            string s = string.Empty;
            DataRow[] Rows = PurchaseInvoicesDT.Select("PurchaseInvoiceID = " + Parameter);
            if (Rows.Count() > 0)
                s = Rows[0]["DocNumber"].ToString();
            return s;
        }

        public string IncomeDate(int Parameter)
        {
            string s = string.Empty;
            DataRow[] Rows = PurchaseInvoicesDT.Select("PurchaseInvoiceID = " + Parameter);
            if (Rows.Count() > 0)
                s = Rows[0]["IncomeDate"].ToString();
            return s;
        }

        public string Seller(int Parameter)
        {
            string s = string.Empty;
            DataRow[] PRows = PurchaseInvoicesDT.Select("PurchaseInvoiceID = " + Parameter);
            if (PRows.Count() > 0)
            {
                DataRow[] SRows = SellersDT.Select("SellerID = " + PRows[0]["SellerID"]);
                if (SRows.Count() > 0)
                    s = SRows[0]["SellerName"].ToString();
            }
            return s;
        }

        #endregion

        public void SetBarcodeNumber(int BarcodeType, int StoreGeneticsID)
        {
            string Type = string.Empty;
            if (BarcodeType.ToString().Length == 1)
                Type = "00" + BarcodeType.ToString();
            if (BarcodeType.ToString().Length == 2)
                Type = "0" + BarcodeType.ToString();
            if (BarcodeType.ToString().Length == 3)
                Type = BarcodeType.ToString();

            string Number = string.Empty;
            if (StoreGeneticsID.ToString().Length == 1)
                Number = "00000000" + StoreGeneticsID.ToString();
            if (StoreGeneticsID.ToString().Length == 2)
                Number = "0000000" + StoreGeneticsID.ToString();
            if (StoreGeneticsID.ToString().Length == 3)
                Number = "000000" + StoreGeneticsID.ToString();
            if (StoreGeneticsID.ToString().Length == 4)
                Number = "00000" + StoreGeneticsID.ToString();
            if (StoreGeneticsID.ToString().Length == 5)
                Number = "0000" + StoreGeneticsID.ToString();
            if (StoreGeneticsID.ToString().Length == 6)
                Number = "000" + StoreGeneticsID.ToString();
            if (StoreGeneticsID.ToString().Length == 7)
                Number = "00" + StoreGeneticsID.ToString();
            if (StoreGeneticsID.ToString().Length == 8)
                Number = "0" + StoreGeneticsID.ToString();

            System.Text.StringBuilder BarcodeNumber = new System.Text.StringBuilder(Type);
            BarcodeNumber.Append(Number);
            GeneticsInfo.BarcodeNumber = BarcodeNumber.ToString();
        }

        public void SetPurchaseInvoiceInfo(int PurchaseInvoiceID)
        {
            DataRow[] Rows = PurchaseInvoicesDT.Select("PurchaseInvoiceID = " + PurchaseInvoiceID);
            if (Rows.Count() > 0)
            {
                GeneticsInfo.DocNumber = Rows[0]["DocNumber"].ToString();
                GeneticsInfo.IncomeDate = Convert.ToDateTime(Rows[0]["IncomeDate"]).ToString("dd.MM.yyyy");
                DataRow[] SRows = SellersDT.Select("SellerID = " + Rows[0]["SellerID"]);
                if (SRows.Count() > 0)
                    GeneticsInfo.Seller = SRows[0]["SellerName"].ToString();
            }
        }

        public void SetStoreInfo(int StoreID)
        {
            NumberFormatInfo nfi1 = new NumberFormatInfo()
            {
                NumberGroupSeparator = " ",
                NumberDecimalDigits = 3,
                NumberDecimalSeparator = ","
            };
            NumberFormatInfo nfi2 = new NumberFormatInfo()
            {
                NumberGroupSeparator = " ",
                NumberDecimalDigits = 0,
                NumberDecimalSeparator = ","
            };
            DataRow[] Rows = StoreDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                if (Rows[0]["Admission"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Admission"]) % 1 > 0)
                        GeneticsInfo.Admission = Convert.ToDecimal(Rows[0]["Admission"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Admission = Convert.ToInt32(Rows[0]["Admission"]).ToString("N", nfi2);
                }
                if (Rows[0]["BestBefore"] != DBNull.Value)
                    GeneticsInfo.BestBefore = Convert.ToDateTime(Rows[0]["BestBefore"]).ToString("dd.MM.yyyy");
                if (Rows[0]["Capacity"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Capacity"]) % 1 > 0)
                        GeneticsInfo.Capacity = Convert.ToDecimal(Rows[0]["Capacity"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Capacity = Convert.ToInt32(Rows[0]["Capacity"]).ToString("N", nfi2);
                }
                if (Rows[0]["ColorID"] != DBNull.Value && Convert.ToInt32(Rows[0]["ColorID"]) > 0)
                {
                    DataRow[] PRows = ColorsDT.Select("ColorID = " + Rows[0]["ColorID"]);
                    if (Rows.Count() > 0)
                        GeneticsInfo.Color = PRows[0]["ColorName"].ToString();
                }
                if (Rows[0]["CoverID"] != DBNull.Value && Convert.ToInt32(Rows[0]["CoverID"]) > 0)
                {
                    DataRow[] PRows = CoversDT.Select("CoverID = " + Rows[0]["CoverID"]);
                    if (Rows.Count() > 0)
                        GeneticsInfo.Cover = PRows[0]["CoverName"].ToString();
                }
                if (Rows[0]["Diameter"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Diameter"]) % 1 > 0)
                        GeneticsInfo.Diameter = Convert.ToDecimal(Rows[0]["Diameter"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Diameter = Convert.ToInt32(Rows[0]["Diameter"]).ToString("N", nfi2);
                }
                if (Rows[0]["Height"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Height"]) % 1 > 0)
                        GeneticsInfo.Height = Convert.ToDecimal(Rows[0]["Height"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Height = Convert.ToInt32(Rows[0]["Height"]).ToString("N", nfi2);
                }
                if (Rows[0]["InvoiceCount"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["InvoiceCount"]) % 1 > 0)
                        GeneticsInfo.InvoiceCount = Convert.ToDecimal(Rows[0]["InvoiceCount"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.InvoiceCount = Convert.ToInt32(Rows[0]["InvoiceCount"]).ToString("N", nfi2);
                }
                if (Rows[0]["Length"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Length"]) % 1 > 0)
                        GeneticsInfo.Length = Convert.ToDecimal(Rows[0]["Length"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Length = Convert.ToInt32(Rows[0]["Length"]).ToString("N", nfi2);
                }
                if (Rows[0]["Notes"] != DBNull.Value)
                    GeneticsInfo.StoreNotes = Rows[0]["Notes"].ToString();
                if (Rows[0]["Producer"] != DBNull.Value)
                    GeneticsInfo.Producer = Rows[0]["Producer"].ToString();
                if (Rows[0]["PatinaID"] != DBNull.Value && Convert.ToInt32(Rows[0]["PatinaID"]) > 0)
                {
                    DataRow[] PRows = PatinaDT.Select("PatinaID = " + Rows[0]["Patina"]);
                    if (Rows.Count() > 0)
                        GeneticsInfo.Patina = PRows[0]["Patina"].ToString();
                }
                if (Rows[0]["Produced"] != DBNull.Value)
                    GeneticsInfo.Produced = Convert.ToDateTime(Rows[0]["Produced"]).ToString("dd.MM.yyyy");
                if (Rows[0]["Thickness"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Thickness"]) % 1 > 0)
                        GeneticsInfo.Thickness = Convert.ToDecimal(Rows[0]["Thickness"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Thickness = Convert.ToInt32(Rows[0]["Thickness"]).ToString("N", nfi2);
                }
                if (Rows[0]["Weight"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Weight"]) % 1 > 0)
                        GeneticsInfo.Weight = Convert.ToDecimal(Rows[0]["Weight"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Weight = Convert.ToInt32(Rows[0]["Weight"]).ToString(nfi2);
                }
                if (Rows[0]["Width"] != DBNull.Value)
                {
                    if (Convert.ToDecimal(Rows[0]["Width"]) % 1 > 0)
                        GeneticsInfo.Width = Convert.ToDecimal(Rows[0]["Width"]).ToString("N", nfi1);
                    else
                        GeneticsInfo.Width = Convert.ToInt32(Rows[0]["Width"]).ToString("N", nfi2);
                }
            }
        }

        public void SetStoreGeneticsInfo(int StoreID)
        {
            DataRow[] Rows = StoreGeneticsDT.Select("StoreID = " + StoreID);
            if (Rows.Count() > 0)
            {
                GeneticsInfo.Created = Security.GetCurrentDate().ToString("dd.MM.yyyy");
                GeneticsInfo.FactoryID = Convert.ToInt32(Rows[0]["FactoryID"]);
                GeneticsInfo.SerialNumber = Convert.ToInt32(Rows[0]["SerialNumber"]);
            }
        }

        public void SetTechStoreInfo(int TechStoreID)
        {
            DataRow[] Rows = TechStoreDT.Select("TechStoreID = " + TechStoreID);
            if (Rows.Count() > 0)
            {
                GeneticsInfo.TechStoreGroupName = Rows[0]["TechStoreGroupName"].ToString();
                GeneticsInfo.TechStoreSubGroupName = Rows[0]["TechStoreSubGroupName"].ToString();
                GeneticsInfo.TechStoreName = Rows[0]["TechStoreName"].ToString();
            }
        }
    }



    public class StoreGeneticsLabel
    {
        Infinium.Modules.Packages.Marketing.Barcode Barcode;
        public PrintDocument PD;

        public int PaperHeight = 488;
        public int PaperWidth = 694;

        public int CurrentLabelNumber = 0;

        public int PrintedCount = 0;

        public bool Printed = false;

        SolidBrush FontBrush;

        Font TechGroupNameFont;
        Font TechStoreNameFont;
        Font TechStoreNameSmallFont;
        Font InfoFont;
        Font HeaderFont;
        Font SimpleFont;
        Font DispatchFont;

        Pen Pen;


        Image ZTTPS;
        Image ZTProfil;
        Image STB;
        Image RST;

        public ArrayList LabelInfo;

        public StoreGeneticsLabel()
        {

            Barcode = new Modules.Packages.Marketing.Barcode();

            InitializeFonts();
            InitializePrinter();

            ZTTPS = new Bitmap(Properties.Resources.ZOVTPS);
            ZTProfil = new Bitmap(Properties.Resources.ZOVPROFIL);
            STB = new Bitmap(Properties.Resources.STB);
            RST = new Bitmap(Properties.Resources.RST);

            LabelInfo = new System.Collections.ArrayList();
        }

        private void InitializePrinter()
        {
            PD = new PrintDocument();
            PD.DefaultPageSettings.PaperSize = new PaperSize("Label", PaperWidth, PaperHeight);
            PD.DefaultPageSettings.Landscape = true;
            PD.DefaultPageSettings.Margins.Bottom = 0;
            PD.DefaultPageSettings.Margins.Top = 0;
            PD.DefaultPageSettings.Margins.Left = 0;
            PD.DefaultPageSettings.Margins.Right = 0;
        }

        private void InitializeFonts()
        {
            FontBrush = new System.Drawing.SolidBrush(Color.Black);
            TechGroupNameFont = new Font("Arial", 14.0f, FontStyle.Regular);
            TechStoreNameFont = new Font("Arial", 18.0f, FontStyle.Regular);
            TechStoreNameSmallFont = new Font("Arial", 15.0f, FontStyle.Regular);
            InfoFont = new Font("Arial", 5.0f, FontStyle.Regular);
            HeaderFont = new Font("Arial", 10.0f, FontStyle.Bold);
            SimpleFont = new Font("Arial", 10.0f, FontStyle.Regular);
            DispatchFont = new Font("Arial", 8.0f, FontStyle.Bold);
            Pen = new Pen(FontBrush)
            {
                Width = 1
            };
        }

        public void ClearLabelInfo()
        {
            CurrentLabelNumber = 0;
            PrintedCount = 0;
            LabelInfo.Clear();
            GC.Collect();
        }

        public void AddLabelInfo(ref GeneticsInfo LabelInfoItem)
        {
            LabelInfo.Add(LabelInfoItem);
        }

        public void PrintPage(object sender, PrintPageEventArgs ev)
        {
            if (PrintedCount >= LabelInfo.Count)
                return;
            else
                PrintedCount++;

            ev.Graphics.Clear(Color.White);

            ev.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAliasGridFit;

            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).TechStoreGroupName.Length > 30)
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).TechStoreGroupName.Substring(0, 30), TechGroupNameFont, FontBrush, 9, 6);
            else
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).TechStoreGroupName, TechGroupNameFont, FontBrush, 9, 6);

            ev.Graphics.DrawImage(Barcode.GetBarcode(Modules.Packages.Marketing.Barcode.BarcodeLength.Short, 15, ((GeneticsInfo)LabelInfo[CurrentLabelNumber]).BarcodeNumber), 342, 6, 130, 18);

            ev.Graphics.DrawLine(Pen, 11, 33, 467, 33);

            StringFormat stringFormat = new StringFormat()
            {
                Alignment = StringAlignment.Near
            };
            RectangleF rectF1 = new RectangleF(8, 37, 467 - 235, 40);

            rectF1 = new RectangleF(8, 37, 467 - 100, 200);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).TechStoreName, TechStoreNameSmallFont, FontBrush, rectF1, stringFormat);

            rectF1 = new RectangleF(367, 37, 100, 44);
            stringFormat.Alignment = StringAlignment.Center;
            stringFormat.LineAlignment = StringAlignment.Center;
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).SerialNumber.ToString(), TechStoreNameSmallFont, FontBrush, rectF1, stringFormat);
            ev.Graphics.DrawLine(Pen, 367, 33, 367, 87);

            ev.Graphics.DrawLine(Pen, 11, 87, 467, 87);

            int LocationX = 122;
            int LocationY = 96;
            int RowMargin = 18;
            ev.Graphics.DrawString("Производитель ", HeaderFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Producer, SimpleFont, FontBrush, LocationX, LocationY);
            LocationY += RowMargin;
            ev.Graphics.DrawLine(Pen, 11, LocationY, 467, LocationY);
            ev.Graphics.DrawString("Поставщик ", HeaderFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Seller, SimpleFont, FontBrush, LocationX, LocationY);
            LocationY += RowMargin;
            ev.Graphics.DrawLine(Pen, 11, LocationY, 467, LocationY);
            ev.Graphics.DrawString("№ документа ", HeaderFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).DocNumber, SimpleFont, FontBrush, LocationX, LocationY);
            LocationY += RowMargin;
            ev.Graphics.DrawLine(Pen, 11, LocationY, 467, LocationY);

            LocationX = 235;
            LocationY = 158;

            ev.Graphics.DrawString("Параметры:", HeaderFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString("Примечание:", HeaderFont, FontBrush, LocationX, LocationY);

            ev.Graphics.DrawLine(Pen, LocationX, LocationY, LocationX, 315);

            LocationY = 175;
            RowMargin = 17;
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).StoreNotes.Length > 0)
            {
                stringFormat.Alignment = StringAlignment.Near;
                rectF1 = new RectangleF(LocationX, LocationY, 467 - 235, 200);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).StoreNotes, SimpleFont, FontBrush, rectF1, stringFormat);
            }
            LocationY = 175;
            LocationX = 119;

            ev.Graphics.DrawLine(Pen, 11, LocationY, 467, LocationY);
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Cover.Length > 0)
            {
                ev.Graphics.DrawString("Облицовка:", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Cover, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Color.Length > 0)
            {
                ev.Graphics.DrawString("Цвет", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Color, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Patina.Length > 0)
            {
                ev.Graphics.DrawString("Патина", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Patina, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Thickness.Length > 0)
            {
                ev.Graphics.DrawString("Толщина, мм", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Thickness, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Diameter.Length > 0)
            {
                ev.Graphics.DrawString("Диаметр, мм", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Thickness, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Length.Length > 0)
            {
                ev.Graphics.DrawString("Длина, мм", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Length, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Height.Length > 0)
            {
                ev.Graphics.DrawString("Высота, мм", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Height, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Width.Length > 0)
            {
                ev.Graphics.DrawString("Ширина, мм", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Width, SimpleFont, FontBrush, LocationX, LocationY);
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Admission.Length > 0)
            {
                ev.Graphics.DrawString("Допуск, мм", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Admission, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Capacity.Length > 0)
            {
                ev.Graphics.DrawString("Емкость, л", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Capacity, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }
            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Weight.Length > 0)
            {
                ev.Graphics.DrawString("Вес, кг", SimpleFont, FontBrush, 10, LocationY);
                ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Weight, SimpleFont, FontBrush, LocationX, LocationY);
                LocationY += RowMargin;
                ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            }

            ev.Graphics.DrawString("Кол-во, шт", SimpleFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).InvoiceCount, SimpleFont, FontBrush, LocationX, LocationY);
            LocationY += RowMargin;
            ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            ev.Graphics.DrawString("Произведено", SimpleFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Produced, SimpleFont, FontBrush, LocationX, LocationY);
            LocationY += RowMargin;
            ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            ev.Graphics.DrawString("Приход", SimpleFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).IncomeDate, SimpleFont, FontBrush, LocationX, LocationY);
            LocationY += RowMargin;
            ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);
            ev.Graphics.DrawString("Срок годности", SimpleFont, FontBrush, 10, LocationY);
            ev.Graphics.DrawString(((GeneticsInfo)LabelInfo[CurrentLabelNumber]).BestBefore, SimpleFont, FontBrush, LocationX, LocationY);
            LocationY += RowMargin;
            ev.Graphics.DrawLine(Pen, 11, LocationY, 235, LocationY);

            ev.Graphics.DrawImage(Barcode.GetBarcode(Modules.Packages.Marketing.Barcode.BarcodeLength.Medium, 46, ((GeneticsInfo)LabelInfo[CurrentLabelNumber]).BarcodeNumber), 10, 317);

            Barcode.DrawBarcodeText(Modules.Packages.Marketing.Barcode.BarcodeLength.Medium, ev.Graphics, ((GeneticsInfo)LabelInfo[CurrentLabelNumber]).BarcodeNumber, 9, 366);

            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).FactoryID == 2)
            {
                ev.Graphics.DrawImage(ZTTPS, 249, 320, 37, 45);
            }
            else
            {
                ev.Graphics.DrawImage(ZTProfil, 249, 320, 37, 45);
            }

            ev.Graphics.DrawImage(STB, 418, 319, 39, 27);
            ev.Graphics.DrawImage(RST, 423, 357, 34, 27);

            ev.Graphics.DrawLine(Pen, 11, 315, 467, 315);
            ev.Graphics.DrawLine(Pen, 235, 315, 235, 385);

            ev.Graphics.DrawString("ТУ РБ 100135477.422-2005", InfoFont, FontBrush, 305, 320);

            if (((GeneticsInfo)LabelInfo[CurrentLabelNumber]).FactoryID == 2)
                ev.Graphics.DrawString("СООО \"ЗОВ-ТПС\"", InfoFont, FontBrush, 305, 332);
            else
                ev.Graphics.DrawString("СООО \"ЗОВ-Профиль\"", InfoFont, FontBrush, 305, 332);

            ev.Graphics.DrawString("Республика Беларусь, 230011", InfoFont, FontBrush, 305, 344);
            ev.Graphics.DrawString("г. Гродно, ул. Герасимовича, 1", InfoFont, FontBrush, 305, 356);
            ev.Graphics.DrawString("тел\\факс: (0152) 48-01-08", InfoFont, FontBrush, 305, 368);
            ev.Graphics.DrawString("Изготовлено: " + ((GeneticsInfo)LabelInfo[CurrentLabelNumber]).Created, InfoFont, FontBrush, 305, 380);

            if (CurrentLabelNumber == LabelInfo.Count - 1 || PrintedCount >= LabelInfo.Count)
                ev.HasMorePages = false;

            if (CurrentLabelNumber < LabelInfo.Count - 1 && PrintedCount < LabelInfo.Count)
            {
                ev.HasMorePages = true;
                CurrentLabelNumber++;
            }
        }

        public void Print()
        {
            PD.DefaultPageSettings.PaperSize = new PaperSize("Label", PaperWidth + 40, PaperHeight);
            PD.DefaultPageSettings.Margins.Bottom = 0;
            PD.DefaultPageSettings.Margins.Top = 0;
            PD.DefaultPageSettings.Margins.Right = 0;
            PD.DefaultPageSettings.Margins.Left = 0;

            if (!Printed)
            {
                Printed = true;
                PD.PrintPage += new PrintPageEventHandler(PrintPage);
            }

            PD.Print();
        }



    }






    public class FacingRollersStocks
    {
        HSSFWorkbook hssfworkbook;
        HSSFSheet ZOVProfilCommonSheet;
        HSSFFont HeaderFont;
        HSSFFont SimpleFont;
        HSSFCellStyle HeaderStyle;
        HSSFCellStyle SimpleCellStyle;
        HSSFCellStyle EmptyCellStyle;

        DataTable dtSubGroups;
        DataTable dtStoreItems;
        DataTable dtManufactureStore;

        public FacingRollersStocks()
        {
            dtSubGroups = new DataTable();
            dtStoreItems = new DataTable();
            dtManufactureStore = new DataTable();
            hssfworkbook = new HSSFWorkbook();

            DocumentSummaryInformation dsi = PropertySetFactory.CreateDocumentSummaryInformation();
            dsi.Company = "NPOI Team";
            hssfworkbook.DocumentSummaryInformation = dsi;

            SummaryInformation si = PropertySetFactory.CreateSummaryInformation();
            si.Subject = "NPOI SDK Example";
            hssfworkbook.SummaryInformation = si;

            ZOVProfilCommonSheet = hssfworkbook.CreateSheet("Бумага");
            ZOVProfilCommonSheet.PrintSetup.PaperSize = (short)PaperSizeType.A4;
            ZOVProfilCommonSheet.SetMargin(HSSFSheet.LeftMargin, (double).12);
            ZOVProfilCommonSheet.SetMargin(HSSFSheet.RightMargin, (double).07);
            ZOVProfilCommonSheet.SetMargin(HSSFSheet.TopMargin, (double).20);
            ZOVProfilCommonSheet.SetMargin(HSSFSheet.BottomMargin, (double).20);
            //ZOVProfilCommonSheet.SetColumnWidth(0, 8 * 256);
            //ZOVProfilCommonSheet.SetColumnWidth(1, 20 * 256);

            HeaderFont = hssfworkbook.CreateFont();
            HeaderFont.FontHeightInPoints = 10;
            HeaderFont.Boldweight = HSSFFont.BOLDWEIGHT_BOLD;
            HeaderFont.FontName = "Times New Roman";

            SimpleFont = hssfworkbook.CreateFont();
            SimpleFont.FontHeightInPoints = 10;
            SimpleFont.FontName = "Times New Roman";

            HeaderStyle = hssfworkbook.CreateCellStyle();
            HeaderStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.BottomBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.LeftBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.RightBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            HeaderStyle.TopBorderColor = HSSFColor.BLACK.index;
            HeaderStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            HeaderStyle.VerticalAlignment = HSSFCellStyle.VERTICAL_CENTER;
            HeaderStyle.WrapText = true;
            HeaderStyle.SetFont(HeaderFont);

            SimpleCellStyle = hssfworkbook.CreateCellStyle();
            SimpleCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            SimpleCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            SimpleCellStyle.TopBorderColor = HSSFColor.BLACK.index;
            //SimpleCellStyle.Alignment = HSSFCellStyle.ALIGN_CENTER;
            SimpleCellStyle.SetFont(SimpleFont);

            EmptyCellStyle = hssfworkbook.CreateCellStyle();
            EmptyCellStyle.BorderBottom = HSSFCellStyle.BORDER_THIN;
            EmptyCellStyle.BottomBorderColor = HSSFColor.BLACK.index;
            EmptyCellStyle.BorderLeft = HSSFCellStyle.BORDER_THIN;
            EmptyCellStyle.LeftBorderColor = HSSFColor.BLACK.index;
            EmptyCellStyle.BorderRight = HSSFCellStyle.BORDER_THIN;
            EmptyCellStyle.RightBorderColor = HSSFColor.BLACK.index;
            EmptyCellStyle.BorderTop = HSSFCellStyle.BORDER_THIN;
            EmptyCellStyle.TopBorderColor = HSSFColor.BLACK.index;

        }

        public void ClearTables()
        {
            dtSubGroups.Clear();
            dtStoreItems.Clear();
            dtManufactureStore.Clear();
        }

        private string GetSubGroupName(int TechStoreSubGroupID)
        {
            string Name = string.Empty;
            DataRow[] rows = dtSubGroups.Select("TechStoreSubGroupID=" + TechStoreSubGroupID);
            if (rows.Count() > 0)
                Name = rows[0]["TechStoreSubGroupName"].ToString();

            return Name;
        }

        private string GetStoreItemName(int TechStoreID)
        {
            string Name = string.Empty;
            DataRow[] rows = dtStoreItems.Select("TechStoreID=" + TechStoreID);
            if (rows.Count() > 0)
                Name = rows[0]["TechStoreName"].ToString();

            return Name;
        }

        public void UpdateSubGroups()
        {
            string SelectCommand = @"SELECT * FROM TechStoreSubGroups WHERE TechStoreGroupID = 11 ORDER BY TechStoreSubGroupName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(dtSubGroups);
            }
        }

        public void UpdateStoreItems()
        {
            string SelectCommand = @"SELECT TechStoreID, TechStoreSubGroupID, TechStoreName FROM TechStore
                WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE TechStoreGroupID = 11) ORDER BY TechStoreName";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.CatalogConnectionString))
            {
                DA.Fill(dtStoreItems);
            }
        }

        public void UpdateManufactureStore()
        {
            string SelectCommand = @"SELECT ManufactureStore.ManufactureStoreID, ManufactureStore.StoreItemID, ManufactureStore.Thickness, ManufactureStore.Diameter, ManufactureStore.Width, ManufactureStore.CurrentCount, ManufactureStore.CreateDateTime FROM ManufactureStore 
                INNER JOIN infiniu2_catalog.dbo.TechStore ON ManufactureStore.StoreItemID=infiniu2_catalog.dbo.TechStore.TechStoreID AND TechStoreSubGroupID IN (SELECT TechStoreSubGroupID
                FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE TechStoreGroupID = 11) WHERE CurrentCount > 0";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(dtManufactureStore);
            }
        }


        public void F()
        {
            DataTable DT = new DataTable();
            string SelectCommand = @"SELECT * FROM ManufactureInventoryDetails WHERE InventoryID=(SELECT TOP 1 InventoryID FROM Inventory ORDER BY InventoryID DESC) AND StoreID IN
                (SELECT ManufactureStoreID FROM ManufactureStore
                WHERE StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID
                FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE TechStoreGroupID = 11)))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                DA.Fill(DT);
            }
            SelectCommand = @"SELECT ManufactureStoreID, CurrentCount FROM ManufactureStore 
                WHERE ManufactureStore.StoreItemID IN (SELECT TechStoreID FROM infiniu2_catalog.dbo.TechStore WHERE TechStoreSubGroupID IN (SELECT TechStoreSubGroupID
                FROM infiniu2_catalog.dbo.TechStoreSubGroups WHERE TechStoreGroupID = 11))";
            using (SqlDataAdapter DA = new SqlDataAdapter(SelectCommand, ConnectionStrings.StorageConnectionString))
            {
                using (SqlCommandBuilder CB = new SqlCommandBuilder(DA))
                {
                    DA.Fill(dtManufactureStore);
                    for (int i = 0; i < dtManufactureStore.Rows.Count; i++)
                    {
                        int ManufactureStoreID = Convert.ToInt32(dtManufactureStore.Rows[i]["ManufactureStoreID"]);
                        DataRow[] rows = DT.Select("StoreID=" + ManufactureStoreID);
                        if (rows.Count() > 0)
                        {
                            decimal EndMonthCount = Convert.ToDecimal(rows[0]["EndMonthCount"]);
                            decimal CurrentCount = Convert.ToDecimal(dtManufactureStore.Rows[i]["CurrentCount"]);
                            if (CurrentCount != EndMonthCount)
                                dtManufactureStore.Rows[i]["CurrentCount"] = EndMonthCount;
                        }
                    }
                    DA.Update(dtManufactureStore);
                }
            }
        }
        private int FindMaxRollersCount()
        {
            int MaxCount = 0;
            for (int i = 0; i < dtSubGroups.Rows.Count; i++)
            {
                int TechStoreSubGroupID = Convert.ToInt32(dtSubGroups.Rows[i]["TechStoreSubGroupID"]);
                DataRow[] StoreItemsRows = dtStoreItems.Select("TechStoreSubGroupID=" + TechStoreSubGroupID);
                for (int x = 0; x < StoreItemsRows.Count(); x++)
                {
                    int TechStoreID = Convert.ToInt32(StoreItemsRows[x]["TechStoreID"]);
                    DataRow[] ManufactureStoreRows = dtManufactureStore.Select("StoreItemID=" + TechStoreID);
                    int Count = 0;
                    for (int y = 0; y < ManufactureStoreRows.Count(); y++)
                    {
                        for (int z = 0; z < Count; z++)
                        { }
                        Count += Convert.ToInt32(ManufactureStoreRows[y]["CurrentCount"]);
                    }
                    if (MaxCount < Count)
                        MaxCount = Count;
                }
            }
            return MaxCount;
        }

        public void CreateReport(string FileName)
        {
            int MaxCount = FindMaxRollersCount();
            int RowIndex = 0;
            HSSFCell HeaderCell = HSSFCellUtil.CreateCell(ZOVProfilCommonSheet.CreateRow(RowIndex), 0, "ID");
            HeaderCell.CellStyle = HeaderStyle;
            HeaderCell = HSSFCellUtil.CreateCell(ZOVProfilCommonSheet.CreateRow(RowIndex), 1, "НАЗВАНИЕ");
            HeaderCell.CellStyle = HeaderStyle;
            HeaderCell = HSSFCellUtil.CreateCell(ZOVProfilCommonSheet.CreateRow(RowIndex), 2, "t");
            HeaderCell.CellStyle = HeaderStyle;
            RowIndex++;
            string MaxLengthWord = string.Empty;

            for (int i = 0; i < dtSubGroups.Rows.Count; i++)
            {
                int TechStoreSubGroupID = Convert.ToInt32(dtSubGroups.Rows[i]["TechStoreSubGroupID"]);
                string TechStoreSubGroupName = dtSubGroups.Rows[i]["TechStoreSubGroupName"].ToString();
                DataRow[] StoreItemsRows = dtStoreItems.Select("TechStoreSubGroupID=" + TechStoreSubGroupID);

                int ColumnIndex = 0;
                HSSFCell Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(ColumnIndex++);
                Cell.CellStyle = EmptyCellStyle;
                Cell = HSSFCellUtil.CreateCell(ZOVProfilCommonSheet.CreateRow(RowIndex), ColumnIndex++, TechStoreSubGroupName);
                Cell.CellStyle = HeaderStyle;

                while (MaxCount + 3 > ColumnIndex)
                {
                    Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(ColumnIndex);
                    Cell.CellStyle = EmptyCellStyle;
                    Cell = ZOVProfilCommonSheet.CreateRow(RowIndex + 1).CreateCell(ColumnIndex++);
                    Cell.CellStyle = EmptyCellStyle;
                }
                RowIndex++;

                for (int x = 0; x < StoreItemsRows.Count(); x++)
                {
                    int TechStoreID = Convert.ToInt32(StoreItemsRows[x]["TechStoreID"]);
                    string TechStoreName = StoreItemsRows[x]["TechStoreName"].ToString();
                    if (MaxLengthWord.Length < TechStoreName.Length)
                        MaxLengthWord = TechStoreName;
                    DataRow[] ManufactureStoreRows = dtManufactureStore.Select("StoreItemID=" + TechStoreID);

                    Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(0);
                    Cell.SetCellValue(Convert.ToInt32(TechStoreID));
                    Cell.CellStyle = SimpleCellStyle;

                    Cell = HSSFCellUtil.CreateCell(ZOVProfilCommonSheet.CreateRow(RowIndex), 1, TechStoreName);
                    Cell.CellStyle = SimpleCellStyle;
                    if (ManufactureStoreRows.Count() > 0)
                    {
                        decimal Thickness = Convert.ToDecimal(ManufactureStoreRows[0]["Thickness"]);
                        Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(2);
                        Cell.SetCellValue(Convert.ToDouble(Thickness));
                        Cell.CellStyle = SimpleCellStyle;
                    }
                    else
                    {
                        continue;
                        //Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(2);
                        //Cell.CellStyle = EmptyCellStyle;
                        //Cell = ZOVProfilCommonSheet.CreateRow(RowIndex + 1).CreateCell(2);
                        //Cell.CellStyle = EmptyCellStyle;
                    }
                    Cell = ZOVProfilCommonSheet.CreateRow(RowIndex + 1).CreateCell(0);
                    Cell.CellStyle = EmptyCellStyle;
                    Cell = ZOVProfilCommonSheet.CreateRow(RowIndex + 1).CreateCell(1);
                    Cell.CellStyle = EmptyCellStyle;
                    ColumnIndex = 3;
                    decimal Sum = 0;
                    for (int y = 0; y < ManufactureStoreRows.Count(); y++)
                    {
                        decimal Diameter = Convert.ToDecimal(ManufactureStoreRows[y]["Diameter"]);
                        decimal Width = Convert.ToDecimal(ManufactureStoreRows[y]["Width"]);
                        decimal Thickness = Convert.ToDecimal(ManufactureStoreRows[y]["Thickness"]);
                        int Count = Convert.ToInt32(ManufactureStoreRows[y]["CurrentCount"]);
                        Sum += (Diameter * Diameter - 165 * 165) * Width * Count / (Thickness * 1273885.35m);
                        for (int z = 0; z < Count; z++)
                        {
                            Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(ColumnIndex);
                            Cell.SetCellValue(Convert.ToDouble(Diameter));
                            Cell.CellStyle = SimpleCellStyle;
                            Cell = ZOVProfilCommonSheet.CreateRow(RowIndex + 1).CreateCell(ColumnIndex++);
                            Cell.SetCellValue(Convert.ToDouble(Width));
                            Cell.CellStyle = SimpleCellStyle;
                        }
                    }
                    while (MaxCount + 3 > ColumnIndex)
                    {
                        Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(ColumnIndex);
                        Cell.CellStyle = EmptyCellStyle;
                        Cell = ZOVProfilCommonSheet.CreateRow(RowIndex + 1).CreateCell(ColumnIndex++);
                        Cell.CellStyle = EmptyCellStyle;
                    }
                    Cell = ZOVProfilCommonSheet.CreateRow(RowIndex).CreateCell(ColumnIndex);
                    Cell.SetCellValue(Convert.ToDouble(Sum));
                    Cell.CellStyle = SimpleCellStyle;
                    RowIndex++;
                    RowIndex++;
                }
            }

            for (int i = 3; i < MaxCount + 3; i++)
                ZOVProfilCommonSheet.SetColumnWidth(i, 6 * 256);

            ZOVProfilCommonSheet.SetColumnWidth(1, Convert.ToInt32(MaxLengthWord.Length * 1.2) * 256);
            string tempFolder = System.Environment.GetEnvironmentVariable("TEMP");
            FileInfo file = new FileInfo(tempFolder + @"\" + FileName + ".xls");
            int j = 1;
            while (file.Exists == true)
            {
                file = new FileInfo(tempFolder + @"\" + FileName + "(" + j++ + ").xls");
            }

            FileStream NewFile = new FileStream(file.FullName, FileMode.Create);
            hssfworkbook.Write(NewFile);
            NewFile.Close();

            System.Diagnostics.Process.Start(file.FullName);
        }

    }
}
